
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001070c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001228  080108ac  080108ac  000208ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ad4  08011ad4  00030170  2**0
                  CONTENTS
  4 .ARM          00000008  08011ad4  08011ad4  00021ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011adc  08011adc  00030170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011adc  08011adc  00021adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ae0  08011ae0  00021ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08011ae4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b9dc  20000170  08011c54  00030170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bb4c  08011c54  0003bb4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002560a  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055f5  00000000  00000000  000557aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce0  00000000  00000000  0005ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  0005ca80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000096a3  00000000  00000000  0005e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021797  00000000  00000000  00067c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9552  00000000  00000000  000893b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00132904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fcc  00000000  00000000  001329c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002316  00000000  00000000  0013a990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010894 	.word	0x08010894

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	08010894 	.word	0x08010894

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10a      	bne.n	8000ed8 <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ed4:	bf00      	nop
 8000ed6:	e7fe      	b.n	8000ed6 <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8000ed8:	2008      	movs	r0, #8
 8000eda:	f00c fd35 	bl	800d948 <pvPortMalloc>
 8000ede:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 8000ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eea:	f383 8811 	msr	BASEPRI, r3
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f3bf 8f4f 	dsb	sy
 8000ef6:	60bb      	str	r3, [r7, #8]
}
 8000ef8:	bf00      	nop
 8000efa:	e7fe      	b.n	8000efa <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d012      	beq.n	8000f28 <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 8000f02:	f00c fbff 	bl	800d704 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8000f20:	f00c fc20 	bl	800d764 <vPortExitCritical>

		xReturn = pdPASS;
 8000f24:	2301      	movs	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000f28:	697b      	ldr	r3, [r7, #20]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008

08000f38 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d141      	bne.n	8000fd4 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000f50:	4b38      	ldr	r3, [pc, #224]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f52:	4a39      	ldr	r2, [pc, #228]	; (8001038 <FreeRTOS_CLIProcessCommand+0x100>)
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e037      	b.n	8000fc8 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8000f58:	4b36      	ldr	r3, [pc, #216]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8000f62:	69b8      	ldr	r0, [r7, #24]
 8000f64:	f7ff f9a6 	bl	80002b4 <strlen>
 8000f68:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	69b9      	ldr	r1, [r7, #24]
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f00e fea2 	bl	800fcb8 <strncmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d121      	bne.n	8000fbe <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b20      	cmp	r3, #32
 8000f84:	d005      	beq.n	8000f92 <FreeRTOS_CLIProcessCommand+0x5a>
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d115      	bne.n	8000fbe <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db18      	blt.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f8d7 	bl	8001154 <prvGetNumberOfParameters>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d00c      	beq.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8000fbc:	e009      	b.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1c3      	bne.n	8000f58 <FreeRTOS_CLIProcessCommand+0x20>
 8000fd0:	e000      	b.n	8000fd4 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 8000fd2:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <FreeRTOS_CLIProcessCommand+0xbc>
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d108      	bne.n	8000ff4 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4915      	ldr	r1, [pc, #84]	; (800103c <FreeRTOS_CLIProcessCommand+0x104>)
 8000fe6:	68b8      	ldr	r0, [r7, #8]
 8000fe8:	f00e fe7a 	bl	800fce0 <strncpy>
		pxCommand = NULL;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e01a      	b.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	4798      	blx	r3
 800100c:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10a      	bne.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e006      	b.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <FreeRTOS_CLIProcessCommand+0x108>)
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f00e fe5d 	bl	800fce0 <strncpy>
		xReturn = pdFALSE;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 800102a:	69fb      	ldr	r3, [r7, #28]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000018c 	.word	0x2000018c
 8001038:	20000000 	.word	0x20000000
 800103c:	080108e4 	.word	0x080108e4
 8001040:	0801093c 	.word	0x0801093c

08001044 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 800105e:	e03b      	b.n	80010d8 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <FreeRTOS_CLIGetParameter+0x3a>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b20      	cmp	r3, #32
 8001074:	d1f4      	bne.n	8001060 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001076:	e002      	b.n	800107e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <FreeRTOS_CLIGetParameter+0x4a>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b20      	cmp	r3, #32
 800108c:	d0f4      	beq.n	8001078 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d025      	beq.n	80010e2 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d119      	bne.n	80010d8 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010a8:	e007      	b.n	80010ba <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <FreeRTOS_CLIGetParameter+0x86>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	d1ef      	bne.n	80010aa <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
				}

				break;
 80010d6:	e006      	b.n	80010e6 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3c2      	bcc.n	8001066 <FreeRTOS_CLIGetParameter+0x22>
 80010e0:	e002      	b.n	80010e8 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
 80010e2:	bf00      	nop
 80010e4:	e000      	b.n	80010e8 <FreeRTOS_CLIGetParameter+0xa4>
				break;
 80010e6:	bf00      	nop
		}
	}

	return pcReturn;
 80010e8:	693b      	ldr	r3, [r7, #16]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <prvHelpCommand+0x54>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <prvHelpCommand+0x54>)
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <prvHelpCommand+0x58>)
 8001110:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <prvHelpCommand+0x54>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4619      	mov	r1, r3
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f00e fdde 	bl	800fce0 <strncpy>
	pxCommand = pxCommand->pxNext;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <prvHelpCommand+0x54>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <prvHelpCommand+0x54>)
 800112c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <prvHelpCommand+0x54>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e001      	b.n	8001140 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001140:	697b      	ldr	r3, [r7, #20]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000190 	.word	0x20000190
 8001150:	20000000 	.word	0x20000000

08001154 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8001164:	e014      	b.n	8001190 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b20      	cmp	r3, #32
 800116c:	d10b      	bne.n	8001186 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d00a      	beq.n	800118a <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3301      	adds	r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8001180:	2301      	movs	r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	e001      	b.n	800118a <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e6      	bne.n	8001166 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <task_led>:
float mod[256];
float fase;

TaskHandle_t task_handle_RGB = NULL;

void task_led(void *param){
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	889b      	ldrh	r3, [r3, #4]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f002 faa6 	bl	8003722 <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a f9e4 	bl	800b5a8 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 80011e0:	e7f1      	b.n	80011c6 <task_led+0xc>
 80011e2:	0000      	movs	r0, r0
 80011e4:	0000      	movs	r0, r0
	...

080011e8 <task_adc>:
	}
}

void task_adc(void *param){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 256);
 80011f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f4:	4940      	ldr	r1, [pc, #256]	; (80012f8 <task_adc+0x110>)
 80011f6:	4841      	ldr	r0, [pc, #260]	; (80012fc <task_adc+0x114>)
 80011f8:	f001 f8c6 	bl	8002388 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80011fc:	4840      	ldr	r0, [pc, #256]	; (8001300 <task_adc+0x118>)
 80011fe:	f004 f9a7 	bl	8005550 <HAL_TIM_Base_Start>
	while(1){
		int k = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 256; i++){
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	e02a      	b.n	8001262 <task_adc+0x7a>
			ReIm[k] = (float) adcBuffer[i] * 0.0007326007;
 800120c:	4a3a      	ldr	r2, [pc, #232]	; (80012f8 <task_adc+0x110>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff fa0a 	bl	8000638 <__aeabi_f2d>
 8001224:	a330      	add	r3, pc, #192	; (adr r3, 80012e8 <task_adc+0x100>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa5d 	bl	80006e8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc69 	bl	8000b0c <__aeabi_d2f>
 800123a:	4602      	mov	r2, r0
 800123c:	4931      	ldr	r1, [pc, #196]	; (8001304 <task_adc+0x11c>)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	601a      	str	r2, [r3, #0]
			ReIm[k+1] = 0.0;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <task_adc+0x11c>)
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
			k += 2;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3302      	adds	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 256; i++){
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	3301      	adds	r3, #1
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	ddd1      	ble.n	800120c <task_adc+0x24>
		}

		arm_cfft_f32(&arm_cfft_sR_f32_len256,ReIm,0,1);
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	4925      	ldr	r1, [pc, #148]	; (8001304 <task_adc+0x11c>)
 800126e:	4826      	ldr	r0, [pc, #152]	; (8001308 <task_adc+0x120>)
 8001270:	f00d ff2c 	bl	800f0cc <arm_cfft_f32>
		arm_cmplx_mag_f32(ReIm,mod,256);
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	4924      	ldr	r1, [pc, #144]	; (800130c <task_adc+0x124>)
 800127a:	4822      	ldr	r0, [pc, #136]	; (8001304 <task_adc+0x11c>)
 800127c:	f00d ffa0 	bl	800f1c0 <arm_cmplx_mag_f32>
		arm_scale_f32(mod, 0.0078125, mod, 128); /* vertor, por quem quero multiplicar, vetor final, quantos pontos */
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	4922      	ldr	r1, [pc, #136]	; (800130c <task_adc+0x124>)
 8001284:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001310 <task_adc+0x128>
 8001288:	4820      	ldr	r0, [pc, #128]	; (800130c <task_adc+0x124>)
 800128a:	f00e f881 	bl	800f390 <arm_scale_f32>

		volatile float fund_phase = atan2f(ReIm[3],ReIm[2])*180/M_PI;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <task_adc+0x11c>)
 8001290:	edd3 7a03 	vldr	s15, [r3, #12]
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <task_adc+0x11c>)
 8001296:	ed93 7a02 	vldr	s14, [r3, #8]
 800129a:	eef0 0a47 	vmov.f32	s1, s14
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	f00f f956 	bl	8010552 <atan2f>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001314 <task_adc+0x12c>
 80012ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b2:	ee17 0a90 	vmov	r0, s15
 80012b6:	f7ff f9bf 	bl	8000638 <__aeabi_f2d>
 80012ba:	a30d      	add	r3, pc, #52	; (adr r3, 80012f0 <task_adc+0x108>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff fb3c 	bl	800093c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc1e 	bl	8000b0c <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]
		fase = fund_phase;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <task_adc+0x130>)
 80012d8:	6013      	str	r3, [r2, #0]
		vTaskDelay(5);
 80012da:	2005      	movs	r0, #5
 80012dc:	f00a f964 	bl	800b5a8 <vTaskDelay>
	while(1){
 80012e0:	e78f      	b.n	8001202 <task_adc+0x1a>
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	06155aeb 	.word	0x06155aeb
 80012ec:	3f480180 	.word	0x3f480180
 80012f0:	54442d18 	.word	0x54442d18
 80012f4:	400921fb 	.word	0x400921fb
 80012f8:	200002e0 	.word	0x200002e0
 80012fc:	20000194 	.word	0x20000194
 8001300:	2000023c 	.word	0x2000023c
 8001304:	200004e0 	.word	0x200004e0
 8001308:	08010d88 	.word	0x08010d88
 800130c:	20000ce0 	.word	0x20000ce0
 8001310:	3c000000 	.word	0x3c000000
 8001314:	43340000 	.word	0x43340000
 8001318:	200010e0 	.word	0x200010e0

0800131c <task_RGB>:
	}
}

void task_RGB(void *param){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	uint8_t r,g,b;
	uint8_t ts;
	r = g = b = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	737b      	strb	r3, [r7, #13]
 8001328:	7b7b      	ldrb	r3, [r7, #13]
 800132a:	73bb      	strb	r3, [r7, #14]
 800132c:	7bbb      	ldrb	r3, [r7, #14]
 800132e:	73fb      	strb	r3, [r7, #15]
	ts = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	733b      	strb	r3, [r7, #12]
	vTaskSuspend(NULL);
 8001334:	2000      	movs	r0, #0
 8001336:	f00a f9d1 	bl	800b6dc <vTaskSuspend>
	while(1){
		//TIM3->CCR1 =
		if(ts == 0){//Crescendo RGB colorido
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d129      	bne.n	8001394 <task_RGB+0x78>
			if(r < MAX_RGB){
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2bfd      	cmp	r3, #253	; 0xfd
 8001344:	d809      	bhi.n	800135a <task_RGB+0x3e>
				TIM3->CCR1 = r * 257;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	4613      	mov	r3, r2
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	441a      	add	r2, r3
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <task_RGB+0xd4>)
 8001350:	635a      	str	r2, [r3, #52]	; 0x34
				r++;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	3301      	adds	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e045      	b.n	80013e6 <task_RGB+0xca>
			} else if(g < MAX_RGB){
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	2bfd      	cmp	r3, #253	; 0xfd
 800135e:	d809      	bhi.n	8001374 <task_RGB+0x58>
				TIM3->CCR2 = g * 257;
 8001360:	7bba      	ldrb	r2, [r7, #14]
 8001362:	4613      	mov	r3, r2
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	441a      	add	r2, r3
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <task_RGB+0xd4>)
 800136a:	639a      	str	r2, [r3, #56]	; 0x38
				g++;
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	3301      	adds	r3, #1
 8001370:	73bb      	strb	r3, [r7, #14]
 8001372:	e038      	b.n	80013e6 <task_RGB+0xca>
			} else if(b < MAX_RGB){
 8001374:	7b7b      	ldrb	r3, [r7, #13]
 8001376:	2bfd      	cmp	r3, #253	; 0xfd
 8001378:	d809      	bhi.n	800138e <task_RGB+0x72>
				TIM3->CCR3 = b * 257;
 800137a:	7b7a      	ldrb	r2, [r7, #13]
 800137c:	4613      	mov	r3, r2
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	441a      	add	r2, r3
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <task_RGB+0xd4>)
 8001384:	63da      	str	r2, [r3, #60]	; 0x3c
				b++;
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	3301      	adds	r3, #1
 800138a:	737b      	strb	r3, [r7, #13]
 800138c:	e02b      	b.n	80013e6 <task_RGB+0xca>
			}else{
				ts = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	733b      	strb	r3, [r7, #12]
 8001392:	e028      	b.n	80013e6 <task_RGB+0xca>
			}
		} else {
			if(r > 1){
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d909      	bls.n	80013ae <task_RGB+0x92>
				TIM3->CCR1 = r * 257;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	4613      	mov	r3, r2
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	441a      	add	r2, r3
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <task_RGB+0xd4>)
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
				r--;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e01b      	b.n	80013e6 <task_RGB+0xca>
			} else if( g > 1){
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d909      	bls.n	80013c8 <task_RGB+0xac>
				TIM3->CCR2 = g * 257;
 80013b4:	7bba      	ldrb	r2, [r7, #14]
 80013b6:	4613      	mov	r3, r2
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	441a      	add	r2, r3
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <task_RGB+0xd4>)
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
				g--;
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	73bb      	strb	r3, [r7, #14]
 80013c6:	e00e      	b.n	80013e6 <task_RGB+0xca>
			} else if( b > 0){
 80013c8:	7b7b      	ldrb	r3, [r7, #13]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <task_RGB+0xc6>
				TIM3->CCR3 = b * 257;
 80013ce:	7b7a      	ldrb	r2, [r7, #13]
 80013d0:	4613      	mov	r3, r2
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	441a      	add	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <task_RGB+0xd4>)
 80013d8:	63da      	str	r2, [r3, #60]	; 0x3c
				b--;
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	3b01      	subs	r3, #1
 80013de:	737b      	strb	r3, [r7, #13]
 80013e0:	e001      	b.n	80013e6 <task_RGB+0xca>
			} else {
				ts = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	733b      	strb	r3, [r7, #12]
			}
		}

		vTaskDelay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f00a f8de 	bl	800b5a8 <vTaskDelay>
		if(ts == 0){//Crescendo RGB colorido
 80013ec:	e7a5      	b.n	800133a <task_RGB+0x1e>
 80013ee:	bf00      	nop
 80013f0:	40000400 	.word	0x40000400

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fa:	f000 feeb 	bl	80021d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fe:	f000 f877 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001402:	f000 fa33 	bl	800186c <MX_GPIO_Init>
  MX_DMA_Init();
 8001406:	f000 fa11 	bl	800182c <MX_DMA_Init>
  MX_ADC1_Init();
 800140a:	f000 f8dd 	bl	80015c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800140e:	f000 f92d 	bl	800166c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001412:	f000 f977 	bl	8001704 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001416:	2100      	movs	r1, #0
 8001418:	4827      	ldr	r0, [pc, #156]	; (80014b8 <main+0xc4>)
 800141a:	f004 f973 	bl	8005704 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800141e:	2104      	movs	r1, #4
 8001420:	4825      	ldr	r0, [pc, #148]	; (80014b8 <main+0xc4>)
 8001422:	f004 f96f 	bl	8005704 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001426:	2108      	movs	r1, #8
 8001428:	4823      	ldr	r0, [pc, #140]	; (80014b8 <main+0xc4>)
 800142a:	f004 f96b 	bl	8005704 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800142e:	f008 fb27 	bl	8009a80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001432:	4a22      	ldr	r2, [pc, #136]	; (80014bc <main+0xc8>)
 8001434:	2100      	movs	r1, #0
 8001436:	4822      	ldr	r0, [pc, #136]	; (80014c0 <main+0xcc>)
 8001438:	f008 fb6c 	bl	8009b14 <osThreadNew>
 800143c:	4603      	mov	r3, r0
 800143e:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <main+0xd0>)
 8001440:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <main+0xd4>)
 8001444:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001448:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <main+0xd4>)
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <main+0xd8>)
 800144e:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <main+0xd4>)
 8001452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001456:	809a      	strh	r2, [r3, #4]
  rgb.red = 200;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <main+0xdc>)
 800145a:	22c8      	movs	r2, #200	; 0xc8
 800145c:	705a      	strb	r2, [r3, #1]
  rgb.green = 200;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <main+0xdc>)
 8001460:	22c8      	movs	r2, #200	; 0xc8
 8001462:	709a      	strb	r2, [r3, #2]
  rgb.blue = 200;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <main+0xdc>)
 8001466:	22c8      	movs	r2, #200	; 0xc8
 8001468:	70da      	strb	r2, [r3, #3]
  rgb.brilho = 200;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <main+0xdc>)
 800146c:	22c8      	movs	r2, #200	; 0xc8
 800146e:	701a      	strb	r2, [r3, #0]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8001470:	2300      	movs	r3, #0
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	2301      	movs	r3, #1
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <main+0xd4>)
 800147a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147e:	4915      	ldr	r1, [pc, #84]	; (80014d4 <main+0xe0>)
 8001480:	4815      	ldr	r0, [pc, #84]	; (80014d8 <main+0xe4>)
 8001482:	f009 ff36 	bl	800b2f2 <xTaskCreate>
  xTaskCreate(task_adc,"Tarefa ADC",256, NULL, 5, NULL);
 8001486:	2300      	movs	r3, #0
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	2305      	movs	r3, #5
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001494:	4911      	ldr	r1, [pc, #68]	; (80014dc <main+0xe8>)
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <main+0xec>)
 8001498:	f009 ff2b 	bl	800b2f2 <xTaskCreate>
  xTaskCreate(task_RGB,"Tarefa RGB",256, NULL, 2, &task_handle_RGB);
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <main+0xf0>)
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	2302      	movs	r3, #2
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014aa:	490f      	ldr	r1, [pc, #60]	; (80014e8 <main+0xf4>)
 80014ac:	480f      	ldr	r0, [pc, #60]	; (80014ec <main+0xf8>)
 80014ae:	f009 ff20 	bl	800b2f2 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014b2:	f008 fb09 	bl	8009ac8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <main+0xc2>
 80014b8:	20000284 	.word	0x20000284
 80014bc:	08010d0c 	.word	0x08010d0c
 80014c0:	08001dc5 	.word	0x08001dc5
 80014c4:	200002cc 	.word	0x200002cc
 80014c8:	200002d0 	.word	0x200002d0
 80014cc:	40020800 	.word	0x40020800
 80014d0:	200002dc 	.word	0x200002dc
 80014d4:	08010998 	.word	0x08010998
 80014d8:	080011bb 	.word	0x080011bb
 80014dc:	080109a4 	.word	0x080109a4
 80014e0:	080011e9 	.word	0x080011e9
 80014e4:	200010e4 	.word	0x200010e4
 80014e8:	080109b0 	.word	0x080109b0
 80014ec:	0800131d 	.word	0x0800131d

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	2230      	movs	r2, #48	; 0x30
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f00e fa9c 	bl	800fa3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <SystemClock_Config+0xd0>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <SystemClock_Config+0xd0>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <SystemClock_Config+0xd0>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <SystemClock_Config+0xd4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <SystemClock_Config+0xd4>)
 800153e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <SystemClock_Config+0xd4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001564:	2319      	movs	r3, #25
 8001566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001568:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800156c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800156e:	2304      	movs	r3, #4
 8001570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001572:	2307      	movs	r3, #7
 8001574:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fb68 	bl	8004c50 <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001586:	f000 fc41 	bl	8001e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	230f      	movs	r3, #15
 800158c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158e:	2302      	movs	r3, #2
 8001590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2102      	movs	r1, #2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fdca 	bl	8005140 <HAL_RCC_ClockConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015b2:	f000 fc2b 	bl	8001e0c <Error_Handler>
  }
}
 80015b6:	bf00      	nop
 80015b8:	3750      	adds	r7, #80	; 0x50
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000

080015c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <MX_ADC1_Init+0xa0>)
 80015de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_ADC1_Init+0x9c>)
 8001604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_ADC1_Init+0x9c>)
 800160c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_ADC1_Init+0x9c>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_ADC1_Init+0x9c>)
 800161a:	2201      	movs	r2, #1
 800161c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_ADC1_Init+0x9c>)
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_ADC1_Init+0x9c>)
 8001628:	2201      	movs	r2, #1
 800162a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_ADC1_Init+0x9c>)
 800162e:	f000 fe67 	bl	8002300 <HAL_ADC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001638:	f000 fbe8 	bl	8001e0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800163c:	2300      	movs	r3, #0
 800163e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001640:	2301      	movs	r3, #1
 8001642:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_ADC1_Init+0x9c>)
 800164e:	f000 ffa9 	bl	80025a4 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001658:	f000 fbd8 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000194 	.word	0x20000194
 8001668:	40012000 	.word	0x40012000

0800166c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM2_Init+0x94>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_TIM2_Init+0x94>)
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_TIM2_Init+0x94>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 950;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_TIM2_Init+0x94>)
 800169e:	f240 32b6 	movw	r2, #950	; 0x3b6
 80016a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_TIM2_Init+0x94>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <MX_TIM2_Init+0x94>)
 80016b2:	f003 fefd 	bl	80054b0 <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016bc:	f000 fba6 	bl	8001e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ce:	f004 f98b 	bl	80059e8 <HAL_TIM_ConfigClockSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d8:	f000 fb98 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016dc:	2320      	movs	r3, #32
 80016de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ea:	f004 fd11 	bl	8006110 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 fb8a 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000023c 	.word	0x2000023c

08001704 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <MX_TIM3_Init+0x120>)
 8001736:	4a3c      	ldr	r2, [pc, #240]	; (8001828 <MX_TIM3_Init+0x124>)
 8001738:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <MX_TIM3_Init+0x120>)
 800173c:	2214      	movs	r2, #20
 800173e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <MX_TIM3_Init+0x120>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <MX_TIM3_Init+0x120>)
 8001748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800174e:	4b35      	ldr	r3, [pc, #212]	; (8001824 <MX_TIM3_Init+0x120>)
 8001750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001754:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <MX_TIM3_Init+0x120>)
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800175c:	4831      	ldr	r0, [pc, #196]	; (8001824 <MX_TIM3_Init+0x120>)
 800175e:	f003 fea7 	bl	80054b0 <HAL_TIM_Base_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001768:	f000 fb50 	bl	8001e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001776:	4619      	mov	r1, r3
 8001778:	482a      	ldr	r0, [pc, #168]	; (8001824 <MX_TIM3_Init+0x120>)
 800177a:	f004 f935 	bl	80059e8 <HAL_TIM_ConfigClockSource>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001784:	f000 fb42 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001788:	4826      	ldr	r0, [pc, #152]	; (8001824 <MX_TIM3_Init+0x120>)
 800178a:	f003 ff62 	bl	8005652 <HAL_TIM_PWM_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001794:	f000 fb3a 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4619      	mov	r1, r3
 80017a6:	481f      	ldr	r0, [pc, #124]	; (8001824 <MX_TIM3_Init+0x120>)
 80017a8:	f004 fcb2 	bl	8006110 <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017b2:	f000 fb2b 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	; 0x60
 80017b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 80017ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80017be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	4815      	ldr	r0, [pc, #84]	; (8001824 <MX_TIM3_Init+0x120>)
 80017d0:	f004 f848 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80017da:	f000 fb17 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.Pulse = 32700;
 80017de:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80017e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2204      	movs	r2, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <MX_TIM3_Init+0x120>)
 80017ec:	f004 f83a 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80017f6:	f000 fb09 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 80017fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2208      	movs	r2, #8
 8001804:	4619      	mov	r1, r3
 8001806:	4807      	ldr	r0, [pc, #28]	; (8001824 <MX_TIM3_Init+0x120>)
 8001808:	f004 f82c 	bl	8005864 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8001812:	f000 fafb 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001816:	4803      	ldr	r0, [pc, #12]	; (8001824 <MX_TIM3_Init+0x120>)
 8001818:	f000 fbd8 	bl	8001fcc <HAL_TIM_MspPostInit>

}
 800181c:	bf00      	nop
 800181e:	3738      	adds	r7, #56	; 0x38
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000284 	.word	0x20000284
 8001828:	40000400 	.word	0x40000400

0800182c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_DMA_Init+0x3c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <MX_DMA_Init+0x3c>)
 800183c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_DMA_Init+0x3c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2105      	movs	r1, #5
 8001852:	2038      	movs	r0, #56	; 0x38
 8001854:	f001 fa21 	bl	8002c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001858:	2038      	movs	r0, #56	; 0x38
 800185a:	f001 fa3a 	bl	8002cd2 <HAL_NVIC_EnableIRQ>

}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <MX_GPIO_Init+0xb8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a26      	ldr	r2, [pc, #152]	; (8001924 <MX_GPIO_Init+0xb8>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <MX_GPIO_Init+0xb8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a11      	ldr	r2, [pc, #68]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f8:	480b      	ldr	r0, [pc, #44]	; (8001928 <MX_GPIO_Init+0xbc>)
 80018fa:	f001 fef9 	bl	80036f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_GPIO_Init+0xbc>)
 8001918:	f001 fd66 	bl	80033e8 <HAL_GPIO_Init>

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40020800 	.word	0x40020800

0800192c <prvTaskStatsCommand>:
//uint8_t buffer[128];
uint32_t len;

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout);

static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]


        /* For simplicity, this function assumes the output buffer is large enough
        to hold all the text generated by executing the vTaskList() API function,
        so the xWriteBufferLen parameter is not used. */
        char *head = "Name\t\t\t\tState  Priority  Stack  Number\n\r";
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <prvTaskStatsCommand+0x34>)
 800193a:	617b      	str	r3, [r7, #20]
        ( void ) xWriteBufferLen;

        /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
        generated by executing vTaskList() is written directly into the output
        buffer. */
        strcpy(pcWriteBuffer, head);
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f00e f9b2 	bl	800fca8 <strcpy>
        vTaskList( pcWriteBuffer + strlen(head));
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f7fe fcb5 	bl	80002b4 <strlen>
 800194a:	4602      	mov	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f00a ff33 	bl	800c7bc <vTaskList>

        /* The entire table was written directly to the output buffer.  Execution
        of this command is complete, so return pdFALSE. */
        return pdFALSE;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	080109bc 	.word	0x080109bc

08001964 <prvTaskStatsTexto>:

static BaseType_t prvTaskStatsTexto( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001964:	b4b0      	push	{r4, r5, r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]

	strcpy(pcWriteBuffer,(char*)"Este e um texto teste\r\n");
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <prvTaskStatsTexto+0x30>)
 8001974:	461d      	mov	r5, r3
 8001976:	4614      	mov	r4, r2
 8001978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197a:	6028      	str	r0, [r5, #0]
 800197c:	6069      	str	r1, [r5, #4]
 800197e:	60aa      	str	r2, [r5, #8]
 8001980:	60eb      	str	r3, [r5, #12]
 8001982:	cc03      	ldmia	r4!, {r0, r1}
 8001984:	6128      	str	r0, [r5, #16]
 8001986:	6169      	str	r1, [r5, #20]
	return pdFALSE;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bcb0      	pop	{r4, r5, r7}
 8001992:	4770      	bx	lr
 8001994:	080109e8 	.word	0x080109e8

08001998 <prvTaskStatsRGB>:

static BaseType_t prvTaskStatsRGB( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	const char *pcParameterAux;
	BaseType_t xParameter1StringLength;
	char comando1[7];
	int16_t brilho;
	int16_t red,green,blue;
	comando1[0] = '\0';
 80019a4:	2300      	movs	r3, #0
 80019a6:	753b      	strb	r3, [r7, #20]
	pcParameter1 = FreeRTOS_CLIGetParameter
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	461a      	mov	r2, r3
 80019ae:	2101      	movs	r1, #1
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fb47 	bl	8001044 <FreeRTOS_CLIGetParameter>
 80019b6:	62f8      	str	r0, [r7, #44]	; 0x2c
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );

	strncpy(comando1,pcParameter1,xParameter1StringLength);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00e f98c 	bl	800fce0 <strncpy>
	comando1[xParameter1StringLength] = '\0';
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	3330      	adds	r3, #48	; 0x30
 80019cc:	443b      	add	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	f803 2c1c 	strb.w	r2, [r3, #-28]
	if(strcmp(comando1,(const char *)"on") == (int)0){
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	499f      	ldr	r1, [pc, #636]	; (8001c58 <prvTaskStatsRGB+0x2c0>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc60 	bl	80002a0 <strcmp>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <prvTaskStatsRGB+0x6a>
//		Habilitar o led RGB
//		Basicamente iniciar o TIM3
		HAL_TIM_Base_Start(&htim3);
 80019e6:	489d      	ldr	r0, [pc, #628]	; (8001c5c <prvTaskStatsRGB+0x2c4>)
 80019e8:	f003 fdb2 	bl	8005550 <HAL_TIM_Base_Start>
		strcpy(pcWriteBuffer,"Led Ligado \n\r");
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a9c      	ldr	r2, [pc, #624]	; (8001c60 <prvTaskStatsRGB+0x2c8>)
 80019f0:	461c      	mov	r4, r3
 80019f2:	4613      	mov	r3, r2
 80019f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019f6:	6020      	str	r0, [r4, #0]
 80019f8:	6061      	str	r1, [r4, #4]
 80019fa:	60a2      	str	r2, [r4, #8]
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	81a3      	strh	r3, [r4, #12]
 8001a00:	e10a      	b.n	8001c18 <prvTaskStatsRGB+0x280>
	} else if(strcmp(comando1,(const char *)"off") == 0){
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4997      	ldr	r1, [pc, #604]	; (8001c64 <prvTaskStatsRGB+0x2cc>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fc49 	bl	80002a0 <strcmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d116      	bne.n	8001a42 <prvTaskStatsRGB+0xaa>
//		Desabilitar o led RGB
//		Basicamente parar o TIM3
		HAL_TIM_Base_Stop(&htim3);
 8001a14:	4891      	ldr	r0, [pc, #580]	; (8001c5c <prvTaskStatsRGB+0x2c4>)
 8001a16:	f003 fdf5 	bl	8005604 <HAL_TIM_Base_Stop>
		vTaskSuspend(task_handle_RGB);
 8001a1a:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <prvTaskStatsRGB+0x2d0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f009 fe5c 	bl	800b6dc <vTaskSuspend>
		rgb.brilho=0;
 8001a24:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
		strcpy(pcWriteBuffer,"Led Desligado \n\r");
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4a90      	ldr	r2, [pc, #576]	; (8001c70 <prvTaskStatsRGB+0x2d8>)
 8001a2e:	461d      	mov	r5, r3
 8001a30:	4614      	mov	r4, r2
 8001a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a34:	6028      	str	r0, [r5, #0]
 8001a36:	6069      	str	r1, [r5, #4]
 8001a38:	60aa      	str	r2, [r5, #8]
 8001a3a:	60eb      	str	r3, [r5, #12]
 8001a3c:	7823      	ldrb	r3, [r4, #0]
 8001a3e:	742b      	strb	r3, [r5, #16]
 8001a40:	e0ea      	b.n	8001c18 <prvTaskStatsRGB+0x280>
	} else if(strcmp(comando1,(const char *)"brilho") == 0){
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	498b      	ldr	r1, [pc, #556]	; (8001c74 <prvTaskStatsRGB+0x2dc>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fc29 	bl	80002a0 <strcmp>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d13c      	bne.n	8001ace <prvTaskStatsRGB+0x136>
//		calculo do brilho do led RGB

		pcParameterAux = FreeRTOS_CLIGetParameter
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff faf1 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001a62:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          2,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00e f936 	bl	800fce0 <strncpy>
		brilho = atoi(comando1);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00d ffa1 	bl	800f9c0 <atoi>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	843b      	strh	r3, [r7, #32]
		if(brilho >= 0 && brilho < 256){
 8001a82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db15      	blt.n	8001ab6 <prvTaskStatsRGB+0x11e>
 8001a8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a8e:	2bff      	cmp	r3, #255	; 0xff
 8001a90:	dc11      	bgt.n	8001ab6 <prvTaskStatsRGB+0x11e>
			rgb.brilho = brilho;
 8001a92:	8c3b      	ldrh	r3, [r7, #32]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001a98:	701a      	strb	r2, [r3, #0]
			strcpy(pcWriteBuffer,"Brilho redefinido \n\r");
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4a76      	ldr	r2, [pc, #472]	; (8001c78 <prvTaskStatsRGB+0x2e0>)
 8001a9e:	461d      	mov	r5, r3
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	6028      	str	r0, [r5, #0]
 8001aa6:	6069      	str	r1, [r5, #4]
 8001aa8:	60aa      	str	r2, [r5, #8]
 8001aaa:	60eb      	str	r3, [r5, #12]
 8001aac:	6820      	ldr	r0, [r4, #0]
 8001aae:	6128      	str	r0, [r5, #16]
 8001ab0:	7923      	ldrb	r3, [r4, #4]
 8001ab2:	752b      	strb	r3, [r5, #20]
 8001ab4:	e0b0      	b.n	8001c18 <prvTaskStatsRGB+0x280>
		} else {
			strcpy(pcWriteBuffer,"Valor invalido \n\r");
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a70      	ldr	r2, [pc, #448]	; (8001c7c <prvTaskStatsRGB+0x2e4>)
 8001aba:	461d      	mov	r5, r3
 8001abc:	4614      	mov	r4, r2
 8001abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac0:	6028      	str	r0, [r5, #0]
 8001ac2:	6069      	str	r1, [r5, #4]
 8001ac4:	60aa      	str	r2, [r5, #8]
 8001ac6:	60eb      	str	r3, [r5, #12]
 8001ac8:	8823      	ldrh	r3, [r4, #0]
 8001aca:	822b      	strh	r3, [r5, #16]
 8001acc:	e0a4      	b.n	8001c18 <prvTaskStatsRGB+0x280>
		}

	} else if(strcmp(comando1,(const char *)"color") == 0){
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	496b      	ldr	r1, [pc, #428]	; (8001c80 <prvTaskStatsRGB+0x2e8>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fbe3 	bl	80002a0 <strcmp>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 8081 	bne.w	8001be4 <prvTaskStatsRGB+0x24c>
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2102      	movs	r1, #2
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff faaa 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001af0:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          2,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	461a      	mov	r2, r3
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00e f8ef 	bl	800fce0 <strncpy>
		red = atoi(comando1);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00d ff5a 	bl	800f9c0 <atoi>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	84fb      	strh	r3, [r7, #38]	; 0x26
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	461a      	mov	r2, r3
 8001b16:	2103      	movs	r1, #3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fa93 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001b1e:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          3,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	461a      	mov	r2, r3
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00e f8d8 	bl	800fce0 <strncpy>
		green = atoi(comando1);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00d ff43 	bl	800f9c0 <atoi>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	461a      	mov	r2, r3
 8001b44:	2104      	movs	r1, #4
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fa7c 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001b4c:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          4,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	461a      	mov	r2, r3
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f00e f8c1 	bl	800fce0 <strncpy>
		blue = atoi(comando1);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4618      	mov	r0, r3
 8001b64:	f00d ff2c 	bl	800f9c0 <atoi>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	847b      	strh	r3, [r7, #34]	; 0x22
		if(blue >= 0 && blue < 256 && red >= 0 && red < 256 && blue >=0 && blue < 256){
 8001b6c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db2b      	blt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b74:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b78:	2bff      	cmp	r3, #255	; 0xff
 8001b7a:	dc27      	bgt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db23      	blt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b88:	2bff      	cmp	r3, #255	; 0xff
 8001b8a:	dc1f      	bgt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db1b      	blt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b94:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	dc17      	bgt.n	8001bcc <prvTaskStatsRGB+0x234>
			rgb.blue = blue;
 8001b9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001ba2:	70da      	strb	r2, [r3, #3]
			rgb.red = red;
 8001ba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001baa:	705a      	strb	r2, [r3, #1]
			rgb.green = green;
 8001bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001bb2:	709a      	strb	r2, [r3, #2]
			strcpy(pcWriteBuffer,"Cor redefinido \n\r");
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4a33      	ldr	r2, [pc, #204]	; (8001c84 <prvTaskStatsRGB+0x2ec>)
 8001bb8:	461d      	mov	r5, r3
 8001bba:	4614      	mov	r4, r2
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	6028      	str	r0, [r5, #0]
 8001bc0:	6069      	str	r1, [r5, #4]
 8001bc2:	60aa      	str	r2, [r5, #8]
 8001bc4:	60eb      	str	r3, [r5, #12]
 8001bc6:	8823      	ldrh	r3, [r4, #0]
 8001bc8:	822b      	strh	r3, [r5, #16]
 8001bca:	e025      	b.n	8001c18 <prvTaskStatsRGB+0x280>
		} else {
			strcpy(pcWriteBuffer,"Valor invalido \n\r");
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <prvTaskStatsRGB+0x2e4>)
 8001bd0:	461d      	mov	r5, r3
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd6:	6028      	str	r0, [r5, #0]
 8001bd8:	6069      	str	r1, [r5, #4]
 8001bda:	60aa      	str	r2, [r5, #8]
 8001bdc:	60eb      	str	r3, [r5, #12]
 8001bde:	8823      	ldrh	r3, [r4, #0]
 8001be0:	822b      	strh	r3, [r5, #16]
 8001be2:	e019      	b.n	8001c18 <prvTaskStatsRGB+0x280>
		}
	} else if(strcmp(comando1,(const char *)"rgb") == 0){
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4927      	ldr	r1, [pc, #156]	; (8001c88 <prvTaskStatsRGB+0x2f0>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fb58 	bl	80002a0 <strcmp>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d110      	bne.n	8001c18 <prvTaskStatsRGB+0x280>

		HAL_TIM_Base_Start(&htim3);
 8001bf6:	4819      	ldr	r0, [pc, #100]	; (8001c5c <prvTaskStatsRGB+0x2c4>)
 8001bf8:	f003 fcaa 	bl	8005550 <HAL_TIM_Base_Start>
		vTaskResume(task_handle_RGB);
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <prvTaskStatsRGB+0x2d0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f009 fe13 	bl	800b82c <vTaskResume>
		rgb.blue = 0;
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	70da      	strb	r2, [r3, #3]
		rgb.red = 0;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	705a      	strb	r2, [r3, #1]
		rgb.green = 0;
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	709a      	strb	r2, [r3, #2]
	}
//	strcpy(pcWriteBuffer,valor);

	TIM3->CCR1 = rgb.brilho*rgb.red;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c20:	785b      	ldrb	r3, [r3, #1]
 8001c22:	fb03 f202 	mul.w	r2, r3, r2
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <prvTaskStatsRGB+0x2f4>)
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = rgb.brilho*rgb.green;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c32:	789b      	ldrb	r3, [r3, #2]
 8001c34:	fb03 f202 	mul.w	r2, r3, r2
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <prvTaskStatsRGB+0x2f4>)
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = rgb.brilho*rgb.blue;
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c44:	78db      	ldrb	r3, [r3, #3]
 8001c46:	fb03 f202 	mul.w	r2, r3, r2
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <prvTaskStatsRGB+0x2f4>)
 8001c4c:	63da      	str	r2, [r3, #60]	; 0x3c
	return pdFALSE;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bdb0      	pop	{r4, r5, r7, pc}
 8001c58:	08010a00 	.word	0x08010a00
 8001c5c:	20000284 	.word	0x20000284
 8001c60:	08010a04 	.word	0x08010a04
 8001c64:	08010a14 	.word	0x08010a14
 8001c68:	200010e4 	.word	0x200010e4
 8001c6c:	200002dc 	.word	0x200002dc
 8001c70:	08010a18 	.word	0x08010a18
 8001c74:	08010a2c 	.word	0x08010a2c
 8001c78:	08010a34 	.word	0x08010a34
 8001c7c:	08010a4c 	.word	0x08010a4c
 8001c80:	08010a60 	.word	0x08010a60
 8001c84:	08010a68 	.word	0x08010a68
 8001c88:	08010a7c 	.word	0x08010a7c
 8001c8c:	40000400 	.word	0x40000400

08001c90 <prvTaskStatsHarmonica>:


static BaseType_t prvTaskStatsHarmonica( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b08c      	sub	sp, #48	; 0x30
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
	const char *pcParameterAux;
	BaseType_t xParameter1StringLength;
	char comando1[5];
	char restorno[5];
	uint8_t valor1,valor2;
	comando1[0] = '\0';
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	763b      	strb	r3, [r7, #24]
	pcParameter1 = FreeRTOS_CLIGetParameter
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff f9cb 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001cae:	62f8      	str	r0, [r7, #44]	; 0x2c
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );

	strncpy(comando1,pcParameter1,xParameter1StringLength);
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f107 0318 	add.w	r3, r7, #24
 8001cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f00e f810 	bl	800fce0 <strncpy>
	comando1[xParameter1StringLength] = '\0';
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
 8001cc2:	3330      	adds	r3, #48	; 0x30
 8001cc4:	443b      	add	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f803 2c18 	strb.w	r2, [r3, #-24]
	if(strcmp(comando1,(const char *)"cc") == (int)0){
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	4938      	ldr	r1, [pc, #224]	; (8001db4 <prvTaskStatsHarmonica+0x124>)
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fae4 	bl	80002a0 <strcmp>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d164      	bne.n	8001da8 <prvTaskStatsHarmonica+0x118>
		strcpy(pcWriteBuffer,(char*)"Este e o nivel CC do sinal: ");
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4a35      	ldr	r2, [pc, #212]	; (8001db8 <prvTaskStatsHarmonica+0x128>)
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce8:	6028      	str	r0, [r5, #0]
 8001cea:	6069      	str	r1, [r5, #4]
 8001cec:	60aa      	str	r2, [r5, #8]
 8001cee:	60eb      	str	r3, [r5, #12]
 8001cf0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001cf2:	6128      	str	r0, [r5, #16]
 8001cf4:	6169      	str	r1, [r5, #20]
 8001cf6:	61aa      	str	r2, [r5, #24]
 8001cf8:	7823      	ldrb	r3, [r4, #0]
 8001cfa:	772b      	strb	r3, [r5, #28]
		uint8_t aux;
		float auxf;
		auxf = (((uint8_t)mod[0])*0.5);
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <prvTaskStatsHarmonica+0x12c>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d06:	edc7 7a00 	vstr	s15, [r7]
 8001d0a:	783b      	ldrb	r3, [r7, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc80 	bl	8000614 <__aeabi_i2d>
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <prvTaskStatsHarmonica+0x130>)
 8001d1a:	f7fe fce5 	bl	80006e8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe fef1 	bl	8000b0c <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
		aux = (uint8_t) mod[0];
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <prvTaskStatsHarmonica+0x12c>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d38:	edc7 7a00 	vstr	s15, [r7]
 8001d3c:	783b      	ldrb	r3, [r7, #0]
 8001d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		valor1 = (uint8_t) auxf;
 8001d42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d4a:	edc7 7a00 	vstr	s15, [r7]
 8001d4e:	783b      	ldrb	r3, [r7, #0]
 8001d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		valor2 = (uint8_t) ((mod[0]-aux)*10);
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <prvTaskStatsHarmonica+0x12c>)
 8001d56:	ed93 7a00 	vldr	s14, [r3]
 8001d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d76:	edc7 7a00 	vstr	s15, [r7]
 8001d7a:	783b      	ldrb	r3, [r7, #0]
 8001d7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


		restorno[0] = 48+valor1;
 8001d80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d84:	3330      	adds	r3, #48	; 0x30
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	743b      	strb	r3, [r7, #16]
		restorno[1] = '.';
 8001d8a:	232e      	movs	r3, #46	; 0x2e
 8001d8c:	747b      	strb	r3, [r7, #17]
		restorno[2] = 48+valor2;
 8001d8e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d92:	3330      	adds	r3, #48	; 0x30
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	74bb      	strb	r3, [r7, #18]
		restorno[3] = '\0';
 8001d98:	2300      	movs	r3, #0
 8001d9a:	74fb      	strb	r3, [r7, #19]
		strcpy(pcWriteBuffer,(char*)restorno);
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4619      	mov	r1, r3
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f00d ff80 	bl	800fca8 <strcpy>
	char valor[15];
	int positivo = (int) fase*100;
	itoa(positivo,valor,10);
	strcpy(pcWriteBuffer + strlen(pcWriteBuffer),comando1);
	*/
	return pdFALSE;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3730      	adds	r7, #48	; 0x30
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bdb0      	pop	{r4, r5, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	08010a80 	.word	0x08010a80
 8001db8:	08010a84 	.word	0x08010a84
 8001dbc:	20000ce0 	.word	0x20000ce0
 8001dc0:	3fe00000 	.word	0x3fe00000

08001dc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b0a2      	sub	sp, #136	; 0x88
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001dcc:	f00b ffa6 	bl	800dd1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8001dd0:	f00b ffd4 	bl	800dd7c <init_usb_rtos_obj>

//  static uint8_t pcOutputString[ MAX_OUTPUT_LENGTH ], pcInputString[ MAX_INPUT_LENGTH ];

  FreeRTOS_CLIRegisterCommand( &xTasksCommand );
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <StartDefaultTask+0x38>)
 8001dd6:	f7ff f86b 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksTexto );
 8001dda:	4809      	ldr	r0, [pc, #36]	; (8001e00 <StartDefaultTask+0x3c>)
 8001ddc:	f7ff f868 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksRGB );
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <StartDefaultTask+0x40>)
 8001de2:	f7ff f865 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksHarmonica );
 8001de6:	4808      	ldr	r0, [pc, #32]	; (8001e08 <StartDefaultTask+0x44>)
 8001de8:	f7ff f862 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>

  char data[128];
  /* Infinite loop */
  for(;;)
  {
	  queue_print(data,1);
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	2101      	movs	r1, #1
 8001df2:	4618      	mov	r0, r3
 8001df4:	f00c f810 	bl	800de18 <queue_print>
 8001df8:	e7f8      	b.n	8001dec <StartDefaultTask+0x28>
 8001dfa:	bf00      	nop
 8001dfc:	08010d30 	.word	0x08010d30
 8001e00:	08010d40 	.word	0x08010d40
 8001e04:	08010d50 	.word	0x08010d50
 8001e08:	08010d60 	.word	0x08010d60

08001e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
}
 8001e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <Error_Handler+0x8>
	...

08001e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_MspInit+0x54>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <HAL_MspInit+0x54>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_MspInit+0x54>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_MspInit+0x54>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_MspInit+0x54>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_MspInit+0x54>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	210f      	movs	r1, #15
 8001e5a:	f06f 0001 	mvn.w	r0, #1
 8001e5e:	f000 ff1c 	bl	8002c9a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <HAL_ADC_MspInit+0xdc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d157      	bne.n	8001f42 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_ADC_MspInit+0xe0>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <HAL_ADC_MspInit+0xe0>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_ADC_MspInit+0xe0>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_ADC_MspInit+0xe0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <HAL_ADC_MspInit+0xe0>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_ADC_MspInit+0xe0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	481d      	ldr	r0, [pc, #116]	; (8001f54 <HAL_ADC_MspInit+0xe4>)
 8001ede:	f001 fa83 	bl	80033e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_ADC_MspInit+0xec>)
 8001ee6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001f0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001f28:	f000 feee 	bl	8002d08 <HAL_DMA_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001f32:	f7ff ff6b 	bl	8001e0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_ADC_MspInit+0xe8>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40012000 	.word	0x40012000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	200001dc 	.word	0x200001dc
 8001f5c:	40026410 	.word	0x40026410

08001f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_TIM_Base_MspInit+0x64>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_TIM_Base_MspInit+0x64>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_TIM_Base_MspInit+0x64>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f8e:	e012      	b.n	8001fb6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_TIM_Base_MspInit+0x68>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10d      	bne.n	8001fb6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_TIM_Base_MspInit+0x64>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_TIM_Base_MspInit+0x64>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_TIM_Base_MspInit+0x64>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40000400 	.word	0x40000400

08001fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_TIM_MspPostInit+0xa4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d13b      	bne.n	8002066 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_TIM_MspPostInit+0xa8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_TIM_MspPostInit+0xa8>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_TIM_MspPostInit+0xa8>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_TIM_MspPostInit+0xa8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_TIM_MspPostInit+0xa8>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_TIM_MspPostInit+0xa8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin;
 8002026:	23c0      	movs	r3, #192	; 0xc0
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002036:	2302      	movs	r3, #2
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <HAL_TIM_MspPostInit+0xac>)
 8002042:	f001 f9d1 	bl	80033e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUE_Pin;
 8002046:	2301      	movs	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002056:	2302      	movs	r3, #2
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4806      	ldr	r0, [pc, #24]	; (800207c <HAL_TIM_MspPostInit+0xb0>)
 8002062:	f001 f9c1 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40000400 	.word	0x40000400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <NMI_Handler+0x4>

08002086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <MemManage_Handler+0x4>

08002092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler+0x4>

0800209e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f000 f8e2 	bl	8002278 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020b4:	f00a f9e6 	bl	800c484 <xTaskGetSchedulerState>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d001      	beq.n	80020c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020be:	f00b fbb3 	bl	800d828 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <DMA2_Stream0_IRQHandler+0x10>)
 80020ce:	f000 ff21 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200001dc 	.word	0x200001dc

080020dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <OTG_FS_IRQHandler+0x10>)
 80020e2:	f001 fc88 	bl	80039f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	2000b410 	.word	0x2000b410

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f00d fc52 	bl	800f9c8 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20018000 	.word	0x20018000
 8002150:	00000400 	.word	0x00000400
 8002154:	200010e8 	.word	0x200010e8
 8002158:	2000bb50 	.word	0x2000bb50

0800215c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002186:	490e      	ldr	r1, [pc, #56]	; (80021c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002188:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800219c:	4c0b      	ldr	r4, [pc, #44]	; (80021cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021aa:	f7ff ffd7 	bl	800215c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ae:	f00d fc11 	bl	800f9d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b2:	f7ff f91f 	bl	80013f4 <main>
  bx  lr    
 80021b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80021c4:	08011ae4 	.word	0x08011ae4
  ldr r2, =_sbss
 80021c8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80021cc:	2000bb4c 	.word	0x2000bb4c

080021d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC_IRQHandler>
	...

080021d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <HAL_Init+0x40>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_Init+0x40>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_Init+0x40>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 fd41 	bl	8002c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002202:	200f      	movs	r0, #15
 8002204:	f000 f808 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002208:	f7ff fe06 	bl	8001e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x54>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_InitTick+0x58>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fd59 	bl	8002cee <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00e      	b.n	8002264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d80a      	bhi.n	8002262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224c:	2200      	movs	r2, #0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002254:	f000 fd21 	bl	8002c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <HAL_InitTick+0x5c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000000c 	.word	0x2000000c
 8002270:	20000014 	.word	0x20000014
 8002274:	20000010 	.word	0x20000010

08002278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_IncTick+0x20>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x24>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a04      	ldr	r2, [pc, #16]	; (800229c <HAL_IncTick+0x24>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000014 	.word	0x20000014
 800229c:	200010ec 	.word	0x200010ec

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200010ec 	.word	0x200010ec

080022b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff ffee 	bl	80022a0 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d0:	d005      	beq.n	80022de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_Delay+0x44>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022de:	bf00      	nop
 80022e0:	f7ff ffde 	bl	80022a0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8f7      	bhi.n	80022e0 <HAL_Delay+0x28>
  {
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000014 	.word	0x20000014

08002300 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e033      	b.n	800237e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fda6 	bl	8001e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d118      	bne.n	8002370 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002346:	f023 0302 	bic.w	r3, r3, #2
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa48 	bl	80027e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
 800236e:	e001      	b.n	8002374 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_Start_DMA+0x1e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0ce      	b.n	8002544 <HAL_ADC_Start_DMA+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d018      	beq.n	80023ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023cc:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_ADC_Start_DMA+0x1c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5f      	ldr	r2, [pc, #380]	; (8002550 <HAL_ADC_Start_DMA+0x1c8>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0c9a      	lsrs	r2, r3, #18
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023e0:	e002      	b.n	80023e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f9      	bne.n	80023e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fc:	d107      	bne.n	800240e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	f040 8086 	bne.w	800252a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002448:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245c:	d106      	bne.n	800246c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f023 0206 	bic.w	r2, r3, #6
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
 800246a:	e002      	b.n	8002472 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800247a:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_ADC_Start_DMA+0x1cc>)
 800247c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	4a35      	ldr	r2, [pc, #212]	; (8002558 <HAL_ADC_Start_DMA+0x1d0>)
 8002484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	4a34      	ldr	r2, [pc, #208]	; (800255c <HAL_ADC_Start_DMA+0x1d4>)
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	4a33      	ldr	r2, [pc, #204]	; (8002560 <HAL_ADC_Start_DMA+0x1d8>)
 8002494:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800249e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	334c      	adds	r3, #76	; 0x4c
 80024ca:	4619      	mov	r1, r3
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f000 fcc8 	bl	8002e64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10f      	bne.n	8002500 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d129      	bne.n	8002542 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	e020      	b.n	8002542 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a17      	ldr	r2, [pc, #92]	; (8002564 <HAL_ADC_Start_DMA+0x1dc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d11b      	bne.n	8002542 <HAL_ADC_Start_DMA+0x1ba>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d114      	bne.n	8002542 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e00b      	b.n	8002542 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0210 	orr.w	r2, r3, #16
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	2000000c 	.word	0x2000000c
 8002550:	431bde83 	.word	0x431bde83
 8002554:	40012300 	.word	0x40012300
 8002558:	080029e1 	.word	0x080029e1
 800255c:	08002a9b 	.word	0x08002a9b
 8002560:	08002ab7 	.word	0x08002ab7
 8002564:	40012000 	.word	0x40012000

08002568 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x1c>
 80025bc:	2302      	movs	r3, #2
 80025be:	e105      	b.n	80027cc <HAL_ADC_ConfigChannel+0x228>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	d925      	bls.n	800261c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68d9      	ldr	r1, [r3, #12]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	3b1e      	subs	r3, #30
 80025e6:	2207      	movs	r2, #7
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43da      	mvns	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	400a      	ands	r2, r1
 80025f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68d9      	ldr	r1, [r3, #12]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4618      	mov	r0, r3
 8002608:	4603      	mov	r3, r0
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4403      	add	r3, r0
 800260e:	3b1e      	subs	r3, #30
 8002610:	409a      	lsls	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	e022      	b.n	8002662 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6919      	ldr	r1, [r3, #16]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	2207      	movs	r2, #7
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	400a      	ands	r2, r1
 800263e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	4603      	mov	r3, r0
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4403      	add	r3, r0
 8002658:	409a      	lsls	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b06      	cmp	r3, #6
 8002668:	d824      	bhi.n	80026b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b05      	subs	r3, #5
 800267c:	221f      	movs	r2, #31
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	400a      	ands	r2, r1
 800268a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	4618      	mov	r0, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	3b05      	subs	r3, #5
 80026a6:	fa00 f203 	lsl.w	r2, r0, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
 80026b2:	e04c      	b.n	800274e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	d824      	bhi.n	8002706 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	3b23      	subs	r3, #35	; 0x23
 80026ce:	221f      	movs	r2, #31
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43da      	mvns	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	400a      	ands	r2, r1
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	3b23      	subs	r3, #35	; 0x23
 80026f8:	fa00 f203 	lsl.w	r2, r0, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
 8002704:	e023      	b.n	800274e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	3b41      	subs	r3, #65	; 0x41
 8002718:	221f      	movs	r2, #31
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	400a      	ands	r2, r1
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b41      	subs	r3, #65	; 0x41
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_ADC_ConfigChannel+0x234>)
 8002750:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a21      	ldr	r2, [pc, #132]	; (80027dc <HAL_ADC_ConfigChannel+0x238>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d109      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1cc>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b12      	cmp	r3, #18
 8002762:	d105      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_ADC_ConfigChannel+0x238>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d123      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x21e>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b10      	cmp	r3, #16
 8002780:	d003      	beq.n	800278a <HAL_ADC_ConfigChannel+0x1e6>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b11      	cmp	r3, #17
 8002788:	d11b      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b10      	cmp	r3, #16
 800279c:	d111      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_ADC_ConfigChannel+0x23c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_ADC_ConfigChannel+0x240>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	0c9a      	lsrs	r2, r3, #18
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027b4:	e002      	b.n	80027bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f9      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40012300 	.word	0x40012300
 80027dc:	40012000 	.word	0x40012000
 80027e0:	2000000c 	.word	0x2000000c
 80027e4:	431bde83 	.word	0x431bde83

080027e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f0:	4b79      	ldr	r3, [pc, #484]	; (80029d8 <ADC_Init+0x1f0>)
 80027f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800281c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	021a      	lsls	r2, r3, #8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	4a58      	ldr	r2, [pc, #352]	; (80029dc <ADC_Init+0x1f4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800288e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6899      	ldr	r1, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	e00f      	b.n	80028e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0202 	bic.w	r2, r2, #2
 80028f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6899      	ldr	r1, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7e1b      	ldrb	r3, [r3, #24]
 8002900:	005a      	lsls	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01b      	beq.n	800294c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002922:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002932:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	3b01      	subs	r3, #1
 8002940:	035a      	lsls	r2, r3, #13
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	e007      	b.n	800295c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	3b01      	subs	r3, #1
 8002978:	051a      	lsls	r2, r3, #20
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800299e:	025a      	lsls	r2, r3, #9
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6899      	ldr	r1, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	029a      	lsls	r2, r3, #10
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40012300 	.word	0x40012300
 80029dc:	0f000001 	.word	0x0f000001

080029e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d13c      	bne.n	8002a74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d12b      	bne.n	8002a6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d127      	bne.n	8002a6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d119      	bne.n	8002a6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0220 	bic.w	r2, r2, #32
 8002a46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff fd7b 	bl	8002568 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a72:	e00e      	b.n	8002a92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f7ff fd85 	bl	8002590 <HAL_ADC_ErrorCallback>
}
 8002a86:	e004      	b.n	8002a92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f7ff fd67 	bl	800257c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2240      	movs	r2, #64	; 0x40
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f043 0204 	orr.w	r2, r3, #4
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f7ff fd5a 	bl	8002590 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4907      	ldr	r1, [pc, #28]	; (8002b80 <__NVIC_EnableIRQ+0x38>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c50:	d301      	bcc.n	8002c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00f      	b.n	8002c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <SysTick_Config+0x40>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5e:	210f      	movs	r1, #15
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c64:	f7ff ff8e 	bl	8002b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <SysTick_Config+0x40>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <SysTick_Config+0x40>)
 8002c70:	2207      	movs	r2, #7
 8002c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	e000e010 	.word	0xe000e010

08002c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ff29 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cac:	f7ff ff3e 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	6978      	ldr	r0, [r7, #20]
 8002cb8:	f7ff ff8e 	bl	8002bd8 <NVIC_EncodePriority>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff5d 	bl	8002b84 <__NVIC_SetPriority>
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff31 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffa2 	bl	8002c40 <SysTick_Config>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff fac4 	bl	80022a0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e099      	b.n	8002e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d44:	e00f      	b.n	8002d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d46:	f7ff faab 	bl	80022a0 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b05      	cmp	r3, #5
 8002d52:	d908      	bls.n	8002d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e078      	b.n	8002e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e8      	bne.n	8002d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <HAL_DMA_Init+0x158>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d107      	bne.n	8002dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 0307 	bic.w	r3, r3, #7
 8002de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d117      	bne.n	8002e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fa6f 	bl	80032f0 <DMA_CheckFifoParam>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2240      	movs	r2, #64	; 0x40
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e26:	2301      	movs	r3, #1
 8002e28:	e016      	b.n	8002e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa26 	bl	8003284 <DMA_CalcBaseAndBitshift>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	223f      	movs	r2, #63	; 0x3f
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	f010803f 	.word	0xf010803f

08002e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_DMA_Start_IT+0x26>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e040      	b.n	8002f0c <HAL_DMA_Start_IT+0xa8>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d12f      	bne.n	8002efe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f9b8 	bl	8003228 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	223f      	movs	r2, #63	; 0x3f
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0216 	orr.w	r2, r2, #22
 8002ed2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0208 	orr.w	r2, r2, #8
 8002eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e005      	b.n	8002f0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f20:	4b8e      	ldr	r3, [pc, #568]	; (800315c <HAL_DMA_IRQHandler+0x248>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a8e      	ldr	r2, [pc, #568]	; (8003160 <HAL_DMA_IRQHandler+0x24c>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0a9b      	lsrs	r3, r3, #10
 8002f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2208      	movs	r2, #8
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01a      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	f043 0202 	orr.w	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	2204      	movs	r2, #4
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d012      	beq.n	8002fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	2204      	movs	r2, #4
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d043      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d03c      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	2210      	movs	r2, #16
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d018      	beq.n	8003056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d024      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
 8003042:	e01f      	b.n	8003084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
 8003054:	e016      	b.n	8003084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0208 	bic.w	r2, r2, #8
 8003072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	2220      	movs	r2, #32
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 808f 	beq.w	80031b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8087 	beq.w	80031b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	2220      	movs	r2, #32
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d136      	bne.n	800312c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0216 	bic.w	r2, r2, #22
 80030cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_DMA_IRQHandler+0x1da>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0208 	bic.w	r2, r2, #8
 80030fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	223f      	movs	r2, #63	; 0x3f
 8003104:	409a      	lsls	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	2b00      	cmp	r3, #0
 8003120:	d07e      	beq.n	8003220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
        }
        return;
 800312a:	e079      	b.n	8003220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01d      	beq.n	8003176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	2b00      	cmp	r3, #0
 800314e:	d031      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e02c      	b.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
 800315a:	bf00      	nop
 800315c:	2000000c 	.word	0x2000000c
 8003160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
 8003174:	e01e      	b.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10f      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0210 	bic.w	r2, r2, #16
 8003192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d032      	beq.n	8003222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d022      	beq.n	800320e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2205      	movs	r2, #5
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d307      	bcc.n	80031fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f2      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x2cc>
 80031fa:	e000      	b.n	80031fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
 800321e:	e000      	b.n	8003222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003220:	bf00      	nop
    }
  }
}
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003244:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d108      	bne.n	8003268 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003266:	e007      	b.n	8003278 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	60da      	str	r2, [r3, #12]
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3b10      	subs	r3, #16
 8003294:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800329e:	4a13      	ldr	r2, [pc, #76]	; (80032ec <DMA_CalcBaseAndBitshift+0x68>)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d909      	bls.n	80032c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	1d1a      	adds	r2, r3, #4
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	659a      	str	r2, [r3, #88]	; 0x58
 80032c4:	e007      	b.n	80032d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	aaaaaaab 	.word	0xaaaaaaab
 80032ec:	08010d80 	.word	0x08010d80

080032f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11f      	bne.n	800334a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d856      	bhi.n	80033be <DMA_CheckFifoParam+0xce>
 8003310:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <DMA_CheckFifoParam+0x28>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	08003329 	.word	0x08003329
 800331c:	0800333b 	.word	0x0800333b
 8003320:	08003329 	.word	0x08003329
 8003324:	080033bf 	.word	0x080033bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d046      	beq.n	80033c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003338:	e043      	b.n	80033c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003342:	d140      	bne.n	80033c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003348:	e03d      	b.n	80033c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003352:	d121      	bne.n	8003398 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d837      	bhi.n	80033ca <DMA_CheckFifoParam+0xda>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <DMA_CheckFifoParam+0x70>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003371 	.word	0x08003371
 8003364:	08003377 	.word	0x08003377
 8003368:	08003371 	.word	0x08003371
 800336c:	08003389 	.word	0x08003389
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      break;
 8003374:	e030      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d025      	beq.n	80033ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003386:	e022      	b.n	80033ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003390:	d11f      	bne.n	80033d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003396:	e01c      	b.n	80033d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d903      	bls.n	80033a6 <DMA_CheckFifoParam+0xb6>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d003      	beq.n	80033ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033a4:	e018      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
      break;
 80033aa:	e015      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00e      	beq.n	80033d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e00b      	b.n	80033d6 <DMA_CheckFifoParam+0xe6>
      break;
 80033be:	bf00      	nop
 80033c0:	e00a      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033c2:	bf00      	nop
 80033c4:	e008      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
 80033c8:	e006      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ca:	bf00      	nop
 80033cc:	e004      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e002      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
    }
  } 
  
  return status; 
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop

080033e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	e159      	b.n	80036b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	f040 8148 	bne.w	80036b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d005      	beq.n	800343a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003436:	2b02      	cmp	r3, #2
 8003438:	d130      	bne.n	800349c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003470:	2201      	movs	r2, #1
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 0201 	and.w	r2, r3, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d017      	beq.n	80034d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	2203      	movs	r2, #3
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d123      	bne.n	800352c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	220f      	movs	r2, #15
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	08da      	lsrs	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3208      	adds	r2, #8
 8003526:	69b9      	ldr	r1, [r7, #24]
 8003528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0203 	and.w	r2, r3, #3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80a2 	beq.w	80036b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b57      	ldr	r3, [pc, #348]	; (80036d0 <HAL_GPIO_Init+0x2e8>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	4a56      	ldr	r2, [pc, #344]	; (80036d0 <HAL_GPIO_Init+0x2e8>)
 8003578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800357c:	6453      	str	r3, [r2, #68]	; 0x44
 800357e:	4b54      	ldr	r3, [pc, #336]	; (80036d0 <HAL_GPIO_Init+0x2e8>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800358a:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_GPIO_Init+0x2ec>)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	3302      	adds	r3, #2
 8003592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	220f      	movs	r2, #15
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a49      	ldr	r2, [pc, #292]	; (80036d8 <HAL_GPIO_Init+0x2f0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d019      	beq.n	80035ea <HAL_GPIO_Init+0x202>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a48      	ldr	r2, [pc, #288]	; (80036dc <HAL_GPIO_Init+0x2f4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_GPIO_Init+0x1fe>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a47      	ldr	r2, [pc, #284]	; (80036e0 <HAL_GPIO_Init+0x2f8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00d      	beq.n	80035e2 <HAL_GPIO_Init+0x1fa>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a46      	ldr	r2, [pc, #280]	; (80036e4 <HAL_GPIO_Init+0x2fc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <HAL_GPIO_Init+0x1f6>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a45      	ldr	r2, [pc, #276]	; (80036e8 <HAL_GPIO_Init+0x300>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_GPIO_Init+0x1f2>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e008      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035da:	2307      	movs	r3, #7
 80035dc:	e006      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035de:	2303      	movs	r3, #3
 80035e0:	e004      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e002      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035ea:	2300      	movs	r3, #0
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	f002 0203 	and.w	r2, r2, #3
 80035f2:	0092      	lsls	r2, r2, #2
 80035f4:	4093      	lsls	r3, r2
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035fc:	4935      	ldr	r1, [pc, #212]	; (80036d4 <HAL_GPIO_Init+0x2ec>)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	3302      	adds	r3, #2
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_GPIO_Init+0x304>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362e:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <HAL_GPIO_Init+0x304>)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003634:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_GPIO_Init+0x304>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003658:	4a24      	ldr	r2, [pc, #144]	; (80036ec <HAL_GPIO_Init+0x304>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800365e:	4b23      	ldr	r3, [pc, #140]	; (80036ec <HAL_GPIO_Init+0x304>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003682:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <HAL_GPIO_Init+0x304>)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003688:	4b18      	ldr	r3, [pc, #96]	; (80036ec <HAL_GPIO_Init+0x304>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ac:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <HAL_GPIO_Init+0x304>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3301      	adds	r3, #1
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b0f      	cmp	r3, #15
 80036bc:	f67f aea2 	bls.w	8003404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40013800 	.word	0x40013800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	40020400 	.word	0x40020400
 80036e0:	40020800 	.word	0x40020800
 80036e4:	40020c00 	.word	0x40020c00
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40013c00 	.word	0x40013c00

080036f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003700:	787b      	ldrb	r3, [r7, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003706:	887a      	ldrh	r2, [r7, #2]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800370c:	e003      	b.n	8003716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	041a      	lsls	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	619a      	str	r2, [r3, #24]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	041a      	lsls	r2, r3, #16
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	43d9      	mvns	r1, r3
 8003740:	887b      	ldrh	r3, [r7, #2]
 8003742:	400b      	ands	r3, r1
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003758:	b08f      	sub	sp, #60	; 0x3c
 800375a:	af0a      	add	r7, sp, #40	; 0x28
 800375c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e10f      	b.n	8003988 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f00a fe5e 	bl	800e444 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2203      	movs	r2, #3
 800378c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 fe35 	bl	8006416 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	687e      	ldr	r6, [r7, #4]
 80037b4:	466d      	mov	r5, sp
 80037b6:	f106 0410 	add.w	r4, r6, #16
 80037ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80037ca:	1d33      	adds	r3, r6, #4
 80037cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	f002 fd0c 	bl	80061ec <USB_CoreInit>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0d0      	b.n	8003988 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f002 fe23 	bl	8006438 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	e04a      	b.n	800388e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	333d      	adds	r3, #61	; 0x3d
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	333c      	adds	r3, #60	; 0x3c
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	b298      	uxth	r0, r3
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	3344      	adds	r3, #68	; 0x44
 8003834:	4602      	mov	r2, r0
 8003836:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003838:	7bfa      	ldrb	r2, [r7, #15]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	3340      	adds	r3, #64	; 0x40
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3348      	adds	r3, #72	; 0x48
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	334c      	adds	r3, #76	; 0x4c
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	3354      	adds	r3, #84	; 0x54
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	3301      	adds	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	d3af      	bcc.n	80037f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003898:	2300      	movs	r3, #0
 800389a:	73fb      	strb	r3, [r7, #15]
 800389c:	e044      	b.n	8003928 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80038c6:	7bfa      	ldrb	r2, [r7, #15]
 80038c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	3301      	adds	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	7bfa      	ldrb	r2, [r7, #15]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	429a      	cmp	r2, r3
 8003930:	d3b5      	bcc.n	800389e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	687e      	ldr	r6, [r7, #4]
 800393a:	466d      	mov	r5, sp
 800393c:	f106 0410 	add.w	r4, r6, #16
 8003940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003948:	e894 0003 	ldmia.w	r4, {r0, r1}
 800394c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003950:	1d33      	adds	r3, r6, #4
 8003952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003954:	6838      	ldr	r0, [r7, #0]
 8003956:	f002 fdbb 	bl	80064d0 <USB_DevInit>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e00d      	b.n	8003988 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 ff0a 	bl	800779a <USB_DevDisconnect>

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003990 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_PCD_Start+0x1c>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e020      	b.n	80039ee <HAL_PCD_Start+0x5e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d109      	bne.n	80039d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d005      	beq.n	80039d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f002 fd0d 	bl	80063f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 feba 	bl	8007758 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039f6:	b590      	push	{r4, r7, lr}
 80039f8:	b08d      	sub	sp, #52	; 0x34
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 ff78 	bl	8007902 <USB_GetMode>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 848a 	bne.w	800432e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 fedc 	bl	80077dc <USB_ReadInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8480 	beq.w	800432c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f003 fec9 	bl	80077dc <USB_ReadInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d107      	bne.n	8003a64 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f002 0202 	and.w	r2, r2, #2
 8003a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 feb7 	bl	80077dc <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d161      	bne.n	8003b3c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 020f 	and.w	r2, r3, #15
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	0c5b      	lsrs	r3, r3, #17
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d124      	bne.n	8003afe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d035      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6a38      	ldr	r0, [r7, #32]
 8003ad4:	f003 fcee 	bl	80074b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae4:	441a      	add	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af6:	441a      	add	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	621a      	str	r2, [r3, #32]
 8003afc:	e016      	b.n	8003b2c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	0c5b      	lsrs	r3, r3, #17
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d110      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b10:	2208      	movs	r2, #8
 8003b12:	4619      	mov	r1, r3
 8003b14:	6a38      	ldr	r0, [r7, #32]
 8003b16:	f003 fccd 	bl	80074b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6a1a      	ldr	r2, [r3, #32]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b26:	441a      	add	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0210 	orr.w	r2, r2, #16
 8003b3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f003 fe4b 	bl	80077dc <USB_ReadInterrupts>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b50:	f040 80a7 	bne.w	8003ca2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f003 fe50 	bl	8007802 <USB_ReadDevAllOutEpInterrupt>
 8003b62:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b64:	e099      	b.n	8003c9a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 808e 	beq.w	8003c8e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f003 fe74 	bl	800786a <USB_ReadDevOutEPInterrupt>
 8003b82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fec2 	bl	800492c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00c      	beq.n	8003bcc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 ff98 	bl	8004afc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	2310      	movs	r3, #16
 8003be6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d030      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b80      	cmp	r3, #128	; 0x80
 8003bfc:	d109      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c10:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	3304      	adds	r3, #4
 8003c26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	78db      	ldrb	r3, [r3, #3]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d108      	bne.n	8003c42 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2200      	movs	r2, #0
 8003c34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f00a fd07 	bl	800e650 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2302      	movs	r3, #2
 8003c52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	461a      	mov	r2, r3
 8003c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	3301      	adds	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f47f af62 	bne.w	8003b66 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 fd98 	bl	80077dc <USB_ReadInterrupts>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cb6:	f040 80db 	bne.w	8003e70 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 fdb9 	bl	8007836 <USB_ReadDevAllInEpInterrupt>
 8003cc4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003cca:	e0cd      	b.n	8003e68 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80c2 	beq.w	8003e5c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f003 fddf 	bl	80078a6 <USB_ReadDevInEPInterrupt>
 8003ce8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d057      	beq.n	8003da4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d14:	4013      	ands	r3, r2
 8003d16:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	461a      	mov	r2, r3
 8003d26:	2301      	movs	r3, #1
 8003d28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d132      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	334c      	adds	r3, #76	; 0x4c
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4403      	add	r3, r0
 8003d52:	3348      	adds	r3, #72	; 0x48
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4419      	add	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4403      	add	r3, r0
 8003d66:	334c      	adds	r3, #76	; 0x4c
 8003d68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d113      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x3a2>
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3354      	adds	r3, #84	; 0x54
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d90:	461a      	mov	r2, r3
 8003d92:	2101      	movs	r1, #1
 8003d94:	f003 fde6 	bl	8007964 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f00a fbd1 	bl	800e546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2310      	movs	r3, #16
 8003dda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	461a      	mov	r2, r3
 8003df4:	2340      	movs	r3, #64	; 0x40
 8003df6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d023      	beq.n	8003e4a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e04:	6a38      	ldr	r0, [r7, #32]
 8003e06:	f002 fcc7 	bl	8006798 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	3338      	adds	r3, #56	; 0x38
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	78db      	ldrb	r3, [r3, #3]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d108      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f00a fc1e 	bl	800e674 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	461a      	mov	r2, r3
 8003e46:	2302      	movs	r3, #2
 8003e48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fcdb 	bl	8004812 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	3301      	adds	r3, #1
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f47f af2e 	bne.w	8003ccc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 fcb1 	bl	80077dc <USB_ReadInterrupts>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e84:	d122      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d108      	bne.n	8003eb6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003eac:	2100      	movs	r1, #0
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fec2 	bl	8004c38 <HAL_PCDEx_LPM_Callback>
 8003eb4:	e002      	b.n	8003ebc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f00a fbbc 	bl	800e634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f003 fc83 	bl	80077dc <USB_ReadInterrupts>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	d112      	bne.n	8003f08 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d102      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f00a fb78 	bl	800e5e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f06:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f003 fc65 	bl	80077dc <USB_ReadInterrupts>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1c:	f040 80b7 	bne.w	800408e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2110      	movs	r1, #16
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f002 fc2c 	bl	8006798 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f40:	2300      	movs	r3, #0
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f44:	e046      	b.n	8003fd4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f52:	461a      	mov	r2, r3
 8003f54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	461a      	mov	r2, r3
 8003f88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9e:	0151      	lsls	r1, r2, #5
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	440a      	add	r2, r1
 8003fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fcc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d3b3      	bcc.n	8003f46 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ff0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800400a:	f043 030b 	orr.w	r3, r3, #11
 800400e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004020:	f043 030b 	orr.w	r3, r3, #11
 8004024:	6453      	str	r3, [r2, #68]	; 0x44
 8004026:	e015      	b.n	8004054 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004036:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800403a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800403e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800404e:	f043 030b 	orr.w	r3, r3, #11
 8004052:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004062:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004066:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004078:	461a      	mov	r2, r3
 800407a:	f003 fc73 	bl	8007964 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800408c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f003 fba2 	bl	80077dc <USB_ReadInterrupts>
 8004098:	4603      	mov	r3, r0
 800409a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a2:	d124      	bne.n	80040ee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f003 fc38 	bl	800791e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f002 fbed 	bl	8006892 <USB_GetDevSpeed>
 80040b8:	4603      	mov	r3, r0
 80040ba:	461a      	mov	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681c      	ldr	r4, [r3, #0]
 80040c4:	f001 f9e8 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 80040c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	4620      	mov	r0, r4
 80040d4:	f002 f8ec 	bl	80062b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f00a fa5c 	bl	800e596 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f003 fb72 	bl	80077dc <USB_ReadInterrupts>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d10a      	bne.n	8004118 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f00a fa39 	bl	800e57a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f002 0208 	and.w	r2, r2, #8
 8004116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f003 fb5d 	bl	80077dc <USB_ReadInterrupts>
 8004122:	4603      	mov	r3, r0
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b80      	cmp	r3, #128	; 0x80
 800412a:	d122      	bne.n	8004172 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004138:	2301      	movs	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	e014      	b.n	8004168 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d105      	bne.n	8004162 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fb27 	bl	80047b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	3301      	adds	r3, #1
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	429a      	cmp	r2, r3
 8004170:	d3e5      	bcc.n	800413e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f003 fb30 	bl	80077dc <USB_ReadInterrupts>
 800417c:	4603      	mov	r3, r0
 800417e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004186:	d13b      	bne.n	8004200 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004188:	2301      	movs	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
 800418c:	e02b      	b.n	80041e6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	3340      	adds	r3, #64	; 0x40
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d115      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da12      	bge.n	80041e0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	333f      	adds	r3, #63	; 0x3f
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fae8 	bl	80047b0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	3301      	adds	r3, #1
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d3ce      	bcc.n	800418e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80041fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f003 fae9 	bl	80077dc <USB_ReadInterrupts>
 800420a:	4603      	mov	r3, r0
 800420c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004214:	d155      	bne.n	80042c2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004216:	2301      	movs	r3, #1
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
 800421a:	e045      	b.n	80042a8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d12e      	bne.n	80042a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004244:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004246:	2b00      	cmp	r3, #0
 8004248:	da2b      	bge.n	80042a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004256:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800425a:	429a      	cmp	r2, r3
 800425c:	d121      	bne.n	80042a2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004262:	4613      	mov	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800429e:	6053      	str	r3, [r2, #4]
            break;
 80042a0:	e007      	b.n	80042b2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	3301      	adds	r3, #1
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d3b4      	bcc.n	800421c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80042c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f003 fa88 	bl	80077dc <USB_ReadInterrupts>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d6:	d10a      	bne.n	80042ee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f00a f9dd 	bl	800e698 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 fa72 	bl	80077dc <USB_ReadInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d115      	bne.n	800432e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f00a f9cd 	bl	800e6b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	e000      	b.n	800432e <HAL_PCD_IRQHandler+0x938>
      return;
 800432c:	bf00      	nop
    }
  }
}
 800432e:	3734      	adds	r7, #52	; 0x34
 8004330:	46bd      	mov	sp, r7
 8004332:	bd90      	pop	{r4, r7, pc}

08004334 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_PCD_SetAddress+0x1a>
 800434a:	2302      	movs	r3, #2
 800434c:	e013      	b.n	8004376 <HAL_PCD_SetAddress+0x42>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f003 f9d0 	bl	800770c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	4608      	mov	r0, r1
 8004388:	4611      	mov	r1, r2
 800438a:	461a      	mov	r2, r3
 800438c:	4603      	mov	r3, r0
 800438e:	70fb      	strb	r3, [r7, #3]
 8004390:	460b      	mov	r3, r1
 8004392:	803b      	strh	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800439c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	da0f      	bge.n	80043c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	f003 020f 	and.w	r2, r3, #15
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	3338      	adds	r3, #56	; 0x38
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	3304      	adds	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	705a      	strb	r2, [r3, #1]
 80043c2:	e00f      	b.n	80043e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	f003 020f 	and.w	r2, r3, #15
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	3304      	adds	r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043f0:	883a      	ldrh	r2, [r7, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	78ba      	ldrb	r2, [r7, #2]
 80043fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800440e:	78bb      	ldrb	r3, [r7, #2]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d102      	bne.n	800441a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_PCD_EP_Open+0xaa>
 8004424:	2302      	movs	r3, #2
 8004426:	e00e      	b.n	8004446 <HAL_PCD_EP_Open+0xc8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	4618      	mov	r0, r3
 8004438:	f002 fa50 	bl	80068dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004444:	7afb      	ldrb	r3, [r7, #11]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800445a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	da0f      	bge.n	8004482 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	f003 020f 	and.w	r2, r3, #15
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	3338      	adds	r3, #56	; 0x38
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	3304      	adds	r3, #4
 8004478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	705a      	strb	r2, [r3, #1]
 8004480:	e00f      	b.n	80044a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	f003 020f 	and.w	r2, r3, #15
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	3304      	adds	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_PCD_EP_Close+0x6e>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e00e      	b.n	80044da <HAL_PCD_EP_Close+0x8c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f002 fa8e 	bl	80069ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	460b      	mov	r3, r1
 80044f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044f2:	7afb      	ldrb	r3, [r7, #11]
 80044f4:	f003 020f 	and.w	r2, r3, #15
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	3304      	adds	r3, #4
 800450a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2200      	movs	r2, #0
 800451c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004524:	7afb      	ldrb	r3, [r7, #11]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	b2da      	uxtb	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d102      	bne.n	800453e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	f002 fd6d 	bl	8007034 <USB_EP0StartXfer>
 800455a:	e008      	b.n	800456e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	f002 fb1b 	bl	8006ba4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	f003 020f 	and.w	r2, r3, #15
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	460b      	mov	r3, r1
 80045b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b8:	7afb      	ldrb	r3, [r7, #11]
 80045ba:	f003 020f 	and.w	r2, r3, #15
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	3338      	adds	r3, #56	; 0x38
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	3304      	adds	r3, #4
 80045ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2200      	movs	r2, #0
 80045e0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2201      	movs	r2, #1
 80045e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045e8:	7afb      	ldrb	r3, [r7, #11]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004602:	7afb      	ldrb	r3, [r7, #11]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	6979      	ldr	r1, [r7, #20]
 800461a:	f002 fd0b 	bl	8007034 <USB_EP0StartXfer>
 800461e:	e008      	b.n	8004632 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	6979      	ldr	r1, [r7, #20]
 800462e:	f002 fab9 	bl	8006ba4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 020f 	and.w	r2, r3, #15
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	d901      	bls.n	800465a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e050      	b.n	80046fc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800465a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800465e:	2b00      	cmp	r3, #0
 8004660:	da0f      	bge.n	8004682 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	f003 020f 	and.w	r2, r3, #15
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	3338      	adds	r3, #56	; 0x38
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	3304      	adds	r3, #4
 8004678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	705a      	strb	r2, [r3, #1]
 8004680:	e00d      	b.n	800469e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	3304      	adds	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_PCD_EP_SetStall+0x82>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e01e      	b.n	80046fc <HAL_PCD_EP_SetStall+0xc0>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f002 ff49 	bl	8007564 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	b2d9      	uxtb	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046ec:	461a      	mov	r2, r3
 80046ee:	f003 f939 	bl	8007964 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	f003 020f 	and.w	r2, r3, #15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	d901      	bls.n	8004722 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e042      	b.n	80047a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004726:	2b00      	cmp	r3, #0
 8004728:	da0f      	bge.n	800474a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	3338      	adds	r3, #56	; 0x38
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	3304      	adds	r3, #4
 8004740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	705a      	strb	r2, [r3, #1]
 8004748:	e00f      	b.n	800476a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	f003 020f 	and.w	r2, r3, #15
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	3304      	adds	r3, #4
 8004762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	b2da      	uxtb	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_PCD_EP_ClrStall+0x86>
 8004786:	2302      	movs	r3, #2
 8004788:	e00e      	b.n	80047a8 <HAL_PCD_EP_ClrStall+0xa4>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68f9      	ldr	r1, [r7, #12]
 8004798:	4618      	mov	r0, r3
 800479a:	f002 ff51 	bl	8007640 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	da0c      	bge.n	80047de <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	3338      	adds	r3, #56	; 0x38
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	3304      	adds	r3, #4
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e00c      	b.n	80047f8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	f003 020f 	and.w	r2, r3, #15
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68f9      	ldr	r1, [r7, #12]
 80047fe:	4618      	mov	r0, r3
 8004800:	f002 fd70 	bl	80072e4 <USB_EPStopXfer>
 8004804:	4603      	mov	r3, r0
 8004806:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004808:	7afb      	ldrb	r3, [r7, #11]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b08a      	sub	sp, #40	; 0x28
 8004816:	af02      	add	r7, sp, #8
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3338      	adds	r3, #56	; 0x38
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	3304      	adds	r3, #4
 8004838:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1a      	ldr	r2, [r3, #32]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	429a      	cmp	r2, r3
 8004844:	d901      	bls.n	800484a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e06c      	b.n	8004924 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	429a      	cmp	r2, r3
 800485e:	d902      	bls.n	8004866 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3303      	adds	r3, #3
 800486a:	089b      	lsrs	r3, r3, #2
 800486c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800486e:	e02b      	b.n	80048c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	429a      	cmp	r2, r3
 8004884:	d902      	bls.n	800488c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	3303      	adds	r3, #3
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6919      	ldr	r1, [r3, #16]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	b2da      	uxtb	r2, r3
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	4603      	mov	r3, r0
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f002 fdc4 	bl	8007438 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	441a      	add	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	441a      	add	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d809      	bhi.n	80048f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a1a      	ldr	r2, [r3, #32]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d203      	bcs.n	80048f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1be      	bne.n	8004870 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d811      	bhi.n	8004922 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	2201      	movs	r2, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	43db      	mvns	r3, r3
 8004918:	6939      	ldr	r1, [r7, #16]
 800491a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800491e:	4013      	ands	r3, r2
 8004920:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	333c      	adds	r3, #60	; 0x3c
 8004944:	3304      	adds	r3, #4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d17b      	bne.n	8004a5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d015      	beq.n	8004998 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4a61      	ldr	r2, [pc, #388]	; (8004af4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	f240 80b9 	bls.w	8004ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80b3 	beq.w	8004ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	461a      	mov	r2, r3
 8004990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004994:	6093      	str	r3, [r2, #8]
 8004996:	e0a7      	b.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	461a      	mov	r2, r3
 80049b0:	2320      	movs	r3, #32
 80049b2:	6093      	str	r3, [r2, #8]
 80049b4:	e098      	b.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f040 8093 	bne.w	8004ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	4a4b      	ldr	r2, [pc, #300]	; (8004af4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d90f      	bls.n	80049ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	461a      	mov	r2, r3
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	6093      	str	r3, [r2, #8]
 80049e8:	e07e      	b.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4413      	add	r3, r2
 80049fc:	3304      	adds	r3, #4
 80049fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	0159      	lsls	r1, r3, #5
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a16:	1ad2      	subs	r2, r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d114      	bne.n	8004a4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a34:	461a      	mov	r2, r3
 8004a36:	2101      	movs	r1, #1
 8004a38:	f002 ff94 	bl	8007964 <USB_EP0_OutStart>
 8004a3c:	e006      	b.n	8004a4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	441a      	add	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f009 fd5c 	bl	800e510 <HAL_PCD_DataOutStageCallback>
 8004a58:	e046      	b.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d124      	bne.n	8004aac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7e:	6093      	str	r3, [r2, #8]
 8004a80:	e032      	b.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2320      	movs	r3, #32
 8004a9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f009 fd33 	bl	800e510 <HAL_PCD_DataOutStageCallback>
 8004aaa:	e01d      	b.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d114      	bne.n	8004adc <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d108      	bne.n	8004adc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	f002 ff44 	bl	8007964 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f009 fd14 	bl	800e510 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	4f54300a 	.word	0x4f54300a
 8004af8:	4f54310a 	.word	0x4f54310a

08004afc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	333c      	adds	r3, #60	; 0x3c
 8004b14:	3304      	adds	r3, #4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d90e      	bls.n	8004b50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f009 fccb 	bl	800e4ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d90c      	bls.n	8004b78 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d108      	bne.n	8004b78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b70:	461a      	mov	r2, r3
 8004b72:	2101      	movs	r1, #1
 8004b74:	f002 fef6 	bl	8007964 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	4f54300a 	.word	0x4f54300a

08004b88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
 8004b94:	4613      	mov	r3, r2
 8004b96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ba6:	883b      	ldrh	r3, [r7, #0]
 8004ba8:	0419      	lsls	r1, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004bb4:	e028      	b.n	8004c08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	73fb      	strb	r3, [r7, #15]
 8004bc8:	e00d      	b.n	8004be6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	3340      	adds	r3, #64	; 0x40
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4413      	add	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	3301      	adds	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
 8004be6:	7bfa      	ldrb	r2, [r7, #15]
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d3ec      	bcc.n	8004bca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004bf0:	883b      	ldrh	r3, [r7, #0]
 8004bf2:	0418      	lsls	r0, r3, #16
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6819      	ldr	r1, [r3, #0]
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	4302      	orrs	r2, r0
 8004c00:	3340      	adds	r3, #64	; 0x40
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	887a      	ldrh	r2, [r7, #2]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e267      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d075      	beq.n	8004d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c6e:	4b88      	ldr	r3, [pc, #544]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d00c      	beq.n	8004c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7a:	4b85      	ldr	r3, [pc, #532]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d112      	bne.n	8004cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c86:	4b82      	ldr	r3, [pc, #520]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c92:	d10b      	bne.n	8004cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c94:	4b7e      	ldr	r3, [pc, #504]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d05b      	beq.n	8004d58 <HAL_RCC_OscConfig+0x108>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d157      	bne.n	8004d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e242      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb4:	d106      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x74>
 8004cb6:	4b76      	ldr	r3, [pc, #472]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a75      	ldr	r2, [pc, #468]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e01d      	b.n	8004d00 <HAL_RCC_OscConfig+0xb0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x98>
 8004cce:	4b70      	ldr	r3, [pc, #448]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a6f      	ldr	r2, [pc, #444]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	4b6d      	ldr	r3, [pc, #436]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6c      	ldr	r2, [pc, #432]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e00b      	b.n	8004d00 <HAL_RCC_OscConfig+0xb0>
 8004ce8:	4b69      	ldr	r3, [pc, #420]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a68      	ldr	r2, [pc, #416]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	4b66      	ldr	r3, [pc, #408]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a65      	ldr	r2, [pc, #404]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fd faca 	bl	80022a0 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d10:	f7fd fac6 	bl	80022a0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e207      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b5b      	ldr	r3, [pc, #364]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0xc0>
 8004d2e:	e014      	b.n	8004d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d30:	f7fd fab6 	bl	80022a0 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d38:	f7fd fab2 	bl	80022a0 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e1f3      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	4b51      	ldr	r3, [pc, #324]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0xe8>
 8004d56:	e000      	b.n	8004d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d063      	beq.n	8004e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d66:	4b4a      	ldr	r3, [pc, #296]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d72:	4b47      	ldr	r3, [pc, #284]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d11c      	bne.n	8004db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7e:	4b44      	ldr	r3, [pc, #272]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d116      	bne.n	8004db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8a:	4b41      	ldr	r3, [pc, #260]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_RCC_OscConfig+0x152>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e1c7      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da2:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4937      	ldr	r1, [pc, #220]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db6:	e03a      	b.n	8004e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc0:	4b34      	ldr	r3, [pc, #208]	; (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc6:	f7fd fa6b 	bl	80022a0 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dce:	f7fd fa67 	bl	80022a0 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e1a8      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de0:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dec:	4b28      	ldr	r3, [pc, #160]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4925      	ldr	r1, [pc, #148]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	600b      	str	r3, [r1, #0]
 8004e00:	e015      	b.n	8004e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd fa4a 	bl	80022a0 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e10:	f7fd fa46 	bl	80022a0 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e187      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d036      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d016      	beq.n	8004e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <HAL_RCC_OscConfig+0x248>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fd fa2a 	bl	80022a0 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e50:	f7fd fa26 	bl	80022a0 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e167      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RCC_OscConfig+0x240>)
 8004e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x200>
 8004e6e:	e01b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <HAL_RCC_OscConfig+0x248>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e76:	f7fd fa13 	bl	80022a0 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	e00e      	b.n	8004e9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e7e:	f7fd fa0f 	bl	80022a0 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d907      	bls.n	8004e9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e150      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
 8004e90:	40023800 	.word	0x40023800
 8004e94:	42470000 	.word	0x42470000
 8004e98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e9c:	4b88      	ldr	r3, [pc, #544]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ea      	bne.n	8004e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8097 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eba:	4b81      	ldr	r3, [pc, #516]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10f      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	4b7d      	ldr	r3, [pc, #500]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	4a7c      	ldr	r2, [pc, #496]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed6:	4b7a      	ldr	r3, [pc, #488]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee6:	4b77      	ldr	r3, [pc, #476]	; (80050c4 <HAL_RCC_OscConfig+0x474>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d118      	bne.n	8004f24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ef2:	4b74      	ldr	r3, [pc, #464]	; (80050c4 <HAL_RCC_OscConfig+0x474>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a73      	ldr	r2, [pc, #460]	; (80050c4 <HAL_RCC_OscConfig+0x474>)
 8004ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004efe:	f7fd f9cf 	bl	80022a0 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f06:	f7fd f9cb 	bl	80022a0 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e10c      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	4b6a      	ldr	r3, [pc, #424]	; (80050c4 <HAL_RCC_OscConfig+0x474>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d106      	bne.n	8004f3a <HAL_RCC_OscConfig+0x2ea>
 8004f2c:	4b64      	ldr	r3, [pc, #400]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	4a63      	ldr	r2, [pc, #396]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	6713      	str	r3, [r2, #112]	; 0x70
 8004f38:	e01c      	b.n	8004f74 <HAL_RCC_OscConfig+0x324>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x30c>
 8004f42:	4b5f      	ldr	r3, [pc, #380]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	4a5e      	ldr	r2, [pc, #376]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f48:	f043 0304 	orr.w	r3, r3, #4
 8004f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4e:	4b5c      	ldr	r3, [pc, #368]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a5b      	ldr	r2, [pc, #364]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCC_OscConfig+0x324>
 8004f5c:	4b58      	ldr	r3, [pc, #352]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	4a57      	ldr	r2, [pc, #348]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	6713      	str	r3, [r2, #112]	; 0x70
 8004f68:	4b55      	ldr	r3, [pc, #340]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a54      	ldr	r2, [pc, #336]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f023 0304 	bic.w	r3, r3, #4
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d015      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fd f990 	bl	80022a0 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f84:	f7fd f98c 	bl	80022a0 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e0cb      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9a:	4b49      	ldr	r3, [pc, #292]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0ee      	beq.n	8004f84 <HAL_RCC_OscConfig+0x334>
 8004fa6:	e014      	b.n	8004fd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa8:	f7fd f97a 	bl	80022a0 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7fd f976 	bl	80022a0 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0b5      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc6:	4b3e      	ldr	r3, [pc, #248]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1ee      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d105      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd8:	4b39      	ldr	r3, [pc, #228]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	4a38      	ldr	r2, [pc, #224]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80a1 	beq.w	8005130 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fee:	4b34      	ldr	r3, [pc, #208]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d05c      	beq.n	80050b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d141      	bne.n	8005086 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005002:	4b31      	ldr	r3, [pc, #196]	; (80050c8 <HAL_RCC_OscConfig+0x478>)
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7fd f94a 	bl	80022a0 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005010:	f7fd f946 	bl	80022a0 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e087      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	019b      	lsls	r3, r3, #6
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	3b01      	subs	r3, #1
 8005048:	041b      	lsls	r3, r3, #16
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	491b      	ldr	r1, [pc, #108]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 8005054:	4313      	orrs	r3, r2
 8005056:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005058:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <HAL_RCC_OscConfig+0x478>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505e:	f7fd f91f 	bl	80022a0 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005066:	f7fd f91b 	bl	80022a0 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e05c      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005078:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x416>
 8005084:	e054      	b.n	8005130 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005086:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <HAL_RCC_OscConfig+0x478>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7fd f908 	bl	80022a0 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005094:	f7fd f904 	bl	80022a0 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e045      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <HAL_RCC_OscConfig+0x470>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x444>
 80050b2:	e03d      	b.n	8005130 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d107      	bne.n	80050cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e038      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40007000 	.word	0x40007000
 80050c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <HAL_RCC_OscConfig+0x4ec>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d028      	beq.n	800512c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d121      	bne.n	800512c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d11a      	bne.n	800512c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050fc:	4013      	ands	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005104:	4293      	cmp	r3, r2
 8005106:	d111      	bne.n	800512c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	3b01      	subs	r3, #1
 8005116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d107      	bne.n	800512c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800

08005140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0cc      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005154:	4b68      	ldr	r3, [pc, #416]	; (80052f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d90c      	bls.n	800517c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b65      	ldr	r3, [pc, #404]	; (80052f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b63      	ldr	r3, [pc, #396]	; (80052f8 <HAL_RCC_ClockConfig+0x1b8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0b8      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005194:	4b59      	ldr	r3, [pc, #356]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	4a58      	ldr	r2, [pc, #352]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800519e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051ac:	4b53      	ldr	r3, [pc, #332]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4a52      	ldr	r2, [pc, #328]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b8:	4b50      	ldr	r3, [pc, #320]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	494d      	ldr	r1, [pc, #308]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d044      	beq.n	8005260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d107      	bne.n	80051ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051de:	4b47      	ldr	r3, [pc, #284]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d119      	bne.n	800521e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e07f      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d003      	beq.n	80051fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d107      	bne.n	800520e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fe:	4b3f      	ldr	r3, [pc, #252]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e06f      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800520e:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e067      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800521e:	4b37      	ldr	r3, [pc, #220]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f023 0203 	bic.w	r2, r3, #3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	4934      	ldr	r1, [pc, #208]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	4313      	orrs	r3, r2
 800522e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005230:	f7fd f836 	bl	80022a0 <HAL_GetTick>
 8005234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005236:	e00a      	b.n	800524e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005238:	f7fd f832 	bl	80022a0 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f241 3288 	movw	r2, #5000	; 0x1388
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e04f      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524e:	4b2b      	ldr	r3, [pc, #172]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 020c 	and.w	r2, r3, #12
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	429a      	cmp	r2, r3
 800525e:	d1eb      	bne.n	8005238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005260:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d20c      	bcs.n	8005288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e032      	b.n	80052ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005294:	4b19      	ldr	r3, [pc, #100]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4916      	ldr	r1, [pc, #88]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	490e      	ldr	r1, [pc, #56]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052c6:	f000 f821 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80052ca:	4602      	mov	r2, r0
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	490a      	ldr	r1, [pc, #40]	; (8005300 <HAL_RCC_ClockConfig+0x1c0>)
 80052d8:	5ccb      	ldrb	r3, [r1, r3]
 80052da:	fa22 f303 	lsr.w	r3, r2, r3
 80052de:	4a09      	ldr	r2, [pc, #36]	; (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80052e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fc ff96 	bl	8002218 <HAL_InitTick>

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023c00 	.word	0x40023c00
 80052fc:	40023800 	.word	0x40023800
 8005300:	08010d70 	.word	0x08010d70
 8005304:	2000000c 	.word	0x2000000c
 8005308:	20000010 	.word	0x20000010

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005310:	b090      	sub	sp, #64	; 0x40
 8005312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
 8005318:	2300      	movs	r3, #0
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800531c:	2300      	movs	r3, #0
 800531e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005324:	4b59      	ldr	r3, [pc, #356]	; (800548c <HAL_RCC_GetSysClockFreq+0x180>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 030c 	and.w	r3, r3, #12
 800532c:	2b08      	cmp	r3, #8
 800532e:	d00d      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x40>
 8005330:	2b08      	cmp	r3, #8
 8005332:	f200 80a1 	bhi.w	8005478 <HAL_RCC_GetSysClockFreq+0x16c>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x34>
 800533a:	2b04      	cmp	r3, #4
 800533c:	d003      	beq.n	8005346 <HAL_RCC_GetSysClockFreq+0x3a>
 800533e:	e09b      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005340:	4b53      	ldr	r3, [pc, #332]	; (8005490 <HAL_RCC_GetSysClockFreq+0x184>)
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005344:	e09b      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005346:	4b53      	ldr	r3, [pc, #332]	; (8005494 <HAL_RCC_GetSysClockFreq+0x188>)
 8005348:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800534a:	e098      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800534c:	4b4f      	ldr	r3, [pc, #316]	; (800548c <HAL_RCC_GetSysClockFreq+0x180>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005356:	4b4d      	ldr	r3, [pc, #308]	; (800548c <HAL_RCC_GetSysClockFreq+0x180>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d028      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005362:	4b4a      	ldr	r3, [pc, #296]	; (800548c <HAL_RCC_GetSysClockFreq+0x180>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	099b      	lsrs	r3, r3, #6
 8005368:	2200      	movs	r2, #0
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	627a      	str	r2, [r7, #36]	; 0x24
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005374:	2100      	movs	r1, #0
 8005376:	4b47      	ldr	r3, [pc, #284]	; (8005494 <HAL_RCC_GetSysClockFreq+0x188>)
 8005378:	fb03 f201 	mul.w	r2, r3, r1
 800537c:	2300      	movs	r3, #0
 800537e:	fb00 f303 	mul.w	r3, r0, r3
 8005382:	4413      	add	r3, r2
 8005384:	4a43      	ldr	r2, [pc, #268]	; (8005494 <HAL_RCC_GetSysClockFreq+0x188>)
 8005386:	fba0 1202 	umull	r1, r2, r0, r2
 800538a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800538c:	460a      	mov	r2, r1
 800538e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005392:	4413      	add	r3, r2
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	2200      	movs	r2, #0
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	61fa      	str	r2, [r7, #28]
 800539e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053a6:	f7fb fc01 	bl	8000bac <__aeabi_uldivmod>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4613      	mov	r3, r2
 80053b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b2:	e053      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b4:	4b35      	ldr	r3, [pc, #212]	; (800548c <HAL_RCC_GetSysClockFreq+0x180>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	099b      	lsrs	r3, r3, #6
 80053ba:	2200      	movs	r2, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	617a      	str	r2, [r7, #20]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053c6:	f04f 0b00 	mov.w	fp, #0
 80053ca:	4652      	mov	r2, sl
 80053cc:	465b      	mov	r3, fp
 80053ce:	f04f 0000 	mov.w	r0, #0
 80053d2:	f04f 0100 	mov.w	r1, #0
 80053d6:	0159      	lsls	r1, r3, #5
 80053d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053dc:	0150      	lsls	r0, r2, #5
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	ebb2 080a 	subs.w	r8, r2, sl
 80053e6:	eb63 090b 	sbc.w	r9, r3, fp
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80053f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053fe:	ebb2 0408 	subs.w	r4, r2, r8
 8005402:	eb63 0509 	sbc.w	r5, r3, r9
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	00eb      	lsls	r3, r5, #3
 8005410:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005414:	00e2      	lsls	r2, r4, #3
 8005416:	4614      	mov	r4, r2
 8005418:	461d      	mov	r5, r3
 800541a:	eb14 030a 	adds.w	r3, r4, sl
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	eb45 030b 	adc.w	r3, r5, fp
 8005424:	607b      	str	r3, [r7, #4]
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005432:	4629      	mov	r1, r5
 8005434:	028b      	lsls	r3, r1, #10
 8005436:	4621      	mov	r1, r4
 8005438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800543c:	4621      	mov	r1, r4
 800543e:	028a      	lsls	r2, r1, #10
 8005440:	4610      	mov	r0, r2
 8005442:	4619      	mov	r1, r3
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	2200      	movs	r2, #0
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	60fa      	str	r2, [r7, #12]
 800544c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005450:	f7fb fbac 	bl	8000bac <__aeabi_uldivmod>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4613      	mov	r3, r2
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_RCC_GetSysClockFreq+0x180>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	0c1b      	lsrs	r3, r3, #16
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	3301      	adds	r3, #1
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800546c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005476:	e002      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <HAL_RCC_GetSysClockFreq+0x184>)
 800547a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800547c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005480:	4618      	mov	r0, r3
 8005482:	3740      	adds	r7, #64	; 0x40
 8005484:	46bd      	mov	sp, r7
 8005486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800548a:	bf00      	nop
 800548c:	40023800 	.word	0x40023800
 8005490:	00f42400 	.word	0x00f42400
 8005494:	017d7840 	.word	0x017d7840

08005498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800549c:	4b03      	ldr	r3, [pc, #12]	; (80054ac <HAL_RCC_GetHCLKFreq+0x14>)
 800549e:	681b      	ldr	r3, [r3, #0]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	2000000c 	.word	0x2000000c

080054b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e041      	b.n	8005546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fc fd42 	bl	8001f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f000 fb42 	bl	8005b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d001      	beq.n	8005568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e03c      	b.n	80055e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <HAL_TIM_Base_Start+0xa0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d018      	beq.n	80055ac <HAL_TIM_Base_Start+0x5c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d013      	beq.n	80055ac <HAL_TIM_Base_Start+0x5c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1a      	ldr	r2, [pc, #104]	; (80055f4 <HAL_TIM_Base_Start+0xa4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00e      	beq.n	80055ac <HAL_TIM_Base_Start+0x5c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <HAL_TIM_Base_Start+0xa8>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_TIM_Base_Start+0x5c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a17      	ldr	r2, [pc, #92]	; (80055fc <HAL_TIM_Base_Start+0xac>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_TIM_Base_Start+0x5c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a16      	ldr	r2, [pc, #88]	; (8005600 <HAL_TIM_Base_Start+0xb0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d111      	bne.n	80055d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b06      	cmp	r3, #6
 80055bc:	d010      	beq.n	80055e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0201 	orr.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	e007      	b.n	80055e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40010000 	.word	0x40010000
 80055f4:	40000400 	.word	0x40000400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40000c00 	.word	0x40000c00
 8005600:	40014000 	.word	0x40014000

08005604 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	f241 1311 	movw	r3, #4369	; 0x1111
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10f      	bne.n	800563c <HAL_TIM_Base_Stop+0x38>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6a1a      	ldr	r2, [r3, #32]
 8005622:	f240 4344 	movw	r3, #1092	; 0x444
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d107      	bne.n	800563c <HAL_TIM_Base_Stop+0x38>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e041      	b.n	80056e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f839 	bl	80056f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f000 fa71 	bl	8005b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_TIM_PWM_Start+0x24>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e022      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d109      	bne.n	8005742 <HAL_TIM_PWM_Start+0x3e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e015      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d109      	bne.n	800575c <HAL_TIM_PWM_Start+0x58>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e008      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e068      	b.n	8005848 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Start+0x82>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005784:	e013      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0x92>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005794:	e00b      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xa2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a4:	e003      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2201      	movs	r2, #1
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fc84 	bl	80060c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a23      	ldr	r2, [pc, #140]	; (8005850 <HAL_TIM_PWM_Start+0x14c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d107      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1d      	ldr	r2, [pc, #116]	; (8005850 <HAL_TIM_PWM_Start+0x14c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e8:	d013      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a19      	ldr	r2, [pc, #100]	; (8005854 <HAL_TIM_PWM_Start+0x150>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a17      	ldr	r2, [pc, #92]	; (8005858 <HAL_TIM_PWM_Start+0x154>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a16      	ldr	r2, [pc, #88]	; (800585c <HAL_TIM_PWM_Start+0x158>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_TIM_PWM_Start+0x10e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a14      	ldr	r2, [pc, #80]	; (8005860 <HAL_TIM_PWM_Start+0x15c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d111      	bne.n	8005836 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b06      	cmp	r3, #6
 8005822:	d010      	beq.n	8005846 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005834:	e007      	b.n	8005846 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0201 	orr.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40010000 	.word	0x40010000
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40014000 	.word	0x40014000

08005864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800587e:	2302      	movs	r3, #2
 8005880:	e0ae      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b0c      	cmp	r3, #12
 800588e:	f200 809f 	bhi.w	80059d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080059d1 	.word	0x080059d1
 80058a0:	080059d1 	.word	0x080059d1
 80058a4:	080059d1 	.word	0x080059d1
 80058a8:	0800590d 	.word	0x0800590d
 80058ac:	080059d1 	.word	0x080059d1
 80058b0:	080059d1 	.word	0x080059d1
 80058b4:	080059d1 	.word	0x080059d1
 80058b8:	0800594f 	.word	0x0800594f
 80058bc:	080059d1 	.word	0x080059d1
 80058c0:	080059d1 	.word	0x080059d1
 80058c4:	080059d1 	.word	0x080059d1
 80058c8:	0800598f 	.word	0x0800598f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f9d0 	bl	8005c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0208 	orr.w	r2, r2, #8
 80058e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0204 	bic.w	r2, r2, #4
 80058f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6999      	ldr	r1, [r3, #24]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	619a      	str	r2, [r3, #24]
      break;
 800590a:	e064      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fa16 	bl	8005d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6999      	ldr	r1, [r3, #24]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	021a      	lsls	r2, r3, #8
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	619a      	str	r2, [r3, #24]
      break;
 800594c:	e043      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fa61 	bl	8005e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0208 	orr.w	r2, r2, #8
 8005968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0204 	bic.w	r2, r2, #4
 8005978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69d9      	ldr	r1, [r3, #28]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	61da      	str	r2, [r3, #28]
      break;
 800598c:	e023      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 faab 	bl	8005ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69d9      	ldr	r1, [r3, #28]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	021a      	lsls	r2, r3, #8
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	61da      	str	r2, [r3, #28]
      break;
 80059ce:	e002      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	75fb      	strb	r3, [r7, #23]
      break;
 80059d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059de:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_TIM_ConfigClockSource+0x1c>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e0b4      	b.n	8005b6e <HAL_TIM_ConfigClockSource+0x186>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3c:	d03e      	beq.n	8005abc <HAL_TIM_ConfigClockSource+0xd4>
 8005a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a42:	f200 8087 	bhi.w	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4a:	f000 8086 	beq.w	8005b5a <HAL_TIM_ConfigClockSource+0x172>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d87f      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a54:	2b70      	cmp	r3, #112	; 0x70
 8005a56:	d01a      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0xa6>
 8005a58:	2b70      	cmp	r3, #112	; 0x70
 8005a5a:	d87b      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b60      	cmp	r3, #96	; 0x60
 8005a5e:	d050      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0x11a>
 8005a60:	2b60      	cmp	r3, #96	; 0x60
 8005a62:	d877      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a64:	2b50      	cmp	r3, #80	; 0x50
 8005a66:	d03c      	beq.n	8005ae2 <HAL_TIM_ConfigClockSource+0xfa>
 8005a68:	2b50      	cmp	r3, #80	; 0x50
 8005a6a:	d873      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d058      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x13a>
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d86f      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b30      	cmp	r3, #48	; 0x30
 8005a76:	d064      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x15a>
 8005a78:	2b30      	cmp	r3, #48	; 0x30
 8005a7a:	d86b      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d060      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d867      	bhi.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d05c      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x15a>
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d05a      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x15a>
 8005a8c:	e062      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6899      	ldr	r1, [r3, #8]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f000 faf1 	bl	8006084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ab0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	609a      	str	r2, [r3, #8]
      break;
 8005aba:	e04f      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6899      	ldr	r1, [r3, #8]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f000 fada 	bl	8006084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ade:	609a      	str	r2, [r3, #8]
      break;
 8005ae0:	e03c      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	461a      	mov	r2, r3
 8005af0:	f000 fa4e 	bl	8005f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2150      	movs	r1, #80	; 0x50
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 faa7 	bl	800604e <TIM_ITRx_SetConfig>
      break;
 8005b00:	e02c      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f000 fa6d 	bl	8005fee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2160      	movs	r1, #96	; 0x60
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fa97 	bl	800604e <TIM_ITRx_SetConfig>
      break;
 8005b20:	e01c      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 fa2e 	bl	8005f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2140      	movs	r1, #64	; 0x40
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fa87 	bl	800604e <TIM_ITRx_SetConfig>
      break;
 8005b40:	e00c      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f000 fa7e 	bl	800604e <TIM_ITRx_SetConfig>
      break;
 8005b52:	e003      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
      break;
 8005b58:	e000      	b.n	8005b5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a34      	ldr	r2, [pc, #208]	; (8005c5c <TIM_Base_SetConfig+0xe4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b96:	d00b      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a31      	ldr	r2, [pc, #196]	; (8005c60 <TIM_Base_SetConfig+0xe8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a30      	ldr	r2, [pc, #192]	; (8005c64 <TIM_Base_SetConfig+0xec>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0x38>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	; (8005c68 <TIM_Base_SetConfig+0xf0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d108      	bne.n	8005bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a25      	ldr	r2, [pc, #148]	; (8005c5c <TIM_Base_SetConfig+0xe4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01b      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d017      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <TIM_Base_SetConfig+0xe8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a21      	ldr	r2, [pc, #132]	; (8005c64 <TIM_Base_SetConfig+0xec>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00f      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <TIM_Base_SetConfig+0xf0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1f      	ldr	r2, [pc, #124]	; (8005c6c <TIM_Base_SetConfig+0xf4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1e      	ldr	r2, [pc, #120]	; (8005c70 <TIM_Base_SetConfig+0xf8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d003      	beq.n	8005c02 <TIM_Base_SetConfig+0x8a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <TIM_Base_SetConfig+0xfc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d108      	bne.n	8005c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <TIM_Base_SetConfig+0xe4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d103      	bne.n	8005c48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	615a      	str	r2, [r3, #20]
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800

08005c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0201 	bic.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 0302 	bic.w	r3, r3, #2
 8005cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <TIM_OC1_SetConfig+0xc8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d10c      	bne.n	8005cee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0308 	bic.w	r3, r3, #8
 8005cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f023 0304 	bic.w	r3, r3, #4
 8005cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <TIM_OC1_SetConfig+0xc8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d111      	bne.n	8005d1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	621a      	str	r2, [r3, #32]
}
 8005d34:	bf00      	nop
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40010000 	.word	0x40010000

08005d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f023 0210 	bic.w	r2, r3, #16
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 0320 	bic.w	r3, r3, #32
 8005d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1e      	ldr	r2, [pc, #120]	; (8005e18 <TIM_OC2_SetConfig+0xd4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d10d      	bne.n	8005dc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <TIM_OC2_SetConfig+0xd4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d113      	bne.n	8005df0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40010000 	.word	0x40010000

08005e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <TIM_OC3_SetConfig+0xd0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d10d      	bne.n	8005e96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a14      	ldr	r2, [pc, #80]	; (8005eec <TIM_OC3_SetConfig+0xd0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d113      	bne.n	8005ec6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40010000 	.word	0x40010000

08005ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	031b      	lsls	r3, r3, #12
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a10      	ldr	r2, [pc, #64]	; (8005f8c <TIM_OC4_SetConfig+0x9c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d109      	bne.n	8005f64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	019b      	lsls	r3, r3, #6
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000

08005f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f023 0201 	bic.w	r2, r3, #1
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f023 030a 	bic.w	r3, r3, #10
 8005fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b087      	sub	sp, #28
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0210 	bic.w	r2, r3, #16
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	031b      	lsls	r3, r3, #12
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800602a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	621a      	str	r2, [r3, #32]
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	f043 0307 	orr.w	r3, r3, #7
 8006070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	609a      	str	r2, [r3, #8]
}
 8006078:	bf00      	nop
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800609e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	021a      	lsls	r2, r3, #8
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2201      	movs	r2, #1
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1a      	ldr	r2, [r3, #32]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	43db      	mvns	r3, r3
 80060e6:	401a      	ands	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	fa01 f303 	lsl.w	r3, r1, r3
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006124:	2302      	movs	r3, #2
 8006126:	e050      	b.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d018      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006174:	d013      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a18      	ldr	r2, [pc, #96]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d10c      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	40000c00 	.word	0x40000c00
 80061e8:	40014000 	.word	0x40014000

080061ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061ec:	b084      	sub	sp, #16
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	f107 001c 	add.w	r0, r7, #28
 80061fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	2b01      	cmp	r3, #1
 8006202:	d122      	bne.n	800624a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	2b01      	cmp	r3, #1
 8006230:	d105      	bne.n	800623e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fbee 	bl	8007a20 <USB_CoreReset>
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]
 8006248:	e01a      	b.n	8006280 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 fbe2 	bl	8007a20 <USB_CoreReset>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	639a      	str	r2, [r3, #56]	; 0x38
 8006272:	e005      	b.n	8006280 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	2b01      	cmp	r3, #1
 8006284:	d10b      	bne.n	800629e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f043 0206 	orr.w	r2, r3, #6
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f043 0220 	orr.w	r2, r3, #32
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062aa:	b004      	add	sp, #16
 80062ac:	4770      	bx	lr
	...

080062b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d165      	bne.n	8006390 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4a41      	ldr	r2, [pc, #260]	; (80063cc <USB_SetTurnaroundTime+0x11c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d906      	bls.n	80062da <USB_SetTurnaroundTime+0x2a>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a40      	ldr	r2, [pc, #256]	; (80063d0 <USB_SetTurnaroundTime+0x120>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d202      	bcs.n	80062da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062d4:	230f      	movs	r3, #15
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e062      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4a3c      	ldr	r2, [pc, #240]	; (80063d0 <USB_SetTurnaroundTime+0x120>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d306      	bcc.n	80062f0 <USB_SetTurnaroundTime+0x40>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a3b      	ldr	r2, [pc, #236]	; (80063d4 <USB_SetTurnaroundTime+0x124>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d202      	bcs.n	80062f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062ea:	230e      	movs	r3, #14
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e057      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4a38      	ldr	r2, [pc, #224]	; (80063d4 <USB_SetTurnaroundTime+0x124>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d306      	bcc.n	8006306 <USB_SetTurnaroundTime+0x56>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a37      	ldr	r2, [pc, #220]	; (80063d8 <USB_SetTurnaroundTime+0x128>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d202      	bcs.n	8006306 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006300:	230d      	movs	r3, #13
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e04c      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a33      	ldr	r2, [pc, #204]	; (80063d8 <USB_SetTurnaroundTime+0x128>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d306      	bcc.n	800631c <USB_SetTurnaroundTime+0x6c>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a32      	ldr	r2, [pc, #200]	; (80063dc <USB_SetTurnaroundTime+0x12c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d802      	bhi.n	800631c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006316:	230c      	movs	r3, #12
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e041      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a2f      	ldr	r2, [pc, #188]	; (80063dc <USB_SetTurnaroundTime+0x12c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d906      	bls.n	8006332 <USB_SetTurnaroundTime+0x82>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a2e      	ldr	r2, [pc, #184]	; (80063e0 <USB_SetTurnaroundTime+0x130>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d802      	bhi.n	8006332 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800632c:	230b      	movs	r3, #11
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e036      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a2a      	ldr	r2, [pc, #168]	; (80063e0 <USB_SetTurnaroundTime+0x130>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d906      	bls.n	8006348 <USB_SetTurnaroundTime+0x98>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4a29      	ldr	r2, [pc, #164]	; (80063e4 <USB_SetTurnaroundTime+0x134>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d802      	bhi.n	8006348 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006342:	230a      	movs	r3, #10
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e02b      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4a26      	ldr	r2, [pc, #152]	; (80063e4 <USB_SetTurnaroundTime+0x134>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d906      	bls.n	800635e <USB_SetTurnaroundTime+0xae>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4a25      	ldr	r2, [pc, #148]	; (80063e8 <USB_SetTurnaroundTime+0x138>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d202      	bcs.n	800635e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006358:	2309      	movs	r3, #9
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e020      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <USB_SetTurnaroundTime+0x138>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d306      	bcc.n	8006374 <USB_SetTurnaroundTime+0xc4>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4a20      	ldr	r2, [pc, #128]	; (80063ec <USB_SetTurnaroundTime+0x13c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d802      	bhi.n	8006374 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800636e:	2308      	movs	r3, #8
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	e015      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4a1d      	ldr	r2, [pc, #116]	; (80063ec <USB_SetTurnaroundTime+0x13c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d906      	bls.n	800638a <USB_SetTurnaroundTime+0xda>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4a1c      	ldr	r2, [pc, #112]	; (80063f0 <USB_SetTurnaroundTime+0x140>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d202      	bcs.n	800638a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006384:	2307      	movs	r3, #7
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e00a      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800638a:	2306      	movs	r3, #6
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e007      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006396:	2309      	movs	r3, #9
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e001      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800639c:	2309      	movs	r3, #9
 800639e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	029b      	lsls	r3, r3, #10
 80063b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80063b8:	431a      	orrs	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	00d8acbf 	.word	0x00d8acbf
 80063d0:	00e4e1c0 	.word	0x00e4e1c0
 80063d4:	00f42400 	.word	0x00f42400
 80063d8:	01067380 	.word	0x01067380
 80063dc:	011a499f 	.word	0x011a499f
 80063e0:	01312cff 	.word	0x01312cff
 80063e4:	014ca43f 	.word	0x014ca43f
 80063e8:	016e3600 	.word	0x016e3600
 80063ec:	01a6ab1f 	.word	0x01a6ab1f
 80063f0:	01e84800 	.word	0x01e84800

080063f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f043 0201 	orr.w	r2, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f023 0201 	bic.w	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d115      	bne.n	8006486 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006466:	2001      	movs	r0, #1
 8006468:	f7fb ff26 	bl	80022b8 <HAL_Delay>
      ms++;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3301      	adds	r3, #1
 8006470:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 fa45 	bl	8007902 <USB_GetMode>
 8006478:	4603      	mov	r3, r0
 800647a:	2b01      	cmp	r3, #1
 800647c:	d01e      	beq.n	80064bc <USB_SetCurrentMode+0x84>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b31      	cmp	r3, #49	; 0x31
 8006482:	d9f0      	bls.n	8006466 <USB_SetCurrentMode+0x2e>
 8006484:	e01a      	b.n	80064bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d115      	bne.n	80064b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006498:	2001      	movs	r0, #1
 800649a:	f7fb ff0d 	bl	80022b8 <HAL_Delay>
      ms++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 fa2c 	bl	8007902 <USB_GetMode>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <USB_SetCurrentMode+0x84>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b31      	cmp	r3, #49	; 0x31
 80064b4:	d9f0      	bls.n	8006498 <USB_SetCurrentMode+0x60>
 80064b6:	e001      	b.n	80064bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e005      	b.n	80064c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b32      	cmp	r3, #50	; 0x32
 80064c0:	d101      	bne.n	80064c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064d0:	b084      	sub	sp, #16
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	e009      	b.n	8006504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	3340      	adds	r3, #64	; 0x40
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	2200      	movs	r2, #0
 80064fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3301      	adds	r3, #1
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b0e      	cmp	r3, #14
 8006508:	d9f2      	bls.n	80064f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800650a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11c      	bne.n	800654a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800651e:	f043 0302 	orr.w	r3, r3, #2
 8006522:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38
 8006548:	e00b      	b.n	8006562 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006568:	461a      	mov	r2, r3
 800656a:	2300      	movs	r3, #0
 800656c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006574:	4619      	mov	r1, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657c:	461a      	mov	r2, r3
 800657e:	680b      	ldr	r3, [r1, #0]
 8006580:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	2b01      	cmp	r3, #1
 8006586:	d10c      	bne.n	80065a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d104      	bne.n	8006598 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800658e:	2100      	movs	r1, #0
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f965 	bl	8006860 <USB_SetDevSpeed>
 8006596:	e008      	b.n	80065aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006598:	2101      	movs	r1, #1
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f960 	bl	8006860 <USB_SetDevSpeed>
 80065a0:	e003      	b.n	80065aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065a2:	2103      	movs	r1, #3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f95b 	bl	8006860 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065aa:	2110      	movs	r1, #16
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f8f3 	bl	8006798 <USB_FlushTxFifo>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f91f 	bl	8006800 <USB_FlushRxFifo>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d2:	461a      	mov	r2, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	461a      	mov	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	e043      	b.n	800667e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800660c:	d118      	bne.n	8006640 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	461a      	mov	r2, r3
 8006622:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	e013      	b.n	8006652 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006636:	461a      	mov	r2, r3
 8006638:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	e008      	b.n	8006652 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	461a      	mov	r2, r3
 800664e:	2300      	movs	r3, #0
 8006650:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665e:	461a      	mov	r2, r3
 8006660:	2300      	movs	r3, #0
 8006662:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	461a      	mov	r2, r3
 8006672:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006676:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	3301      	adds	r3, #1
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	429a      	cmp	r2, r3
 8006684:	d3b7      	bcc.n	80065f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006686:	2300      	movs	r3, #0
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	e043      	b.n	8006714 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800669e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a2:	d118      	bne.n	80066d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	461a      	mov	r2, r3
 80066b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	e013      	b.n	80066e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	461a      	mov	r2, r3
 80066ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	e008      	b.n	80066e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	461a      	mov	r2, r3
 80066e4:	2300      	movs	r3, #0
 80066e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f4:	461a      	mov	r2, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006706:	461a      	mov	r2, r3
 8006708:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800670c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3301      	adds	r3, #1
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d3b7      	bcc.n	800668c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800672a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800672e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800673c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f043 0210 	orr.w	r2, r3, #16
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <USB_DevInit+0x2c4>)
 8006756:	4313      	orrs	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800675c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f043 0208 	orr.w	r2, r3, #8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800676e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d107      	bne.n	8006784 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800677c:	f043 0304 	orr.w	r3, r3, #4
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006784:	7dfb      	ldrb	r3, [r7, #23]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006790:	b004      	add	sp, #16
 8006792:	4770      	bx	lr
 8006794:	803c3800 	.word	0x803c3800

08006798 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a13      	ldr	r2, [pc, #76]	; (80067fc <USB_FlushTxFifo+0x64>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d901      	bls.n	80067b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e01b      	b.n	80067f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	daf2      	bge.n	80067a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	019b      	lsls	r3, r3, #6
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a08      	ldr	r2, [pc, #32]	; (80067fc <USB_FlushTxFifo+0x64>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e006      	b.n	80067f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	d0f0      	beq.n	80067d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	00030d40 	.word	0x00030d40

08006800 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a11      	ldr	r2, [pc, #68]	; (800685c <USB_FlushRxFifo+0x5c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e018      	b.n	8006850 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	daf2      	bge.n	800680c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2210      	movs	r2, #16
 800682e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4a08      	ldr	r2, [pc, #32]	; (800685c <USB_FlushRxFifo+0x5c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d901      	bls.n	8006842 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e006      	b.n	8006850 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	2b10      	cmp	r3, #16
 800684c:	d0f0      	beq.n	8006830 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	00030d40 	.word	0x00030d40

08006860 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006880:	4313      	orrs	r3, r2
 8006882:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006892:	b480      	push	{r7}
 8006894:	b087      	sub	sp, #28
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 0306 	and.w	r3, r3, #6
 80068aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]
 80068b6:	e00a      	b.n	80068ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d002      	beq.n	80068c4 <USB_GetDevSpeed+0x32>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b06      	cmp	r3, #6
 80068c2:	d102      	bne.n	80068ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068c4:	2302      	movs	r3, #2
 80068c6:	75fb      	strb	r3, [r7, #23]
 80068c8:	e001      	b.n	80068ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068ca:	230f      	movs	r3, #15
 80068cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d13a      	bne.n	800696e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	2101      	movs	r1, #1
 800690a:	fa01 f303 	lsl.w	r3, r1, r3
 800690e:	b29b      	uxth	r3, r3
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006916:	4313      	orrs	r3, r2
 8006918:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d155      	bne.n	80069dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	791b      	ldrb	r3, [r3, #4]
 800694a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800694c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	059b      	lsls	r3, r3, #22
 8006952:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006954:	4313      	orrs	r3, r2
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	440a      	add	r2, r1
 800695e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	e036      	b.n	80069dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	69da      	ldr	r2, [r3, #28]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	2101      	movs	r1, #1
 8006980:	fa01 f303 	lsl.w	r3, r1, r3
 8006984:	041b      	lsls	r3, r3, #16
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800698c:	4313      	orrs	r3, r2
 800698e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d11a      	bne.n	80069dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	791b      	ldrb	r3, [r3, #4]
 80069c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069c2:	430b      	orrs	r3, r1
 80069c4:	4313      	orrs	r3, r2
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
	...

080069ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d161      	bne.n	8006acc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1e:	d11f      	bne.n	8006a60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	2101      	movs	r1, #1
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a80:	4013      	ands	r3, r2
 8006a82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	2101      	movs	r1, #1
 8006a96:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	0159      	lsls	r1, r3, #5
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	440b      	add	r3, r1
 8006abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4b35      	ldr	r3, [pc, #212]	; (8006b9c <USB_DeactivateEndpoint+0x1b0>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]
 8006aca:	e060      	b.n	8006b8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ae2:	d11f      	bne.n	8006b24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	0151      	lsls	r1, r2, #5
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	440a      	add	r2, r1
 8006afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006afe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 030f 	and.w	r3, r3, #15
 8006b34:	2101      	movs	r1, #1
 8006b36:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3a:	041b      	lsls	r3, r3, #16
 8006b3c:	43db      	mvns	r3, r3
 8006b3e:	68f9      	ldr	r1, [r7, #12]
 8006b40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b44:	4013      	ands	r3, r2
 8006b46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	2101      	movs	r1, #1
 8006b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5e:	041b      	lsls	r3, r3, #16
 8006b60:	43db      	mvns	r3, r3
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b68:	4013      	ands	r3, r2
 8006b6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	0159      	lsls	r1, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	440b      	add	r3, r1
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	4619      	mov	r1, r3
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <USB_DeactivateEndpoint+0x1b4>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	ec337800 	.word	0xec337800
 8006ba0:	eff37800 	.word	0xeff37800

08006ba4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	f040 815c 	bne.w	8006e7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d132      	bne.n	8006c34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	0151      	lsls	r1, r2, #5
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	440a      	add	r2, r1
 8006c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	69fa      	ldr	r2, [r7, #28]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c2c:	0cdb      	lsrs	r3, r3, #19
 8006c2e:	04db      	lsls	r3, r3, #19
 8006c30:	6113      	str	r3, [r2, #16]
 8006c32:	e074      	b.n	8006d1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4e:	0cdb      	lsrs	r3, r3, #19
 8006c50:	04db      	lsls	r3, r3, #19
 8006c52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6999      	ldr	r1, [r3, #24]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	440b      	add	r3, r1
 8006c90:	1e59      	subs	r1, r3, #1
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c9c:	4b9d      	ldr	r3, [pc, #628]	; (8006f14 <USB_EPStartXfer+0x370>)
 8006c9e:	400b      	ands	r3, r1
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	0148      	lsls	r0, r1, #5
 8006ca4:	69f9      	ldr	r1, [r7, #28]
 8006ca6:	4401      	add	r1, r0
 8006ca8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cac:	4313      	orrs	r3, r2
 8006cae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc6:	69b9      	ldr	r1, [r7, #24]
 8006cc8:	0148      	lsls	r0, r1, #5
 8006cca:	69f9      	ldr	r1, [r7, #28]
 8006ccc:	4401      	add	r1, r0
 8006cce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	791b      	ldrb	r3, [r3, #4]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d11f      	bne.n	8006d1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	0151      	lsls	r1, r2, #5
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	440a      	add	r2, r1
 8006cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006cfc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d1e:	79fb      	ldrb	r3, [r7, #7]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d14b      	bne.n	8006dbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d009      	beq.n	8006d40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	791b      	ldrb	r3, [r3, #4]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d128      	bne.n	8006d9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d110      	bne.n	8006d7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	e00f      	b.n	8006d9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	e133      	b.n	8007024 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	791b      	ldrb	r3, [r3, #4]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d015      	beq.n	8006e10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 811b 	beq.w	8007024 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	2101      	movs	r1, #1
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	69f9      	ldr	r1, [r7, #28]
 8006e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	634b      	str	r3, [r1, #52]	; 0x34
 8006e0e:	e109      	b.n	8007024 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d110      	bne.n	8006e42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	e00f      	b.n	8006e62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6919      	ldr	r1, [r3, #16]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	b298      	uxth	r0, r3
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	4603      	mov	r3, r0
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fade 	bl	8007438 <USB_WritePacket>
 8006e7c:	e0d2      	b.n	8007024 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e98:	0cdb      	lsrs	r3, r3, #19
 8006e9a:	04db      	lsls	r3, r3, #19
 8006e9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ec0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d126      	bne.n	8006f18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ee0:	69b9      	ldr	r1, [r7, #24]
 8006ee2:	0148      	lsls	r0, r1, #5
 8006ee4:	69f9      	ldr	r1, [r7, #28]
 8006ee6:	4401      	add	r1, r0
 8006ee8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006eec:	4313      	orrs	r3, r2
 8006eee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	0151      	lsls	r1, r2, #5
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	440a      	add	r2, r1
 8006f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f0e:	6113      	str	r3, [r2, #16]
 8006f10:	e03a      	b.n	8006f88 <USB_EPStartXfer+0x3e4>
 8006f12:	bf00      	nop
 8006f14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	1e5a      	subs	r2, r3, #1
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	8afa      	ldrh	r2, [r7, #22]
 8006f34:	fb03 f202 	mul.w	r2, r3, r2
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	8afb      	ldrh	r3, [r7, #22]
 8006f4c:	04d9      	lsls	r1, r3, #19
 8006f4e:	4b38      	ldr	r3, [pc, #224]	; (8007030 <USB_EPStartXfer+0x48c>)
 8006f50:	400b      	ands	r3, r1
 8006f52:	69b9      	ldr	r1, [r7, #24]
 8006f54:	0148      	lsls	r0, r1, #5
 8006f56:	69f9      	ldr	r1, [r7, #28]
 8006f58:	4401      	add	r1, r0
 8006f5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	0148      	lsls	r0, r1, #5
 8006f7c:	69f9      	ldr	r1, [r7, #28]
 8006f7e:	4401      	add	r1, r0
 8006f80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f84:	4313      	orrs	r3, r2
 8006f86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d10d      	bne.n	8006faa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6919      	ldr	r1, [r3, #16]
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa6:	460a      	mov	r2, r1
 8006fa8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	791b      	ldrb	r3, [r3, #4]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d128      	bne.n	8007004 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d110      	bne.n	8006fe4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	0151      	lsls	r1, r2, #5
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	440a      	add	r2, r1
 8006fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	e00f      	b.n	8007004 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007002:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	440a      	add	r2, r1
 800701a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3720      	adds	r7, #32
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	1ff80000 	.word	0x1ff80000

08007034 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	4613      	mov	r3, r2
 8007040:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	2b01      	cmp	r3, #1
 8007052:	f040 80ce 	bne.w	80071f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d132      	bne.n	80070c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	0151      	lsls	r1, r2, #5
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	440a      	add	r2, r1
 8007074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007078:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800707c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007080:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	440a      	add	r2, r1
 8007098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070bc:	0cdb      	lsrs	r3, r3, #19
 80070be:	04db      	lsls	r3, r3, #19
 80070c0:	6113      	str	r3, [r2, #16]
 80070c2:	e04e      	b.n	8007162 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	0151      	lsls	r1, r2, #5
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	440a      	add	r2, r1
 80070da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070de:	0cdb      	lsrs	r3, r3, #19
 80070e0:	04db      	lsls	r3, r3, #19
 80070e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007102:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007106:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	429a      	cmp	r2, r3
 8007112:	d903      	bls.n	800711c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	0151      	lsls	r1, r2, #5
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	440a      	add	r2, r1
 8007132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007136:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800713a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007148:	691a      	ldr	r2, [r3, #16]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007152:	6939      	ldr	r1, [r7, #16]
 8007154:	0148      	lsls	r0, r1, #5
 8007156:	6979      	ldr	r1, [r7, #20]
 8007158:	4401      	add	r1, r0
 800715a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800715e:	4313      	orrs	r3, r2
 8007160:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d11e      	bne.n	80071a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	461a      	mov	r2, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	e097      	b.n	80072d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	0151      	lsls	r1, r2, #5
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	440a      	add	r2, r1
 80071bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8083 	beq.w	80072d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	f003 030f 	and.w	r3, r3, #15
 80071e0:	2101      	movs	r1, #1
 80071e2:	fa01 f303 	lsl.w	r3, r1, r3
 80071e6:	6979      	ldr	r1, [r7, #20]
 80071e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071ec:	4313      	orrs	r3, r2
 80071ee:	634b      	str	r3, [r1, #52]	; 0x34
 80071f0:	e071      	b.n	80072d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720c:	0cdb      	lsrs	r3, r3, #19
 800720e:	04db      	lsls	r3, r3, #19
 8007210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007230:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007234:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800726c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007284:	6939      	ldr	r1, [r7, #16]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	6979      	ldr	r1, [r7, #20]
 800728a:	4401      	add	r1, r0
 800728c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007290:	4313      	orrs	r3, r2
 8007292:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10d      	bne.n	80072b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	6919      	ldr	r1, [r3, #16]
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	460a      	mov	r2, r1
 80072b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d14a      	bne.n	8007398 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800731a:	f040 8086 	bne.w	800742a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	0151      	lsls	r1, r2, #5
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	440a      	add	r2, r1
 8007338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800733c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007340:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	7812      	ldrb	r2, [r2, #0]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007364:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007372:	4293      	cmp	r3, r2
 8007374:	d902      	bls.n	800737c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
          break;
 800737a:	e056      	b.n	800742a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007394:	d0e7      	beq.n	8007366 <USB_EPStopXfer+0x82>
 8007396:	e048      	b.n	800742a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b0:	d13b      	bne.n	800742a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	7812      	ldrb	r2, [r2, #0]
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	7812      	ldrb	r2, [r2, #0]
 80073ea:	0151      	lsls	r1, r2, #5
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	440a      	add	r2, r1
 80073f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f242 7210 	movw	r2, #10000	; 0x2710
 8007406:	4293      	cmp	r3, r2
 8007408:	d902      	bls.n	8007410 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	75fb      	strb	r3, [r7, #23]
          break;
 800740e:	e00c      	b.n	800742a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007428:	d0e7      	beq.n	80073fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
}
 800742c:	4618      	mov	r0, r3
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007438:	b480      	push	{r7}
 800743a:	b089      	sub	sp, #36	; 0x24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4611      	mov	r1, r2
 8007444:	461a      	mov	r2, r3
 8007446:	460b      	mov	r3, r1
 8007448:	71fb      	strb	r3, [r7, #7]
 800744a:	4613      	mov	r3, r2
 800744c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007456:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d123      	bne.n	80074a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800745e:	88bb      	ldrh	r3, [r7, #4]
 8007460:	3303      	adds	r3, #3
 8007462:	089b      	lsrs	r3, r3, #2
 8007464:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	e018      	b.n	800749e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	031a      	lsls	r2, r3, #12
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	4413      	add	r3, r2
 8007474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007478:	461a      	mov	r2, r3
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	3301      	adds	r3, #1
 8007484:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3301      	adds	r3, #1
 800748a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	3301      	adds	r3, #1
 8007496:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	3301      	adds	r3, #1
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d3e2      	bcc.n	800746c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3724      	adds	r7, #36	; 0x24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b08b      	sub	sp, #44	; 0x2c
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	089b      	lsrs	r3, r3, #2
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	f003 0303 	and.w	r3, r3, #3
 80074d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074da:	2300      	movs	r3, #0
 80074dc:	623b      	str	r3, [r7, #32]
 80074de:	e014      	b.n	800750a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	3301      	adds	r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	3301      	adds	r3, #1
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	3301      	adds	r3, #1
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	3301      	adds	r3, #1
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	3301      	adds	r3, #1
 8007508:	623b      	str	r3, [r7, #32]
 800750a:	6a3a      	ldr	r2, [r7, #32]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	429a      	cmp	r2, r3
 8007510:	d3e6      	bcc.n	80074e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007512:	8bfb      	ldrh	r3, [r7, #30]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01e      	beq.n	8007556 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007522:	461a      	mov	r2, r3
 8007524:	f107 0310 	add.w	r3, r7, #16
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
 8007538:	b2da      	uxtb	r2, r3
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	701a      	strb	r2, [r3, #0]
      i++;
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	3301      	adds	r3, #1
 8007542:	623b      	str	r3, [r7, #32]
      pDest++;
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	3301      	adds	r3, #1
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800754a:	8bfb      	ldrh	r3, [r7, #30]
 800754c:	3b01      	subs	r3, #1
 800754e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007550:	8bfb      	ldrh	r3, [r7, #30]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1ea      	bne.n	800752c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007558:	4618      	mov	r0, r3
 800755a:	372c      	adds	r7, #44	; 0x2c
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d12c      	bne.n	80075da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	db12      	blt.n	80075b8 <USB_EPSetStall+0x54>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00f      	beq.n	80075b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	0151      	lsls	r1, r2, #5
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	440a      	add	r2, r1
 80075ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	0151      	lsls	r1, r2, #5
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	440a      	add	r2, r1
 80075ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	e02b      	b.n	8007632 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	db12      	blt.n	8007612 <USB_EPSetStall+0xae>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00f      	beq.n	8007612 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007610:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	440a      	add	r2, r1
 8007628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800762c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007630:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d128      	bne.n	80076ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	440a      	add	r2, r1
 8007672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800767a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	791b      	ldrb	r3, [r3, #4]
 8007680:	2b03      	cmp	r3, #3
 8007682:	d003      	beq.n	800768c <USB_EPClearStall+0x4c>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	791b      	ldrb	r3, [r3, #4]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d138      	bne.n	80076fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	0151      	lsls	r1, r2, #5
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	440a      	add	r2, r1
 80076a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	e027      	b.n	80076fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	791b      	ldrb	r3, [r3, #4]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d003      	beq.n	80076de <USB_EPClearStall+0x9e>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d10f      	bne.n	80076fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800772a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800772e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007740:	68f9      	ldr	r1, [r7, #12]
 8007742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007746:	4313      	orrs	r3, r2
 8007748:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007786:	f023 0302 	bic.w	r3, r3, #2
 800778a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077b4:	f023 0303 	bic.w	r3, r3, #3
 80077b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077c8:	f043 0302 	orr.w	r3, r3, #2
 80077cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	4013      	ands	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077f4:	68fb      	ldr	r3, [r7, #12]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	4013      	ands	r3, r2
 8007824:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	0c1b      	lsrs	r3, r3, #16
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	4013      	ands	r3, r2
 8007858:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	b29b      	uxth	r3, r3
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800786a:	b480      	push	{r7}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	4013      	ands	r3, r2
 8007896:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007898:	68bb      	ldr	r3, [r7, #8]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b087      	sub	sp, #28
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	fa22 f303 	lsr.w	r3, r2, r3
 80078d6:	01db      	lsls	r3, r3, #7
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4013      	ands	r3, r2
 80078f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078f4:	68bb      	ldr	r3, [r7, #8]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0301 	and.w	r3, r3, #1
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800791e:	b480      	push	{r7}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007938:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800793c:	f023 0307 	bic.w	r3, r3, #7
 8007940:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007954:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	460b      	mov	r3, r1
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	333c      	adds	r3, #60	; 0x3c
 800797a:	3304      	adds	r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <USB_EP0_OutStart+0xb8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d90a      	bls.n	800799e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007998:	d101      	bne.n	800799e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	e037      	b.n	8007a0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a4:	461a      	mov	r2, r3
 80079a6:	2300      	movs	r3, #0
 80079a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079cc:	f043 0318 	orr.w	r3, r3, #24
 80079d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80079e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d10f      	bne.n	8007a0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	4f54300a 	.word	0x4f54300a

08007a20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a13      	ldr	r2, [pc, #76]	; (8007a84 <USB_CoreReset+0x64>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d901      	bls.n	8007a3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e01b      	b.n	8007a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	daf2      	bge.n	8007a2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f043 0201 	orr.w	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <USB_CoreReset+0x64>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d901      	bls.n	8007a68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e006      	b.n	8007a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d0f0      	beq.n	8007a56 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	00030d40 	.word	0x00030d40

08007a88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a98:	f006 ffa4 	bl	800e9e4 <USBD_static_malloc>
 8007a9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d109      	bne.n	8007ab8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	32b0      	adds	r2, #176	; 0xb0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e0d4      	b.n	8007c62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ab8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007abc:	2100      	movs	r1, #0
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f007 ffbc 	bl	800fa3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	32b0      	adds	r2, #176	; 0xb0
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	32b0      	adds	r2, #176	; 0xb0
 8007ade:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7c1b      	ldrb	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d138      	bne.n	8007b62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007af0:	4b5e      	ldr	r3, [pc, #376]	; (8007c6c <USBD_CDC_Init+0x1e4>)
 8007af2:	7819      	ldrb	r1, [r3, #0]
 8007af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007af8:	2202      	movs	r2, #2
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f006 fe4f 	bl	800e79e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b00:	4b5a      	ldr	r3, [pc, #360]	; (8007c6c <USBD_CDC_Init+0x1e4>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	f003 020f 	and.w	r2, r3, #15
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	3324      	adds	r3, #36	; 0x24
 8007b16:	2201      	movs	r2, #1
 8007b18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b1a:	4b55      	ldr	r3, [pc, #340]	; (8007c70 <USBD_CDC_Init+0x1e8>)
 8007b1c:	7819      	ldrb	r1, [r3, #0]
 8007b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b22:	2202      	movs	r2, #2
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f006 fe3a 	bl	800e79e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b2a:	4b51      	ldr	r3, [pc, #324]	; (8007c70 <USBD_CDC_Init+0x1e8>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	f003 020f 	and.w	r2, r3, #15
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b42:	2201      	movs	r2, #1
 8007b44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b46:	4b4b      	ldr	r3, [pc, #300]	; (8007c74 <USBD_CDC_Init+0x1ec>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	f003 020f 	and.w	r2, r3, #15
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	3326      	adds	r3, #38	; 0x26
 8007b5c:	2210      	movs	r2, #16
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	e035      	b.n	8007bce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b62:	4b42      	ldr	r3, [pc, #264]	; (8007c6c <USBD_CDC_Init+0x1e4>)
 8007b64:	7819      	ldrb	r1, [r3, #0]
 8007b66:	2340      	movs	r3, #64	; 0x40
 8007b68:	2202      	movs	r2, #2
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f006 fe17 	bl	800e79e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b70:	4b3e      	ldr	r3, [pc, #248]	; (8007c6c <USBD_CDC_Init+0x1e4>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	f003 020f 	and.w	r2, r3, #15
 8007b78:	6879      	ldr	r1, [r7, #4]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	440b      	add	r3, r1
 8007b84:	3324      	adds	r3, #36	; 0x24
 8007b86:	2201      	movs	r2, #1
 8007b88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b8a:	4b39      	ldr	r3, [pc, #228]	; (8007c70 <USBD_CDC_Init+0x1e8>)
 8007b8c:	7819      	ldrb	r1, [r3, #0]
 8007b8e:	2340      	movs	r3, #64	; 0x40
 8007b90:	2202      	movs	r2, #2
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f006 fe03 	bl	800e79e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b98:	4b35      	ldr	r3, [pc, #212]	; (8007c70 <USBD_CDC_Init+0x1e8>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f003 020f 	and.w	r2, r3, #15
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bb4:	4b2f      	ldr	r3, [pc, #188]	; (8007c74 <USBD_CDC_Init+0x1ec>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	f003 020f 	and.w	r2, r3, #15
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3326      	adds	r3, #38	; 0x26
 8007bca:	2210      	movs	r2, #16
 8007bcc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bce:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <USBD_CDC_Init+0x1ec>)
 8007bd0:	7819      	ldrb	r1, [r3, #0]
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	2203      	movs	r2, #3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f006 fde1 	bl	800e79e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007bdc:	4b25      	ldr	r3, [pc, #148]	; (8007c74 <USBD_CDC_Init+0x1ec>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	f003 020f 	and.w	r2, r3, #15
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	440b      	add	r3, r1
 8007bf0:	3324      	adds	r3, #36	; 0x24
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	33b0      	adds	r3, #176	; 0xb0
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e018      	b.n	8007c62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	7c1b      	ldrb	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10a      	bne.n	8007c4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c38:	4b0d      	ldr	r3, [pc, #52]	; (8007c70 <USBD_CDC_Init+0x1e8>)
 8007c3a:	7819      	ldrb	r1, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f006 fe98 	bl	800e97c <USBD_LL_PrepareReceive>
 8007c4c:	e008      	b.n	8007c60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c4e:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <USBD_CDC_Init+0x1e8>)
 8007c50:	7819      	ldrb	r1, [r3, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f006 fe8e 	bl	800e97c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	2000009f 	.word	0x2000009f
 8007c70:	200000a0 	.word	0x200000a0
 8007c74:	200000a1 	.word	0x200000a1

08007c78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c84:	4b3a      	ldr	r3, [pc, #232]	; (8007d70 <USBD_CDC_DeInit+0xf8>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f006 fdad 	bl	800e7ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c90:	4b37      	ldr	r3, [pc, #220]	; (8007d70 <USBD_CDC_DeInit+0xf8>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	f003 020f 	and.w	r2, r3, #15
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3324      	adds	r3, #36	; 0x24
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007caa:	4b32      	ldr	r3, [pc, #200]	; (8007d74 <USBD_CDC_DeInit+0xfc>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f006 fd9a 	bl	800e7ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007cb6:	4b2f      	ldr	r3, [pc, #188]	; (8007d74 <USBD_CDC_DeInit+0xfc>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	f003 020f 	and.w	r2, r3, #15
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cce:	2200      	movs	r2, #0
 8007cd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007cd2:	4b29      	ldr	r3, [pc, #164]	; (8007d78 <USBD_CDC_DeInit+0x100>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f006 fd86 	bl	800e7ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007cde:	4b26      	ldr	r3, [pc, #152]	; (8007d78 <USBD_CDC_DeInit+0x100>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	f003 020f 	and.w	r2, r3, #15
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	3324      	adds	r3, #36	; 0x24
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007cf8:	4b1f      	ldr	r3, [pc, #124]	; (8007d78 <USBD_CDC_DeInit+0x100>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 020f 	and.w	r2, r3, #15
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	3326      	adds	r3, #38	; 0x26
 8007d0e:	2200      	movs	r2, #0
 8007d10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	32b0      	adds	r2, #176	; 0xb0
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01f      	beq.n	8007d64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	33b0      	adds	r3, #176	; 0xb0
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	32b0      	adds	r2, #176	; 0xb0
 8007d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f006 fe5a 	bl	800ea00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	32b0      	adds	r2, #176	; 0xb0
 8007d56:	2100      	movs	r1, #0
 8007d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	2000009f 	.word	0x2000009f
 8007d74:	200000a0 	.word	0x200000a0
 8007d78:	200000a1 	.word	0x200000a1

08007d7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	32b0      	adds	r2, #176	; 0xb0
 8007d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e0bf      	b.n	8007f2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d050      	beq.n	8007e5a <USBD_CDC_Setup+0xde>
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	f040 80af 	bne.w	8007f1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d03a      	beq.n	8007e3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b25b      	sxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	da1b      	bge.n	8007e08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	33b0      	adds	r3, #176	; 0xb0
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007de6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	88d2      	ldrh	r2, [r2, #6]
 8007dec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	88db      	ldrh	r3, [r3, #6]
 8007df2:	2b07      	cmp	r3, #7
 8007df4:	bf28      	it	cs
 8007df6:	2307      	movcs	r3, #7
 8007df8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	89fa      	ldrh	r2, [r7, #14]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 fd89 	bl	8009918 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e06:	e090      	b.n	8007f2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	785a      	ldrb	r2, [r3, #1]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	2b3f      	cmp	r3, #63	; 0x3f
 8007e18:	d803      	bhi.n	8007e22 <USBD_CDC_Setup+0xa6>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	e000      	b.n	8007e24 <USBD_CDC_Setup+0xa8>
 8007e22:	2240      	movs	r2, #64	; 0x40
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e2a:	6939      	ldr	r1, [r7, #16]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e32:	461a      	mov	r2, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 fd9b 	bl	8009970 <USBD_CtlPrepareRx>
      break;
 8007e3a:	e076      	b.n	8007f2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	33b0      	adds	r3, #176	; 0xb0
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	7850      	ldrb	r0, [r2, #1]
 8007e52:	2200      	movs	r2, #0
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	4798      	blx	r3
      break;
 8007e58:	e067      	b.n	8007f2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	2b0b      	cmp	r3, #11
 8007e60:	d851      	bhi.n	8007f06 <USBD_CDC_Setup+0x18a>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <USBD_CDC_Setup+0xec>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e99 	.word	0x08007e99
 8007e6c:	08007f15 	.word	0x08007f15
 8007e70:	08007f07 	.word	0x08007f07
 8007e74:	08007f07 	.word	0x08007f07
 8007e78:	08007f07 	.word	0x08007f07
 8007e7c:	08007f07 	.word	0x08007f07
 8007e80:	08007f07 	.word	0x08007f07
 8007e84:	08007f07 	.word	0x08007f07
 8007e88:	08007f07 	.word	0x08007f07
 8007e8c:	08007f07 	.word	0x08007f07
 8007e90:	08007ec3 	.word	0x08007ec3
 8007e94:	08007eed 	.word	0x08007eed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d107      	bne.n	8007eb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ea4:	f107 030a 	add.w	r3, r7, #10
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 fd33 	bl	8009918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eb2:	e032      	b.n	8007f1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fcbd 	bl	8009836 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	75fb      	strb	r3, [r7, #23]
          break;
 8007ec0:	e02b      	b.n	8007f1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d107      	bne.n	8007ede <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ece:	f107 030d 	add.w	r3, r7, #13
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 fd1e 	bl	8009918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007edc:	e01d      	b.n	8007f1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 fca8 	bl	8009836 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	75fb      	strb	r3, [r7, #23]
          break;
 8007eea:	e016      	b.n	8007f1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d00f      	beq.n	8007f18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 fc9b 	bl	8009836 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f00:	2303      	movs	r3, #3
 8007f02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f04:	e008      	b.n	8007f18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 fc94 	bl	8009836 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	75fb      	strb	r3, [r7, #23]
          break;
 8007f12:	e002      	b.n	8007f1a <USBD_CDC_Setup+0x19e>
          break;
 8007f14:	bf00      	nop
 8007f16:	e008      	b.n	8007f2a <USBD_CDC_Setup+0x1ae>
          break;
 8007f18:	bf00      	nop
      }
      break;
 8007f1a:	e006      	b.n	8007f2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fc89 	bl	8009836 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f24:	2303      	movs	r3, #3
 8007f26:	75fb      	strb	r3, [r7, #23]
      break;
 8007f28:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	32b0      	adds	r2, #176	; 0xb0
 8007f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e065      	b.n	800802a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	32b0      	adds	r2, #176	; 0xb0
 8007f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	f003 020f 	and.w	r2, r3, #15
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	440b      	add	r3, r1
 8007f80:	3318      	adds	r3, #24
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d02f      	beq.n	8007fe8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	f003 020f 	and.w	r2, r3, #15
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	440b      	add	r3, r1
 8007f9a:	3318      	adds	r3, #24
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	f003 010f 	and.w	r1, r3, #15
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	440b      	add	r3, r1
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4403      	add	r3, r0
 8007fb0:	3348      	adds	r3, #72	; 0x48
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d112      	bne.n	8007fe8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	f003 020f 	and.w	r2, r3, #15
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	3318      	adds	r3, #24
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007fda:	78f9      	ldrb	r1, [r7, #3]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	2200      	movs	r2, #0
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f006 fcaa 	bl	800e93a <USBD_LL_Transmit>
 8007fe6:	e01f      	b.n	8008028 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	33b0      	adds	r3, #176	; 0xb0
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d010      	beq.n	8008028 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	33b0      	adds	r3, #176	; 0xb0
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	32b0      	adds	r2, #176	; 0xb0
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	32b0      	adds	r2, #176	; 0xb0
 8008058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008060:	2303      	movs	r3, #3
 8008062:	e01a      	b.n	800809a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f006 fca8 	bl	800e9be <USBD_LL_GetRxDataSize>
 800806e:	4602      	mov	r2, r0
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	33b0      	adds	r3, #176	; 0xb0
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008094:	4611      	mov	r1, r2
 8008096:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	32b0      	adds	r2, #176	; 0xb0
 80080b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e025      	b.n	8008110 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	33b0      	adds	r3, #176	; 0xb0
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01a      	beq.n	800810e <USBD_CDC_EP0_RxReady+0x6c>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080de:	2bff      	cmp	r3, #255	; 0xff
 80080e0:	d015      	beq.n	800810e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	33b0      	adds	r3, #176	; 0xb0
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80080fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008102:	b292      	uxth	r2, r2
 8008104:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	22ff      	movs	r2, #255	; 0xff
 800810a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008120:	2182      	movs	r1, #130	; 0x82
 8008122:	4818      	ldr	r0, [pc, #96]	; (8008184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008124:	f000 fd4f 	bl	8008bc6 <USBD_GetEpDesc>
 8008128:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800812a:	2101      	movs	r1, #1
 800812c:	4815      	ldr	r0, [pc, #84]	; (8008184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800812e:	f000 fd4a 	bl	8008bc6 <USBD_GetEpDesc>
 8008132:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008134:	2181      	movs	r1, #129	; 0x81
 8008136:	4813      	ldr	r0, [pc, #76]	; (8008184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008138:	f000 fd45 	bl	8008bc6 <USBD_GetEpDesc>
 800813c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2210      	movs	r2, #16
 8008148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d006      	beq.n	800815e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	2200      	movs	r2, #0
 8008154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008158:	711a      	strb	r2, [r3, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d006      	beq.n	8008172 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800816c:	711a      	strb	r2, [r3, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2243      	movs	r2, #67	; 0x43
 8008176:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008178:	4b02      	ldr	r3, [pc, #8]	; (8008184 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	2000005c 	.word	0x2000005c

08008188 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008190:	2182      	movs	r1, #130	; 0x82
 8008192:	4818      	ldr	r0, [pc, #96]	; (80081f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008194:	f000 fd17 	bl	8008bc6 <USBD_GetEpDesc>
 8008198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800819a:	2101      	movs	r1, #1
 800819c:	4815      	ldr	r0, [pc, #84]	; (80081f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800819e:	f000 fd12 	bl	8008bc6 <USBD_GetEpDesc>
 80081a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081a4:	2181      	movs	r1, #129	; 0x81
 80081a6:	4813      	ldr	r0, [pc, #76]	; (80081f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081a8:	f000 fd0d 	bl	8008bc6 <USBD_GetEpDesc>
 80081ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2210      	movs	r2, #16
 80081b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d006      	beq.n	80081ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2200      	movs	r2, #0
 80081c4:	711a      	strb	r2, [r3, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f042 0202 	orr.w	r2, r2, #2
 80081cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d006      	beq.n	80081e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	711a      	strb	r2, [r3, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f042 0202 	orr.w	r2, r2, #2
 80081e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2243      	movs	r2, #67	; 0x43
 80081e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081e8:	4b02      	ldr	r3, [pc, #8]	; (80081f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	2000005c 	.word	0x2000005c

080081f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008200:	2182      	movs	r1, #130	; 0x82
 8008202:	4818      	ldr	r0, [pc, #96]	; (8008264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008204:	f000 fcdf 	bl	8008bc6 <USBD_GetEpDesc>
 8008208:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800820a:	2101      	movs	r1, #1
 800820c:	4815      	ldr	r0, [pc, #84]	; (8008264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800820e:	f000 fcda 	bl	8008bc6 <USBD_GetEpDesc>
 8008212:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008214:	2181      	movs	r1, #129	; 0x81
 8008216:	4813      	ldr	r0, [pc, #76]	; (8008264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008218:	f000 fcd5 	bl	8008bc6 <USBD_GetEpDesc>
 800821c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2210      	movs	r2, #16
 8008228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d006      	beq.n	800823e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	2200      	movs	r2, #0
 8008234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008238:	711a      	strb	r2, [r3, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d006      	beq.n	8008252 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800824c:	711a      	strb	r2, [r3, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2243      	movs	r2, #67	; 0x43
 8008256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008258:	4b02      	ldr	r3, [pc, #8]	; (8008264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	2000005c 	.word	0x2000005c

08008268 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	220a      	movs	r2, #10
 8008274:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008276:	4b03      	ldr	r3, [pc, #12]	; (8008284 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008278:	4618      	mov	r0, r3
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	20000018 	.word	0x20000018

08008288 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008298:	2303      	movs	r3, #3
 800829a:	e009      	b.n	80082b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	33b0      	adds	r3, #176	; 0xb0
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	32b0      	adds	r2, #176	; 0xb0
 80082d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80082de:	2303      	movs	r3, #3
 80082e0:	e008      	b.n	80082f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	32b0      	adds	r2, #176	; 0xb0
 8008314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008318:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008320:	2303      	movs	r3, #3
 8008322:	e004      	b.n	800832e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	32b0      	adds	r2, #176	; 0xb0
 800834e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008352:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	32b0      	adds	r2, #176	; 0xb0
 8008362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800836a:	2303      	movs	r3, #3
 800836c:	e025      	b.n	80083ba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11f      	bne.n	80083b8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2201      	movs	r2, #1
 800837c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008380:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <USBD_CDC_TransmitPacket+0x88>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	f003 020f 	and.w	r2, r3, #15
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4403      	add	r3, r0
 800839a:	3318      	adds	r3, #24
 800839c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800839e:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <USBD_CDC_TransmitPacket+0x88>)
 80083a0:	7819      	ldrb	r1, [r3, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f006 fac3 	bl	800e93a <USBD_LL_Transmit>

    ret = USBD_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	2000009f 	.word	0x2000009f

080083c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	32b0      	adds	r2, #176	; 0xb0
 80083da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	32b0      	adds	r2, #176	; 0xb0
 80083ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e018      	b.n	8008428 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7c1b      	ldrb	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <USBD_CDC_ReceivePacket+0x68>)
 8008400:	7819      	ldrb	r1, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f006 fab5 	bl	800e97c <USBD_LL_PrepareReceive>
 8008412:	e008      	b.n	8008426 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008414:	4b06      	ldr	r3, [pc, #24]	; (8008430 <USBD_CDC_ReceivePacket+0x68>)
 8008416:	7819      	ldrb	r1, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800841e:	2340      	movs	r3, #64	; 0x40
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f006 faab 	bl	800e97c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	200000a0 	.word	0x200000a0

08008434 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	e01f      	b.n	800848c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	79fa      	ldrb	r2, [r7, #7]
 800847e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f006 f925 	bl	800e6d0 <USBD_LL_Init>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]

  return ret;
 800848a:	7dfb      	ldrb	r3, [r7, #23]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e025      	b.n	80084f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32ae      	adds	r2, #174	; 0xae
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00f      	beq.n	80084e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	32ae      	adds	r2, #174	; 0xae
 80084d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	f107 020e 	add.w	r2, r7, #14
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	4602      	mov	r2, r0
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f006 f92d 	bl	800e768 <USBD_LL_Start>
 800850e:	4603      	mov	r3, r0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008520:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008544:	2b00      	cmp	r3, #0
 8008546:	d009      	beq.n	800855c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	4611      	mov	r1, r2
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	460b      	mov	r3, r1
 8008570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	4611      	mov	r1, r2
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800858c:	2303      	movs	r3, #3
 800858e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008590:	7bfb      	ldrb	r3, [r7, #15]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 f908 	bl	80097c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085c0:	461a      	mov	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085ce:	f003 031f 	and.w	r3, r3, #31
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d01a      	beq.n	800860c <USBD_LL_SetupStage+0x72>
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d822      	bhi.n	8008620 <USBD_LL_SetupStage+0x86>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <USBD_LL_SetupStage+0x4a>
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d00a      	beq.n	80085f8 <USBD_LL_SetupStage+0x5e>
 80085e2:	e01d      	b.n	8008620 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fb5f 	bl	8008cb0 <USBD_StdDevReq>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
      break;
 80085f6:	e020      	b.n	800863a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fbc7 	bl	8008d94 <USBD_StdItfReq>
 8008606:	4603      	mov	r3, r0
 8008608:	73fb      	strb	r3, [r7, #15]
      break;
 800860a:	e016      	b.n	800863a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc29 	bl	8008e6c <USBD_StdEPReq>
 800861a:	4603      	mov	r3, r0
 800861c:	73fb      	strb	r3, [r7, #15]
      break;
 800861e:	e00c      	b.n	800863a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008626:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800862a:	b2db      	uxtb	r3, r3
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f006 f8fa 	bl	800e828 <USBD_LL_StallEP>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]
      break;
 8008638:	bf00      	nop
  }

  return ret;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	460b      	mov	r3, r1
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008656:	7afb      	ldrb	r3, [r7, #11]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d16e      	bne.n	800873a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008662:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800866a:	2b03      	cmp	r3, #3
 800866c:	f040 8098 	bne.w	80087a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	429a      	cmp	r2, r3
 800867a:	d913      	bls.n	80086a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	1ad2      	subs	r2, r2, r3
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	4293      	cmp	r3, r2
 8008694:	bf28      	it	cs
 8008696:	4613      	movcs	r3, r2
 8008698:	461a      	mov	r2, r3
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f001 f984 	bl	80099aa <USBD_CtlContinueRx>
 80086a2:	e07d      	b.n	80087a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d014      	beq.n	80086dc <USBD_LL_DataOutStage+0x98>
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d81d      	bhi.n	80086f2 <USBD_LL_DataOutStage+0xae>
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <USBD_LL_DataOutStage+0x7c>
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d003      	beq.n	80086c6 <USBD_LL_DataOutStage+0x82>
 80086be:	e018      	b.n	80086f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	75bb      	strb	r3, [r7, #22]
            break;
 80086c4:	e018      	b.n	80086f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	4619      	mov	r1, r3
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fa5e 	bl	8008b92 <USBD_CoreFindIF>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75bb      	strb	r3, [r7, #22]
            break;
 80086da:	e00d      	b.n	80086f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	4619      	mov	r1, r3
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f000 fa60 	bl	8008bac <USBD_CoreFindEP>
 80086ec:	4603      	mov	r3, r0
 80086ee:	75bb      	strb	r3, [r7, #22]
            break;
 80086f0:	e002      	b.n	80086f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	75bb      	strb	r3, [r7, #22]
            break;
 80086f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80086f8:	7dbb      	ldrb	r3, [r7, #22]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d119      	bne.n	8008732 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b03      	cmp	r3, #3
 8008708:	d113      	bne.n	8008732 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800870a:	7dba      	ldrb	r2, [r7, #22]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	32ae      	adds	r2, #174	; 0xae
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800871a:	7dba      	ldrb	r2, [r7, #22]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008722:	7dba      	ldrb	r2, [r7, #22]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	32ae      	adds	r2, #174	; 0xae
 8008728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f001 f94a 	bl	80099cc <USBD_CtlSendStatus>
 8008738:	e032      	b.n	80087a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800873a:	7afb      	ldrb	r3, [r7, #11]
 800873c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4619      	mov	r1, r3
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fa31 	bl	8008bac <USBD_CoreFindEP>
 800874a:	4603      	mov	r3, r0
 800874c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800874e:	7dbb      	ldrb	r3, [r7, #22]
 8008750:	2bff      	cmp	r3, #255	; 0xff
 8008752:	d025      	beq.n	80087a0 <USBD_LL_DataOutStage+0x15c>
 8008754:	7dbb      	ldrb	r3, [r7, #22]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d122      	bne.n	80087a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b03      	cmp	r3, #3
 8008764:	d117      	bne.n	8008796 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008766:	7dba      	ldrb	r2, [r7, #22]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	32ae      	adds	r2, #174	; 0xae
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00f      	beq.n	8008796 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008776:	7dba      	ldrb	r2, [r7, #22]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800877e:	7dba      	ldrb	r2, [r7, #22]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	32ae      	adds	r2, #174	; 0xae
 8008784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	7afa      	ldrb	r2, [r7, #11]
 800878c:	4611      	mov	r1, r2
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	4798      	blx	r3
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	e000      	b.n	80087a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b086      	sub	sp, #24
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	460b      	mov	r3, r1
 80087b4:	607a      	str	r2, [r7, #4]
 80087b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087b8:	7afb      	ldrb	r3, [r7, #11]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d16f      	bne.n	800889e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3314      	adds	r3, #20
 80087c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d15a      	bne.n	8008884 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d914      	bls.n	8008804 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	1ad2      	subs	r2, r2, r3
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	461a      	mov	r2, r3
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f001 f8ac 	bl	800994e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087f6:	2300      	movs	r3, #0
 80087f8:	2200      	movs	r2, #0
 80087fa:	2100      	movs	r1, #0
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f006 f8bd 	bl	800e97c <USBD_LL_PrepareReceive>
 8008802:	e03f      	b.n	8008884 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	d11c      	bne.n	800884a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008818:	429a      	cmp	r2, r3
 800881a:	d316      	bcc.n	800884a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008826:	429a      	cmp	r2, r3
 8008828:	d20f      	bcs.n	800884a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800882a:	2200      	movs	r2, #0
 800882c:	2100      	movs	r1, #0
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f001 f88d 	bl	800994e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f006 f89a 	bl	800e97c <USBD_LL_PrepareReceive>
 8008848:	e01c      	b.n	8008884 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b03      	cmp	r3, #3
 8008854:	d10f      	bne.n	8008876 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008876:	2180      	movs	r1, #128	; 0x80
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f005 ffd5 	bl	800e828 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 f8b7 	bl	80099f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d03a      	beq.n	8008904 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f7ff fe42 	bl	8008518 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800889c:	e032      	b.n	8008904 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	4619      	mov	r1, r3
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f97f 	bl	8008bac <USBD_CoreFindEP>
 80088ae:	4603      	mov	r3, r0
 80088b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	2bff      	cmp	r3, #255	; 0xff
 80088b6:	d025      	beq.n	8008904 <USBD_LL_DataInStage+0x15a>
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d122      	bne.n	8008904 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d11c      	bne.n	8008904 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80088ca:	7dfa      	ldrb	r2, [r7, #23]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	32ae      	adds	r2, #174	; 0xae
 80088d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d014      	beq.n	8008904 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80088da:	7dfa      	ldrb	r2, [r7, #23]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80088e2:	7dfa      	ldrb	r2, [r7, #23]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	32ae      	adds	r2, #174	; 0xae
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	7afa      	ldrb	r2, [r7, #11]
 80088f0:	4611      	mov	r1, r2
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	4798      	blx	r3
 80088f6:	4603      	mov	r3, r0
 80088f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80088fa:	7dbb      	ldrb	r3, [r7, #22]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008900:	7dbb      	ldrb	r3, [r7, #22]
 8008902:	e000      	b.n	8008906 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008946:	2b00      	cmp	r3, #0
 8008948:	d014      	beq.n	8008974 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00e      	beq.n	8008974 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6852      	ldr	r2, [r2, #4]
 8008962:	b2d2      	uxtb	r2, r2
 8008964:	4611      	mov	r1, r2
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008970:	2303      	movs	r3, #3
 8008972:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008974:	2340      	movs	r3, #64	; 0x40
 8008976:	2200      	movs	r2, #0
 8008978:	2100      	movs	r1, #0
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f005 ff0f 	bl	800e79e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2240      	movs	r2, #64	; 0x40
 800898c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008990:	2340      	movs	r3, #64	; 0x40
 8008992:	2200      	movs	r2, #0
 8008994:	2180      	movs	r1, #128	; 0x80
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f005 ff01 	bl	800e79e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2240      	movs	r2, #64	; 0x40
 80089a6:	621a      	str	r2, [r3, #32]

  return ret;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2204      	movs	r2, #4
 80089ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d106      	bne.n	8008a20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d110      	bne.n	8008a64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00b      	beq.n	8008a64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d005      	beq.n	8008a64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	32ae      	adds	r2, #174	; 0xae
 8008a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e01c      	b.n	8008aca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d115      	bne.n	8008ac8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	32ae      	adds	r2, #174	; 0xae
 8008aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	32ae      	adds	r2, #174	; 0xae
 8008aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	32ae      	adds	r2, #174	; 0xae
 8008ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e01c      	b.n	8008b2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d115      	bne.n	8008b2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	32ae      	adds	r2, #174	; 0xae
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	32ae      	adds	r2, #174	; 0xae
 8008b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	4611      	mov	r1, r2
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00e      	beq.n	8008b88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6852      	ldr	r2, [r2, #4]
 8008b76:	b2d2      	uxtb	r2, r2
 8008b78:	4611      	mov	r1, r2
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008b84:	2303      	movs	r3, #3
 8008b86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b086      	sub	sp, #24
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	885b      	ldrh	r3, [r3, #2]
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d920      	bls.n	8008c30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008bf6:	e013      	b.n	8008c20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008bf8:	f107 030a 	add.w	r3, r7, #10
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6978      	ldr	r0, [r7, #20]
 8008c00:	f000 f81b 	bl	8008c3a <USBD_GetNextDesc>
 8008c04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	785b      	ldrb	r3, [r3, #1]
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	d108      	bne.n	8008c20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	789b      	ldrb	r3, [r3, #2]
 8008c16:	78fa      	ldrb	r2, [r7, #3]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d008      	beq.n	8008c2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	885b      	ldrh	r3, [r3, #2]
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	897b      	ldrh	r3, [r7, #10]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d8e5      	bhi.n	8008bf8 <USBD_GetEpDesc+0x32>
 8008c2c:	e000      	b.n	8008c30 <USBD_GetEpDesc+0x6a>
          break;
 8008c2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c30:	693b      	ldr	r3, [r7, #16]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	881a      	ldrh	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	4413      	add	r3, r2
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c66:	68fb      	ldr	r3, [r7, #12]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c92:	8a3b      	ldrh	r3, [r7, #16]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	b21a      	sxth	r2, r3
 8008c98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	b21b      	sxth	r3, r3
 8008ca0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ca2:	89fb      	ldrh	r3, [r7, #14]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cc6:	2b40      	cmp	r3, #64	; 0x40
 8008cc8:	d005      	beq.n	8008cd6 <USBD_StdDevReq+0x26>
 8008cca:	2b40      	cmp	r3, #64	; 0x40
 8008ccc:	d857      	bhi.n	8008d7e <USBD_StdDevReq+0xce>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00f      	beq.n	8008cf2 <USBD_StdDevReq+0x42>
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	d153      	bne.n	8008d7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	32ae      	adds	r2, #174	; 0xae
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	4798      	blx	r3
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf0:	e04a      	b.n	8008d88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	2b09      	cmp	r3, #9
 8008cf8:	d83b      	bhi.n	8008d72 <USBD_StdDevReq+0xc2>
 8008cfa:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <USBD_StdDevReq+0x50>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d55 	.word	0x08008d55
 8008d04:	08008d69 	.word	0x08008d69
 8008d08:	08008d73 	.word	0x08008d73
 8008d0c:	08008d5f 	.word	0x08008d5f
 8008d10:	08008d73 	.word	0x08008d73
 8008d14:	08008d33 	.word	0x08008d33
 8008d18:	08008d29 	.word	0x08008d29
 8008d1c:	08008d73 	.word	0x08008d73
 8008d20:	08008d4b 	.word	0x08008d4b
 8008d24:	08008d3d 	.word	0x08008d3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa3c 	bl	80091a8 <USBD_GetDescriptor>
          break;
 8008d30:	e024      	b.n	8008d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fba1 	bl	800947c <USBD_SetAddress>
          break;
 8008d3a:	e01f      	b.n	8008d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fbe0 	bl	8009504 <USBD_SetConfig>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]
          break;
 8008d48:	e018      	b.n	8008d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fc83 	bl	8009658 <USBD_GetConfig>
          break;
 8008d52:	e013      	b.n	8008d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fcb4 	bl	80096c4 <USBD_GetStatus>
          break;
 8008d5c:	e00e      	b.n	8008d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fce3 	bl	800972c <USBD_SetFeature>
          break;
 8008d66:	e009      	b.n	8008d7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fd07 	bl	800977e <USBD_ClrFeature>
          break;
 8008d70:	e004      	b.n	8008d7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fd5e 	bl	8009836 <USBD_CtlError>
          break;
 8008d7a:	bf00      	nop
      }
      break;
 8008d7c:	e004      	b.n	8008d88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fd58 	bl	8009836 <USBD_CtlError>
      break;
 8008d86:	bf00      	nop
  }

  return ret;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop

08008d94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008daa:	2b40      	cmp	r3, #64	; 0x40
 8008dac:	d005      	beq.n	8008dba <USBD_StdItfReq+0x26>
 8008dae:	2b40      	cmp	r3, #64	; 0x40
 8008db0:	d852      	bhi.n	8008e58 <USBD_StdItfReq+0xc4>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <USBD_StdItfReq+0x26>
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d14e      	bne.n	8008e58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d840      	bhi.n	8008e4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	889b      	ldrh	r3, [r3, #4]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d836      	bhi.n	8008e40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	889b      	ldrh	r3, [r3, #4]
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7ff fed9 	bl	8008b92 <USBD_CoreFindIF>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	2bff      	cmp	r3, #255	; 0xff
 8008de8:	d01d      	beq.n	8008e26 <USBD_StdItfReq+0x92>
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d11a      	bne.n	8008e26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008df0:	7bba      	ldrb	r2, [r7, #14]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	32ae      	adds	r2, #174	; 0xae
 8008df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00f      	beq.n	8008e20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e00:	7bba      	ldrb	r2, [r7, #14]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e08:	7bba      	ldrb	r2, [r7, #14]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	32ae      	adds	r2, #174	; 0xae
 8008e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	4798      	blx	r3
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e1e:	e004      	b.n	8008e2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e20:	2303      	movs	r3, #3
 8008e22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e24:	e001      	b.n	8008e2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e26:	2303      	movs	r3, #3
 8008e28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	88db      	ldrh	r3, [r3, #6]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d110      	bne.n	8008e54 <USBD_StdItfReq+0xc0>
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10d      	bne.n	8008e54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fdc7 	bl	80099cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e3e:	e009      	b.n	8008e54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fcf7 	bl	8009836 <USBD_CtlError>
          break;
 8008e48:	e004      	b.n	8008e54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fcf2 	bl	8009836 <USBD_CtlError>
          break;
 8008e52:	e000      	b.n	8008e56 <USBD_StdItfReq+0xc2>
          break;
 8008e54:	bf00      	nop
      }
      break;
 8008e56:	e004      	b.n	8008e62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fceb 	bl	8009836 <USBD_CtlError>
      break;
 8008e60:	bf00      	nop
  }

  return ret;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	889b      	ldrh	r3, [r3, #4]
 8008e7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e88:	2b40      	cmp	r3, #64	; 0x40
 8008e8a:	d007      	beq.n	8008e9c <USBD_StdEPReq+0x30>
 8008e8c:	2b40      	cmp	r3, #64	; 0x40
 8008e8e:	f200 817f 	bhi.w	8009190 <USBD_StdEPReq+0x324>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d02a      	beq.n	8008eec <USBD_StdEPReq+0x80>
 8008e96:	2b20      	cmp	r3, #32
 8008e98:	f040 817a 	bne.w	8009190 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff fe83 	bl	8008bac <USBD_CoreFindEP>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eaa:	7b7b      	ldrb	r3, [r7, #13]
 8008eac:	2bff      	cmp	r3, #255	; 0xff
 8008eae:	f000 8174 	beq.w	800919a <USBD_StdEPReq+0x32e>
 8008eb2:	7b7b      	ldrb	r3, [r7, #13]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f040 8170 	bne.w	800919a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008eba:	7b7a      	ldrb	r2, [r7, #13]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008ec2:	7b7a      	ldrb	r2, [r7, #13]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	32ae      	adds	r2, #174	; 0xae
 8008ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 8163 	beq.w	800919a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008ed4:	7b7a      	ldrb	r2, [r7, #13]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	32ae      	adds	r2, #174	; 0xae
 8008eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008eea:	e156      	b.n	800919a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	785b      	ldrb	r3, [r3, #1]
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d008      	beq.n	8008f06 <USBD_StdEPReq+0x9a>
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	f300 8145 	bgt.w	8009184 <USBD_StdEPReq+0x318>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 809b 	beq.w	8009036 <USBD_StdEPReq+0x1ca>
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d03c      	beq.n	8008f7e <USBD_StdEPReq+0x112>
 8008f04:	e13e      	b.n	8009184 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d002      	beq.n	8008f18 <USBD_StdEPReq+0xac>
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d016      	beq.n	8008f44 <USBD_StdEPReq+0xd8>
 8008f16:	e02c      	b.n	8008f72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00d      	beq.n	8008f3a <USBD_StdEPReq+0xce>
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	2b80      	cmp	r3, #128	; 0x80
 8008f22:	d00a      	beq.n	8008f3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f005 fc7d 	bl	800e828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f2e:	2180      	movs	r1, #128	; 0x80
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f005 fc79 	bl	800e828 <USBD_LL_StallEP>
 8008f36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f38:	e020      	b.n	8008f7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fc7a 	bl	8009836 <USBD_CtlError>
              break;
 8008f42:	e01b      	b.n	8008f7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	885b      	ldrh	r3, [r3, #2]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10e      	bne.n	8008f6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <USBD_StdEPReq+0xfe>
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	2b80      	cmp	r3, #128	; 0x80
 8008f56:	d008      	beq.n	8008f6a <USBD_StdEPReq+0xfe>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	88db      	ldrh	r3, [r3, #6]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d104      	bne.n	8008f6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f005 fc5f 	bl	800e828 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fd2e 	bl	80099cc <USBD_CtlSendStatus>

              break;
 8008f70:	e004      	b.n	8008f7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fc5e 	bl	8009836 <USBD_CtlError>
              break;
 8008f7a:	bf00      	nop
          }
          break;
 8008f7c:	e107      	b.n	800918e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d002      	beq.n	8008f90 <USBD_StdEPReq+0x124>
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d016      	beq.n	8008fbc <USBD_StdEPReq+0x150>
 8008f8e:	e04b      	b.n	8009028 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00d      	beq.n	8008fb2 <USBD_StdEPReq+0x146>
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	2b80      	cmp	r3, #128	; 0x80
 8008f9a:	d00a      	beq.n	8008fb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f005 fc41 	bl	800e828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fa6:	2180      	movs	r1, #128	; 0x80
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f005 fc3d 	bl	800e828 <USBD_LL_StallEP>
 8008fae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fb0:	e040      	b.n	8009034 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fc3e 	bl	8009836 <USBD_CtlError>
              break;
 8008fba:	e03b      	b.n	8009034 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	885b      	ldrh	r3, [r3, #2]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d136      	bne.n	8009032 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f005 fc47 	bl	800e866 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fcf7 	bl	80099cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff fde2 	bl	8008bac <USBD_CoreFindEP>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fec:	7b7b      	ldrb	r3, [r7, #13]
 8008fee:	2bff      	cmp	r3, #255	; 0xff
 8008ff0:	d01f      	beq.n	8009032 <USBD_StdEPReq+0x1c6>
 8008ff2:	7b7b      	ldrb	r3, [r7, #13]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d11c      	bne.n	8009032 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ff8:	7b7a      	ldrb	r2, [r7, #13]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009000:	7b7a      	ldrb	r2, [r7, #13]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	32ae      	adds	r2, #174	; 0xae
 8009006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d010      	beq.n	8009032 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009010:	7b7a      	ldrb	r2, [r7, #13]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	32ae      	adds	r2, #174	; 0xae
 8009016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	4798      	blx	r3
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009026:	e004      	b.n	8009032 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fc03 	bl	8009836 <USBD_CtlError>
              break;
 8009030:	e000      	b.n	8009034 <USBD_StdEPReq+0x1c8>
              break;
 8009032:	bf00      	nop
          }
          break;
 8009034:	e0ab      	b.n	800918e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d002      	beq.n	8009048 <USBD_StdEPReq+0x1dc>
 8009042:	2b03      	cmp	r3, #3
 8009044:	d032      	beq.n	80090ac <USBD_StdEPReq+0x240>
 8009046:	e097      	b.n	8009178 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d007      	beq.n	800905e <USBD_StdEPReq+0x1f2>
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b80      	cmp	r3, #128	; 0x80
 8009052:	d004      	beq.n	800905e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fbed 	bl	8009836 <USBD_CtlError>
                break;
 800905c:	e091      	b.n	8009182 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800905e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009062:	2b00      	cmp	r3, #0
 8009064:	da0b      	bge.n	800907e <USBD_StdEPReq+0x212>
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	3310      	adds	r3, #16
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	3304      	adds	r3, #4
 800907c:	e00b      	b.n	8009096 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	4413      	add	r3, r2
 8009094:	3304      	adds	r3, #4
 8009096:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2202      	movs	r2, #2
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fc37 	bl	8009918 <USBD_CtlSendData>
              break;
 80090aa:	e06a      	b.n	8009182 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	da11      	bge.n	80090d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	f003 020f 	and.w	r2, r3, #15
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	4613      	mov	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	3324      	adds	r3, #36	; 0x24
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d117      	bne.n	80090fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fbb0 	bl	8009836 <USBD_CtlError>
                  break;
 80090d6:	e054      	b.n	8009182 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	f003 020f 	and.w	r2, r3, #15
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d104      	bne.n	80090fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fb9d 	bl	8009836 <USBD_CtlError>
                  break;
 80090fc:	e041      	b.n	8009182 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009102:	2b00      	cmp	r3, #0
 8009104:	da0b      	bge.n	800911e <USBD_StdEPReq+0x2b2>
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800910c:	4613      	mov	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	3310      	adds	r3, #16
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	4413      	add	r3, r2
 800911a:	3304      	adds	r3, #4
 800911c:	e00b      	b.n	8009136 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	4413      	add	r3, r2
 8009134:	3304      	adds	r3, #4
 8009136:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009138:	7bbb      	ldrb	r3, [r7, #14]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <USBD_StdEPReq+0x2d8>
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b80      	cmp	r3, #128	; 0x80
 8009142:	d103      	bne.n	800914c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	e00e      	b.n	800916a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f005 fba7 	bl	800e8a4 <USBD_LL_IsStallEP>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2201      	movs	r2, #1
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	e002      	b.n	800916a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2202      	movs	r2, #2
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fbd1 	bl	8009918 <USBD_CtlSendData>
              break;
 8009176:	e004      	b.n	8009182 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fb5b 	bl	8009836 <USBD_CtlError>
              break;
 8009180:	bf00      	nop
          }
          break;
 8009182:	e004      	b.n	800918e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fb55 	bl	8009836 <USBD_CtlError>
          break;
 800918c:	bf00      	nop
      }
      break;
 800918e:	e005      	b.n	800919c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb4f 	bl	8009836 <USBD_CtlError>
      break;
 8009198:	e000      	b.n	800919c <USBD_StdEPReq+0x330>
      break;
 800919a:	bf00      	nop
  }

  return ret;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091ba:	2300      	movs	r3, #0
 80091bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	0a1b      	lsrs	r3, r3, #8
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	3b01      	subs	r3, #1
 80091c8:	2b06      	cmp	r3, #6
 80091ca:	f200 8128 	bhi.w	800941e <USBD_GetDescriptor+0x276>
 80091ce:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <USBD_GetDescriptor+0x2c>)
 80091d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d4:	080091f1 	.word	0x080091f1
 80091d8:	08009209 	.word	0x08009209
 80091dc:	08009249 	.word	0x08009249
 80091e0:	0800941f 	.word	0x0800941f
 80091e4:	0800941f 	.word	0x0800941f
 80091e8:	080093bf 	.word	0x080093bf
 80091ec:	080093eb 	.word	0x080093eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 0108 	add.w	r1, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
      break;
 8009206:	e112      	b.n	800942e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	7c1b      	ldrb	r3, [r3, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10d      	bne.n	800922c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	f107 0208 	add.w	r2, r7, #8
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	2202      	movs	r2, #2
 8009228:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800922a:	e100      	b.n	800942e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	f107 0208 	add.w	r2, r7, #8
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
 800923c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	3301      	adds	r3, #1
 8009242:	2202      	movs	r2, #2
 8009244:	701a      	strb	r2, [r3, #0]
      break;
 8009246:	e0f2      	b.n	800942e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	885b      	ldrh	r3, [r3, #2]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b05      	cmp	r3, #5
 8009250:	f200 80ac 	bhi.w	80093ac <USBD_GetDescriptor+0x204>
 8009254:	a201      	add	r2, pc, #4	; (adr r2, 800925c <USBD_GetDescriptor+0xb4>)
 8009256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925a:	bf00      	nop
 800925c:	08009275 	.word	0x08009275
 8009260:	080092a9 	.word	0x080092a9
 8009264:	080092dd 	.word	0x080092dd
 8009268:	08009311 	.word	0x08009311
 800926c:	08009345 	.word	0x08009345
 8009270:	08009379 	.word	0x08009379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009296:	e091      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 facb 	bl	8009836 <USBD_CtlError>
            err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
          break;
 80092a6:	e089      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00b      	beq.n	80092cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7c12      	ldrb	r2, [r2, #16]
 80092c0:	f107 0108 	add.w	r1, r7, #8
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ca:	e077      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fab1 	bl	8009836 <USBD_CtlError>
            err++;
 80092d4:	7afb      	ldrb	r3, [r7, #11]
 80092d6:	3301      	adds	r3, #1
 80092d8:	72fb      	strb	r3, [r7, #11]
          break;
 80092da:	e06f      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	7c12      	ldrb	r2, [r2, #16]
 80092f4:	f107 0108 	add.w	r1, r7, #8
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
 80092fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fe:	e05d      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa97 	bl	8009836 <USBD_CtlError>
            err++;
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	3301      	adds	r3, #1
 800930c:	72fb      	strb	r3, [r7, #11]
          break;
 800930e:	e055      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	7c12      	ldrb	r2, [r2, #16]
 8009328:	f107 0108 	add.w	r1, r7, #8
 800932c:	4610      	mov	r0, r2
 800932e:	4798      	blx	r3
 8009330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009332:	e043      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa7d 	bl	8009836 <USBD_CtlError>
            err++;
 800933c:	7afb      	ldrb	r3, [r7, #11]
 800933e:	3301      	adds	r3, #1
 8009340:	72fb      	strb	r3, [r7, #11]
          break;
 8009342:	e03b      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00b      	beq.n	8009368 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	7c12      	ldrb	r2, [r2, #16]
 800935c:	f107 0108 	add.w	r1, r7, #8
 8009360:	4610      	mov	r0, r2
 8009362:	4798      	blx	r3
 8009364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009366:	e029      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fa63 	bl	8009836 <USBD_CtlError>
            err++;
 8009370:	7afb      	ldrb	r3, [r7, #11]
 8009372:	3301      	adds	r3, #1
 8009374:	72fb      	strb	r3, [r7, #11]
          break;
 8009376:	e021      	b.n	80093bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00b      	beq.n	800939c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	7c12      	ldrb	r2, [r2, #16]
 8009390:	f107 0108 	add.w	r1, r7, #8
 8009394:	4610      	mov	r0, r2
 8009396:	4798      	blx	r3
 8009398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800939a:	e00f      	b.n	80093bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fa49 	bl	8009836 <USBD_CtlError>
            err++;
 80093a4:	7afb      	ldrb	r3, [r7, #11]
 80093a6:	3301      	adds	r3, #1
 80093a8:	72fb      	strb	r3, [r7, #11]
          break;
 80093aa:	e007      	b.n	80093bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa41 	bl	8009836 <USBD_CtlError>
          err++;
 80093b4:	7afb      	ldrb	r3, [r7, #11]
 80093b6:	3301      	adds	r3, #1
 80093b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093ba:	bf00      	nop
      }
      break;
 80093bc:	e037      	b.n	800942e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	7c1b      	ldrb	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ce:	f107 0208 	add.w	r2, r7, #8
 80093d2:	4610      	mov	r0, r2
 80093d4:	4798      	blx	r3
 80093d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093d8:	e029      	b.n	800942e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fa2a 	bl	8009836 <USBD_CtlError>
        err++;
 80093e2:	7afb      	ldrb	r3, [r7, #11]
 80093e4:	3301      	adds	r3, #1
 80093e6:	72fb      	strb	r3, [r7, #11]
      break;
 80093e8:	e021      	b.n	800942e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7c1b      	ldrb	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10d      	bne.n	800940e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	f107 0208 	add.w	r2, r7, #8
 80093fe:	4610      	mov	r0, r2
 8009400:	4798      	blx	r3
 8009402:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	2207      	movs	r2, #7
 800940a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800940c:	e00f      	b.n	800942e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fa10 	bl	8009836 <USBD_CtlError>
        err++;
 8009416:	7afb      	ldrb	r3, [r7, #11]
 8009418:	3301      	adds	r3, #1
 800941a:	72fb      	strb	r3, [r7, #11]
      break;
 800941c:	e007      	b.n	800942e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fa08 	bl	8009836 <USBD_CtlError>
      err++;
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	3301      	adds	r3, #1
 800942a:	72fb      	strb	r3, [r7, #11]
      break;
 800942c:	bf00      	nop
  }

  if (err != 0U)
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d11e      	bne.n	8009472 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	88db      	ldrh	r3, [r3, #6]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d016      	beq.n	800946a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800943c:	893b      	ldrh	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00e      	beq.n	8009460 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	88da      	ldrh	r2, [r3, #6]
 8009446:	893b      	ldrh	r3, [r7, #8]
 8009448:	4293      	cmp	r3, r2
 800944a:	bf28      	it	cs
 800944c:	4613      	movcs	r3, r2
 800944e:	b29b      	uxth	r3, r3
 8009450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009452:	893b      	ldrh	r3, [r7, #8]
 8009454:	461a      	mov	r2, r3
 8009456:	68f9      	ldr	r1, [r7, #12]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fa5d 	bl	8009918 <USBD_CtlSendData>
 800945e:	e009      	b.n	8009474 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f9e7 	bl	8009836 <USBD_CtlError>
 8009468:	e004      	b.n	8009474 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 faae 	bl	80099cc <USBD_CtlSendStatus>
 8009470:	e000      	b.n	8009474 <USBD_GetDescriptor+0x2cc>
    return;
 8009472:	bf00      	nop
  }
}
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop

0800947c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	889b      	ldrh	r3, [r3, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d131      	bne.n	80094f2 <USBD_SetAddress+0x76>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	88db      	ldrh	r3, [r3, #6]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d12d      	bne.n	80094f2 <USBD_SetAddress+0x76>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	885b      	ldrh	r3, [r3, #2]
 800949a:	2b7f      	cmp	r3, #127	; 0x7f
 800949c:	d829      	bhi.n	80094f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d104      	bne.n	80094c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f9bc 	bl	8009836 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094be:	e01d      	b.n	80094fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7bfa      	ldrb	r2, [r7, #15]
 80094c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f005 fa15 	bl	800e8fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa7a 	bl	80099cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d004      	beq.n	80094e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2202      	movs	r2, #2
 80094e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e6:	e009      	b.n	80094fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f0:	e004      	b.n	80094fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f99e 	bl	8009836 <USBD_CtlError>
  }
}
 80094fa:	bf00      	nop
 80094fc:	bf00      	nop
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	885b      	ldrh	r3, [r3, #2]
 8009516:	b2da      	uxtb	r2, r3
 8009518:	4b4e      	ldr	r3, [pc, #312]	; (8009654 <USBD_SetConfig+0x150>)
 800951a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800951c:	4b4d      	ldr	r3, [pc, #308]	; (8009654 <USBD_SetConfig+0x150>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d905      	bls.n	8009530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f985 	bl	8009836 <USBD_CtlError>
    return USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	e08c      	b.n	800964a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2b02      	cmp	r3, #2
 800953a:	d002      	beq.n	8009542 <USBD_SetConfig+0x3e>
 800953c:	2b03      	cmp	r3, #3
 800953e:	d029      	beq.n	8009594 <USBD_SetConfig+0x90>
 8009540:	e075      	b.n	800962e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009542:	4b44      	ldr	r3, [pc, #272]	; (8009654 <USBD_SetConfig+0x150>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d020      	beq.n	800958c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800954a:	4b42      	ldr	r3, [pc, #264]	; (8009654 <USBD_SetConfig+0x150>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009554:	4b3f      	ldr	r3, [pc, #252]	; (8009654 <USBD_SetConfig+0x150>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7fe ffe7 	bl	800852e <USBD_SetClassConfig>
 8009560:	4603      	mov	r3, r0
 8009562:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d008      	beq.n	800957c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f962 	bl	8009836 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2202      	movs	r2, #2
 8009576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800957a:	e065      	b.n	8009648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fa25 	bl	80099cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2203      	movs	r2, #3
 8009586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800958a:	e05d      	b.n	8009648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa1d 	bl	80099cc <USBD_CtlSendStatus>
      break;
 8009592:	e059      	b.n	8009648 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009594:	4b2f      	ldr	r3, [pc, #188]	; (8009654 <USBD_SetConfig+0x150>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d112      	bne.n	80095c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095a4:	4b2b      	ldr	r3, [pc, #172]	; (8009654 <USBD_SetConfig+0x150>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ae:	4b29      	ldr	r3, [pc, #164]	; (8009654 <USBD_SetConfig+0x150>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7fe ffd6 	bl	8008566 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fa06 	bl	80099cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095c0:	e042      	b.n	8009648 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80095c2:	4b24      	ldr	r3, [pc, #144]	; (8009654 <USBD_SetConfig+0x150>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d02a      	beq.n	8009626 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7fe ffc4 	bl	8008566 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095de:	4b1d      	ldr	r3, [pc, #116]	; (8009654 <USBD_SetConfig+0x150>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095e8:	4b1a      	ldr	r3, [pc, #104]	; (8009654 <USBD_SetConfig+0x150>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fe ff9d 	bl	800852e <USBD_SetClassConfig>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00f      	beq.n	800961e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f918 	bl	8009836 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7fe ffa9 	bl	8008566 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2202      	movs	r2, #2
 8009618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800961c:	e014      	b.n	8009648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f9d4 	bl	80099cc <USBD_CtlSendStatus>
      break;
 8009624:	e010      	b.n	8009648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f9d0 	bl	80099cc <USBD_CtlSendStatus>
      break;
 800962c:	e00c      	b.n	8009648 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f900 	bl	8009836 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009636:	4b07      	ldr	r3, [pc, #28]	; (8009654 <USBD_SetConfig+0x150>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7fe ff92 	bl	8008566 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009642:	2303      	movs	r3, #3
 8009644:	73fb      	strb	r3, [r7, #15]
      break;
 8009646:	bf00      	nop
  }

  return ret;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	200010f0 	.word	0x200010f0

08009658 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	88db      	ldrh	r3, [r3, #6]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d004      	beq.n	8009674 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f8e2 	bl	8009836 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009672:	e023      	b.n	80096bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b02      	cmp	r3, #2
 800967e:	dc02      	bgt.n	8009686 <USBD_GetConfig+0x2e>
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc03      	bgt.n	800968c <USBD_GetConfig+0x34>
 8009684:	e015      	b.n	80096b2 <USBD_GetConfig+0x5a>
 8009686:	2b03      	cmp	r3, #3
 8009688:	d00b      	beq.n	80096a2 <USBD_GetConfig+0x4a>
 800968a:	e012      	b.n	80096b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3308      	adds	r3, #8
 8009696:	2201      	movs	r2, #1
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f93c 	bl	8009918 <USBD_CtlSendData>
        break;
 80096a0:	e00c      	b.n	80096bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3304      	adds	r3, #4
 80096a6:	2201      	movs	r2, #1
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f934 	bl	8009918 <USBD_CtlSendData>
        break;
 80096b0:	e004      	b.n	80096bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8be 	bl	8009836 <USBD_CtlError>
        break;
 80096ba:	bf00      	nop
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d81e      	bhi.n	800971a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	88db      	ldrh	r3, [r3, #6]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d004      	beq.n	80096ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8a5 	bl	8009836 <USBD_CtlError>
        break;
 80096ec:	e01a      	b.n	8009724 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2201      	movs	r2, #1
 80096f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	f043 0202 	orr.w	r2, r3, #2
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	330c      	adds	r3, #12
 800970e:	2202      	movs	r2, #2
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f900 	bl	8009918 <USBD_CtlSendData>
      break;
 8009718:	e004      	b.n	8009724 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f88a 	bl	8009836 <USBD_CtlError>
      break;
 8009722:	bf00      	nop
  }
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d107      	bne.n	800974e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f940 	bl	80099cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800974c:	e013      	b.n	8009776 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	885b      	ldrh	r3, [r3, #2]
 8009752:	2b02      	cmp	r3, #2
 8009754:	d10b      	bne.n	800976e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	889b      	ldrh	r3, [r3, #4]
 800975a:	0a1b      	lsrs	r3, r3, #8
 800975c:	b29b      	uxth	r3, r3
 800975e:	b2da      	uxtb	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f930 	bl	80099cc <USBD_CtlSendStatus>
}
 800976c:	e003      	b.n	8009776 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f860 	bl	8009836 <USBD_CtlError>
}
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978e:	b2db      	uxtb	r3, r3
 8009790:	3b01      	subs	r3, #1
 8009792:	2b02      	cmp	r3, #2
 8009794:	d80b      	bhi.n	80097ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	885b      	ldrh	r3, [r3, #2]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d10c      	bne.n	80097b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f910 	bl	80099cc <USBD_CtlSendStatus>
      }
      break;
 80097ac:	e004      	b.n	80097b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f840 	bl	8009836 <USBD_CtlError>
      break;
 80097b6:	e000      	b.n	80097ba <USBD_ClrFeature+0x3c>
      break;
 80097b8:	bf00      	nop
  }
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	781a      	ldrb	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3301      	adds	r3, #1
 80097ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f7ff fa41 	bl	8008c74 <SWAPBYTE>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3301      	adds	r3, #1
 8009804:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7ff fa34 	bl	8008c74 <SWAPBYTE>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3301      	adds	r3, #1
 8009818:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3301      	adds	r3, #1
 800981e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f7ff fa27 	bl	8008c74 <SWAPBYTE>
 8009826:	4603      	mov	r3, r0
 8009828:	461a      	mov	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	80da      	strh	r2, [r3, #6]
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009840:	2180      	movs	r1, #128	; 0x80
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f004 fff0 	bl	800e828 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009848:	2100      	movs	r1, #0
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f004 ffec 	bl	800e828 <USBD_LL_StallEP>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d036      	beq.n	80098dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009872:	6938      	ldr	r0, [r7, #16]
 8009874:	f000 f836 	bl	80098e4 <USBD_GetLen>
 8009878:	4603      	mov	r3, r0
 800987a:	3301      	adds	r3, #1
 800987c:	b29b      	uxth	r3, r3
 800987e:	005b      	lsls	r3, r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	4413      	add	r3, r2
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	7812      	ldrb	r2, [r2, #0]
 8009890:	701a      	strb	r2, [r3, #0]
  idx++;
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	3301      	adds	r3, #1
 8009896:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	4413      	add	r3, r2
 800989e:	2203      	movs	r2, #3
 80098a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	3301      	adds	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098a8:	e013      	b.n	80098d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	4413      	add	r3, r2
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	7812      	ldrb	r2, [r2, #0]
 80098b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	3301      	adds	r3, #1
 80098ba:	613b      	str	r3, [r7, #16]
    idx++;
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	3301      	adds	r3, #1
 80098c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	4413      	add	r3, r2
 80098c8:	2200      	movs	r2, #0
 80098ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
 80098ce:	3301      	adds	r3, #1
 80098d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e7      	bne.n	80098aa <USBD_GetString+0x52>
 80098da:	e000      	b.n	80098de <USBD_GetString+0x86>
    return;
 80098dc:	bf00      	nop
  }
}
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098f4:	e005      	b.n	8009902 <USBD_GetLen+0x1e>
  {
    len++;
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	3301      	adds	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	3301      	adds	r3, #1
 8009900:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f5      	bne.n	80098f6 <USBD_GetLen+0x12>
  }

  return len;
 800990a:	7bfb      	ldrb	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3714      	adds	r7, #20
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2202      	movs	r2, #2
 8009928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	2100      	movs	r1, #0
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f004 fffb 	bl	800e93a <USBD_LL_Transmit>

  return USBD_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	2100      	movs	r1, #0
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f004 ffea 	bl	800e93a <USBD_LL_Transmit>

  return USBD_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2203      	movs	r2, #3
 8009980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	2100      	movs	r1, #0
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f004 ffee 	bl	800e97c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	2100      	movs	r1, #0
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f004 ffdd 	bl	800e97c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2204      	movs	r2, #4
 80099d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099dc:	2300      	movs	r3, #0
 80099de:	2200      	movs	r2, #0
 80099e0:	2100      	movs	r1, #0
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f004 ffa9 	bl	800e93a <USBD_LL_Transmit>

  return USBD_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2205      	movs	r2, #5
 80099fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a02:	2300      	movs	r3, #0
 8009a04:	2200      	movs	r2, #0
 8009a06:	2100      	movs	r1, #0
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f004 ffb7 	bl	800e97c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <__NVIC_SetPriority>:
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	6039      	str	r1, [r7, #0]
 8009a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	db0a      	blt.n	8009a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	490c      	ldr	r1, [pc, #48]	; (8009a64 <__NVIC_SetPriority+0x4c>)
 8009a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a36:	0112      	lsls	r2, r2, #4
 8009a38:	b2d2      	uxtb	r2, r2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a40:	e00a      	b.n	8009a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	4908      	ldr	r1, [pc, #32]	; (8009a68 <__NVIC_SetPriority+0x50>)
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	f003 030f 	and.w	r3, r3, #15
 8009a4e:	3b04      	subs	r3, #4
 8009a50:	0112      	lsls	r2, r2, #4
 8009a52:	b2d2      	uxtb	r2, r2
 8009a54:	440b      	add	r3, r1
 8009a56:	761a      	strb	r2, [r3, #24]
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	e000e100 	.word	0xe000e100
 8009a68:	e000ed00 	.word	0xe000ed00

08009a6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a70:	2100      	movs	r1, #0
 8009a72:	f06f 0004 	mvn.w	r0, #4
 8009a76:	f7ff ffcf 	bl	8009a18 <__NVIC_SetPriority>
#endif
}
 8009a7a:	bf00      	nop
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a86:	f3ef 8305 	mrs	r3, IPSR
 8009a8a:	603b      	str	r3, [r7, #0]
  return(result);
 8009a8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a92:	f06f 0305 	mvn.w	r3, #5
 8009a96:	607b      	str	r3, [r7, #4]
 8009a98:	e00c      	b.n	8009ab4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a9a:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <osKernelInitialize+0x44>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d105      	bne.n	8009aae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009aa2:	4b08      	ldr	r3, [pc, #32]	; (8009ac4 <osKernelInitialize+0x44>)
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	607b      	str	r3, [r7, #4]
 8009aac:	e002      	b.n	8009ab4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ab2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ab4:	687b      	ldr	r3, [r7, #4]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	200010f4 	.word	0x200010f4

08009ac8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ace:	f3ef 8305 	mrs	r3, IPSR
 8009ad2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ad4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009ada:	f06f 0305 	mvn.w	r3, #5
 8009ade:	607b      	str	r3, [r7, #4]
 8009ae0:	e010      	b.n	8009b04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ae2:	4b0b      	ldr	r3, [pc, #44]	; (8009b10 <osKernelStart+0x48>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d109      	bne.n	8009afe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009aea:	f7ff ffbf 	bl	8009a6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009aee:	4b08      	ldr	r3, [pc, #32]	; (8009b10 <osKernelStart+0x48>)
 8009af0:	2202      	movs	r2, #2
 8009af2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009af4:	f001 fef8 	bl	800b8e8 <vTaskStartScheduler>
      stat = osOK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	607b      	str	r3, [r7, #4]
 8009afc:	e002      	b.n	8009b04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b04:	687b      	ldr	r3, [r7, #4]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	200010f4 	.word	0x200010f4

08009b14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08e      	sub	sp, #56	; 0x38
 8009b18:	af04      	add	r7, sp, #16
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b24:	f3ef 8305 	mrs	r3, IPSR
 8009b28:	617b      	str	r3, [r7, #20]
  return(result);
 8009b2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d17e      	bne.n	8009c2e <osThreadNew+0x11a>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d07b      	beq.n	8009c2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b36:	2380      	movs	r3, #128	; 0x80
 8009b38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b3a:	2318      	movs	r3, #24
 8009b3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d045      	beq.n	8009bda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <osThreadNew+0x48>
        name = attr->name;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d008      	beq.n	8009b82 <osThreadNew+0x6e>
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	2b38      	cmp	r3, #56	; 0x38
 8009b74:	d805      	bhi.n	8009b82 <osThreadNew+0x6e>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <osThreadNew+0x72>
        return (NULL);
 8009b82:	2300      	movs	r3, #0
 8009b84:	e054      	b.n	8009c30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	089b      	lsrs	r3, r3, #2
 8009b94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <osThreadNew+0xa8>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	2bcb      	cmp	r3, #203	; 0xcb
 8009ba4:	d90a      	bls.n	8009bbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d006      	beq.n	8009bbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <osThreadNew+0xa8>
        mem = 1;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	61bb      	str	r3, [r7, #24]
 8009bba:	e010      	b.n	8009bde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10c      	bne.n	8009bde <osThreadNew+0xca>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d108      	bne.n	8009bde <osThreadNew+0xca>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d104      	bne.n	8009bde <osThreadNew+0xca>
          mem = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	61bb      	str	r3, [r7, #24]
 8009bd8:	e001      	b.n	8009bde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d110      	bne.n	8009c06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bec:	9202      	str	r2, [sp, #8]
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	6a3a      	ldr	r2, [r7, #32]
 8009bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f001 fb1c 	bl	800b238 <xTaskCreateStatic>
 8009c00:	4603      	mov	r3, r0
 8009c02:	613b      	str	r3, [r7, #16]
 8009c04:	e013      	b.n	8009c2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d110      	bne.n	8009c2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	f107 0310 	add.w	r3, r7, #16
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f001 fb67 	bl	800b2f2 <xTaskCreate>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d001      	beq.n	8009c2e <osThreadNew+0x11a>
            hTask = NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c2e:	693b      	ldr	r3, [r7, #16]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3728      	adds	r7, #40	; 0x28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4a07      	ldr	r2, [pc, #28]	; (8009c64 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	4a06      	ldr	r2, [pc, #24]	; (8009c68 <vApplicationGetIdleTaskMemory+0x30>)
 8009c4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2280      	movs	r2, #128	; 0x80
 8009c54:	601a      	str	r2, [r3, #0]
}
 8009c56:	bf00      	nop
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	200010f8 	.word	0x200010f8
 8009c68:	200011c4 	.word	0x200011c4

08009c6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4a07      	ldr	r2, [pc, #28]	; (8009c98 <vApplicationGetTimerTaskMemory+0x2c>)
 8009c7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	4a06      	ldr	r2, [pc, #24]	; (8009c9c <vApplicationGetTimerTaskMemory+0x30>)
 8009c82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c8a:	601a      	str	r2, [r3, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	200013c4 	.word	0x200013c4
 8009c9c:	20001490 	.word	0x20001490

08009ca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f103 0208 	add.w	r2, r3, #8
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f103 0208 	add.w	r2, r3, #8
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f103 0208 	add.w	r2, r3, #8
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009cee:	bf00      	nop
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b085      	sub	sp, #20
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	601a      	str	r2, [r3, #0]
}
 8009d36:	bf00      	nop
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d58:	d103      	bne.n	8009d62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e00c      	b.n	8009d7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	3308      	adds	r3, #8
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	e002      	b.n	8009d70 <vListInsert+0x2e>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d2f6      	bcs.n	8009d6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	601a      	str	r2, [r3, #0]
}
 8009da8:	bf00      	nop
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	6892      	ldr	r2, [r2, #8]
 8009dca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	6852      	ldr	r2, [r2, #4]
 8009dd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d103      	bne.n	8009de8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	1e5a      	subs	r2, r3, #1
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10a      	bne.n	8009e32 <xQueueGenericReset+0x2a>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	60bb      	str	r3, [r7, #8]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e32:	f003 fc67 	bl	800d704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e3e:	68f9      	ldr	r1, [r7, #12]
 8009e40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e42:	fb01 f303 	mul.w	r3, r1, r3
 8009e46:	441a      	add	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e62:	3b01      	subs	r3, #1
 8009e64:	68f9      	ldr	r1, [r7, #12]
 8009e66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e68:	fb01 f303 	mul.w	r3, r1, r3
 8009e6c:	441a      	add	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	22ff      	movs	r2, #255	; 0xff
 8009e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	22ff      	movs	r2, #255	; 0xff
 8009e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d114      	bne.n	8009eb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d01a      	beq.n	8009ec6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3310      	adds	r3, #16
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 f84f 	bl	800bf38 <xTaskRemoveFromEventList>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d012      	beq.n	8009ec6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ea0:	4b0c      	ldr	r3, [pc, #48]	; (8009ed4 <xQueueGenericReset+0xcc>)
 8009ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	e009      	b.n	8009ec6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3310      	adds	r3, #16
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff fef2 	bl	8009ca0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	3324      	adds	r3, #36	; 0x24
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7ff feed 	bl	8009ca0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ec6:	f003 fc4d 	bl	800d764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009eca:	2301      	movs	r3, #1
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	e000ed04 	.word	0xe000ed04

08009ed8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b08e      	sub	sp, #56	; 0x38
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <xQueueGenericCreateStatic+0x52>
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <xQueueGenericCreateStatic+0x56>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e000      	b.n	8009f30 <xQueueGenericCreateStatic+0x58>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10a      	bne.n	8009f4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	623b      	str	r3, [r7, #32]
}
 8009f46:	bf00      	nop
 8009f48:	e7fe      	b.n	8009f48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <xQueueGenericCreateStatic+0x7e>
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <xQueueGenericCreateStatic+0x82>
 8009f56:	2301      	movs	r3, #1
 8009f58:	e000      	b.n	8009f5c <xQueueGenericCreateStatic+0x84>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10a      	bne.n	8009f76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	61fb      	str	r3, [r7, #28]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f76:	2350      	movs	r3, #80	; 0x50
 8009f78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b50      	cmp	r3, #80	; 0x50
 8009f7e:	d00a      	beq.n	8009f96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	61bb      	str	r3, [r7, #24]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00d      	beq.n	8009fbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009faa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f83f 	bl	800a03c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3730      	adds	r7, #48	; 0x30
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08a      	sub	sp, #40	; 0x28
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	613b      	str	r3, [r7, #16]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	fb02 f303 	mul.w	r3, r2, r3
 8009ffa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	3350      	adds	r3, #80	; 0x50
 800a000:	4618      	mov	r0, r3
 800a002:	f003 fca1 	bl	800d948 <pvPortMalloc>
 800a006:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d011      	beq.n	800a032 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	3350      	adds	r3, #80	; 0x50
 800a016:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a020:	79fa      	ldrb	r2, [r7, #7]
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	4613      	mov	r3, r2
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 f805 	bl	800a03c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a032:	69bb      	ldr	r3, [r7, #24]
	}
 800a034:	4618      	mov	r0, r3
 800a036:	3720      	adds	r7, #32
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d103      	bne.n	800a058 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	e002      	b.n	800a05e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a06a:	2101      	movs	r1, #1
 800a06c:	69b8      	ldr	r0, [r7, #24]
 800a06e:	f7ff fecb 	bl	8009e08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	78fa      	ldrb	r2, [r7, #3]
 800a076:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a07a:	bf00      	nop
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08e      	sub	sp, #56	; 0x38
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a092:	2300      	movs	r3, #0
 800a094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <xQueueGenericSend+0x32>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d103      	bne.n	800a0c4 <xQueueGenericSend+0x40>
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <xQueueGenericSend+0x44>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e000      	b.n	800a0ca <xQueueGenericSend+0x46>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10a      	bne.n	800a0e4 <xQueueGenericSend+0x60>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0e0:	bf00      	nop
 800a0e2:	e7fe      	b.n	800a0e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d103      	bne.n	800a0f2 <xQueueGenericSend+0x6e>
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d101      	bne.n	800a0f6 <xQueueGenericSend+0x72>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <xQueueGenericSend+0x74>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10a      	bne.n	800a112 <xQueueGenericSend+0x8e>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	623b      	str	r3, [r7, #32]
}
 800a10e:	bf00      	nop
 800a110:	e7fe      	b.n	800a110 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a112:	f002 f9b7 	bl	800c484 <xTaskGetSchedulerState>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d102      	bne.n	800a122 <xQueueGenericSend+0x9e>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <xQueueGenericSend+0xa2>
 800a122:	2301      	movs	r3, #1
 800a124:	e000      	b.n	800a128 <xQueueGenericSend+0xa4>
 800a126:	2300      	movs	r3, #0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <xQueueGenericSend+0xbe>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	61fb      	str	r3, [r7, #28]
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a142:	f003 fadf 	bl	800d704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14e:	429a      	cmp	r2, r3
 800a150:	d302      	bcc.n	800a158 <xQueueGenericSend+0xd4>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b02      	cmp	r3, #2
 800a156:	d129      	bne.n	800a1ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a15e:	f000 fbbb 	bl	800a8d8 <prvCopyDataToQueue>
 800a162:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d010      	beq.n	800a18e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	3324      	adds	r3, #36	; 0x24
 800a170:	4618      	mov	r0, r3
 800a172:	f001 fee1 	bl	800bf38 <xTaskRemoveFromEventList>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d013      	beq.n	800a1a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a17c:	4b3f      	ldr	r3, [pc, #252]	; (800a27c <xQueueGenericSend+0x1f8>)
 800a17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	e00a      	b.n	800a1a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d007      	beq.n	800a1a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a194:	4b39      	ldr	r3, [pc, #228]	; (800a27c <xQueueGenericSend+0x1f8>)
 800a196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1a4:	f003 fade 	bl	800d764 <vPortExitCritical>
				return pdPASS;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e063      	b.n	800a274 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d103      	bne.n	800a1ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1b2:	f003 fad7 	bl	800d764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e05c      	b.n	800a274 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d106      	bne.n	800a1ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1c0:	f107 0314 	add.w	r3, r7, #20
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f001 ff1b 	bl	800c000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1ce:	f003 fac9 	bl	800d764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1d2:	f001 fbf9 	bl	800b9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1d6:	f003 fa95 	bl	800d704 <vPortEnterCritical>
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1e0:	b25b      	sxtb	r3, r3
 800a1e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1e6:	d103      	bne.n	800a1f0 <xQueueGenericSend+0x16c>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1f6:	b25b      	sxtb	r3, r3
 800a1f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1fc:	d103      	bne.n	800a206 <xQueueGenericSend+0x182>
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a206:	f003 faad 	bl	800d764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a20a:	1d3a      	adds	r2, r7, #4
 800a20c:	f107 0314 	add.w	r3, r7, #20
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f001 ff0a 	bl	800c02c <xTaskCheckForTimeOut>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d124      	bne.n	800a268 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a21e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a220:	f000 fc52 	bl	800aac8 <prvIsQueueFull>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d018      	beq.n	800a25c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	3310      	adds	r3, #16
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	4611      	mov	r1, r2
 800a232:	4618      	mov	r0, r3
 800a234:	f001 fe30 	bl	800be98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a23a:	f000 fbdd 	bl	800a9f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a23e:	f001 fbd1 	bl	800b9e4 <xTaskResumeAll>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	f47f af7c 	bne.w	800a142 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a24a:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <xQueueGenericSend+0x1f8>)
 800a24c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a250:	601a      	str	r2, [r3, #0]
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	e772      	b.n	800a142 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a25c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a25e:	f000 fbcb 	bl	800a9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a262:	f001 fbbf 	bl	800b9e4 <xTaskResumeAll>
 800a266:	e76c      	b.n	800a142 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a26a:	f000 fbc5 	bl	800a9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a26e:	f001 fbb9 	bl	800b9e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a272:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a274:	4618      	mov	r0, r3
 800a276:	3738      	adds	r7, #56	; 0x38
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	e000ed04 	.word	0xe000ed04

0800a280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b090      	sub	sp, #64	; 0x40
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d103      	bne.n	800a2bc <xQueueGenericSendFromISR+0x3c>
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <xQueueGenericSendFromISR+0x40>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e000      	b.n	800a2c2 <xQueueGenericSendFromISR+0x42>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10a      	bne.n	800a2dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2d8:	bf00      	nop
 800a2da:	e7fe      	b.n	800a2da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d103      	bne.n	800a2ea <xQueueGenericSendFromISR+0x6a>
 800a2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d101      	bne.n	800a2ee <xQueueGenericSendFromISR+0x6e>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e000      	b.n	800a2f0 <xQueueGenericSendFromISR+0x70>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10a      	bne.n	800a30a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	623b      	str	r3, [r7, #32]
}
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a30a:	f003 fadd 	bl	800d8c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a30e:	f3ef 8211 	mrs	r2, BASEPRI
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	61fa      	str	r2, [r7, #28]
 800a324:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a326:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a328:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a332:	429a      	cmp	r2, r3
 800a334:	d302      	bcc.n	800a33c <xQueueGenericSendFromISR+0xbc>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d12f      	bne.n	800a39c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	68b9      	ldr	r1, [r7, #8]
 800a350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a352:	f000 fac1 	bl	800a8d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a356:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a35a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a35e:	d112      	bne.n	800a386 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	2b00      	cmp	r3, #0
 800a366:	d016      	beq.n	800a396 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	3324      	adds	r3, #36	; 0x24
 800a36c:	4618      	mov	r0, r3
 800a36e:	f001 fde3 	bl	800bf38 <xTaskRemoveFromEventList>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00e      	beq.n	800a396 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00b      	beq.n	800a396 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	e007      	b.n	800a396 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a386:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a38a:	3301      	adds	r3, #1
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	b25a      	sxtb	r2, r3
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a396:	2301      	movs	r3, #1
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a39a:	e001      	b.n	800a3a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a39c:	2300      	movs	r3, #0
 800a39e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a3aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3740      	adds	r7, #64	; 0x40
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b08e      	sub	sp, #56	; 0x38
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10a      	bne.n	800a3e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	623b      	str	r3, [r7, #32]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00a      	beq.n	800a3fe <xQueueGiveFromISR+0x48>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	61fb      	str	r3, [r7, #28]
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d103      	bne.n	800a40e <xQueueGiveFromISR+0x58>
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <xQueueGiveFromISR+0x5c>
 800a40e:	2301      	movs	r3, #1
 800a410:	e000      	b.n	800a414 <xQueueGiveFromISR+0x5e>
 800a412:	2300      	movs	r3, #0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xQueueGiveFromISR+0x78>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	61bb      	str	r3, [r7, #24]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a42e:	f003 fa4b 	bl	800d8c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a432:	f3ef 8211 	mrs	r2, BASEPRI
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	617a      	str	r2, [r7, #20]
 800a448:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a44a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a44c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d22b      	bcs.n	800a4b6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a470:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a478:	d112      	bne.n	800a4a0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d016      	beq.n	800a4b0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a484:	3324      	adds	r3, #36	; 0x24
 800a486:	4618      	mov	r0, r3
 800a488:	f001 fd56 	bl	800bf38 <xTaskRemoveFromEventList>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00e      	beq.n	800a4b0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00b      	beq.n	800a4b0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2201      	movs	r2, #1
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	e007      	b.n	800a4b0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	b25a      	sxtb	r2, r3
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b4:	e001      	b.n	800a4ba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f383 8811 	msr	BASEPRI, r3
}
 800a4c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3738      	adds	r7, #56	; 0x38
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08c      	sub	sp, #48	; 0x30
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <xQueueReceive+0x30>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	623b      	str	r3, [r7, #32]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d103      	bne.n	800a50e <xQueueReceive+0x3e>
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <xQueueReceive+0x42>
 800a50e:	2301      	movs	r3, #1
 800a510:	e000      	b.n	800a514 <xQueueReceive+0x44>
 800a512:	2300      	movs	r3, #0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <xQueueReceive+0x5e>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	61fb      	str	r3, [r7, #28]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a52e:	f001 ffa9 	bl	800c484 <xTaskGetSchedulerState>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d102      	bne.n	800a53e <xQueueReceive+0x6e>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <xQueueReceive+0x72>
 800a53e:	2301      	movs	r3, #1
 800a540:	e000      	b.n	800a544 <xQueueReceive+0x74>
 800a542:	2300      	movs	r3, #0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10a      	bne.n	800a55e <xQueueReceive+0x8e>
	__asm volatile
 800a548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	61bb      	str	r3, [r7, #24]
}
 800a55a:	bf00      	nop
 800a55c:	e7fe      	b.n	800a55c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a55e:	f003 f8d1 	bl	800d704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a566:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d01f      	beq.n	800a5ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a56e:	68b9      	ldr	r1, [r7, #8]
 800a570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a572:	f000 fa1b 	bl	800a9ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a578:	1e5a      	subs	r2, r3, #1
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00f      	beq.n	800a5a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	3310      	adds	r3, #16
 800a58a:	4618      	mov	r0, r3
 800a58c:	f001 fcd4 	bl	800bf38 <xTaskRemoveFromEventList>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d007      	beq.n	800a5a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a596:	4b3d      	ldr	r3, [pc, #244]	; (800a68c <xQueueReceive+0x1bc>)
 800a598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5a6:	f003 f8dd 	bl	800d764 <vPortExitCritical>
				return pdPASS;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e069      	b.n	800a682 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d103      	bne.n	800a5bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5b4:	f003 f8d6 	bl	800d764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	e062      	b.n	800a682 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5c2:	f107 0310 	add.w	r3, r7, #16
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f001 fd1a 	bl	800c000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5d0:	f003 f8c8 	bl	800d764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5d4:	f001 f9f8 	bl	800b9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5d8:	f003 f894 	bl	800d704 <vPortEnterCritical>
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5e2:	b25b      	sxtb	r3, r3
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e8:	d103      	bne.n	800a5f2 <xQueueReceive+0x122>
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5f8:	b25b      	sxtb	r3, r3
 800a5fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5fe:	d103      	bne.n	800a608 <xQueueReceive+0x138>
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a608:	f003 f8ac 	bl	800d764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a60c:	1d3a      	adds	r2, r7, #4
 800a60e:	f107 0310 	add.w	r3, r7, #16
 800a612:	4611      	mov	r1, r2
 800a614:	4618      	mov	r0, r3
 800a616:	f001 fd09 	bl	800c02c <xTaskCheckForTimeOut>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d123      	bne.n	800a668 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a622:	f000 fa3b 	bl	800aa9c <prvIsQueueEmpty>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d017      	beq.n	800a65c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	3324      	adds	r3, #36	; 0x24
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f001 fc2f 	bl	800be98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a63a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a63c:	f000 f9dc 	bl	800a9f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a640:	f001 f9d0 	bl	800b9e4 <xTaskResumeAll>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d189      	bne.n	800a55e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a64a:	4b10      	ldr	r3, [pc, #64]	; (800a68c <xQueueReceive+0x1bc>)
 800a64c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a650:	601a      	str	r2, [r3, #0]
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	e780      	b.n	800a55e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65e:	f000 f9cb 	bl	800a9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a662:	f001 f9bf 	bl	800b9e4 <xTaskResumeAll>
 800a666:	e77a      	b.n	800a55e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a66a:	f000 f9c5 	bl	800a9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a66e:	f001 f9b9 	bl	800b9e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a674:	f000 fa12 	bl	800aa9c <prvIsQueueEmpty>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f43f af6f 	beq.w	800a55e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a680:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a682:	4618      	mov	r0, r3
 800a684:	3730      	adds	r7, #48	; 0x30
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	e000ed04 	.word	0xe000ed04

0800a690 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08e      	sub	sp, #56	; 0x38
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	623b      	str	r3, [r7, #32]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00a      	beq.n	800a6e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	61fb      	str	r3, [r7, #28]
}
 800a6dc:	bf00      	nop
 800a6de:	e7fe      	b.n	800a6de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6e0:	f001 fed0 	bl	800c484 <xTaskGetSchedulerState>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d102      	bne.n	800a6f0 <xQueueSemaphoreTake+0x60>
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <xQueueSemaphoreTake+0x64>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e000      	b.n	800a6f6 <xQueueSemaphoreTake+0x66>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	61bb      	str	r3, [r7, #24]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a710:	f002 fff8 	bl	800d704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a718:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d024      	beq.n	800a76a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	1e5a      	subs	r2, r3, #1
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d104      	bne.n	800a73a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a730:	f002 f8da 	bl	800c8e8 <pvTaskIncrementMutexHeldCount>
 800a734:	4602      	mov	r2, r0
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00f      	beq.n	800a762 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a744:	3310      	adds	r3, #16
 800a746:	4618      	mov	r0, r3
 800a748:	f001 fbf6 	bl	800bf38 <xTaskRemoveFromEventList>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d007      	beq.n	800a762 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a752:	4b54      	ldr	r3, [pc, #336]	; (800a8a4 <xQueueSemaphoreTake+0x214>)
 800a754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a762:	f002 ffff 	bl	800d764 <vPortExitCritical>
				return pdPASS;
 800a766:	2301      	movs	r3, #1
 800a768:	e097      	b.n	800a89a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d111      	bne.n	800a794 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00a      	beq.n	800a78c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	617b      	str	r3, [r7, #20]
}
 800a788:	bf00      	nop
 800a78a:	e7fe      	b.n	800a78a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a78c:	f002 ffea 	bl	800d764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a790:	2300      	movs	r3, #0
 800a792:	e082      	b.n	800a89a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a796:	2b00      	cmp	r3, #0
 800a798:	d106      	bne.n	800a7a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a79a:	f107 030c 	add.w	r3, r7, #12
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 fc2e 	bl	800c000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7a8:	f002 ffdc 	bl	800d764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7ac:	f001 f90c 	bl	800b9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7b0:	f002 ffa8 	bl	800d704 <vPortEnterCritical>
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7ba:	b25b      	sxtb	r3, r3
 800a7bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7c0:	d103      	bne.n	800a7ca <xQueueSemaphoreTake+0x13a>
 800a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7d0:	b25b      	sxtb	r3, r3
 800a7d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7d6:	d103      	bne.n	800a7e0 <xQueueSemaphoreTake+0x150>
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7e0:	f002 ffc0 	bl	800d764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7e4:	463a      	mov	r2, r7
 800a7e6:	f107 030c 	add.w	r3, r7, #12
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f001 fc1d 	bl	800c02c <xTaskCheckForTimeOut>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d132      	bne.n	800a85e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7fa:	f000 f94f 	bl	800aa9c <prvIsQueueEmpty>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d026      	beq.n	800a852 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d109      	bne.n	800a820 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a80c:	f002 ff7a 	bl	800d704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fe53 	bl	800c4c0 <xTaskPriorityInherit>
 800a81a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a81c:	f002 ffa2 	bl	800d764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	3324      	adds	r3, #36	; 0x24
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	4611      	mov	r1, r2
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 fb35 	bl	800be98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a82e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a830:	f000 f8e2 	bl	800a9f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a834:	f001 f8d6 	bl	800b9e4 <xTaskResumeAll>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f47f af68 	bne.w	800a710 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a840:	4b18      	ldr	r3, [pc, #96]	; (800a8a4 <xQueueSemaphoreTake+0x214>)
 800a842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	e75e      	b.n	800a710 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a854:	f000 f8d0 	bl	800a9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a858:	f001 f8c4 	bl	800b9e4 <xTaskResumeAll>
 800a85c:	e758      	b.n	800a710 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a85e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a860:	f000 f8ca 	bl	800a9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a864:	f001 f8be 	bl	800b9e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a868:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a86a:	f000 f917 	bl	800aa9c <prvIsQueueEmpty>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	f43f af4d 	beq.w	800a710 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00d      	beq.n	800a898 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a87c:	f002 ff42 	bl	800d704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a882:	f000 f811 	bl	800a8a8 <prvGetDisinheritPriorityAfterTimeout>
 800a886:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a88e:	4618      	mov	r0, r3
 800a890:	f001 feec 	bl	800c66c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a894:	f002 ff66 	bl	800d764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a898:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3738      	adds	r7, #56	; 0x38
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	e000ed04 	.word	0xe000ed04

0800a8a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d006      	beq.n	800a8c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	e001      	b.n	800a8ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
	}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10d      	bne.n	800a912 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d14d      	bne.n	800a99a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	4618      	mov	r0, r3
 800a904:	f001 fe44 	bl	800c590 <xTaskPriorityDisinherit>
 800a908:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	609a      	str	r2, [r3, #8]
 800a910:	e043      	b.n	800a99a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d119      	bne.n	800a94c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6858      	ldr	r0, [r3, #4]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a920:	461a      	mov	r2, r3
 800a922:	68b9      	ldr	r1, [r7, #8]
 800a924:	f005 f87c 	bl	800fa20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a930:	441a      	add	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d32b      	bcc.n	800a99a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	605a      	str	r2, [r3, #4]
 800a94a:	e026      	b.n	800a99a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	68d8      	ldr	r0, [r3, #12]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a954:	461a      	mov	r2, r3
 800a956:	68b9      	ldr	r1, [r7, #8]
 800a958:	f005 f862 	bl	800fa20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	68da      	ldr	r2, [r3, #12]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	425b      	negs	r3, r3
 800a966:	441a      	add	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	429a      	cmp	r2, r3
 800a976:	d207      	bcs.n	800a988 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a980:	425b      	negs	r3, r3
 800a982:	441a      	add	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d105      	bne.n	800a99a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	3b01      	subs	r3, #1
 800a998:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a9a2:	697b      	ldr	r3, [r7, #20]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d018      	beq.n	800a9f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68da      	ldr	r2, [r3, #12]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c6:	441a      	add	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68da      	ldr	r2, [r3, #12]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d303      	bcc.n	800a9e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68d9      	ldr	r1, [r3, #12]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	6838      	ldr	r0, [r7, #0]
 800a9ec:	f005 f818 	bl	800fa20 <memcpy>
	}
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa00:	f002 fe80 	bl	800d704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa0c:	e011      	b.n	800aa32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d012      	beq.n	800aa3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	3324      	adds	r3, #36	; 0x24
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f001 fa8c 	bl	800bf38 <xTaskRemoveFromEventList>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa26:	f001 fb63 	bl	800c0f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dce9      	bgt.n	800aa0e <prvUnlockQueue+0x16>
 800aa3a:	e000      	b.n	800aa3e <prvUnlockQueue+0x46>
					break;
 800aa3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	22ff      	movs	r2, #255	; 0xff
 800aa42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa46:	f002 fe8d 	bl	800d764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa4a:	f002 fe5b 	bl	800d704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa56:	e011      	b.n	800aa7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d012      	beq.n	800aa86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3310      	adds	r3, #16
 800aa64:	4618      	mov	r0, r3
 800aa66:	f001 fa67 	bl	800bf38 <xTaskRemoveFromEventList>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa70:	f001 fb3e 	bl	800c0f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	dce9      	bgt.n	800aa58 <prvUnlockQueue+0x60>
 800aa84:	e000      	b.n	800aa88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	22ff      	movs	r2, #255	; 0xff
 800aa8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa90:	f002 fe68 	bl	800d764 <vPortExitCritical>
}
 800aa94:	bf00      	nop
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaa4:	f002 fe2e 	bl	800d704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d102      	bne.n	800aab6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aab0:	2301      	movs	r3, #1
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	e001      	b.n	800aaba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaba:	f002 fe53 	bl	800d764 <vPortExitCritical>

	return xReturn;
 800aabe:	68fb      	ldr	r3, [r7, #12]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aad0:	f002 fe18 	bl	800d704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aadc:	429a      	cmp	r2, r3
 800aade:	d102      	bne.n	800aae6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aae0:	2301      	movs	r3, #1
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e001      	b.n	800aaea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaea:	f002 fe3b 	bl	800d764 <vPortExitCritical>

	return xReturn;
 800aaee:	68fb      	ldr	r3, [r7, #12]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
 800ab06:	e014      	b.n	800ab32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab08:	4a0f      	ldr	r2, [pc, #60]	; (800ab48 <vQueueAddToRegistry+0x50>)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10b      	bne.n	800ab2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab14:	490c      	ldr	r1, [pc, #48]	; (800ab48 <vQueueAddToRegistry+0x50>)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab1e:	4a0a      	ldr	r2, [pc, #40]	; (800ab48 <vQueueAddToRegistry+0x50>)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	4413      	add	r3, r2
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab2a:	e006      	b.n	800ab3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b07      	cmp	r3, #7
 800ab36:	d9e7      	bls.n	800ab08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	20001890 	.word	0x20001890

0800ab4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab5c:	f002 fdd2 	bl	800d704 <vPortEnterCritical>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab66:	b25b      	sxtb	r3, r3
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab6c:	d103      	bne.n	800ab76 <vQueueWaitForMessageRestricted+0x2a>
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab7c:	b25b      	sxtb	r3, r3
 800ab7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab82:	d103      	bne.n	800ab8c <vQueueWaitForMessageRestricted+0x40>
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab8c:	f002 fdea 	bl	800d764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d106      	bne.n	800aba6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	3324      	adds	r3, #36	; 0x24
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f001 f99d 	bl	800bee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aba6:	6978      	ldr	r0, [r7, #20]
 800aba8:	f7ff ff26 	bl	800a9f8 <prvUnlockQueue>
	}
 800abac:	bf00      	nop
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08c      	sub	sp, #48	; 0x30
 800abb8:	af02      	add	r7, sp, #8
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d110      	bne.n	800abe8 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800abc6:	2301      	movs	r3, #1
 800abc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b04      	cmp	r3, #4
 800abd0:	d81b      	bhi.n	800ac0a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	61fb      	str	r3, [r7, #28]
}
 800abe4:	bf00      	nop
 800abe6:	e7fe      	b.n	800abe6 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	61bb      	str	r3, [r7, #24]
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d90a      	bls.n	800ac28 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	617b      	str	r3, [r7, #20]
}
 800ac24:	bf00      	nop
 800ac26:	e7fe      	b.n	800ac26 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3301      	adds	r3, #1
 800ac36:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	3324      	adds	r3, #36	; 0x24
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f002 fe83 	bl	800d948 <pvPortMalloc>
 800ac42:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ac50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	6a38      	ldr	r0, [r7, #32]
 800ac5c:	f000 fab9 	bl	800b1d2 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800ac60:	6a3b      	ldr	r3, [r7, #32]
	}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3728      	adds	r7, #40	; 0x28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b087      	sub	sp, #28
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	60fb      	str	r3, [r7, #12]
}
 800ac8e:	bf00      	nop
 800ac90:	e7fe      	b.n	800ac90 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	689a      	ldr	r2, [r3, #8]
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	3b01      	subs	r3, #1
 800acac:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d304      	bcc.n	800acc2 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800acc2:	697b      	ldr	r3, [r7, #20]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	371c      	adds	r7, #28
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b090      	sub	sp, #64	; 0x40
 800acd4:	af02      	add	r7, sp, #8
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	623b      	str	r3, [r7, #32]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10a      	bne.n	800ad1e <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	61fb      	str	r3, [r7, #28]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad20:	7f1b      	ldrb	r3, [r3, #28]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800ad30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad32:	f7ff ff9a 	bl	800ac6a <xStreamBufferSpacesAvailable>
 800ad36:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800ad38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	68b9      	ldr	r1, [r7, #8]
 800ad42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad44:	f000 f835 	bl	800adb2 <prvWriteMessageToBuffer>
 800ad48:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d02b      	beq.n	800ada8 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800ad50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad52:	f000 fa1e 	bl	800b192 <prvBytesInBuffer>
 800ad56:	4602      	mov	r2, r0
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d323      	bcc.n	800ada8 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 800ad60:	f3ef 8211 	mrs	r2, BASEPRI
 800ad64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	61ba      	str	r2, [r7, #24]
 800ad76:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ad78:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800ad7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <xStreamBufferSendFromISR+0xcc>
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	6918      	ldr	r0, [r3, #16]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2100      	movs	r1, #0
 800ad92:	f001 fedb 	bl	800cb4c <xTaskGenericNotifyFromISR>
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	2200      	movs	r2, #0
 800ad9a:	611a      	str	r2, [r3, #16]
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f383 8811 	msr	BASEPRI, r3
}
 800ada6:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3738      	adds	r7, #56	; 0x38
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b086      	sub	sp, #24
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	60f8      	str	r0, [r7, #12]
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	607a      	str	r2, [r7, #4]
 800adbe:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d102      	bne.n	800adcc <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800adc6:	2300      	movs	r3, #0
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	e01d      	b.n	800ae08 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	7f1b      	ldrb	r3, [r3, #28]
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d108      	bne.n	800adea <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800add8:	2301      	movs	r3, #1
 800adda:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	4293      	cmp	r3, r2
 800ade2:	bf28      	it	cs
 800ade4:	4613      	movcs	r3, r2
 800ade6:	607b      	str	r3, [r7, #4]
 800ade8:	e00e      	b.n	800ae08 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d308      	bcc.n	800ae04 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800adf2:	2301      	movs	r3, #1
 800adf4:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800adf6:	1d3b      	adds	r3, r7, #4
 800adf8:	2204      	movs	r2, #4
 800adfa:	4619      	mov	r1, r3
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 f8dc 	bl	800afba <prvWriteBytesToBuffer>
 800ae02:	e001      	b.n	800ae08 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800ae04:	2300      	movs	r3, #0
 800ae06:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d007      	beq.n	800ae1e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	461a      	mov	r2, r3
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f000 f8d0 	bl	800afba <prvWriteBytesToBuffer>
 800ae1a:	6138      	str	r0, [r7, #16]
 800ae1c:	e001      	b.n	800ae22 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800ae22:	693b      	ldr	r3, [r7, #16]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08e      	sub	sp, #56	; 0x38
 800ae30:	af02      	add	r7, sp, #8
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10a      	bne.n	800ae5e <xStreamBufferReceive+0x32>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	61fb      	str	r3, [r7, #28]
}
 800ae5a:	bf00      	nop
 800ae5c:	e7fe      	b.n	800ae5c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <xStreamBufferReceive+0x4e>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	61bb      	str	r3, [r7, #24]
}
 800ae76:	bf00      	nop
 800ae78:	e7fe      	b.n	800ae78 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	7f1b      	ldrb	r3, [r3, #28]
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d002      	beq.n	800ae8c <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800ae86:	2304      	movs	r3, #4
 800ae88:	627b      	str	r3, [r7, #36]	; 0x24
 800ae8a:	e001      	b.n	800ae90 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d034      	beq.n	800af00 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800ae96:	f002 fc35 	bl	800d704 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800ae9a:	6a38      	ldr	r0, [r7, #32]
 800ae9c:	f000 f979 	bl	800b192 <prvBytesInBuffer>
 800aea0:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800aea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d816      	bhi.n	800aed8 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800aeaa:	2000      	movs	r0, #0
 800aeac:	f001 ff32 	bl	800cd14 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00a      	beq.n	800aece <xStreamBufferReceive+0xa2>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	617b      	str	r3, [r7, #20]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800aece:	f001 fac9 	bl	800c464 <xTaskGetCurrentTaskHandle>
 800aed2:	4602      	mov	r2, r0
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800aed8:	f002 fc44 	bl	800d764 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800aedc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d811      	bhi.n	800af08 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	2000      	movs	r0, #0
 800aeec:	f001 fd10 	bl	800c910 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800aef0:	6a3b      	ldr	r3, [r7, #32]
 800aef2:	2200      	movs	r2, #0
 800aef4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800aef6:	6a38      	ldr	r0, [r7, #32]
 800aef8:	f000 f94b 	bl	800b192 <prvBytesInBuffer>
 800aefc:	62b8      	str	r0, [r7, #40]	; 0x28
 800aefe:	e003      	b.n	800af08 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800af00:	6a38      	ldr	r0, [r7, #32]
 800af02:	f000 f946 	bl	800b192 <prvBytesInBuffer>
 800af06:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800af08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d91d      	bls.n	800af4c <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	9300      	str	r3, [sp, #0]
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	68b9      	ldr	r1, [r7, #8]
 800af1a:	6a38      	ldr	r0, [r7, #32]
 800af1c:	f000 f81b 	bl	800af56 <prvReadMessageFromBuffer>
 800af20:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d011      	beq.n	800af4c <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800af28:	f000 fd4e 	bl	800b9c8 <vTaskSuspendAll>
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d009      	beq.n	800af48 <xStreamBufferReceive+0x11c>
 800af34:	6a3b      	ldr	r3, [r7, #32]
 800af36:	6958      	ldr	r0, [r3, #20]
 800af38:	2300      	movs	r3, #0
 800af3a:	2200      	movs	r2, #0
 800af3c:	2100      	movs	r1, #0
 800af3e:	f001 fd47 	bl	800c9d0 <xTaskGenericNotify>
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	2200      	movs	r2, #0
 800af46:	615a      	str	r2, [r3, #20]
 800af48:	f000 fd4c 	bl	800b9e4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3730      	adds	r7, #48	; 0x30
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b088      	sub	sp, #32
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
 800af62:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	2b00      	cmp	r3, #0
 800af68:	d019      	beq.n	800af9e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800af70:	f107 0110 	add.w	r1, r7, #16
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 f890 	bl	800b09e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d907      	bls.n	800afa2 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	69ba      	ldr	r2, [r7, #24]
 800af96:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800af98:	2300      	movs	r3, #0
 800af9a:	61fb      	str	r3, [r7, #28]
 800af9c:	e001      	b.n	800afa2 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	69fa      	ldr	r2, [r7, #28]
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f000 f878 	bl	800b09e <prvReadBytesFromBuffer>
 800afae:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800afb0:	697b      	ldr	r3, [r7, #20]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b08a      	sub	sp, #40	; 0x28
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	60f8      	str	r0, [r7, #12]
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	61fb      	str	r3, [r7, #28]
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	689a      	ldr	r2, [r3, #8]
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	4293      	cmp	r3, r2
 800aff4:	bf28      	it	cs
 800aff6:	4613      	movcs	r3, r2
 800aff8:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800affa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	441a      	add	r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	429a      	cmp	r2, r3
 800b006:	d90a      	bls.n	800b01e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	61bb      	str	r3, [r7, #24]
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	699a      	ldr	r2, [r3, #24]
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b024:	4413      	add	r3, r2
 800b026:	6a3a      	ldr	r2, [r7, #32]
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f004 fcf8 	bl	800fa20 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	6a3b      	ldr	r3, [r7, #32]
 800b034:	429a      	cmp	r2, r3
 800b036:	d91c      	bls.n	800b072 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	1ad2      	subs	r2, r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	429a      	cmp	r2, r3
 800b044:	d90a      	bls.n	800b05c <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800b046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	617b      	str	r3, [r7, #20]
}
 800b058:	bf00      	nop
 800b05a:	e7fe      	b.n	800b05a <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6998      	ldr	r0, [r3, #24]
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	18d1      	adds	r1, r2, r3
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	461a      	mov	r2, r3
 800b06e:	f004 fcd7 	bl	800fa20 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800b072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4413      	add	r3, r2
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b080:	429a      	cmp	r2, r3
 800b082:	d304      	bcc.n	800b08e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b092:	605a      	str	r2, [r3, #4]

	return xCount;
 800b094:	687b      	ldr	r3, [r7, #4]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3728      	adds	r7, #40	; 0x28
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b08a      	sub	sp, #40	; 0x28
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	60f8      	str	r0, [r7, #12]
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	607a      	str	r2, [r7, #4]
 800b0aa:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	bf28      	it	cs
 800b0b4:	4613      	movcs	r3, r2
 800b0b6:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d064      	beq.n	800b188 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	689a      	ldr	r2, [r3, #8]
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	6a3a      	ldr	r2, [r7, #32]
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	bf28      	it	cs
 800b0d2:	4613      	movcs	r3, r2
 800b0d4:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800b0d6:	69fa      	ldr	r2, [r7, #28]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d90a      	bls.n	800b0f4 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	61bb      	str	r3, [r7, #24]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800b0f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	441a      	add	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d90a      	bls.n	800b118 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	617b      	str	r3, [r7, #20]
}
 800b114:	bf00      	nop
 800b116:	e7fe      	b.n	800b116 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	699a      	ldr	r2, [r3, #24]
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	4413      	add	r3, r2
 800b120:	69fa      	ldr	r2, [r7, #28]
 800b122:	4619      	mov	r1, r3
 800b124:	68b8      	ldr	r0, [r7, #8]
 800b126:	f004 fc7b 	bl	800fa20 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800b12a:	6a3a      	ldr	r2, [r7, #32]
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d919      	bls.n	800b166 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800b132:	6a3a      	ldr	r2, [r7, #32]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	429a      	cmp	r2, r3
 800b138:	d90a      	bls.n	800b150 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	613b      	str	r3, [r7, #16]
}
 800b14c:	bf00      	nop
 800b14e:	e7fe      	b.n	800b14e <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	18d0      	adds	r0, r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6999      	ldr	r1, [r3, #24]
 800b15a:	6a3a      	ldr	r2, [r7, #32]
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	461a      	mov	r2, r3
 800b162:	f004 fc5d 	bl	800fa20 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800b166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	4413      	add	r3, r2
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b174:	429a      	cmp	r2, r3
 800b176:	d304      	bcc.n	800b182 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b186:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b188:	6a3b      	ldr	r3, [r7, #32]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3728      	adds	r7, #40	; 0x28
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	689a      	ldr	r2, [r3, #8]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	1ad3      	subs	r3, r2, r3
 800b1ae:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d304      	bcc.n	800b1c4 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b086      	sub	sp, #24
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	607a      	str	r2, [r7, #4]
 800b1de:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800b1e0:	2355      	movs	r3, #85	; 0x55
 800b1e2:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	6979      	ldr	r1, [r7, #20]
 800b1e8:	68b8      	ldr	r0, [r7, #8]
 800b1ea:	f004 fc27 	bl	800fa3c <memset>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d00a      	beq.n	800b20c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	613b      	str	r3, [r7, #16]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800b20c:	2224      	movs	r2, #36	; 0x24
 800b20e:	2100      	movs	r1, #0
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f004 fc13 	bl	800fa3c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	683a      	ldr	r2, [r7, #0]
 800b226:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b22e:	771a      	strb	r2, [r3, #28]
}
 800b230:	bf00      	nop
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08e      	sub	sp, #56	; 0x38
 800b23c:	af04      	add	r7, sp, #16
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10a      	bne.n	800b262 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	623b      	str	r3, [r7, #32]
}
 800b25e:	bf00      	nop
 800b260:	e7fe      	b.n	800b260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10a      	bne.n	800b27e <xTaskCreateStatic+0x46>
	__asm volatile
 800b268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26c:	f383 8811 	msr	BASEPRI, r3
 800b270:	f3bf 8f6f 	isb	sy
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	61fb      	str	r3, [r7, #28]
}
 800b27a:	bf00      	nop
 800b27c:	e7fe      	b.n	800b27c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b27e:	23cc      	movs	r3, #204	; 0xcc
 800b280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2bcc      	cmp	r3, #204	; 0xcc
 800b286:	d00a      	beq.n	800b29e <xTaskCreateStatic+0x66>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	61bb      	str	r3, [r7, #24]
}
 800b29a:	bf00      	nop
 800b29c:	e7fe      	b.n	800b29c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b29e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d01e      	beq.n	800b2e4 <xTaskCreateStatic+0xac>
 800b2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d01b      	beq.n	800b2e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	9302      	str	r3, [sp, #8]
 800b2c6:	f107 0314 	add.w	r3, r7, #20
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	68b9      	ldr	r1, [r7, #8]
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f000 f850 	bl	800b37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2de:	f000 f8f3 	bl	800b4c8 <prvAddNewTaskToReadyList>
 800b2e2:	e001      	b.n	800b2e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b2e8:	697b      	ldr	r3, [r7, #20]
	}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3728      	adds	r7, #40	; 0x28
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b08c      	sub	sp, #48	; 0x30
 800b2f6:	af04      	add	r7, sp, #16
 800b2f8:	60f8      	str	r0, [r7, #12]
 800b2fa:	60b9      	str	r1, [r7, #8]
 800b2fc:	603b      	str	r3, [r7, #0]
 800b2fe:	4613      	mov	r3, r2
 800b300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b302:	88fb      	ldrh	r3, [r7, #6]
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4618      	mov	r0, r3
 800b308:	f002 fb1e 	bl	800d948 <pvPortMalloc>
 800b30c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00e      	beq.n	800b332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b314:	20cc      	movs	r0, #204	; 0xcc
 800b316:	f002 fb17 	bl	800d948 <pvPortMalloc>
 800b31a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	631a      	str	r2, [r3, #48]	; 0x30
 800b328:	e005      	b.n	800b336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b32a:	6978      	ldr	r0, [r7, #20]
 800b32c:	f002 fbd8 	bl	800dae0 <vPortFree>
 800b330:	e001      	b.n	800b336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b332:	2300      	movs	r3, #0
 800b334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d017      	beq.n	800b36c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b344:	88fa      	ldrh	r2, [r7, #6]
 800b346:	2300      	movs	r3, #0
 800b348:	9303      	str	r3, [sp, #12]
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	9302      	str	r3, [sp, #8]
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	68b9      	ldr	r1, [r7, #8]
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f000 f80e 	bl	800b37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b360:	69f8      	ldr	r0, [r7, #28]
 800b362:	f000 f8b1 	bl	800b4c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b366:	2301      	movs	r3, #1
 800b368:	61bb      	str	r3, [r7, #24]
 800b36a:	e002      	b.n	800b372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b372:	69bb      	ldr	r3, [r7, #24]
	}
 800b374:	4618      	mov	r0, r3
 800b376:	3720      	adds	r7, #32
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	461a      	mov	r2, r3
 800b394:	21a5      	movs	r1, #165	; 0xa5
 800b396:	f004 fb51 	bl	800fa3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	f023 0307 	bic.w	r3, r3, #7
 800b3b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	f003 0307 	and.w	r3, r3, #7
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00a      	beq.n	800b3d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	617b      	str	r3, [r7, #20]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d01f      	beq.n	800b41a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3da:	2300      	movs	r3, #0
 800b3dc:	61fb      	str	r3, [r7, #28]
 800b3de:	e012      	b.n	800b406 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	7819      	ldrb	r1, [r3, #0]
 800b3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	3334      	adds	r3, #52	; 0x34
 800b3f0:	460a      	mov	r2, r1
 800b3f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d006      	beq.n	800b40e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	3301      	adds	r3, #1
 800b404:	61fb      	str	r3, [r7, #28]
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	2b1f      	cmp	r3, #31
 800b40a:	d9e9      	bls.n	800b3e0 <prvInitialiseNewTask+0x64>
 800b40c:	e000      	b.n	800b410 <prvInitialiseNewTask+0x94>
			{
				break;
 800b40e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800b418:	e003      	b.n	800b422 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b424:	2b37      	cmp	r3, #55	; 0x37
 800b426:	d901      	bls.n	800b42c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b428:	2337      	movs	r3, #55	; 0x37
 800b42a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b430:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b436:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43a:	2200      	movs	r2, #0
 800b43c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	3304      	adds	r3, #4
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fc4c 	bl	8009ce0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44a:	3318      	adds	r3, #24
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7fe fc47 	bl	8009ce0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b466:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	2200      	movs	r2, #0
 800b474:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	3364      	adds	r3, #100	; 0x64
 800b47c:	2260      	movs	r2, #96	; 0x60
 800b47e:	2100      	movs	r1, #0
 800b480:	4618      	mov	r0, r3
 800b482:	f004 fadb 	bl	800fa3c <memset>
 800b486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b488:	4a0c      	ldr	r2, [pc, #48]	; (800b4bc <prvInitialiseNewTask+0x140>)
 800b48a:	669a      	str	r2, [r3, #104]	; 0x68
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	4a0c      	ldr	r2, [pc, #48]	; (800b4c0 <prvInitialiseNewTask+0x144>)
 800b490:	66da      	str	r2, [r3, #108]	; 0x6c
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	4a0b      	ldr	r2, [pc, #44]	; (800b4c4 <prvInitialiseNewTask+0x148>)
 800b496:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	68f9      	ldr	r1, [r7, #12]
 800b49c:	69b8      	ldr	r0, [r7, #24]
 800b49e:	f002 f801 	bl	800d4a4 <pxPortInitialiseStack>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4b4:	bf00      	nop
 800b4b6:	3720      	adds	r7, #32
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	08011928 	.word	0x08011928
 800b4c0:	08011948 	.word	0x08011948
 800b4c4:	08011908 	.word	0x08011908

0800b4c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4d0:	f002 f918 	bl	800d704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4d4:	4b2d      	ldr	r3, [pc, #180]	; (800b58c <prvAddNewTaskToReadyList+0xc4>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	4a2c      	ldr	r2, [pc, #176]	; (800b58c <prvAddNewTaskToReadyList+0xc4>)
 800b4dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4de:	4b2c      	ldr	r3, [pc, #176]	; (800b590 <prvAddNewTaskToReadyList+0xc8>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d109      	bne.n	800b4fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4e6:	4a2a      	ldr	r2, [pc, #168]	; (800b590 <prvAddNewTaskToReadyList+0xc8>)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4ec:	4b27      	ldr	r3, [pc, #156]	; (800b58c <prvAddNewTaskToReadyList+0xc4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d110      	bne.n	800b516 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4f4:	f000 fe20 	bl	800c138 <prvInitialiseTaskLists>
 800b4f8:	e00d      	b.n	800b516 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4fa:	4b26      	ldr	r3, [pc, #152]	; (800b594 <prvAddNewTaskToReadyList+0xcc>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d109      	bne.n	800b516 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b502:	4b23      	ldr	r3, [pc, #140]	; (800b590 <prvAddNewTaskToReadyList+0xc8>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d802      	bhi.n	800b516 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b510:	4a1f      	ldr	r2, [pc, #124]	; (800b590 <prvAddNewTaskToReadyList+0xc8>)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b516:	4b20      	ldr	r3, [pc, #128]	; (800b598 <prvAddNewTaskToReadyList+0xd0>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3301      	adds	r3, #1
 800b51c:	4a1e      	ldr	r2, [pc, #120]	; (800b598 <prvAddNewTaskToReadyList+0xd0>)
 800b51e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b520:	4b1d      	ldr	r3, [pc, #116]	; (800b598 <prvAddNewTaskToReadyList+0xd0>)
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52c:	4b1b      	ldr	r3, [pc, #108]	; (800b59c <prvAddNewTaskToReadyList+0xd4>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	429a      	cmp	r2, r3
 800b532:	d903      	bls.n	800b53c <prvAddNewTaskToReadyList+0x74>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	4a18      	ldr	r2, [pc, #96]	; (800b59c <prvAddNewTaskToReadyList+0xd4>)
 800b53a:	6013      	str	r3, [r2, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b540:	4613      	mov	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4a15      	ldr	r2, [pc, #84]	; (800b5a0 <prvAddNewTaskToReadyList+0xd8>)
 800b54a:	441a      	add	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3304      	adds	r3, #4
 800b550:	4619      	mov	r1, r3
 800b552:	4610      	mov	r0, r2
 800b554:	f7fe fbd1 	bl	8009cfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b558:	f002 f904 	bl	800d764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b55c:	4b0d      	ldr	r3, [pc, #52]	; (800b594 <prvAddNewTaskToReadyList+0xcc>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00e      	beq.n	800b582 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b564:	4b0a      	ldr	r3, [pc, #40]	; (800b590 <prvAddNewTaskToReadyList+0xc8>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56e:	429a      	cmp	r2, r3
 800b570:	d207      	bcs.n	800b582 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b572:	4b0c      	ldr	r3, [pc, #48]	; (800b5a4 <prvAddNewTaskToReadyList+0xdc>)
 800b574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b578:	601a      	str	r2, [r3, #0]
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b582:	bf00      	nop
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	20001da4 	.word	0x20001da4
 800b590:	200018d0 	.word	0x200018d0
 800b594:	20001db0 	.word	0x20001db0
 800b598:	20001dc0 	.word	0x20001dc0
 800b59c:	20001dac 	.word	0x20001dac
 800b5a0:	200018d4 	.word	0x200018d4
 800b5a4:	e000ed04 	.word	0xe000ed04

0800b5a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d017      	beq.n	800b5ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5ba:	4b13      	ldr	r3, [pc, #76]	; (800b608 <vTaskDelay+0x60>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00a      	beq.n	800b5d8 <vTaskDelay+0x30>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	60bb      	str	r3, [r7, #8]
}
 800b5d4:	bf00      	nop
 800b5d6:	e7fe      	b.n	800b5d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5d8:	f000 f9f6 	bl	800b9c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5dc:	2100      	movs	r1, #0
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f001 fbbe 	bl	800cd60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5e4:	f000 f9fe 	bl	800b9e4 <xTaskResumeAll>
 800b5e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d107      	bne.n	800b600 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5f0:	4b06      	ldr	r3, [pc, #24]	; (800b60c <vTaskDelay+0x64>)
 800b5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b600:	bf00      	nop
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	20001dcc 	.word	0x20001dcc
 800b60c:	e000ed04 	.word	0xe000ed04

0800b610 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10a      	bne.n	800b638 <eTaskGetState+0x28>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	60bb      	str	r3, [r7, #8]
}
 800b634:	bf00      	nop
 800b636:	e7fe      	b.n	800b636 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800b638:	4b23      	ldr	r3, [pc, #140]	; (800b6c8 <eTaskGetState+0xb8>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	69ba      	ldr	r2, [r7, #24]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d102      	bne.n	800b648 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800b642:	2300      	movs	r3, #0
 800b644:	77fb      	strb	r3, [r7, #31]
 800b646:	e03a      	b.n	800b6be <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800b648:	f002 f85c 	bl	800d704 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800b652:	4b1e      	ldr	r3, [pc, #120]	; (800b6cc <eTaskGetState+0xbc>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b658:	4b1d      	ldr	r3, [pc, #116]	; (800b6d0 <eTaskGetState+0xc0>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800b65e:	f002 f881 	bl	800d764 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	429a      	cmp	r2, r3
 800b668:	d003      	beq.n	800b672 <eTaskGetState+0x62>
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d102      	bne.n	800b678 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800b672:	2302      	movs	r3, #2
 800b674:	77fb      	strb	r3, [r7, #31]
 800b676:	e022      	b.n	800b6be <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	4a16      	ldr	r2, [pc, #88]	; (800b6d4 <eTaskGetState+0xc4>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d112      	bne.n	800b6a6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10b      	bne.n	800b6a0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b01      	cmp	r3, #1
 800b692:	d102      	bne.n	800b69a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800b694:	2302      	movs	r3, #2
 800b696:	77fb      	strb	r3, [r7, #31]
 800b698:	e011      	b.n	800b6be <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800b69a:	2303      	movs	r3, #3
 800b69c:	77fb      	strb	r3, [r7, #31]
 800b69e:	e00e      	b.n	800b6be <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	77fb      	strb	r3, [r7, #31]
 800b6a4:	e00b      	b.n	800b6be <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	4a0b      	ldr	r2, [pc, #44]	; (800b6d8 <eTaskGetState+0xc8>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d002      	beq.n	800b6b4 <eTaskGetState+0xa4>
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d102      	bne.n	800b6ba <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	77fb      	strb	r3, [r7, #31]
 800b6b8:	e001      	b.n	800b6be <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800b6be:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3720      	adds	r7, #32
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	200018d0 	.word	0x200018d0
 800b6cc:	20001d5c 	.word	0x20001d5c
 800b6d0:	20001d60 	.word	0x20001d60
 800b6d4:	20001d90 	.word	0x20001d90
 800b6d8:	20001d78 	.word	0x20001d78

0800b6dc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b6e4:	f002 f80e 	bl	800d704 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d102      	bne.n	800b6f4 <vTaskSuspend+0x18>
 800b6ee:	4b30      	ldr	r3, [pc, #192]	; (800b7b0 <vTaskSuspend+0xd4>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	e000      	b.n	800b6f6 <vTaskSuspend+0x1a>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fe fb59 	bl	8009db4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b706:	2b00      	cmp	r3, #0
 800b708:	d004      	beq.n	800b714 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3318      	adds	r3, #24
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe fb50 	bl	8009db4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3304      	adds	r3, #4
 800b718:	4619      	mov	r1, r3
 800b71a:	4826      	ldr	r0, [pc, #152]	; (800b7b4 <vTaskSuspend+0xd8>)
 800b71c:	f7fe faed 	bl	8009cfa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b726:	b2db      	uxtb	r3, r3
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d103      	bne.n	800b734 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b734:	f002 f816 	bl	800d764 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b738:	4b1f      	ldr	r3, [pc, #124]	; (800b7b8 <vTaskSuspend+0xdc>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d005      	beq.n	800b74c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b740:	f001 ffe0 	bl	800d704 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b744:	f000 fe6e 	bl	800c424 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b748:	f002 f80c 	bl	800d764 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b74c:	4b18      	ldr	r3, [pc, #96]	; (800b7b0 <vTaskSuspend+0xd4>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	429a      	cmp	r2, r3
 800b754:	d127      	bne.n	800b7a6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b756:	4b18      	ldr	r3, [pc, #96]	; (800b7b8 <vTaskSuspend+0xdc>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d017      	beq.n	800b78e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b75e:	4b17      	ldr	r3, [pc, #92]	; (800b7bc <vTaskSuspend+0xe0>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00a      	beq.n	800b77c <vTaskSuspend+0xa0>
	__asm volatile
 800b766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	60bb      	str	r3, [r7, #8]
}
 800b778:	bf00      	nop
 800b77a:	e7fe      	b.n	800b77a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b77c:	4b10      	ldr	r3, [pc, #64]	; (800b7c0 <vTaskSuspend+0xe4>)
 800b77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b78c:	e00b      	b.n	800b7a6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b78e:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <vTaskSuspend+0xd8>)
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	4b0c      	ldr	r3, [pc, #48]	; (800b7c4 <vTaskSuspend+0xe8>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	429a      	cmp	r2, r3
 800b798:	d103      	bne.n	800b7a2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b79a:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <vTaskSuspend+0xd4>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]
	}
 800b7a0:	e001      	b.n	800b7a6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b7a2:	f000 fb15 	bl	800bdd0 <vTaskSwitchContext>
	}
 800b7a6:	bf00      	nop
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	200018d0 	.word	0x200018d0
 800b7b4:	20001d90 	.word	0x20001d90
 800b7b8:	20001db0 	.word	0x20001db0
 800b7bc:	20001dcc 	.word	0x20001dcc
 800b7c0:	e000ed04 	.word	0xe000ed04
 800b7c4:	20001da4 	.word	0x20001da4

0800b7c8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	60fb      	str	r3, [r7, #12]
}
 800b7f0:	bf00      	nop
 800b7f2:	e7fe      	b.n	800b7f2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	4a0a      	ldr	r2, [pc, #40]	; (800b824 <prvTaskIsTaskSuspended+0x5c>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d10a      	bne.n	800b814 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b802:	4a09      	ldr	r2, [pc, #36]	; (800b828 <prvTaskIsTaskSuspended+0x60>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d005      	beq.n	800b814 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b810:	2301      	movs	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b814:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b816:	4618      	mov	r0, r3
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	20001d90 	.word	0x20001d90
 800b828:	20001d64 	.word	0x20001d64

0800b82c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <vTaskResume+0x28>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	60bb      	str	r3, [r7, #8]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b854:	4b20      	ldr	r3, [pc, #128]	; (800b8d8 <vTaskResume+0xac>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d038      	beq.n	800b8d0 <vTaskResume+0xa4>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d035      	beq.n	800b8d0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800b864:	f001 ff4e 	bl	800d704 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f7ff ffad 	bl	800b7c8 <prvTaskIsTaskSuspended>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d02b      	beq.n	800b8cc <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	3304      	adds	r3, #4
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fe fa9b 	bl	8009db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b882:	4b16      	ldr	r3, [pc, #88]	; (800b8dc <vTaskResume+0xb0>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	429a      	cmp	r2, r3
 800b888:	d903      	bls.n	800b892 <vTaskResume+0x66>
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88e:	4a13      	ldr	r2, [pc, #76]	; (800b8dc <vTaskResume+0xb0>)
 800b890:	6013      	str	r3, [r2, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b896:	4613      	mov	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4a10      	ldr	r2, [pc, #64]	; (800b8e0 <vTaskResume+0xb4>)
 800b8a0:	441a      	add	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	4610      	mov	r0, r2
 800b8aa:	f7fe fa26 	bl	8009cfa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b2:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <vTaskResume+0xac>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d307      	bcc.n	800b8cc <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b8bc:	4b09      	ldr	r3, [pc, #36]	; (800b8e4 <vTaskResume+0xb8>)
 800b8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b8cc:	f001 ff4a 	bl	800d764 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8d0:	bf00      	nop
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	200018d0 	.word	0x200018d0
 800b8dc:	20001dac 	.word	0x20001dac
 800b8e0:	200018d4 	.word	0x200018d4
 800b8e4:	e000ed04 	.word	0xe000ed04

0800b8e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b08a      	sub	sp, #40	; 0x28
 800b8ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8f6:	463a      	mov	r2, r7
 800b8f8:	1d39      	adds	r1, r7, #4
 800b8fa:	f107 0308 	add.w	r3, r7, #8
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe f99a 	bl	8009c38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	9202      	str	r2, [sp, #8]
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	2300      	movs	r3, #0
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	2300      	movs	r3, #0
 800b914:	460a      	mov	r2, r1
 800b916:	4924      	ldr	r1, [pc, #144]	; (800b9a8 <vTaskStartScheduler+0xc0>)
 800b918:	4824      	ldr	r0, [pc, #144]	; (800b9ac <vTaskStartScheduler+0xc4>)
 800b91a:	f7ff fc8d 	bl	800b238 <xTaskCreateStatic>
 800b91e:	4603      	mov	r3, r0
 800b920:	4a23      	ldr	r2, [pc, #140]	; (800b9b0 <vTaskStartScheduler+0xc8>)
 800b922:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b924:	4b22      	ldr	r3, [pc, #136]	; (800b9b0 <vTaskStartScheduler+0xc8>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b92c:	2301      	movs	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	e001      	b.n	800b936 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b932:	2300      	movs	r3, #0
 800b934:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d102      	bne.n	800b942 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b93c:	f001 fa64 	bl	800ce08 <xTimerCreateTimerTask>
 800b940:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d11b      	bne.n	800b980 <vTaskStartScheduler+0x98>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	613b      	str	r3, [r7, #16]
}
 800b95a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b95c:	4b15      	ldr	r3, [pc, #84]	; (800b9b4 <vTaskStartScheduler+0xcc>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	3364      	adds	r3, #100	; 0x64
 800b962:	4a15      	ldr	r2, [pc, #84]	; (800b9b8 <vTaskStartScheduler+0xd0>)
 800b964:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b966:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <vTaskStartScheduler+0xd4>)
 800b968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b96c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b96e:	4b14      	ldr	r3, [pc, #80]	; (800b9c0 <vTaskStartScheduler+0xd8>)
 800b970:	2201      	movs	r2, #1
 800b972:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b974:	4b13      	ldr	r3, [pc, #76]	; (800b9c4 <vTaskStartScheduler+0xdc>)
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b97a:	f001 fe21 	bl	800d5c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b97e:	e00e      	b.n	800b99e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b986:	d10a      	bne.n	800b99e <vTaskStartScheduler+0xb6>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	60fb      	str	r3, [r7, #12]
}
 800b99a:	bf00      	nop
 800b99c:	e7fe      	b.n	800b99c <vTaskStartScheduler+0xb4>
}
 800b99e:	bf00      	nop
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	08010c58 	.word	0x08010c58
 800b9ac:	0800c109 	.word	0x0800c109
 800b9b0:	20001dc8 	.word	0x20001dc8
 800b9b4:	200018d0 	.word	0x200018d0
 800b9b8:	2000010c 	.word	0x2000010c
 800b9bc:	20001dc4 	.word	0x20001dc4
 800b9c0:	20001db0 	.word	0x20001db0
 800b9c4:	20001da8 	.word	0x20001da8

0800b9c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9cc:	4b04      	ldr	r3, [pc, #16]	; (800b9e0 <vTaskSuspendAll+0x18>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	4a03      	ldr	r2, [pc, #12]	; (800b9e0 <vTaskSuspendAll+0x18>)
 800b9d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9d6:	bf00      	nop
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	20001dcc 	.word	0x20001dcc

0800b9e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9f2:	4b42      	ldr	r3, [pc, #264]	; (800bafc <xTaskResumeAll+0x118>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10a      	bne.n	800ba10 <xTaskResumeAll+0x2c>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	603b      	str	r3, [r7, #0]
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba10:	f001 fe78 	bl	800d704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba14:	4b39      	ldr	r3, [pc, #228]	; (800bafc <xTaskResumeAll+0x118>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	4a38      	ldr	r2, [pc, #224]	; (800bafc <xTaskResumeAll+0x118>)
 800ba1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba1e:	4b37      	ldr	r3, [pc, #220]	; (800bafc <xTaskResumeAll+0x118>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d162      	bne.n	800baec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba26:	4b36      	ldr	r3, [pc, #216]	; (800bb00 <xTaskResumeAll+0x11c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d05e      	beq.n	800baec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba2e:	e02f      	b.n	800ba90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba30:	4b34      	ldr	r3, [pc, #208]	; (800bb04 <xTaskResumeAll+0x120>)
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3318      	adds	r3, #24
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe f9b9 	bl	8009db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3304      	adds	r3, #4
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe f9b4 	bl	8009db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba50:	4b2d      	ldr	r3, [pc, #180]	; (800bb08 <xTaskResumeAll+0x124>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d903      	bls.n	800ba60 <xTaskResumeAll+0x7c>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	4a2a      	ldr	r2, [pc, #168]	; (800bb08 <xTaskResumeAll+0x124>)
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4a27      	ldr	r2, [pc, #156]	; (800bb0c <xTaskResumeAll+0x128>)
 800ba6e:	441a      	add	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3304      	adds	r3, #4
 800ba74:	4619      	mov	r1, r3
 800ba76:	4610      	mov	r0, r2
 800ba78:	f7fe f93f 	bl	8009cfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba80:	4b23      	ldr	r3, [pc, #140]	; (800bb10 <xTaskResumeAll+0x12c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d302      	bcc.n	800ba90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba8a:	4b22      	ldr	r3, [pc, #136]	; (800bb14 <xTaskResumeAll+0x130>)
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba90:	4b1c      	ldr	r3, [pc, #112]	; (800bb04 <xTaskResumeAll+0x120>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1cb      	bne.n	800ba30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba9e:	f000 fcc1 	bl	800c424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800baa2:	4b1d      	ldr	r3, [pc, #116]	; (800bb18 <xTaskResumeAll+0x134>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d010      	beq.n	800bad0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800baae:	f000 f8d5 	bl	800bc5c <xTaskIncrementTick>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bab8:	4b16      	ldr	r3, [pc, #88]	; (800bb14 <xTaskResumeAll+0x130>)
 800baba:	2201      	movs	r2, #1
 800babc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1f1      	bne.n	800baae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800baca:	4b13      	ldr	r3, [pc, #76]	; (800bb18 <xTaskResumeAll+0x134>)
 800bacc:	2200      	movs	r2, #0
 800bace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bad0:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <xTaskResumeAll+0x130>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d009      	beq.n	800baec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bad8:	2301      	movs	r3, #1
 800bada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800badc:	4b0f      	ldr	r3, [pc, #60]	; (800bb1c <xTaskResumeAll+0x138>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baec:	f001 fe3a 	bl	800d764 <vPortExitCritical>

	return xAlreadyYielded;
 800baf0:	68bb      	ldr	r3, [r7, #8]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	20001dcc 	.word	0x20001dcc
 800bb00:	20001da4 	.word	0x20001da4
 800bb04:	20001d64 	.word	0x20001d64
 800bb08:	20001dac 	.word	0x20001dac
 800bb0c:	200018d4 	.word	0x200018d4
 800bb10:	200018d0 	.word	0x200018d0
 800bb14:	20001db8 	.word	0x20001db8
 800bb18:	20001db4 	.word	0x20001db4
 800bb1c:	e000ed04 	.word	0xe000ed04

0800bb20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb26:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <xTaskGetTickCount+0x1c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb2c:	687b      	ldr	r3, [r7, #4]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	20001da8 	.word	0x20001da8

0800bb40 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	617b      	str	r3, [r7, #20]
 800bb50:	2338      	movs	r3, #56	; 0x38
 800bb52:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800bb54:	f7ff ff38 	bl	800b9c8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800bb58:	4b3a      	ldr	r3, [pc, #232]	; (800bc44 <uxTaskGetSystemState+0x104>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d368      	bcc.n	800bc34 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	3b01      	subs	r3, #1
 800bb66:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	00db      	lsls	r3, r3, #3
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	461a      	mov	r2, r3
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	1898      	adds	r0, r3, r2
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4a31      	ldr	r2, [pc, #196]	; (800bc48 <uxTaskGetSystemState+0x108>)
 800bb84:	4413      	add	r3, r2
 800bb86:	2201      	movs	r2, #1
 800bb88:	4619      	mov	r1, r3
 800bb8a:	f000 fba9 	bl	800c2e0 <prvListTasksWithinSingleList>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	4413      	add	r3, r2
 800bb94:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1e2      	bne.n	800bb62 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	00db      	lsls	r3, r3, #3
 800bba2:	4413      	add	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	461a      	mov	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	4413      	add	r3, r2
 800bbac:	4a27      	ldr	r2, [pc, #156]	; (800bc4c <uxTaskGetSystemState+0x10c>)
 800bbae:	6811      	ldr	r1, [r2, #0]
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 fb94 	bl	800c2e0 <prvListTasksWithinSingleList>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	00db      	lsls	r3, r3, #3
 800bbc6:	4413      	add	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	461a      	mov	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4413      	add	r3, r2
 800bbd0:	4a1f      	ldr	r2, [pc, #124]	; (800bc50 <uxTaskGetSystemState+0x110>)
 800bbd2:	6811      	ldr	r1, [r2, #0]
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f000 fb82 	bl	800c2e0 <prvListTasksWithinSingleList>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	00db      	lsls	r3, r3, #3
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	461a      	mov	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	2204      	movs	r2, #4
 800bbf6:	4917      	ldr	r1, [pc, #92]	; (800bc54 <uxTaskGetSystemState+0x114>)
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 fb71 	bl	800c2e0 <prvListTasksWithinSingleList>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	4413      	add	r3, r2
 800bc04:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	4413      	add	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	461a      	mov	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4413      	add	r3, r2
 800bc16:	2203      	movs	r2, #3
 800bc18:	490f      	ldr	r1, [pc, #60]	; (800bc58 <uxTaskGetSystemState+0x118>)
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 fb60 	bl	800c2e0 <prvListTasksWithinSingleList>
 800bc20:	4602      	mov	r2, r0
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	4413      	add	r3, r2
 800bc26:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800bc34:	f7ff fed6 	bl	800b9e4 <xTaskResumeAll>

		return uxTask;
 800bc38:	697b      	ldr	r3, [r7, #20]
	}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20001da4 	.word	0x20001da4
 800bc48:	200018d4 	.word	0x200018d4
 800bc4c:	20001d5c 	.word	0x20001d5c
 800bc50:	20001d60 	.word	0x20001d60
 800bc54:	20001d78 	.word	0x20001d78
 800bc58:	20001d90 	.word	0x20001d90

0800bc5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc62:	2300      	movs	r3, #0
 800bc64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc66:	4b4f      	ldr	r3, [pc, #316]	; (800bda4 <xTaskIncrementTick+0x148>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f040 808f 	bne.w	800bd8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc70:	4b4d      	ldr	r3, [pc, #308]	; (800bda8 <xTaskIncrementTick+0x14c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3301      	adds	r3, #1
 800bc76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc78:	4a4b      	ldr	r2, [pc, #300]	; (800bda8 <xTaskIncrementTick+0x14c>)
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d120      	bne.n	800bcc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc84:	4b49      	ldr	r3, [pc, #292]	; (800bdac <xTaskIncrementTick+0x150>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00a      	beq.n	800bca4 <xTaskIncrementTick+0x48>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	603b      	str	r3, [r7, #0]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <xTaskIncrementTick+0x46>
 800bca4:	4b41      	ldr	r3, [pc, #260]	; (800bdac <xTaskIncrementTick+0x150>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	4b41      	ldr	r3, [pc, #260]	; (800bdb0 <xTaskIncrementTick+0x154>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a3f      	ldr	r2, [pc, #252]	; (800bdac <xTaskIncrementTick+0x150>)
 800bcb0:	6013      	str	r3, [r2, #0]
 800bcb2:	4a3f      	ldr	r2, [pc, #252]	; (800bdb0 <xTaskIncrementTick+0x154>)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	4b3e      	ldr	r3, [pc, #248]	; (800bdb4 <xTaskIncrementTick+0x158>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	4a3d      	ldr	r2, [pc, #244]	; (800bdb4 <xTaskIncrementTick+0x158>)
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	f000 fbaf 	bl	800c424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcc6:	4b3c      	ldr	r3, [pc, #240]	; (800bdb8 <xTaskIncrementTick+0x15c>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d349      	bcc.n	800bd64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcd0:	4b36      	ldr	r3, [pc, #216]	; (800bdac <xTaskIncrementTick+0x150>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d104      	bne.n	800bce4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcda:	4b37      	ldr	r3, [pc, #220]	; (800bdb8 <xTaskIncrementTick+0x15c>)
 800bcdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bce0:	601a      	str	r2, [r3, #0]
					break;
 800bce2:	e03f      	b.n	800bd64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce4:	4b31      	ldr	r3, [pc, #196]	; (800bdac <xTaskIncrementTick+0x150>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d203      	bcs.n	800bd04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcfc:	4a2e      	ldr	r2, [pc, #184]	; (800bdb8 <xTaskIncrementTick+0x15c>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd02:	e02f      	b.n	800bd64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3304      	adds	r3, #4
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7fe f853 	bl	8009db4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d004      	beq.n	800bd20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	3318      	adds	r3, #24
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fe f84a 	bl	8009db4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd24:	4b25      	ldr	r3, [pc, #148]	; (800bdbc <xTaskIncrementTick+0x160>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d903      	bls.n	800bd34 <xTaskIncrementTick+0xd8>
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd30:	4a22      	ldr	r2, [pc, #136]	; (800bdbc <xTaskIncrementTick+0x160>)
 800bd32:	6013      	str	r3, [r2, #0]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4a1f      	ldr	r2, [pc, #124]	; (800bdc0 <xTaskIncrementTick+0x164>)
 800bd42:	441a      	add	r2, r3
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	3304      	adds	r3, #4
 800bd48:	4619      	mov	r1, r3
 800bd4a:	4610      	mov	r0, r2
 800bd4c:	f7fd ffd5 	bl	8009cfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd54:	4b1b      	ldr	r3, [pc, #108]	; (800bdc4 <xTaskIncrementTick+0x168>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d3b8      	bcc.n	800bcd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd62:	e7b5      	b.n	800bcd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd64:	4b17      	ldr	r3, [pc, #92]	; (800bdc4 <xTaskIncrementTick+0x168>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6a:	4915      	ldr	r1, [pc, #84]	; (800bdc0 <xTaskIncrementTick+0x164>)
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d901      	bls.n	800bd80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd80:	4b11      	ldr	r3, [pc, #68]	; (800bdc8 <xTaskIncrementTick+0x16c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d007      	beq.n	800bd98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	e004      	b.n	800bd98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <xTaskIncrementTick+0x170>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3301      	adds	r3, #1
 800bd94:	4a0d      	ldr	r2, [pc, #52]	; (800bdcc <xTaskIncrementTick+0x170>)
 800bd96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd98:	697b      	ldr	r3, [r7, #20]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20001dcc 	.word	0x20001dcc
 800bda8:	20001da8 	.word	0x20001da8
 800bdac:	20001d5c 	.word	0x20001d5c
 800bdb0:	20001d60 	.word	0x20001d60
 800bdb4:	20001dbc 	.word	0x20001dbc
 800bdb8:	20001dc4 	.word	0x20001dc4
 800bdbc:	20001dac 	.word	0x20001dac
 800bdc0:	200018d4 	.word	0x200018d4
 800bdc4:	200018d0 	.word	0x200018d0
 800bdc8:	20001db8 	.word	0x20001db8
 800bdcc:	20001db4 	.word	0x20001db4

0800bdd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdd6:	4b2a      	ldr	r3, [pc, #168]	; (800be80 <vTaskSwitchContext+0xb0>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d003      	beq.n	800bde6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdde:	4b29      	ldr	r3, [pc, #164]	; (800be84 <vTaskSwitchContext+0xb4>)
 800bde0:	2201      	movs	r2, #1
 800bde2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bde4:	e046      	b.n	800be74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bde6:	4b27      	ldr	r3, [pc, #156]	; (800be84 <vTaskSwitchContext+0xb4>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdec:	4b26      	ldr	r3, [pc, #152]	; (800be88 <vTaskSwitchContext+0xb8>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	60fb      	str	r3, [r7, #12]
 800bdf2:	e010      	b.n	800be16 <vTaskSwitchContext+0x46>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10a      	bne.n	800be10 <vTaskSwitchContext+0x40>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	607b      	str	r3, [r7, #4]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <vTaskSwitchContext+0x3e>
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3b01      	subs	r3, #1
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	491d      	ldr	r1, [pc, #116]	; (800be8c <vTaskSwitchContext+0xbc>)
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4613      	mov	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	440b      	add	r3, r1
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d0e4      	beq.n	800bdf4 <vTaskSwitchContext+0x24>
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	4613      	mov	r3, r2
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4a15      	ldr	r2, [pc, #84]	; (800be8c <vTaskSwitchContext+0xbc>)
 800be36:	4413      	add	r3, r2
 800be38:	60bb      	str	r3, [r7, #8]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	605a      	str	r2, [r3, #4]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	3308      	adds	r3, #8
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d104      	bne.n	800be5a <vTaskSwitchContext+0x8a>
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	605a      	str	r2, [r3, #4]
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	4a0b      	ldr	r2, [pc, #44]	; (800be90 <vTaskSwitchContext+0xc0>)
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	4a08      	ldr	r2, [pc, #32]	; (800be88 <vTaskSwitchContext+0xb8>)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be6a:	4b09      	ldr	r3, [pc, #36]	; (800be90 <vTaskSwitchContext+0xc0>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3364      	adds	r3, #100	; 0x64
 800be70:	4a08      	ldr	r2, [pc, #32]	; (800be94 <vTaskSwitchContext+0xc4>)
 800be72:	6013      	str	r3, [r2, #0]
}
 800be74:	bf00      	nop
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	20001dcc 	.word	0x20001dcc
 800be84:	20001db8 	.word	0x20001db8
 800be88:	20001dac 	.word	0x20001dac
 800be8c:	200018d4 	.word	0x200018d4
 800be90:	200018d0 	.word	0x200018d0
 800be94:	2000010c 	.word	0x2000010c

0800be98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10a      	bne.n	800bebe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	60fb      	str	r3, [r7, #12]
}
 800beba:	bf00      	nop
 800bebc:	e7fe      	b.n	800bebc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bebe:	4b07      	ldr	r3, [pc, #28]	; (800bedc <vTaskPlaceOnEventList+0x44>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3318      	adds	r3, #24
 800bec4:	4619      	mov	r1, r3
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7fd ff3b 	bl	8009d42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800becc:	2101      	movs	r1, #1
 800bece:	6838      	ldr	r0, [r7, #0]
 800bed0:	f000 ff46 	bl	800cd60 <prvAddCurrentTaskToDelayedList>
}
 800bed4:	bf00      	nop
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	200018d0 	.word	0x200018d0

0800bee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10a      	bne.n	800bf08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	617b      	str	r3, [r7, #20]
}
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf08:	4b0a      	ldr	r3, [pc, #40]	; (800bf34 <vTaskPlaceOnEventListRestricted+0x54>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3318      	adds	r3, #24
 800bf0e:	4619      	mov	r1, r3
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f7fd fef2 	bl	8009cfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bf1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf22:	6879      	ldr	r1, [r7, #4]
 800bf24:	68b8      	ldr	r0, [r7, #8]
 800bf26:	f000 ff1b 	bl	800cd60 <prvAddCurrentTaskToDelayedList>
	}
 800bf2a:	bf00      	nop
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	200018d0 	.word	0x200018d0

0800bf38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10a      	bne.n	800bf64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	60fb      	str	r3, [r7, #12]
}
 800bf60:	bf00      	nop
 800bf62:	e7fe      	b.n	800bf62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	3318      	adds	r3, #24
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fd ff23 	bl	8009db4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf6e:	4b1e      	ldr	r3, [pc, #120]	; (800bfe8 <xTaskRemoveFromEventList+0xb0>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d11d      	bne.n	800bfb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fd ff1a 	bl	8009db4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf84:	4b19      	ldr	r3, [pc, #100]	; (800bfec <xTaskRemoveFromEventList+0xb4>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d903      	bls.n	800bf94 <xTaskRemoveFromEventList+0x5c>
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	4a16      	ldr	r2, [pc, #88]	; (800bfec <xTaskRemoveFromEventList+0xb4>)
 800bf92:	6013      	str	r3, [r2, #0]
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf98:	4613      	mov	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4413      	add	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4a13      	ldr	r2, [pc, #76]	; (800bff0 <xTaskRemoveFromEventList+0xb8>)
 800bfa2:	441a      	add	r2, r3
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	3304      	adds	r3, #4
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	4610      	mov	r0, r2
 800bfac:	f7fd fea5 	bl	8009cfa <vListInsertEnd>
 800bfb0:	e005      	b.n	800bfbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	3318      	adds	r3, #24
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	480e      	ldr	r0, [pc, #56]	; (800bff4 <xTaskRemoveFromEventList+0xbc>)
 800bfba:	f7fd fe9e 	bl	8009cfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc2:	4b0d      	ldr	r3, [pc, #52]	; (800bff8 <xTaskRemoveFromEventList+0xc0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d905      	bls.n	800bfd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <xTaskRemoveFromEventList+0xc4>)
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	e001      	b.n	800bfdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bfdc:	697b      	ldr	r3, [r7, #20]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20001dcc 	.word	0x20001dcc
 800bfec:	20001dac 	.word	0x20001dac
 800bff0:	200018d4 	.word	0x200018d4
 800bff4:	20001d64 	.word	0x20001d64
 800bff8:	200018d0 	.word	0x200018d0
 800bffc:	20001db8 	.word	0x20001db8

0800c000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c008:	4b06      	ldr	r3, [pc, #24]	; (800c024 <vTaskInternalSetTimeOutState+0x24>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c010:	4b05      	ldr	r3, [pc, #20]	; (800c028 <vTaskInternalSetTimeOutState+0x28>)
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	605a      	str	r2, [r3, #4]
}
 800c018:	bf00      	nop
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	20001dbc 	.word	0x20001dbc
 800c028:	20001da8 	.word	0x20001da8

0800c02c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10a      	bne.n	800c052 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	613b      	str	r3, [r7, #16]
}
 800c04e:	bf00      	nop
 800c050:	e7fe      	b.n	800c050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10a      	bne.n	800c06e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	60fb      	str	r3, [r7, #12]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c06e:	f001 fb49 	bl	800d704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c072:	4b1d      	ldr	r3, [pc, #116]	; (800c0e8 <xTaskCheckForTimeOut+0xbc>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	69ba      	ldr	r2, [r7, #24]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c08a:	d102      	bne.n	800c092 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c08c:	2300      	movs	r3, #0
 800c08e:	61fb      	str	r3, [r7, #28]
 800c090:	e023      	b.n	800c0da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	4b15      	ldr	r3, [pc, #84]	; (800c0ec <xTaskCheckForTimeOut+0xc0>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d007      	beq.n	800c0ae <xTaskCheckForTimeOut+0x82>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	69ba      	ldr	r2, [r7, #24]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d302      	bcc.n	800c0ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	61fb      	str	r3, [r7, #28]
 800c0ac:	e015      	b.n	800c0da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	697a      	ldr	r2, [r7, #20]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d20b      	bcs.n	800c0d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	1ad2      	subs	r2, r2, r3
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7ff ff9b 	bl	800c000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	61fb      	str	r3, [r7, #28]
 800c0ce:	e004      	b.n	800c0da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0da:	f001 fb43 	bl	800d764 <vPortExitCritical>

	return xReturn;
 800c0de:	69fb      	ldr	r3, [r7, #28]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3720      	adds	r7, #32
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	20001da8 	.word	0x20001da8
 800c0ec:	20001dbc 	.word	0x20001dbc

0800c0f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0f4:	4b03      	ldr	r3, [pc, #12]	; (800c104 <vTaskMissedYield+0x14>)
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	601a      	str	r2, [r3, #0]
}
 800c0fa:	bf00      	nop
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	20001db8 	.word	0x20001db8

0800c108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c110:	f000 f852 	bl	800c1b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c114:	4b06      	ldr	r3, [pc, #24]	; (800c130 <prvIdleTask+0x28>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d9f9      	bls.n	800c110 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c11c:	4b05      	ldr	r3, [pc, #20]	; (800c134 <prvIdleTask+0x2c>)
 800c11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c12c:	e7f0      	b.n	800c110 <prvIdleTask+0x8>
 800c12e:	bf00      	nop
 800c130:	200018d4 	.word	0x200018d4
 800c134:	e000ed04 	.word	0xe000ed04

0800c138 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c13e:	2300      	movs	r3, #0
 800c140:	607b      	str	r3, [r7, #4]
 800c142:	e00c      	b.n	800c15e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	4613      	mov	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4a12      	ldr	r2, [pc, #72]	; (800c198 <prvInitialiseTaskLists+0x60>)
 800c150:	4413      	add	r3, r2
 800c152:	4618      	mov	r0, r3
 800c154:	f7fd fda4 	bl	8009ca0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	3301      	adds	r3, #1
 800c15c:	607b      	str	r3, [r7, #4]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b37      	cmp	r3, #55	; 0x37
 800c162:	d9ef      	bls.n	800c144 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c164:	480d      	ldr	r0, [pc, #52]	; (800c19c <prvInitialiseTaskLists+0x64>)
 800c166:	f7fd fd9b 	bl	8009ca0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c16a:	480d      	ldr	r0, [pc, #52]	; (800c1a0 <prvInitialiseTaskLists+0x68>)
 800c16c:	f7fd fd98 	bl	8009ca0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c170:	480c      	ldr	r0, [pc, #48]	; (800c1a4 <prvInitialiseTaskLists+0x6c>)
 800c172:	f7fd fd95 	bl	8009ca0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c176:	480c      	ldr	r0, [pc, #48]	; (800c1a8 <prvInitialiseTaskLists+0x70>)
 800c178:	f7fd fd92 	bl	8009ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c17c:	480b      	ldr	r0, [pc, #44]	; (800c1ac <prvInitialiseTaskLists+0x74>)
 800c17e:	f7fd fd8f 	bl	8009ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c182:	4b0b      	ldr	r3, [pc, #44]	; (800c1b0 <prvInitialiseTaskLists+0x78>)
 800c184:	4a05      	ldr	r2, [pc, #20]	; (800c19c <prvInitialiseTaskLists+0x64>)
 800c186:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c188:	4b0a      	ldr	r3, [pc, #40]	; (800c1b4 <prvInitialiseTaskLists+0x7c>)
 800c18a:	4a05      	ldr	r2, [pc, #20]	; (800c1a0 <prvInitialiseTaskLists+0x68>)
 800c18c:	601a      	str	r2, [r3, #0]
}
 800c18e:	bf00      	nop
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	200018d4 	.word	0x200018d4
 800c19c:	20001d34 	.word	0x20001d34
 800c1a0:	20001d48 	.word	0x20001d48
 800c1a4:	20001d64 	.word	0x20001d64
 800c1a8:	20001d78 	.word	0x20001d78
 800c1ac:	20001d90 	.word	0x20001d90
 800c1b0:	20001d5c 	.word	0x20001d5c
 800c1b4:	20001d60 	.word	0x20001d60

0800c1b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1be:	e019      	b.n	800c1f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c1c0:	f001 faa0 	bl	800d704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c4:	4b10      	ldr	r3, [pc, #64]	; (800c208 <prvCheckTasksWaitingTermination+0x50>)
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fd fdef 	bl	8009db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1d6:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <prvCheckTasksWaitingTermination+0x54>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	4a0b      	ldr	r2, [pc, #44]	; (800c20c <prvCheckTasksWaitingTermination+0x54>)
 800c1de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c1e0:	4b0b      	ldr	r3, [pc, #44]	; (800c210 <prvCheckTasksWaitingTermination+0x58>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	4a0a      	ldr	r2, [pc, #40]	; (800c210 <prvCheckTasksWaitingTermination+0x58>)
 800c1e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1ea:	f001 fabb 	bl	800d764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f8e4 	bl	800c3bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1f4:	4b06      	ldr	r3, [pc, #24]	; (800c210 <prvCheckTasksWaitingTermination+0x58>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1e1      	bne.n	800c1c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1fc:	bf00      	nop
 800c1fe:	bf00      	nop
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	20001d78 	.word	0x20001d78
 800c20c:	20001da4 	.word	0x20001da4
 800c210:	20001d8c 	.word	0x20001d8c

0800c214 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
 800c220:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d102      	bne.n	800c22e <vTaskGetInfo+0x1a>
 800c228:	4b2c      	ldr	r3, [pc, #176]	; (800c2dc <vTaskGetInfo+0xc8>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	e000      	b.n	800c230 <vTaskGetInfo+0x1c>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2200      	movs	r2, #0
 800c266:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	2b05      	cmp	r3, #5
 800c26c:	d01a      	beq.n	800c2a4 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800c26e:	4b1b      	ldr	r3, [pc, #108]	; (800c2dc <vTaskGetInfo+0xc8>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	429a      	cmp	r2, r3
 800c276:	d103      	bne.n	800c280 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2200      	movs	r2, #0
 800c27c:	731a      	strb	r2, [r3, #12]
 800c27e:	e018      	b.n	800c2b2 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	78fa      	ldrb	r2, [r7, #3]
 800c284:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800c286:	78fb      	ldrb	r3, [r7, #3]
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d112      	bne.n	800c2b2 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800c28c:	f7ff fb9c 	bl	800b9c8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2202      	movs	r2, #2
 800c29c:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800c29e:	f7ff fba1 	bl	800b9e4 <xTaskResumeAll>
 800c2a2:	e006      	b.n	800c2b2 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800c2a4:	6978      	ldr	r0, [r7, #20]
 800c2a6:	f7ff f9b3 	bl	800b610 <eTaskGetState>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d009      	beq.n	800c2cc <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 f861 	bl	800c384 <prvTaskCheckFreeStackSpace>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800c2ca:	e002      	b.n	800c2d2 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	841a      	strh	r2, [r3, #32]
	}
 800c2d2:	bf00      	nop
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	200018d0 	.word	0x200018d0

0800c2e0 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08a      	sub	sp, #40	; 0x28
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d03f      	beq.n	800c37a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	623b      	str	r3, [r7, #32]
 800c2fe:	6a3b      	ldr	r3, [r7, #32]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	685a      	ldr	r2, [r3, #4]
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	605a      	str	r2, [r3, #4]
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	3308      	adds	r3, #8
 800c310:	429a      	cmp	r2, r3
 800c312:	d104      	bne.n	800c31e <prvListTasksWithinSingleList+0x3e>
 800c314:	6a3b      	ldr	r3, [r7, #32]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	605a      	str	r2, [r3, #4]
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	61bb      	str	r3, [r7, #24]
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	605a      	str	r2, [r3, #4]
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	3308      	adds	r3, #8
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d104      	bne.n	800c34a <prvListTasksWithinSingleList+0x6a>
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	605a      	str	r2, [r3, #4]
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800c352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c354:	4613      	mov	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	4413      	add	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	461a      	mov	r2, r3
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	1899      	adds	r1, r3, r2
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	2201      	movs	r2, #1
 800c366:	6978      	ldr	r0, [r7, #20]
 800c368:	f7ff ff54 	bl	800c214 <vTaskGetInfo>
				uxTask++;
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	3301      	adds	r3, #1
 800c370:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	429a      	cmp	r2, r3
 800c378:	d1d5      	bne.n	800c326 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3728      	adds	r7, #40	; 0x28
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c38c:	2300      	movs	r3, #0
 800c38e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c390:	e005      	b.n	800c39e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	3301      	adds	r3, #1
 800c396:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3301      	adds	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2ba5      	cmp	r3, #165	; 0xa5
 800c3a4:	d0f5      	beq.n	800c392 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	089b      	lsrs	r3, r3, #2
 800c3aa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	b29b      	uxth	r3, r3
	}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	3364      	adds	r3, #100	; 0x64
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f003 fbe1 	bl	800fb90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d108      	bne.n	800c3ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f001 fb7f 	bl	800dae0 <vPortFree>
				vPortFree( pxTCB );
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f001 fb7c 	bl	800dae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3e8:	e018      	b.n	800c41c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d103      	bne.n	800c3fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f001 fb73 	bl	800dae0 <vPortFree>
	}
 800c3fa:	e00f      	b.n	800c41c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c402:	2b02      	cmp	r3, #2
 800c404:	d00a      	beq.n	800c41c <prvDeleteTCB+0x60>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	60fb      	str	r3, [r7, #12]
}
 800c418:	bf00      	nop
 800c41a:	e7fe      	b.n	800c41a <prvDeleteTCB+0x5e>
	}
 800c41c:	bf00      	nop
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c42a:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <prvResetNextTaskUnblockTime+0x38>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d104      	bne.n	800c43e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <prvResetNextTaskUnblockTime+0x3c>)
 800c436:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c43a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c43c:	e008      	b.n	800c450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c43e:	4b07      	ldr	r3, [pc, #28]	; (800c45c <prvResetNextTaskUnblockTime+0x38>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	4a04      	ldr	r2, [pc, #16]	; (800c460 <prvResetNextTaskUnblockTime+0x3c>)
 800c44e:	6013      	str	r3, [r2, #0]
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	20001d5c 	.word	0x20001d5c
 800c460:	20001dc4 	.word	0x20001dc4

0800c464 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c46a:	4b05      	ldr	r3, [pc, #20]	; (800c480 <xTaskGetCurrentTaskHandle+0x1c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c470:	687b      	ldr	r3, [r7, #4]
	}
 800c472:	4618      	mov	r0, r3
 800c474:	370c      	adds	r7, #12
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	200018d0 	.word	0x200018d0

0800c484 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c48a:	4b0b      	ldr	r3, [pc, #44]	; (800c4b8 <xTaskGetSchedulerState+0x34>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d102      	bne.n	800c498 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c492:	2301      	movs	r3, #1
 800c494:	607b      	str	r3, [r7, #4]
 800c496:	e008      	b.n	800c4aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c498:	4b08      	ldr	r3, [pc, #32]	; (800c4bc <xTaskGetSchedulerState+0x38>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	607b      	str	r3, [r7, #4]
 800c4a4:	e001      	b.n	800c4aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4aa:	687b      	ldr	r3, [r7, #4]
	}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	20001db0 	.word	0x20001db0
 800c4bc:	20001dcc 	.word	0x20001dcc

0800c4c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d051      	beq.n	800c57a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4da:	4b2a      	ldr	r3, [pc, #168]	; (800c584 <xTaskPriorityInherit+0xc4>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d241      	bcs.n	800c568 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	db06      	blt.n	800c4fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ec:	4b25      	ldr	r3, [pc, #148]	; (800c584 <xTaskPriorityInherit+0xc4>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	6959      	ldr	r1, [r3, #20]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4a1f      	ldr	r2, [pc, #124]	; (800c588 <xTaskPriorityInherit+0xc8>)
 800c50c:	4413      	add	r3, r2
 800c50e:	4299      	cmp	r1, r3
 800c510:	d122      	bne.n	800c558 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	3304      	adds	r3, #4
 800c516:	4618      	mov	r0, r3
 800c518:	f7fd fc4c 	bl	8009db4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c51c:	4b19      	ldr	r3, [pc, #100]	; (800c584 <xTaskPriorityInherit+0xc4>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52a:	4b18      	ldr	r3, [pc, #96]	; (800c58c <xTaskPriorityInherit+0xcc>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d903      	bls.n	800c53a <xTaskPriorityInherit+0x7a>
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c536:	4a15      	ldr	r2, [pc, #84]	; (800c58c <xTaskPriorityInherit+0xcc>)
 800c538:	6013      	str	r3, [r2, #0]
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53e:	4613      	mov	r3, r2
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4413      	add	r3, r2
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	4a10      	ldr	r2, [pc, #64]	; (800c588 <xTaskPriorityInherit+0xc8>)
 800c548:	441a      	add	r2, r3
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	3304      	adds	r3, #4
 800c54e:	4619      	mov	r1, r3
 800c550:	4610      	mov	r0, r2
 800c552:	f7fd fbd2 	bl	8009cfa <vListInsertEnd>
 800c556:	e004      	b.n	800c562 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c558:	4b0a      	ldr	r3, [pc, #40]	; (800c584 <xTaskPriorityInherit+0xc4>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c562:	2301      	movs	r3, #1
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	e008      	b.n	800c57a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c56c:	4b05      	ldr	r3, [pc, #20]	; (800c584 <xTaskPriorityInherit+0xc4>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c572:	429a      	cmp	r2, r3
 800c574:	d201      	bcs.n	800c57a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c576:	2301      	movs	r3, #1
 800c578:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c57a:	68fb      	ldr	r3, [r7, #12]
	}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	200018d0 	.word	0x200018d0
 800c588:	200018d4 	.word	0x200018d4
 800c58c:	20001dac 	.word	0x20001dac

0800c590 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c59c:	2300      	movs	r3, #0
 800c59e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d056      	beq.n	800c654 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c5a6:	4b2e      	ldr	r3, [pc, #184]	; (800c660 <xTaskPriorityDisinherit+0xd0>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	693a      	ldr	r2, [r7, #16]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d00a      	beq.n	800c5c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	60fb      	str	r3, [r7, #12]
}
 800c5c2:	bf00      	nop
 800c5c4:	e7fe      	b.n	800c5c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10a      	bne.n	800c5e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	60bb      	str	r3, [r7, #8]
}
 800c5e0:	bf00      	nop
 800c5e2:	e7fe      	b.n	800c5e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5e8:	1e5a      	subs	r2, r3, #1
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d02c      	beq.n	800c654 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d128      	bne.n	800c654 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	3304      	adds	r3, #4
 800c606:	4618      	mov	r0, r3
 800c608:	f7fd fbd4 	bl	8009db4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c618:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c624:	4b0f      	ldr	r3, [pc, #60]	; (800c664 <xTaskPriorityDisinherit+0xd4>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d903      	bls.n	800c634 <xTaskPriorityDisinherit+0xa4>
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c630:	4a0c      	ldr	r2, [pc, #48]	; (800c664 <xTaskPriorityDisinherit+0xd4>)
 800c632:	6013      	str	r3, [r2, #0]
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4a09      	ldr	r2, [pc, #36]	; (800c668 <xTaskPriorityDisinherit+0xd8>)
 800c642:	441a      	add	r2, r3
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	3304      	adds	r3, #4
 800c648:	4619      	mov	r1, r3
 800c64a:	4610      	mov	r0, r2
 800c64c:	f7fd fb55 	bl	8009cfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c650:	2301      	movs	r3, #1
 800c652:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c654:	697b      	ldr	r3, [r7, #20]
	}
 800c656:	4618      	mov	r0, r3
 800c658:	3718      	adds	r7, #24
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	200018d0 	.word	0x200018d0
 800c664:	20001dac 	.word	0x20001dac
 800c668:	200018d4 	.word	0x200018d4

0800c66c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b088      	sub	sp, #32
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c67a:	2301      	movs	r3, #1
 800c67c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d06a      	beq.n	800c75a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10a      	bne.n	800c6a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	60fb      	str	r3, [r7, #12]
}
 800c69e:	bf00      	nop
 800c6a0:	e7fe      	b.n	800c6a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d902      	bls.n	800c6b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	61fb      	str	r3, [r7, #28]
 800c6b0:	e002      	b.n	800c6b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6bc:	69fa      	ldr	r2, [r7, #28]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d04b      	beq.n	800c75a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d146      	bne.n	800c75a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c6cc:	4b25      	ldr	r3, [pc, #148]	; (800c764 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d10a      	bne.n	800c6ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	60bb      	str	r3, [r7, #8]
}
 800c6e8:	bf00      	nop
 800c6ea:	e7fe      	b.n	800c6ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	69fa      	ldr	r2, [r7, #28]
 800c6f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	699b      	ldr	r3, [r3, #24]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	db04      	blt.n	800c70a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	6959      	ldr	r1, [r3, #20]
 800c70e:	693a      	ldr	r2, [r7, #16]
 800c710:	4613      	mov	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4a13      	ldr	r2, [pc, #76]	; (800c768 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c71a:	4413      	add	r3, r2
 800c71c:	4299      	cmp	r1, r3
 800c71e:	d11c      	bne.n	800c75a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	3304      	adds	r3, #4
 800c724:	4618      	mov	r0, r3
 800c726:	f7fd fb45 	bl	8009db4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72e:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	429a      	cmp	r2, r3
 800c734:	d903      	bls.n	800c73e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73a:	4a0c      	ldr	r2, [pc, #48]	; (800c76c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c73c:	6013      	str	r3, [r2, #0]
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c742:	4613      	mov	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4413      	add	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4a07      	ldr	r2, [pc, #28]	; (800c768 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c74c:	441a      	add	r2, r3
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	3304      	adds	r3, #4
 800c752:	4619      	mov	r1, r3
 800c754:	4610      	mov	r0, r2
 800c756:	f7fd fad0 	bl	8009cfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c75a:	bf00      	nop
 800c75c:	3720      	adds	r7, #32
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	200018d0 	.word	0x200018d0
 800c768:	200018d4 	.word	0x200018d4
 800c76c:	20001dac 	.word	0x20001dac

0800c770 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f003 fa93 	bl	800fca8 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7f3 fd96 	bl	80002b4 <strlen>
 800c788:	60f8      	str	r0, [r7, #12]
 800c78a:	e007      	b.n	800c79c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	4413      	add	r3, r2
 800c792:	2220      	movs	r2, #32
 800c794:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3301      	adds	r3, #1
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b1e      	cmp	r3, #30
 800c7a0:	d9f4      	bls.n	800c78c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	4413      	add	r3, r2
	}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800c7bc:	b590      	push	{r4, r7, lr}
 800c7be:	b089      	sub	sp, #36	; 0x24
 800c7c0:	af02      	add	r7, sp, #8
 800c7c2:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c7ca:	4b45      	ldr	r3, [pc, #276]	; (800c8e0 <vTaskList+0x124>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c7d0:	4b43      	ldr	r3, [pc, #268]	; (800c8e0 <vTaskList+0x124>)
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	00db      	lsls	r3, r3, #3
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f001 f8b3 	bl	800d948 <pvPortMalloc>
 800c7e2:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d076      	beq.n	800c8d8 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	68f9      	ldr	r1, [r7, #12]
 800c7ee:	68b8      	ldr	r0, [r7, #8]
 800c7f0:	f7ff f9a6 	bl	800bb40 <uxTaskGetSystemState>
 800c7f4:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	617b      	str	r3, [r7, #20]
 800c7fa:	e066      	b.n	800c8ca <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800c7fc:	697a      	ldr	r2, [r7, #20]
 800c7fe:	4613      	mov	r3, r2
 800c800:	00db      	lsls	r3, r3, #3
 800c802:	4413      	add	r3, r2
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	461a      	mov	r2, r3
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	4413      	add	r3, r2
 800c80c:	7b1b      	ldrb	r3, [r3, #12]
 800c80e:	2b04      	cmp	r3, #4
 800c810:	d81b      	bhi.n	800c84a <vTaskList+0x8e>
 800c812:	a201      	add	r2, pc, #4	; (adr r2, 800c818 <vTaskList+0x5c>)
 800c814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c818:	0800c82d 	.word	0x0800c82d
 800c81c:	0800c833 	.word	0x0800c833
 800c820:	0800c839 	.word	0x0800c839
 800c824:	0800c83f 	.word	0x0800c83f
 800c828:	0800c845 	.word	0x0800c845
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800c82c:	2358      	movs	r3, #88	; 0x58
 800c82e:	74fb      	strb	r3, [r7, #19]
										break;
 800c830:	e00e      	b.n	800c850 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800c832:	2352      	movs	r3, #82	; 0x52
 800c834:	74fb      	strb	r3, [r7, #19]
										break;
 800c836:	e00b      	b.n	800c850 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800c838:	2342      	movs	r3, #66	; 0x42
 800c83a:	74fb      	strb	r3, [r7, #19]
										break;
 800c83c:	e008      	b.n	800c850 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800c83e:	2353      	movs	r3, #83	; 0x53
 800c840:	74fb      	strb	r3, [r7, #19]
										break;
 800c842:	e005      	b.n	800c850 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800c844:	2344      	movs	r3, #68	; 0x44
 800c846:	74fb      	strb	r3, [r7, #19]
										break;
 800c848:	e002      	b.n	800c850 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800c84a:	2300      	movs	r3, #0
 800c84c:	74fb      	strb	r3, [r7, #19]
										break;
 800c84e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	4613      	mov	r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	461a      	mov	r2, r3
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	4413      	add	r3, r2
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	4619      	mov	r1, r3
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f7ff ff83 	bl	800c770 <prvWriteNameToBuffer>
 800c86a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c86c:	7cf9      	ldrb	r1, [r7, #19]
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	4613      	mov	r3, r2
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	4413      	add	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	461a      	mov	r2, r3
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	4413      	add	r3, r2
 800c87e:	6918      	ldr	r0, [r3, #16]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	4613      	mov	r3, r2
 800c884:	00db      	lsls	r3, r3, #3
 800c886:	4413      	add	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	461a      	mov	r2, r3
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	4413      	add	r3, r2
 800c890:	8c1b      	ldrh	r3, [r3, #32]
 800c892:	461c      	mov	r4, r3
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	4613      	mov	r3, r2
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	4413      	add	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	461a      	mov	r2, r3
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	9400      	str	r4, [sp, #0]
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	460a      	mov	r2, r1
 800c8ae:	490d      	ldr	r1, [pc, #52]	; (800c8e4 <vTaskList+0x128>)
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f003 f9d9 	bl	800fc68 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7f3 fcfc 	bl	80002b4 <strlen>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	617b      	str	r3, [r7, #20]
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d394      	bcc.n	800c7fc <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800c8d2:	68b8      	ldr	r0, [r7, #8]
 800c8d4:	f001 f904 	bl	800dae0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8d8:	bf00      	nop
 800c8da:	371c      	adds	r7, #28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd90      	pop	{r4, r7, pc}
 800c8e0:	20001da4 	.word	0x20001da4
 800c8e4:	08010c60 	.word	0x08010c60

0800c8e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c8e8:	b480      	push	{r7}
 800c8ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c8ec:	4b07      	ldr	r3, [pc, #28]	; (800c90c <pvTaskIncrementMutexHeldCount+0x24>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d004      	beq.n	800c8fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c8f4:	4b05      	ldr	r3, [pc, #20]	; (800c90c <pvTaskIncrementMutexHeldCount+0x24>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c8fa:	3201      	adds	r2, #1
 800c8fc:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800c8fe:	4b03      	ldr	r3, [pc, #12]	; (800c90c <pvTaskIncrementMutexHeldCount+0x24>)
 800c900:	681b      	ldr	r3, [r3, #0]
	}
 800c902:	4618      	mov	r0, r3
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	200018d0 	.word	0x200018d0

0800c910 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
 800c91c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c91e:	f000 fef1 	bl	800d704 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c922:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <xTaskNotifyWait+0xb8>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d01c      	beq.n	800c96a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c930:	4b25      	ldr	r3, [pc, #148]	; (800c9c8 <xTaskNotifyWait+0xb8>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	43d2      	mvns	r2, r2
 800c93c:	400a      	ands	r2, r1
 800c93e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c942:	4b21      	ldr	r3, [pc, #132]	; (800c9c8 <xTaskNotifyWait+0xb8>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2201      	movs	r2, #1
 800c948:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00b      	beq.n	800c96a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c952:	2101      	movs	r1, #1
 800c954:	6838      	ldr	r0, [r7, #0]
 800c956:	f000 fa03 	bl	800cd60 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c95a:	4b1c      	ldr	r3, [pc, #112]	; (800c9cc <xTaskNotifyWait+0xbc>)
 800c95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c960:	601a      	str	r2, [r3, #0]
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c96a:	f000 fefb 	bl	800d764 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c96e:	f000 fec9 	bl	800d704 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d005      	beq.n	800c984 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c978:	4b13      	ldr	r3, [pc, #76]	; (800c9c8 <xTaskNotifyWait+0xb8>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c984:	4b10      	ldr	r3, [pc, #64]	; (800c9c8 <xTaskNotifyWait+0xb8>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d002      	beq.n	800c998 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c992:	2300      	movs	r3, #0
 800c994:	617b      	str	r3, [r7, #20]
 800c996:	e00a      	b.n	800c9ae <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c998:	4b0b      	ldr	r3, [pc, #44]	; (800c9c8 <xTaskNotifyWait+0xb8>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	43d2      	mvns	r2, r2
 800c9a4:	400a      	ands	r2, r1
 800c9a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c9ae:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <xTaskNotifyWait+0xb8>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 800c9b8:	f000 fed4 	bl	800d764 <vPortExitCritical>

		return xReturn;
 800c9bc:	697b      	ldr	r3, [r7, #20]
	}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3718      	adds	r7, #24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200018d0 	.word	0x200018d0
 800c9cc:	e000ed04 	.word	0xe000ed04

0800c9d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b08a      	sub	sp, #40	; 0x28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	603b      	str	r3, [r7, #0]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d10a      	bne.n	800ca00 <xTaskGenericNotify+0x30>
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	61bb      	str	r3, [r7, #24]
}
 800c9fc:	bf00      	nop
 800c9fe:	e7fe      	b.n	800c9fe <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ca04:	f000 fe7e 	bl	800d704 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d004      	beq.n	800ca18 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ca1e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	2202      	movs	r2, #2
 800ca24:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	2b04      	cmp	r3, #4
 800ca2c:	d82d      	bhi.n	800ca8a <xTaskGenericNotify+0xba>
 800ca2e:	a201      	add	r2, pc, #4	; (adr r2, 800ca34 <xTaskGenericNotify+0x64>)
 800ca30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca34:	0800caad 	.word	0x0800caad
 800ca38:	0800ca49 	.word	0x0800ca49
 800ca3c:	0800ca5b 	.word	0x0800ca5b
 800ca40:	0800ca6b 	.word	0x0800ca6b
 800ca44:	0800ca75 	.word	0x0800ca75
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ca48:	6a3b      	ldr	r3, [r7, #32]
 800ca4a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	431a      	orrs	r2, r3
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800ca58:	e02b      	b.n	800cab2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ca5a:	6a3b      	ldr	r3, [r7, #32]
 800ca5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ca60:	1c5a      	adds	r2, r3, #1
 800ca62:	6a3b      	ldr	r3, [r7, #32]
 800ca64:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800ca68:	e023      	b.n	800cab2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ca6a:	6a3b      	ldr	r3, [r7, #32]
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800ca72:	e01e      	b.n	800cab2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ca74:	7ffb      	ldrb	r3, [r7, #31]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d004      	beq.n	800ca84 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ca7a:	6a3b      	ldr	r3, [r7, #32]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ca82:	e016      	b.n	800cab2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800ca84:	2300      	movs	r3, #0
 800ca86:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ca88:	e013      	b.n	800cab2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ca8a:	6a3b      	ldr	r3, [r7, #32]
 800ca8c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ca90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca94:	d00c      	beq.n	800cab0 <xTaskGenericNotify+0xe0>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	617b      	str	r3, [r7, #20]
}
 800caa8:	bf00      	nop
 800caaa:	e7fe      	b.n	800caaa <xTaskGenericNotify+0xda>
					break;
 800caac:	bf00      	nop
 800caae:	e000      	b.n	800cab2 <xTaskGenericNotify+0xe2>

					break;
 800cab0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cab2:	7ffb      	ldrb	r3, [r7, #31]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d13a      	bne.n	800cb2e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	3304      	adds	r3, #4
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7fd f979 	bl	8009db4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac6:	4b1d      	ldr	r3, [pc, #116]	; (800cb3c <xTaskGenericNotify+0x16c>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d903      	bls.n	800cad6 <xTaskGenericNotify+0x106>
 800cace:	6a3b      	ldr	r3, [r7, #32]
 800cad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad2:	4a1a      	ldr	r2, [pc, #104]	; (800cb3c <xTaskGenericNotify+0x16c>)
 800cad4:	6013      	str	r3, [r2, #0]
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cada:	4613      	mov	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4413      	add	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4a17      	ldr	r2, [pc, #92]	; (800cb40 <xTaskGenericNotify+0x170>)
 800cae4:	441a      	add	r2, r3
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	3304      	adds	r3, #4
 800caea:	4619      	mov	r1, r3
 800caec:	4610      	mov	r0, r2
 800caee:	f7fd f904 	bl	8009cfa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800caf2:	6a3b      	ldr	r3, [r7, #32]
 800caf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00a      	beq.n	800cb10 <xTaskGenericNotify+0x140>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	613b      	str	r3, [r7, #16]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb14:	4b0b      	ldr	r3, [pc, #44]	; (800cb44 <xTaskGenericNotify+0x174>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d907      	bls.n	800cb2e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cb1e:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <xTaskGenericNotify+0x178>)
 800cb20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cb2e:	f000 fe19 	bl	800d764 <vPortExitCritical>

		return xReturn;
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3728      	adds	r7, #40	; 0x28
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	20001dac 	.word	0x20001dac
 800cb40:	200018d4 	.word	0x200018d4
 800cb44:	200018d0 	.word	0x200018d0
 800cb48:	e000ed04 	.word	0xe000ed04

0800cb4c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08e      	sub	sp, #56	; 0x38
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	603b      	str	r3, [r7, #0]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10a      	bne.n	800cb7c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800cb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb78:	bf00      	nop
 800cb7a:	e7fe      	b.n	800cb7a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb7c:	f000 fea4 	bl	800d8c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cb84:	f3ef 8211 	mrs	r2, BASEPRI
 800cb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	623a      	str	r2, [r7, #32]
 800cb9a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cb9c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d004      	beq.n	800cbb0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cbb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	2202      	movs	r2, #2
 800cbbe:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	2b04      	cmp	r3, #4
 800cbc6:	d82f      	bhi.n	800cc28 <xTaskGenericNotifyFromISR+0xdc>
 800cbc8:	a201      	add	r2, pc, #4	; (adr r2, 800cbd0 <xTaskGenericNotifyFromISR+0x84>)
 800cbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbce:	bf00      	nop
 800cbd0:	0800cc4b 	.word	0x0800cc4b
 800cbd4:	0800cbe5 	.word	0x0800cbe5
 800cbd8:	0800cbf7 	.word	0x0800cbf7
 800cbdc:	0800cc07 	.word	0x0800cc07
 800cbe0:	0800cc11 	.word	0x0800cc11
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	431a      	orrs	r2, r3
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800cbf4:	e02c      	b.n	800cc50 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cbfc:	1c5a      	adds	r2, r3, #1
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800cc04:	e024      	b.n	800cc50 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800cc0e:	e01f      	b.n	800cc50 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cc10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d004      	beq.n	800cc22 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	68ba      	ldr	r2, [r7, #8]
 800cc1c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cc20:	e016      	b.n	800cc50 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800cc22:	2300      	movs	r3, #0
 800cc24:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800cc26:	e013      	b.n	800cc50 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cc2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc32:	d00c      	beq.n	800cc4e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	61bb      	str	r3, [r7, #24]
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800cc4a:	bf00      	nop
 800cc4c:	e000      	b.n	800cc50 <xTaskGenericNotifyFromISR+0x104>
					break;
 800cc4e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cc50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d146      	bne.n	800cce6 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00a      	beq.n	800cc76 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	617b      	str	r3, [r7, #20]
}
 800cc72:	bf00      	nop
 800cc74:	e7fe      	b.n	800cc74 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc76:	4b21      	ldr	r3, [pc, #132]	; (800ccfc <xTaskGenericNotifyFromISR+0x1b0>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d11d      	bne.n	800ccba <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	3304      	adds	r3, #4
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fd f896 	bl	8009db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8c:	4b1c      	ldr	r3, [pc, #112]	; (800cd00 <xTaskGenericNotifyFromISR+0x1b4>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d903      	bls.n	800cc9c <xTaskGenericNotifyFromISR+0x150>
 800cc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	4a19      	ldr	r2, [pc, #100]	; (800cd00 <xTaskGenericNotifyFromISR+0x1b4>)
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca0:	4613      	mov	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	4413      	add	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4a16      	ldr	r2, [pc, #88]	; (800cd04 <xTaskGenericNotifyFromISR+0x1b8>)
 800ccaa:	441a      	add	r2, r3
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	3304      	adds	r3, #4
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	f7fd f821 	bl	8009cfa <vListInsertEnd>
 800ccb8:	e005      	b.n	800ccc6 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	3318      	adds	r3, #24
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	4811      	ldr	r0, [pc, #68]	; (800cd08 <xTaskGenericNotifyFromISR+0x1bc>)
 800ccc2:	f7fd f81a 	bl	8009cfa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccca:	4b10      	ldr	r3, [pc, #64]	; (800cd0c <xTaskGenericNotifyFromISR+0x1c0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d908      	bls.n	800cce6 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ccd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d002      	beq.n	800cce0 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ccda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccdc:	2201      	movs	r2, #1
 800ccde:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cce0:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <xTaskGenericNotifyFromISR+0x1c4>)
 800cce2:	2201      	movs	r2, #1
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	f383 8811 	msr	BASEPRI, r3
}
 800ccf0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ccf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3738      	adds	r7, #56	; 0x38
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	20001dcc 	.word	0x20001dcc
 800cd00:	20001dac 	.word	0x20001dac
 800cd04:	200018d4 	.word	0x200018d4
 800cd08:	20001d64 	.word	0x20001d64
 800cd0c:	200018d0 	.word	0x200018d0
 800cd10:	20001db8 	.word	0x20001db8

0800cd14 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d102      	bne.n	800cd28 <xTaskNotifyStateClear+0x14>
 800cd22:	4b0e      	ldr	r3, [pc, #56]	; (800cd5c <xTaskNotifyStateClear+0x48>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	e000      	b.n	800cd2a <xTaskNotifyStateClear+0x16>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800cd2c:	f000 fcea 	bl	800d704 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d106      	bne.n	800cd4a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 800cd44:	2301      	movs	r3, #1
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	e001      	b.n	800cd4e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800cd4e:	f000 fd09 	bl	800d764 <vPortExitCritical>

		return xReturn;
 800cd52:	68fb      	ldr	r3, [r7, #12]
	}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	200018d0 	.word	0x200018d0

0800cd60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd6a:	4b21      	ldr	r3, [pc, #132]	; (800cdf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd70:	4b20      	ldr	r3, [pc, #128]	; (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3304      	adds	r3, #4
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fd f81c 	bl	8009db4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd82:	d10a      	bne.n	800cd9a <prvAddCurrentTaskToDelayedList+0x3a>
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d007      	beq.n	800cd9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd8a:	4b1a      	ldr	r3, [pc, #104]	; (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3304      	adds	r3, #4
 800cd90:	4619      	mov	r1, r3
 800cd92:	4819      	ldr	r0, [pc, #100]	; (800cdf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800cd94:	f7fc ffb1 	bl	8009cfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd98:	e026      	b.n	800cde8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4413      	add	r3, r2
 800cda0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cda2:	4b14      	ldr	r3, [pc, #80]	; (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d209      	bcs.n	800cdc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdb2:	4b12      	ldr	r3, [pc, #72]	; (800cdfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	4b0f      	ldr	r3, [pc, #60]	; (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3304      	adds	r3, #4
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	f7fc ffbf 	bl	8009d42 <vListInsert>
}
 800cdc4:	e010      	b.n	800cde8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdc6:	4b0e      	ldr	r3, [pc, #56]	; (800ce00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	4b0a      	ldr	r3, [pc, #40]	; (800cdf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	3304      	adds	r3, #4
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	f7fc ffb5 	bl	8009d42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d202      	bcs.n	800cde8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cde2:	4a08      	ldr	r2, [pc, #32]	; (800ce04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	6013      	str	r3, [r2, #0]
}
 800cde8:	bf00      	nop
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	20001da8 	.word	0x20001da8
 800cdf4:	200018d0 	.word	0x200018d0
 800cdf8:	20001d90 	.word	0x20001d90
 800cdfc:	20001d60 	.word	0x20001d60
 800ce00:	20001d5c 	.word	0x20001d5c
 800ce04:	20001dc4 	.word	0x20001dc4

0800ce08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08a      	sub	sp, #40	; 0x28
 800ce0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce12:	f000 fb07 	bl	800d424 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce16:	4b1c      	ldr	r3, [pc, #112]	; (800ce88 <xTimerCreateTimerTask+0x80>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d021      	beq.n	800ce62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce26:	1d3a      	adds	r2, r7, #4
 800ce28:	f107 0108 	add.w	r1, r7, #8
 800ce2c:	f107 030c 	add.w	r3, r7, #12
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fc ff1b 	bl	8009c6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce36:	6879      	ldr	r1, [r7, #4]
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	9202      	str	r2, [sp, #8]
 800ce3e:	9301      	str	r3, [sp, #4]
 800ce40:	2302      	movs	r3, #2
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	2300      	movs	r3, #0
 800ce46:	460a      	mov	r2, r1
 800ce48:	4910      	ldr	r1, [pc, #64]	; (800ce8c <xTimerCreateTimerTask+0x84>)
 800ce4a:	4811      	ldr	r0, [pc, #68]	; (800ce90 <xTimerCreateTimerTask+0x88>)
 800ce4c:	f7fe f9f4 	bl	800b238 <xTaskCreateStatic>
 800ce50:	4603      	mov	r3, r0
 800ce52:	4a10      	ldr	r2, [pc, #64]	; (800ce94 <xTimerCreateTimerTask+0x8c>)
 800ce54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce56:	4b0f      	ldr	r3, [pc, #60]	; (800ce94 <xTimerCreateTimerTask+0x8c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d001      	beq.n	800ce62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10a      	bne.n	800ce7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	613b      	str	r3, [r7, #16]
}
 800ce7a:	bf00      	nop
 800ce7c:	e7fe      	b.n	800ce7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce7e:	697b      	ldr	r3, [r7, #20]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3718      	adds	r7, #24
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20001e00 	.word	0x20001e00
 800ce8c:	08010c70 	.word	0x08010c70
 800ce90:	0800cfcd 	.word	0x0800cfcd
 800ce94:	20001e04 	.word	0x20001e04

0800ce98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b08a      	sub	sp, #40	; 0x28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
 800cea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cea6:	2300      	movs	r3, #0
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10a      	bne.n	800cec6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ceb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb4:	f383 8811 	msr	BASEPRI, r3
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	f3bf 8f4f 	dsb	sy
 800cec0:	623b      	str	r3, [r7, #32]
}
 800cec2:	bf00      	nop
 800cec4:	e7fe      	b.n	800cec4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cec6:	4b1a      	ldr	r3, [pc, #104]	; (800cf30 <xTimerGenericCommand+0x98>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d02a      	beq.n	800cf24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	2b05      	cmp	r3, #5
 800cede:	dc18      	bgt.n	800cf12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cee0:	f7ff fad0 	bl	800c484 <xTaskGetSchedulerState>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d109      	bne.n	800cefe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ceea:	4b11      	ldr	r3, [pc, #68]	; (800cf30 <xTimerGenericCommand+0x98>)
 800ceec:	6818      	ldr	r0, [r3, #0]
 800ceee:	f107 0110 	add.w	r1, r7, #16
 800cef2:	2300      	movs	r3, #0
 800cef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cef6:	f7fd f8c5 	bl	800a084 <xQueueGenericSend>
 800cefa:	6278      	str	r0, [r7, #36]	; 0x24
 800cefc:	e012      	b.n	800cf24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cefe:	4b0c      	ldr	r3, [pc, #48]	; (800cf30 <xTimerGenericCommand+0x98>)
 800cf00:	6818      	ldr	r0, [r3, #0]
 800cf02:	f107 0110 	add.w	r1, r7, #16
 800cf06:	2300      	movs	r3, #0
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f7fd f8bb 	bl	800a084 <xQueueGenericSend>
 800cf0e:	6278      	str	r0, [r7, #36]	; 0x24
 800cf10:	e008      	b.n	800cf24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf12:	4b07      	ldr	r3, [pc, #28]	; (800cf30 <xTimerGenericCommand+0x98>)
 800cf14:	6818      	ldr	r0, [r3, #0]
 800cf16:	f107 0110 	add.w	r1, r7, #16
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	f7fd f9af 	bl	800a280 <xQueueGenericSendFromISR>
 800cf22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3728      	adds	r7, #40	; 0x28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	20001e00 	.word	0x20001e00

0800cf34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af02      	add	r7, sp, #8
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf3e:	4b22      	ldr	r3, [pc, #136]	; (800cfc8 <prvProcessExpiredTimer+0x94>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fc ff31 	bl	8009db4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf58:	f003 0304 	and.w	r3, r3, #4
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d022      	beq.n	800cfa6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	699a      	ldr	r2, [r3, #24]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	18d1      	adds	r1, r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	683a      	ldr	r2, [r7, #0]
 800cf6c:	6978      	ldr	r0, [r7, #20]
 800cf6e:	f000 f8d1 	bl	800d114 <prvInsertTimerInActiveList>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d01f      	beq.n	800cfb8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf78:	2300      	movs	r3, #0
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	2100      	movs	r1, #0
 800cf82:	6978      	ldr	r0, [r7, #20]
 800cf84:	f7ff ff88 	bl	800ce98 <xTimerGenericCommand>
 800cf88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d113      	bne.n	800cfb8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	60fb      	str	r3, [r7, #12]
}
 800cfa2:	bf00      	nop
 800cfa4:	e7fe      	b.n	800cfa4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfac:	f023 0301 	bic.w	r3, r3, #1
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	6a1b      	ldr	r3, [r3, #32]
 800cfbc:	6978      	ldr	r0, [r7, #20]
 800cfbe:	4798      	blx	r3
}
 800cfc0:	bf00      	nop
 800cfc2:	3718      	adds	r7, #24
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20001df8 	.word	0x20001df8

0800cfcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfd4:	f107 0308 	add.w	r3, r7, #8
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 f857 	bl	800d08c <prvGetNextExpireTime>
 800cfde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f000 f803 	bl	800cff0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cfea:	f000 f8d5 	bl	800d198 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfee:	e7f1      	b.n	800cfd4 <prvTimerTask+0x8>

0800cff0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cffa:	f7fe fce5 	bl	800b9c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cffe:	f107 0308 	add.w	r3, r7, #8
 800d002:	4618      	mov	r0, r3
 800d004:	f000 f866 	bl	800d0d4 <prvSampleTimeNow>
 800d008:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d130      	bne.n	800d072 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10a      	bne.n	800d02c <prvProcessTimerOrBlockTask+0x3c>
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d806      	bhi.n	800d02c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d01e:	f7fe fce1 	bl	800b9e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d022:	68f9      	ldr	r1, [r7, #12]
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff ff85 	bl	800cf34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d02a:	e024      	b.n	800d076 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d008      	beq.n	800d044 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d032:	4b13      	ldr	r3, [pc, #76]	; (800d080 <prvProcessTimerOrBlockTask+0x90>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <prvProcessTimerOrBlockTask+0x50>
 800d03c:	2301      	movs	r3, #1
 800d03e:	e000      	b.n	800d042 <prvProcessTimerOrBlockTask+0x52>
 800d040:	2300      	movs	r3, #0
 800d042:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d044:	4b0f      	ldr	r3, [pc, #60]	; (800d084 <prvProcessTimerOrBlockTask+0x94>)
 800d046:	6818      	ldr	r0, [r3, #0]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	4619      	mov	r1, r3
 800d052:	f7fd fd7b 	bl	800ab4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d056:	f7fe fcc5 	bl	800b9e4 <xTaskResumeAll>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10a      	bne.n	800d076 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d060:	4b09      	ldr	r3, [pc, #36]	; (800d088 <prvProcessTimerOrBlockTask+0x98>)
 800d062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d066:	601a      	str	r2, [r3, #0]
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	f3bf 8f6f 	isb	sy
}
 800d070:	e001      	b.n	800d076 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d072:	f7fe fcb7 	bl	800b9e4 <xTaskResumeAll>
}
 800d076:	bf00      	nop
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	20001dfc 	.word	0x20001dfc
 800d084:	20001e00 	.word	0x20001e00
 800d088:	e000ed04 	.word	0xe000ed04

0800d08c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d08c:	b480      	push	{r7}
 800d08e:	b085      	sub	sp, #20
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d094:	4b0e      	ldr	r3, [pc, #56]	; (800d0d0 <prvGetNextExpireTime+0x44>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <prvGetNextExpireTime+0x16>
 800d09e:	2201      	movs	r2, #1
 800d0a0:	e000      	b.n	800d0a4 <prvGetNextExpireTime+0x18>
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d105      	bne.n	800d0bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0b0:	4b07      	ldr	r3, [pc, #28]	; (800d0d0 <prvGetNextExpireTime+0x44>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	60fb      	str	r3, [r7, #12]
 800d0ba:	e001      	b.n	800d0c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	20001df8 	.word	0x20001df8

0800d0d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0dc:	f7fe fd20 	bl	800bb20 <xTaskGetTickCount>
 800d0e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0e2:	4b0b      	ldr	r3, [pc, #44]	; (800d110 <prvSampleTimeNow+0x3c>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d205      	bcs.n	800d0f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d0ec:	f000 f936 	bl	800d35c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	601a      	str	r2, [r3, #0]
 800d0f6:	e002      	b.n	800d0fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d0fe:	4a04      	ldr	r2, [pc, #16]	; (800d110 <prvSampleTimeNow+0x3c>)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d104:	68fb      	ldr	r3, [r7, #12]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	20001e08 	.word	0x20001e08

0800d114 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d122:	2300      	movs	r3, #0
 800d124:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	68ba      	ldr	r2, [r7, #8]
 800d12a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	429a      	cmp	r2, r3
 800d138:	d812      	bhi.n	800d160 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	1ad2      	subs	r2, r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	699b      	ldr	r3, [r3, #24]
 800d144:	429a      	cmp	r2, r3
 800d146:	d302      	bcc.n	800d14e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d148:	2301      	movs	r3, #1
 800d14a:	617b      	str	r3, [r7, #20]
 800d14c:	e01b      	b.n	800d186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d14e:	4b10      	ldr	r3, [pc, #64]	; (800d190 <prvInsertTimerInActiveList+0x7c>)
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3304      	adds	r3, #4
 800d156:	4619      	mov	r1, r3
 800d158:	4610      	mov	r0, r2
 800d15a:	f7fc fdf2 	bl	8009d42 <vListInsert>
 800d15e:	e012      	b.n	800d186 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	429a      	cmp	r2, r3
 800d166:	d206      	bcs.n	800d176 <prvInsertTimerInActiveList+0x62>
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d302      	bcc.n	800d176 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d170:	2301      	movs	r3, #1
 800d172:	617b      	str	r3, [r7, #20]
 800d174:	e007      	b.n	800d186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d176:	4b07      	ldr	r3, [pc, #28]	; (800d194 <prvInsertTimerInActiveList+0x80>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	3304      	adds	r3, #4
 800d17e:	4619      	mov	r1, r3
 800d180:	4610      	mov	r0, r2
 800d182:	f7fc fdde 	bl	8009d42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d186:	697b      	ldr	r3, [r7, #20]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20001dfc 	.word	0x20001dfc
 800d194:	20001df8 	.word	0x20001df8

0800d198 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08e      	sub	sp, #56	; 0x38
 800d19c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d19e:	e0ca      	b.n	800d336 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	da18      	bge.n	800d1d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d1a6:	1d3b      	adds	r3, r7, #4
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10a      	bne.n	800d1c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	f383 8811 	msr	BASEPRI, r3
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	61fb      	str	r3, [r7, #28]
}
 800d1c4:	bf00      	nop
 800d1c6:	e7fe      	b.n	800d1c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1ce:	6850      	ldr	r0, [r2, #4]
 800d1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1d2:	6892      	ldr	r2, [r2, #8]
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f2c0 80aa 	blt.w	800d334 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e6:	695b      	ldr	r3, [r3, #20]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d004      	beq.n	800d1f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7fc fddf 	bl	8009db4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1f6:	463b      	mov	r3, r7
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7ff ff6b 	bl	800d0d4 <prvSampleTimeNow>
 800d1fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2b09      	cmp	r3, #9
 800d204:	f200 8097 	bhi.w	800d336 <prvProcessReceivedCommands+0x19e>
 800d208:	a201      	add	r2, pc, #4	; (adr r2, 800d210 <prvProcessReceivedCommands+0x78>)
 800d20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20e:	bf00      	nop
 800d210:	0800d239 	.word	0x0800d239
 800d214:	0800d239 	.word	0x0800d239
 800d218:	0800d239 	.word	0x0800d239
 800d21c:	0800d2ad 	.word	0x0800d2ad
 800d220:	0800d2c1 	.word	0x0800d2c1
 800d224:	0800d30b 	.word	0x0800d30b
 800d228:	0800d239 	.word	0x0800d239
 800d22c:	0800d239 	.word	0x0800d239
 800d230:	0800d2ad 	.word	0x0800d2ad
 800d234:	0800d2c1 	.word	0x0800d2c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d23e:	f043 0301 	orr.w	r3, r3, #1
 800d242:	b2da      	uxtb	r2, r3
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	699b      	ldr	r3, [r3, #24]
 800d250:	18d1      	adds	r1, r2, r3
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d258:	f7ff ff5c 	bl	800d114 <prvInsertTimerInActiveList>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d069      	beq.n	800d336 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d264:	6a1b      	ldr	r3, [r3, #32]
 800d266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d268:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d270:	f003 0304 	and.w	r3, r3, #4
 800d274:	2b00      	cmp	r3, #0
 800d276:	d05e      	beq.n	800d336 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	441a      	add	r2, r3
 800d280:	2300      	movs	r3, #0
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	2300      	movs	r3, #0
 800d286:	2100      	movs	r1, #0
 800d288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d28a:	f7ff fe05 	bl	800ce98 <xTimerGenericCommand>
 800d28e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d290:	6a3b      	ldr	r3, [r7, #32]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d14f      	bne.n	800d336 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	61bb      	str	r3, [r7, #24]
}
 800d2a8:	bf00      	nop
 800d2aa:	e7fe      	b.n	800d2aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2b2:	f023 0301 	bic.w	r3, r3, #1
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d2be:	e03a      	b.n	800d336 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2c6:	f043 0301 	orr.w	r3, r3, #1
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2da:	699b      	ldr	r3, [r3, #24]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d10a      	bne.n	800d2f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	617b      	str	r3, [r7, #20]
}
 800d2f2:	bf00      	nop
 800d2f4:	e7fe      	b.n	800d2f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f8:	699a      	ldr	r2, [r3, #24]
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fc:	18d1      	adds	r1, r2, r3
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d304:	f7ff ff06 	bl	800d114 <prvInsertTimerInActiveList>
					break;
 800d308:	e015      	b.n	800d336 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d310:	f003 0302 	and.w	r3, r3, #2
 800d314:	2b00      	cmp	r3, #0
 800d316:	d103      	bne.n	800d320 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d31a:	f000 fbe1 	bl	800dae0 <vPortFree>
 800d31e:	e00a      	b.n	800d336 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d326:	f023 0301 	bic.w	r3, r3, #1
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d332:	e000      	b.n	800d336 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d334:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d336:	4b08      	ldr	r3, [pc, #32]	; (800d358 <prvProcessReceivedCommands+0x1c0>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	1d39      	adds	r1, r7, #4
 800d33c:	2200      	movs	r2, #0
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fd f8c6 	bl	800a4d0 <xQueueReceive>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	f47f af2a 	bne.w	800d1a0 <prvProcessReceivedCommands+0x8>
	}
}
 800d34c:	bf00      	nop
 800d34e:	bf00      	nop
 800d350:	3730      	adds	r7, #48	; 0x30
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20001e00 	.word	0x20001e00

0800d35c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b088      	sub	sp, #32
 800d360:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d362:	e048      	b.n	800d3f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d364:	4b2d      	ldr	r3, [pc, #180]	; (800d41c <prvSwitchTimerLists+0xc0>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d36e:	4b2b      	ldr	r3, [pc, #172]	; (800d41c <prvSwitchTimerLists+0xc0>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	3304      	adds	r3, #4
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fc fd19 	bl	8009db4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6a1b      	ldr	r3, [r3, #32]
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d390:	f003 0304 	and.w	r3, r3, #4
 800d394:	2b00      	cmp	r3, #0
 800d396:	d02e      	beq.n	800d3f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	4413      	add	r3, r2
 800d3a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d90e      	bls.n	800d3c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3b6:	4b19      	ldr	r3, [pc, #100]	; (800d41c <prvSwitchTimerLists+0xc0>)
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	3304      	adds	r3, #4
 800d3be:	4619      	mov	r1, r3
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	f7fc fcbe 	bl	8009d42 <vListInsert>
 800d3c6:	e016      	b.n	800d3f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	693a      	ldr	r2, [r7, #16]
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7ff fd60 	bl	800ce98 <xTimerGenericCommand>
 800d3d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10a      	bne.n	800d3f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	603b      	str	r3, [r7, #0]
}
 800d3f2:	bf00      	nop
 800d3f4:	e7fe      	b.n	800d3f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3f6:	4b09      	ldr	r3, [pc, #36]	; (800d41c <prvSwitchTimerLists+0xc0>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1b1      	bne.n	800d364 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d400:	4b06      	ldr	r3, [pc, #24]	; (800d41c <prvSwitchTimerLists+0xc0>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d406:	4b06      	ldr	r3, [pc, #24]	; (800d420 <prvSwitchTimerLists+0xc4>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a04      	ldr	r2, [pc, #16]	; (800d41c <prvSwitchTimerLists+0xc0>)
 800d40c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d40e:	4a04      	ldr	r2, [pc, #16]	; (800d420 <prvSwitchTimerLists+0xc4>)
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	6013      	str	r3, [r2, #0]
}
 800d414:	bf00      	nop
 800d416:	3718      	adds	r7, #24
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	20001df8 	.word	0x20001df8
 800d420:	20001dfc 	.word	0x20001dfc

0800d424 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d42a:	f000 f96b 	bl	800d704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d42e:	4b15      	ldr	r3, [pc, #84]	; (800d484 <prvCheckForValidListAndQueue+0x60>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d120      	bne.n	800d478 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d436:	4814      	ldr	r0, [pc, #80]	; (800d488 <prvCheckForValidListAndQueue+0x64>)
 800d438:	f7fc fc32 	bl	8009ca0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d43c:	4813      	ldr	r0, [pc, #76]	; (800d48c <prvCheckForValidListAndQueue+0x68>)
 800d43e:	f7fc fc2f 	bl	8009ca0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d442:	4b13      	ldr	r3, [pc, #76]	; (800d490 <prvCheckForValidListAndQueue+0x6c>)
 800d444:	4a10      	ldr	r2, [pc, #64]	; (800d488 <prvCheckForValidListAndQueue+0x64>)
 800d446:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d448:	4b12      	ldr	r3, [pc, #72]	; (800d494 <prvCheckForValidListAndQueue+0x70>)
 800d44a:	4a10      	ldr	r2, [pc, #64]	; (800d48c <prvCheckForValidListAndQueue+0x68>)
 800d44c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d44e:	2300      	movs	r3, #0
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	4b11      	ldr	r3, [pc, #68]	; (800d498 <prvCheckForValidListAndQueue+0x74>)
 800d454:	4a11      	ldr	r2, [pc, #68]	; (800d49c <prvCheckForValidListAndQueue+0x78>)
 800d456:	2110      	movs	r1, #16
 800d458:	200a      	movs	r0, #10
 800d45a:	f7fc fd3d 	bl	8009ed8 <xQueueGenericCreateStatic>
 800d45e:	4603      	mov	r3, r0
 800d460:	4a08      	ldr	r2, [pc, #32]	; (800d484 <prvCheckForValidListAndQueue+0x60>)
 800d462:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d464:	4b07      	ldr	r3, [pc, #28]	; (800d484 <prvCheckForValidListAndQueue+0x60>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d005      	beq.n	800d478 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d46c:	4b05      	ldr	r3, [pc, #20]	; (800d484 <prvCheckForValidListAndQueue+0x60>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	490b      	ldr	r1, [pc, #44]	; (800d4a0 <prvCheckForValidListAndQueue+0x7c>)
 800d472:	4618      	mov	r0, r3
 800d474:	f7fd fb40 	bl	800aaf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d478:	f000 f974 	bl	800d764 <vPortExitCritical>
}
 800d47c:	bf00      	nop
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	20001e00 	.word	0x20001e00
 800d488:	20001dd0 	.word	0x20001dd0
 800d48c:	20001de4 	.word	0x20001de4
 800d490:	20001df8 	.word	0x20001df8
 800d494:	20001dfc 	.word	0x20001dfc
 800d498:	20001eac 	.word	0x20001eac
 800d49c:	20001e0c 	.word	0x20001e0c
 800d4a0:	08010c78 	.word	0x08010c78

0800d4a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3b04      	subs	r3, #4
 800d4b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d4bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3b04      	subs	r3, #4
 800d4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	f023 0201 	bic.w	r2, r3, #1
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3b04      	subs	r3, #4
 800d4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4d4:	4a0c      	ldr	r2, [pc, #48]	; (800d508 <pxPortInitialiseStack+0x64>)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	3b14      	subs	r3, #20
 800d4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	3b04      	subs	r3, #4
 800d4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f06f 0202 	mvn.w	r2, #2
 800d4f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	3b20      	subs	r3, #32
 800d4f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3714      	adds	r7, #20
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr
 800d508:	0800d50d 	.word	0x0800d50d

0800d50c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d50c:	b480      	push	{r7}
 800d50e:	b085      	sub	sp, #20
 800d510:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d516:	4b12      	ldr	r3, [pc, #72]	; (800d560 <prvTaskExitError+0x54>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d51e:	d00a      	beq.n	800d536 <prvTaskExitError+0x2a>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	60fb      	str	r3, [r7, #12]
}
 800d532:	bf00      	nop
 800d534:	e7fe      	b.n	800d534 <prvTaskExitError+0x28>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	60bb      	str	r3, [r7, #8]
}
 800d548:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d54a:	bf00      	nop
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d0fc      	beq.n	800d54c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d552:	bf00      	nop
 800d554:	bf00      	nop
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	200000a4 	.word	0x200000a4
	...

0800d570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d570:	4b07      	ldr	r3, [pc, #28]	; (800d590 <pxCurrentTCBConst2>)
 800d572:	6819      	ldr	r1, [r3, #0]
 800d574:	6808      	ldr	r0, [r1, #0]
 800d576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57a:	f380 8809 	msr	PSP, r0
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f04f 0000 	mov.w	r0, #0
 800d586:	f380 8811 	msr	BASEPRI, r0
 800d58a:	4770      	bx	lr
 800d58c:	f3af 8000 	nop.w

0800d590 <pxCurrentTCBConst2>:
 800d590:	200018d0 	.word	0x200018d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop

0800d598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d598:	4808      	ldr	r0, [pc, #32]	; (800d5bc <prvPortStartFirstTask+0x24>)
 800d59a:	6800      	ldr	r0, [r0, #0]
 800d59c:	6800      	ldr	r0, [r0, #0]
 800d59e:	f380 8808 	msr	MSP, r0
 800d5a2:	f04f 0000 	mov.w	r0, #0
 800d5a6:	f380 8814 	msr	CONTROL, r0
 800d5aa:	b662      	cpsie	i
 800d5ac:	b661      	cpsie	f
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	df00      	svc	0
 800d5b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5ba:	bf00      	nop
 800d5bc:	e000ed08 	.word	0xe000ed08

0800d5c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5c6:	4b46      	ldr	r3, [pc, #280]	; (800d6e0 <xPortStartScheduler+0x120>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a46      	ldr	r2, [pc, #280]	; (800d6e4 <xPortStartScheduler+0x124>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d10a      	bne.n	800d5e6 <xPortStartScheduler+0x26>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	613b      	str	r3, [r7, #16]
}
 800d5e2:	bf00      	nop
 800d5e4:	e7fe      	b.n	800d5e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5e6:	4b3e      	ldr	r3, [pc, #248]	; (800d6e0 <xPortStartScheduler+0x120>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a3f      	ldr	r2, [pc, #252]	; (800d6e8 <xPortStartScheduler+0x128>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d10a      	bne.n	800d606 <xPortStartScheduler+0x46>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	60fb      	str	r3, [r7, #12]
}
 800d602:	bf00      	nop
 800d604:	e7fe      	b.n	800d604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d606:	4b39      	ldr	r3, [pc, #228]	; (800d6ec <xPortStartScheduler+0x12c>)
 800d608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	22ff      	movs	r2, #255	; 0xff
 800d616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d620:	78fb      	ldrb	r3, [r7, #3]
 800d622:	b2db      	uxtb	r3, r3
 800d624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	4b31      	ldr	r3, [pc, #196]	; (800d6f0 <xPortStartScheduler+0x130>)
 800d62c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d62e:	4b31      	ldr	r3, [pc, #196]	; (800d6f4 <xPortStartScheduler+0x134>)
 800d630:	2207      	movs	r2, #7
 800d632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d634:	e009      	b.n	800d64a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d636:	4b2f      	ldr	r3, [pc, #188]	; (800d6f4 <xPortStartScheduler+0x134>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3b01      	subs	r3, #1
 800d63c:	4a2d      	ldr	r2, [pc, #180]	; (800d6f4 <xPortStartScheduler+0x134>)
 800d63e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d640:	78fb      	ldrb	r3, [r7, #3]
 800d642:	b2db      	uxtb	r3, r3
 800d644:	005b      	lsls	r3, r3, #1
 800d646:	b2db      	uxtb	r3, r3
 800d648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d64a:	78fb      	ldrb	r3, [r7, #3]
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d652:	2b80      	cmp	r3, #128	; 0x80
 800d654:	d0ef      	beq.n	800d636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d656:	4b27      	ldr	r3, [pc, #156]	; (800d6f4 <xPortStartScheduler+0x134>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f1c3 0307 	rsb	r3, r3, #7
 800d65e:	2b04      	cmp	r3, #4
 800d660:	d00a      	beq.n	800d678 <xPortStartScheduler+0xb8>
	__asm volatile
 800d662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	60bb      	str	r3, [r7, #8]
}
 800d674:	bf00      	nop
 800d676:	e7fe      	b.n	800d676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d678:	4b1e      	ldr	r3, [pc, #120]	; (800d6f4 <xPortStartScheduler+0x134>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	021b      	lsls	r3, r3, #8
 800d67e:	4a1d      	ldr	r2, [pc, #116]	; (800d6f4 <xPortStartScheduler+0x134>)
 800d680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d682:	4b1c      	ldr	r3, [pc, #112]	; (800d6f4 <xPortStartScheduler+0x134>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d68a:	4a1a      	ldr	r2, [pc, #104]	; (800d6f4 <xPortStartScheduler+0x134>)
 800d68c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	b2da      	uxtb	r2, r3
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d696:	4b18      	ldr	r3, [pc, #96]	; (800d6f8 <xPortStartScheduler+0x138>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a17      	ldr	r2, [pc, #92]	; (800d6f8 <xPortStartScheduler+0x138>)
 800d69c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d6a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d6a2:	4b15      	ldr	r3, [pc, #84]	; (800d6f8 <xPortStartScheduler+0x138>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a14      	ldr	r2, [pc, #80]	; (800d6f8 <xPortStartScheduler+0x138>)
 800d6a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d6ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d6ae:	f000 f8dd 	bl	800d86c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6b2:	4b12      	ldr	r3, [pc, #72]	; (800d6fc <xPortStartScheduler+0x13c>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6b8:	f000 f8fc 	bl	800d8b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6bc:	4b10      	ldr	r3, [pc, #64]	; (800d700 <xPortStartScheduler+0x140>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a0f      	ldr	r2, [pc, #60]	; (800d700 <xPortStartScheduler+0x140>)
 800d6c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d6c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6c8:	f7ff ff66 	bl	800d598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6cc:	f7fe fb80 	bl	800bdd0 <vTaskSwitchContext>
	prvTaskExitError();
 800d6d0:	f7ff ff1c 	bl	800d50c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6d4:	2300      	movs	r3, #0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	e000ed00 	.word	0xe000ed00
 800d6e4:	410fc271 	.word	0x410fc271
 800d6e8:	410fc270 	.word	0x410fc270
 800d6ec:	e000e400 	.word	0xe000e400
 800d6f0:	20001efc 	.word	0x20001efc
 800d6f4:	20001f00 	.word	0x20001f00
 800d6f8:	e000ed20 	.word	0xe000ed20
 800d6fc:	200000a4 	.word	0x200000a4
 800d700:	e000ef34 	.word	0xe000ef34

0800d704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	607b      	str	r3, [r7, #4]
}
 800d71c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d71e:	4b0f      	ldr	r3, [pc, #60]	; (800d75c <vPortEnterCritical+0x58>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	3301      	adds	r3, #1
 800d724:	4a0d      	ldr	r2, [pc, #52]	; (800d75c <vPortEnterCritical+0x58>)
 800d726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d728:	4b0c      	ldr	r3, [pc, #48]	; (800d75c <vPortEnterCritical+0x58>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d10f      	bne.n	800d750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d730:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <vPortEnterCritical+0x5c>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	b2db      	uxtb	r3, r3
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00a      	beq.n	800d750 <vPortEnterCritical+0x4c>
	__asm volatile
 800d73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	603b      	str	r3, [r7, #0]
}
 800d74c:	bf00      	nop
 800d74e:	e7fe      	b.n	800d74e <vPortEnterCritical+0x4a>
	}
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr
 800d75c:	200000a4 	.word	0x200000a4
 800d760:	e000ed04 	.word	0xe000ed04

0800d764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d76a:	4b12      	ldr	r3, [pc, #72]	; (800d7b4 <vPortExitCritical+0x50>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10a      	bne.n	800d788 <vPortExitCritical+0x24>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	607b      	str	r3, [r7, #4]
}
 800d784:	bf00      	nop
 800d786:	e7fe      	b.n	800d786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d788:	4b0a      	ldr	r3, [pc, #40]	; (800d7b4 <vPortExitCritical+0x50>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3b01      	subs	r3, #1
 800d78e:	4a09      	ldr	r2, [pc, #36]	; (800d7b4 <vPortExitCritical+0x50>)
 800d790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d792:	4b08      	ldr	r3, [pc, #32]	; (800d7b4 <vPortExitCritical+0x50>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d105      	bne.n	800d7a6 <vPortExitCritical+0x42>
 800d79a:	2300      	movs	r3, #0
 800d79c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	f383 8811 	msr	BASEPRI, r3
}
 800d7a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d7a6:	bf00      	nop
 800d7a8:	370c      	adds	r7, #12
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	200000a4 	.word	0x200000a4
	...

0800d7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d7c0:	f3ef 8009 	mrs	r0, PSP
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	4b15      	ldr	r3, [pc, #84]	; (800d820 <pxCurrentTCBConst>)
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	f01e 0f10 	tst.w	lr, #16
 800d7d0:	bf08      	it	eq
 800d7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7da:	6010      	str	r0, [r2, #0]
 800d7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7e4:	f380 8811 	msr	BASEPRI, r0
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f7fe faee 	bl	800bdd0 <vTaskSwitchContext>
 800d7f4:	f04f 0000 	mov.w	r0, #0
 800d7f8:	f380 8811 	msr	BASEPRI, r0
 800d7fc:	bc09      	pop	{r0, r3}
 800d7fe:	6819      	ldr	r1, [r3, #0]
 800d800:	6808      	ldr	r0, [r1, #0]
 800d802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d806:	f01e 0f10 	tst.w	lr, #16
 800d80a:	bf08      	it	eq
 800d80c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d810:	f380 8809 	msr	PSP, r0
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	f3af 8000 	nop.w

0800d820 <pxCurrentTCBConst>:
 800d820:	200018d0 	.word	0x200018d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d824:	bf00      	nop
 800d826:	bf00      	nop

0800d828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	607b      	str	r3, [r7, #4]
}
 800d840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d842:	f7fe fa0b 	bl	800bc5c <xTaskIncrementTick>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d003      	beq.n	800d854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d84c:	4b06      	ldr	r3, [pc, #24]	; (800d868 <xPortSysTickHandler+0x40>)
 800d84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	2300      	movs	r3, #0
 800d856:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	f383 8811 	msr	BASEPRI, r3
}
 800d85e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d860:	bf00      	nop
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	e000ed04 	.word	0xe000ed04

0800d86c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d86c:	b480      	push	{r7}
 800d86e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d870:	4b0b      	ldr	r3, [pc, #44]	; (800d8a0 <vPortSetupTimerInterrupt+0x34>)
 800d872:	2200      	movs	r2, #0
 800d874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d876:	4b0b      	ldr	r3, [pc, #44]	; (800d8a4 <vPortSetupTimerInterrupt+0x38>)
 800d878:	2200      	movs	r2, #0
 800d87a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d87c:	4b0a      	ldr	r3, [pc, #40]	; (800d8a8 <vPortSetupTimerInterrupt+0x3c>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a0a      	ldr	r2, [pc, #40]	; (800d8ac <vPortSetupTimerInterrupt+0x40>)
 800d882:	fba2 2303 	umull	r2, r3, r2, r3
 800d886:	099b      	lsrs	r3, r3, #6
 800d888:	4a09      	ldr	r2, [pc, #36]	; (800d8b0 <vPortSetupTimerInterrupt+0x44>)
 800d88a:	3b01      	subs	r3, #1
 800d88c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d88e:	4b04      	ldr	r3, [pc, #16]	; (800d8a0 <vPortSetupTimerInterrupt+0x34>)
 800d890:	2207      	movs	r2, #7
 800d892:	601a      	str	r2, [r3, #0]
}
 800d894:	bf00      	nop
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	e000e010 	.word	0xe000e010
 800d8a4:	e000e018 	.word	0xe000e018
 800d8a8:	2000000c 	.word	0x2000000c
 800d8ac:	10624dd3 	.word	0x10624dd3
 800d8b0:	e000e014 	.word	0xe000e014

0800d8b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d8c4 <vPortEnableVFP+0x10>
 800d8b8:	6801      	ldr	r1, [r0, #0]
 800d8ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8be:	6001      	str	r1, [r0, #0]
 800d8c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d8c2:	bf00      	nop
 800d8c4:	e000ed88 	.word	0xe000ed88

0800d8c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d8ce:	f3ef 8305 	mrs	r3, IPSR
 800d8d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2b0f      	cmp	r3, #15
 800d8d8:	d914      	bls.n	800d904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8da:	4a17      	ldr	r2, [pc, #92]	; (800d938 <vPortValidateInterruptPriority+0x70>)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	4413      	add	r3, r2
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8e4:	4b15      	ldr	r3, [pc, #84]	; (800d93c <vPortValidateInterruptPriority+0x74>)
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	7afa      	ldrb	r2, [r7, #11]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d20a      	bcs.n	800d904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f2:	f383 8811 	msr	BASEPRI, r3
 800d8f6:	f3bf 8f6f 	isb	sy
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	607b      	str	r3, [r7, #4]
}
 800d900:	bf00      	nop
 800d902:	e7fe      	b.n	800d902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d904:	4b0e      	ldr	r3, [pc, #56]	; (800d940 <vPortValidateInterruptPriority+0x78>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d90c:	4b0d      	ldr	r3, [pc, #52]	; (800d944 <vPortValidateInterruptPriority+0x7c>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	429a      	cmp	r2, r3
 800d912:	d90a      	bls.n	800d92a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	603b      	str	r3, [r7, #0]
}
 800d926:	bf00      	nop
 800d928:	e7fe      	b.n	800d928 <vPortValidateInterruptPriority+0x60>
	}
 800d92a:	bf00      	nop
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	e000e3f0 	.word	0xe000e3f0
 800d93c:	20001efc 	.word	0x20001efc
 800d940:	e000ed0c 	.word	0xe000ed0c
 800d944:	20001f00 	.word	0x20001f00

0800d948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b08a      	sub	sp, #40	; 0x28
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d950:	2300      	movs	r3, #0
 800d952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d954:	f7fe f838 	bl	800b9c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d958:	4b5b      	ldr	r3, [pc, #364]	; (800dac8 <pvPortMalloc+0x180>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d101      	bne.n	800d964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d960:	f000 f920 	bl	800dba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d964:	4b59      	ldr	r3, [pc, #356]	; (800dacc <pvPortMalloc+0x184>)
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	4013      	ands	r3, r2
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f040 8093 	bne.w	800da98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d01d      	beq.n	800d9b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d978:	2208      	movs	r2, #8
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4413      	add	r3, r2
 800d97e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f003 0307 	and.w	r3, r3, #7
 800d986:	2b00      	cmp	r3, #0
 800d988:	d014      	beq.n	800d9b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f023 0307 	bic.w	r3, r3, #7
 800d990:	3308      	adds	r3, #8
 800d992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f003 0307 	and.w	r3, r3, #7
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00a      	beq.n	800d9b4 <pvPortMalloc+0x6c>
	__asm volatile
 800d99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	617b      	str	r3, [r7, #20]
}
 800d9b0:	bf00      	nop
 800d9b2:	e7fe      	b.n	800d9b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d06e      	beq.n	800da98 <pvPortMalloc+0x150>
 800d9ba:	4b45      	ldr	r3, [pc, #276]	; (800dad0 <pvPortMalloc+0x188>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d869      	bhi.n	800da98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d9c4:	4b43      	ldr	r3, [pc, #268]	; (800dad4 <pvPortMalloc+0x18c>)
 800d9c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d9c8:	4b42      	ldr	r3, [pc, #264]	; (800dad4 <pvPortMalloc+0x18c>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9ce:	e004      	b.n	800d9da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d903      	bls.n	800d9ec <pvPortMalloc+0xa4>
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1f1      	bne.n	800d9d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9ec:	4b36      	ldr	r3, [pc, #216]	; (800dac8 <pvPortMalloc+0x180>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d050      	beq.n	800da98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2208      	movs	r2, #8
 800d9fc:	4413      	add	r3, r2
 800d9fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	1ad2      	subs	r2, r2, r3
 800da10:	2308      	movs	r3, #8
 800da12:	005b      	lsls	r3, r3, #1
 800da14:	429a      	cmp	r2, r3
 800da16:	d91f      	bls.n	800da58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4413      	add	r3, r2
 800da1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	f003 0307 	and.w	r3, r3, #7
 800da26:	2b00      	cmp	r3, #0
 800da28:	d00a      	beq.n	800da40 <pvPortMalloc+0xf8>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	613b      	str	r3, [r7, #16]
}
 800da3c:	bf00      	nop
 800da3e:	e7fe      	b.n	800da3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	685a      	ldr	r2, [r3, #4]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	1ad2      	subs	r2, r2, r3
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da52:	69b8      	ldr	r0, [r7, #24]
 800da54:	f000 f908 	bl	800dc68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da58:	4b1d      	ldr	r3, [pc, #116]	; (800dad0 <pvPortMalloc+0x188>)
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	4a1b      	ldr	r2, [pc, #108]	; (800dad0 <pvPortMalloc+0x188>)
 800da64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da66:	4b1a      	ldr	r3, [pc, #104]	; (800dad0 <pvPortMalloc+0x188>)
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	4b1b      	ldr	r3, [pc, #108]	; (800dad8 <pvPortMalloc+0x190>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d203      	bcs.n	800da7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da72:	4b17      	ldr	r3, [pc, #92]	; (800dad0 <pvPortMalloc+0x188>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a18      	ldr	r2, [pc, #96]	; (800dad8 <pvPortMalloc+0x190>)
 800da78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7c:	685a      	ldr	r2, [r3, #4]
 800da7e:	4b13      	ldr	r3, [pc, #76]	; (800dacc <pvPortMalloc+0x184>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	431a      	orrs	r2, r3
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da8e:	4b13      	ldr	r3, [pc, #76]	; (800dadc <pvPortMalloc+0x194>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	3301      	adds	r3, #1
 800da94:	4a11      	ldr	r2, [pc, #68]	; (800dadc <pvPortMalloc+0x194>)
 800da96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da98:	f7fd ffa4 	bl	800b9e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	f003 0307 	and.w	r3, r3, #7
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00a      	beq.n	800dabc <pvPortMalloc+0x174>
	__asm volatile
 800daa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	60fb      	str	r3, [r7, #12]
}
 800dab8:	bf00      	nop
 800daba:	e7fe      	b.n	800daba <pvPortMalloc+0x172>
	return pvReturn;
 800dabc:	69fb      	ldr	r3, [r7, #28]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3728      	adds	r7, #40	; 0x28
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	20009f0c 	.word	0x20009f0c
 800dacc:	20009f20 	.word	0x20009f20
 800dad0:	20009f10 	.word	0x20009f10
 800dad4:	20009f04 	.word	0x20009f04
 800dad8:	20009f14 	.word	0x20009f14
 800dadc:	20009f18 	.word	0x20009f18

0800dae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d04d      	beq.n	800db8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800daf2:	2308      	movs	r3, #8
 800daf4:	425b      	negs	r3, r3
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	4413      	add	r3, r2
 800dafa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	685a      	ldr	r2, [r3, #4]
 800db04:	4b24      	ldr	r3, [pc, #144]	; (800db98 <vPortFree+0xb8>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4013      	ands	r3, r2
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10a      	bne.n	800db24 <vPortFree+0x44>
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	60fb      	str	r3, [r7, #12]
}
 800db20:	bf00      	nop
 800db22:	e7fe      	b.n	800db22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d00a      	beq.n	800db42 <vPortFree+0x62>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	60bb      	str	r3, [r7, #8]
}
 800db3e:	bf00      	nop
 800db40:	e7fe      	b.n	800db40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	685a      	ldr	r2, [r3, #4]
 800db46:	4b14      	ldr	r3, [pc, #80]	; (800db98 <vPortFree+0xb8>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4013      	ands	r3, r2
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01e      	beq.n	800db8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d11a      	bne.n	800db8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	685a      	ldr	r2, [r3, #4]
 800db5c:	4b0e      	ldr	r3, [pc, #56]	; (800db98 <vPortFree+0xb8>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	43db      	mvns	r3, r3
 800db62:	401a      	ands	r2, r3
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db68:	f7fd ff2e 	bl	800b9c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	685a      	ldr	r2, [r3, #4]
 800db70:	4b0a      	ldr	r3, [pc, #40]	; (800db9c <vPortFree+0xbc>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4413      	add	r3, r2
 800db76:	4a09      	ldr	r2, [pc, #36]	; (800db9c <vPortFree+0xbc>)
 800db78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db7a:	6938      	ldr	r0, [r7, #16]
 800db7c:	f000 f874 	bl	800dc68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db80:	4b07      	ldr	r3, [pc, #28]	; (800dba0 <vPortFree+0xc0>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	3301      	adds	r3, #1
 800db86:	4a06      	ldr	r2, [pc, #24]	; (800dba0 <vPortFree+0xc0>)
 800db88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db8a:	f7fd ff2b 	bl	800b9e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db8e:	bf00      	nop
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	20009f20 	.word	0x20009f20
 800db9c:	20009f10 	.word	0x20009f10
 800dba0:	20009f1c 	.word	0x20009f1c

0800dba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dbaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dbb0:	4b27      	ldr	r3, [pc, #156]	; (800dc50 <prvHeapInit+0xac>)
 800dbb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f003 0307 	and.w	r3, r3, #7
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00c      	beq.n	800dbd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3307      	adds	r3, #7
 800dbc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f023 0307 	bic.w	r3, r3, #7
 800dbca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	4a1f      	ldr	r2, [pc, #124]	; (800dc50 <prvHeapInit+0xac>)
 800dbd4:	4413      	add	r3, r2
 800dbd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbdc:	4a1d      	ldr	r2, [pc, #116]	; (800dc54 <prvHeapInit+0xb0>)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbe2:	4b1c      	ldr	r3, [pc, #112]	; (800dc54 <prvHeapInit+0xb0>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	4413      	add	r3, r2
 800dbee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbf0:	2208      	movs	r2, #8
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	1a9b      	subs	r3, r3, r2
 800dbf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f023 0307 	bic.w	r3, r3, #7
 800dbfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	4a15      	ldr	r2, [pc, #84]	; (800dc58 <prvHeapInit+0xb4>)
 800dc04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc06:	4b14      	ldr	r3, [pc, #80]	; (800dc58 <prvHeapInit+0xb4>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc0e:	4b12      	ldr	r3, [pc, #72]	; (800dc58 <prvHeapInit+0xb4>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2200      	movs	r2, #0
 800dc14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	1ad2      	subs	r2, r2, r3
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc24:	4b0c      	ldr	r3, [pc, #48]	; (800dc58 <prvHeapInit+0xb4>)
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	4a0a      	ldr	r2, [pc, #40]	; (800dc5c <prvHeapInit+0xb8>)
 800dc32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	4a09      	ldr	r2, [pc, #36]	; (800dc60 <prvHeapInit+0xbc>)
 800dc3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc3c:	4b09      	ldr	r3, [pc, #36]	; (800dc64 <prvHeapInit+0xc0>)
 800dc3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc42:	601a      	str	r2, [r3, #0]
}
 800dc44:	bf00      	nop
 800dc46:	3714      	adds	r7, #20
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	20001f04 	.word	0x20001f04
 800dc54:	20009f04 	.word	0x20009f04
 800dc58:	20009f0c 	.word	0x20009f0c
 800dc5c:	20009f14 	.word	0x20009f14
 800dc60:	20009f10 	.word	0x20009f10
 800dc64:	20009f20 	.word	0x20009f20

0800dc68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b085      	sub	sp, #20
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc70:	4b28      	ldr	r3, [pc, #160]	; (800dd14 <prvInsertBlockIntoFreeList+0xac>)
 800dc72:	60fb      	str	r3, [r7, #12]
 800dc74:	e002      	b.n	800dc7c <prvInsertBlockIntoFreeList+0x14>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	60fb      	str	r3, [r7, #12]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d8f7      	bhi.n	800dc76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	68ba      	ldr	r2, [r7, #8]
 800dc90:	4413      	add	r3, r2
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d108      	bne.n	800dcaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	441a      	add	r2, r3
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	68ba      	ldr	r2, [r7, #8]
 800dcb4:	441a      	add	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d118      	bne.n	800dcf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	4b15      	ldr	r3, [pc, #84]	; (800dd18 <prvInsertBlockIntoFreeList+0xb0>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d00d      	beq.n	800dce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	685a      	ldr	r2, [r3, #4]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	441a      	add	r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	681a      	ldr	r2, [r3, #0]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	e008      	b.n	800dcf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dce6:	4b0c      	ldr	r3, [pc, #48]	; (800dd18 <prvInsertBlockIntoFreeList+0xb0>)
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	601a      	str	r2, [r3, #0]
 800dcee:	e003      	b.n	800dcf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d002      	beq.n	800dd06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd06:	bf00      	nop
 800dd08:	3714      	adds	r7, #20
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	20009f04 	.word	0x20009f04
 800dd18:	20009f0c 	.word	0x20009f0c

0800dd1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dd20:	2200      	movs	r2, #0
 800dd22:	4912      	ldr	r1, [pc, #72]	; (800dd6c <MX_USB_DEVICE_Init+0x50>)
 800dd24:	4812      	ldr	r0, [pc, #72]	; (800dd70 <MX_USB_DEVICE_Init+0x54>)
 800dd26:	f7fa fb85 	bl	8008434 <USBD_Init>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dd30:	f7f4 f86c 	bl	8001e0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dd34:	490f      	ldr	r1, [pc, #60]	; (800dd74 <MX_USB_DEVICE_Init+0x58>)
 800dd36:	480e      	ldr	r0, [pc, #56]	; (800dd70 <MX_USB_DEVICE_Init+0x54>)
 800dd38:	f7fa fbac 	bl	8008494 <USBD_RegisterClass>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d001      	beq.n	800dd46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dd42:	f7f4 f863 	bl	8001e0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dd46:	490c      	ldr	r1, [pc, #48]	; (800dd78 <MX_USB_DEVICE_Init+0x5c>)
 800dd48:	4809      	ldr	r0, [pc, #36]	; (800dd70 <MX_USB_DEVICE_Init+0x54>)
 800dd4a:	f7fa fa9d 	bl	8008288 <USBD_CDC_RegisterInterface>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dd54:	f7f4 f85a 	bl	8001e0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dd58:	4805      	ldr	r0, [pc, #20]	; (800dd70 <MX_USB_DEVICE_Init+0x54>)
 800dd5a:	f7fa fbd1 	bl	8008500 <USBD_Start>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dd64:	f7f4 f852 	bl	8001e0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dd68:	bf00      	nop
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	200000bc 	.word	0x200000bc
 800dd70:	20009f24 	.word	0x20009f24
 800dd74:	20000024 	.word	0x20000024
 800dd78:	200000a8 	.word	0x200000a8

0800dd7c <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
void Print_Task(void *param);
void init_usb_rtos_obj(void){
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af02      	add	r7, sp, #8
	sem_usb_tx = xSemaphoreCreateBinary();
 800dd82:	2203      	movs	r2, #3
 800dd84:	2100      	movs	r1, #0
 800dd86:	2001      	movs	r0, #1
 800dd88:	f7fc f91e 	bl	8009fc8 <xQueueGenericCreate>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	4a12      	ldr	r2, [pc, #72]	; (800ddd8 <init_usb_rtos_obj+0x5c>)
 800dd90:	6013      	str	r3, [r2, #0]
	msg_buf_rx = xMessageBufferCreate(768);
 800dd92:	2201      	movs	r2, #1
 800dd94:	2100      	movs	r1, #0
 800dd96:	f44f 7040 	mov.w	r0, #768	; 0x300
 800dd9a:	f7fc ff0b 	bl	800abb4 <xStreamBufferGenericCreate>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4a0e      	ldr	r2, [pc, #56]	; (800dddc <init_usb_rtos_obj+0x60>)
 800dda2:	6013      	str	r3, [r2, #0]
	msg_buf_tx = xMessageBufferCreate(768);
 800dda4:	2201      	movs	r2, #1
 800dda6:	2100      	movs	r1, #0
 800dda8:	f44f 7040 	mov.w	r0, #768	; 0x300
 800ddac:	f7fc ff02 	bl	800abb4 <xStreamBufferGenericCreate>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	4a0b      	ldr	r2, [pc, #44]	; (800dde0 <init_usb_rtos_obj+0x64>)
 800ddb4:	6013      	str	r3, [r2, #0]
	/*
	 *
	 */
	xTaskCreate(Print_Task,"Impressao",512, NULL, 5, NULL);
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	9301      	str	r3, [sp, #4]
 800ddba:	2305      	movs	r3, #5
 800ddbc:	9300      	str	r3, [sp, #0]
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddc4:	4907      	ldr	r1, [pc, #28]	; (800dde4 <init_usb_rtos_obj+0x68>)
 800ddc6:	4808      	ldr	r0, [pc, #32]	; (800dde8 <init_usb_rtos_obj+0x6c>)
 800ddc8:	f7fd fa93 	bl	800b2f2 <xTaskCreate>
	usb_on = 1;
 800ddcc:	4b07      	ldr	r3, [pc, #28]	; (800ddec <init_usb_rtos_obj+0x70>)
 800ddce:	2201      	movs	r2, #1
 800ddd0:	601a      	str	r2, [r3, #0]
}
 800ddd2:	bf00      	nop
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	2000b200 	.word	0x2000b200
 800dddc:	2000b204 	.word	0x2000b204
 800dde0:	2000b208 	.word	0x2000b208
 800dde4:	08010c80 	.word	0x08010c80
 800dde8:	0800de35 	.word	0x0800de35
 800ddec:	2000b20c 	.word	0x2000b20c

0800ddf0 <CDC_Receiveq_FS>:
uint32_t usb_is_on(){
	return usb_on;
}


BaseType_t CDC_Receiveq_FS(char *data, TickType_t timeout){
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
	return xMessageBufferReceive(msg_buf_tx,(void *) data, 128,portMAX_DELAY);
 800ddfa:	4b06      	ldr	r3, [pc, #24]	; (800de14 <CDC_Receiveq_FS+0x24>)
 800ddfc:	6818      	ldr	r0, [r3, #0]
 800ddfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de02:	2280      	movs	r2, #128	; 0x80
 800de04:	6879      	ldr	r1, [r7, #4]
 800de06:	f7fd f811 	bl	800ae2c <xStreamBufferReceive>
 800de0a:	4603      	mov	r3, r0
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	2000b208 	.word	0x2000b208

0800de18 <queue_print>:

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
}

void queue_print(char *data,int size){
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
	CDC_Receiveq_FS(data,portMAX_DELAY);
 800de22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff ffe2 	bl	800ddf0 <CDC_Receiveq_FS>
//	xMessageBufferSend(msg_buf_tx,data,size,portMAX_DELAY);
}
 800de2c:	bf00      	nop
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <Print_Task>:

void Print_Task(void * param){
 800de34:	b580      	push	{r7, lr}
 800de36:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800de40:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800de44:	6018      	str	r0, [r3, #0]
	char buffer[768];
	uint8_t qtd=0;
 800de46:	2300      	movs	r3, #0
 800de48:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
	uint8_t pcInputString[64], pcIndexInput = 0,pcOutputString[512];
 800de4c:	2300      	movs	r3, #0
 800de4e:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557

	BaseType_t xMoreDataToFollow;


	while(1){
		qtd = xMessageBufferReceive(msg_buf_rx,(void *) buffer,sizeof(buffer),portMAX_DELAY);
 800de52:	4b62      	ldr	r3, [pc, #392]	; (800dfdc <Print_Task+0x1a8>)
 800de54:	6818      	ldr	r0, [r3, #0]
 800de56:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800de5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800de62:	f7fc ffe3 	bl	800ae2c <xStreamBufferReceive>
 800de66:	4603      	mov	r3, r0
 800de68:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
		xRchar = buffer[0];
 800de6c:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800de70:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800de74:	781a      	ldrb	r2, [r3, #0]
 800de76:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800de7a:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800de7e:	701a      	strb	r2, [r3, #0]
		if(xRchar == '\r'){
 800de80:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800de84:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	2b0d      	cmp	r3, #13
 800de8c:	d12f      	bne.n	800deee <Print_Task+0xba>
			CDC_Transmit_FS((uint8_t *)"\n\r", 2);
 800de8e:	2102      	movs	r1, #2
 800de90:	4853      	ldr	r0, [pc, #332]	; (800dfe0 <Print_Task+0x1ac>)
 800de92:	f000 f973 	bl	800e17c <CDC_Transmit_FS>
			pcInputString[pcIndexInput] = '\0';
 800de96:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800de9a:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800de9e:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 800dea2:	2100      	movs	r1, #0
 800dea4:	54d1      	strb	r1, [r2, r3]
			do{
							 /* Send the command string to the command interpreter.  Any
							 output generated by the command interpreter will be placed in the
							 pcOutputString buffer. */
				xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 800dea6:	f107 0110 	add.w	r1, r7, #16
 800deaa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800deae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7f3 f840 	bl	8000f38 <FreeRTOS_CLIProcessCommand>
 800deb8:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
							   MAX_OUTPUT_LENGTH/* The size of the output buffer. */
						   );

							 /* Write the output generated by the command interpreter to the
							 console. */
				CDC_Transmit_FS((uint8_t *) pcOutputString, strlen((char *) pcOutputString ) );
 800debc:	f107 0310 	add.w	r3, r7, #16
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7f2 f9f7 	bl	80002b4 <strlen>
 800dec6:	4603      	mov	r3, r0
 800dec8:	b29a      	uxth	r2, r3
 800deca:	f107 0310 	add.w	r3, r7, #16
 800dece:	4611      	mov	r1, r2
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 f953 	bl	800e17c <CDC_Transmit_FS>
			 } while( xMoreDataToFollow != pdFALSE );
 800ded6:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d1e3      	bne.n	800dea6 <Print_Task+0x72>


			CDC_Transmit_FS((uint8_t *) "\n\r# ", 4);
 800dede:	2104      	movs	r1, #4
 800dee0:	4840      	ldr	r0, [pc, #256]	; (800dfe4 <Print_Task+0x1b0>)
 800dee2:	f000 f94b 	bl	800e17c <CDC_Transmit_FS>
//			CDC_Transmit_FS((uint8_t *)pcInputString, pcIndexInput);
			pcIndexInput = 0;
 800dee6:	2300      	movs	r3, #0
 800dee8:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
 800deec:	e7b1      	b.n	800de52 <Print_Task+0x1e>
		} else {
			if( xRchar == '\0' ){
 800deee:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800def2:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10b      	bne.n	800df14 <Print_Task+0xe0>
				CDC_Transmit_FS((uint8_t *)"Welcome to FreeRTOS\n\r", 21);
 800defc:	2115      	movs	r1, #21
 800defe:	483a      	ldr	r0, [pc, #232]	; (800dfe8 <Print_Task+0x1b4>)
 800df00:	f000 f93c 	bl	800e17c <CDC_Transmit_FS>
				CDC_Transmit_FS((uint8_t *)NewLine, 2);
 800df04:	2102      	movs	r1, #2
 800df06:	4839      	ldr	r0, [pc, #228]	; (800dfec <Print_Task+0x1b8>)
 800df08:	f000 f938 	bl	800e17c <CDC_Transmit_FS>
				pcIndexInput = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
 800df12:	e79e      	b.n	800de52 <Print_Task+0x1e>
			} else if (xRchar == 0x7F ){
 800df14:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800df18:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b7f      	cmp	r3, #127	; 0x7f
 800df20:	d117      	bne.n	800df52 <Print_Task+0x11e>
				/*
				 * Backspace was pressed.
				 */
				if(pcIndexInput > 0){
 800df22:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800df26:	2b00      	cmp	r3, #0
 800df28:	d093      	beq.n	800de52 <Print_Task+0x1e>
					CDC_Transmit_FS(&xRchar, 1);
 800df2a:	f107 030f 	add.w	r3, r7, #15
 800df2e:	2101      	movs	r1, #1
 800df30:	4618      	mov	r0, r3
 800df32:	f000 f923 	bl	800e17c <CDC_Transmit_FS>
					pcIndexInput--;
 800df36:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800df3a:	3b01      	subs	r3, #1
 800df3c:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
					pcInputString[pcIndexInput] = '\0';
 800df40:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800df44:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800df48:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 800df4c:	2100      	movs	r1, #0
 800df4e:	54d1      	strb	r1, [r2, r3]
 800df50:	e77f      	b.n	800de52 <Print_Task+0x1e>

				}
			} else if(xRchar == 0x1B){
 800df52:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800df56:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b1b      	cmp	r3, #27
 800df5e:	d11c      	bne.n	800df9a <Print_Task+0x166>
				/*
				 * Entrou no seta pra cima
				 */
				CDC_Transmit_FS(pcInputString, strlen((const char*)pcInputString));
 800df60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800df64:	4618      	mov	r0, r3
 800df66:	f7f2 f9a5 	bl	80002b4 <strlen>
 800df6a:	4603      	mov	r3, r0
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800df72:	4611      	mov	r1, r2
 800df74:	4618      	mov	r0, r3
 800df76:	f000 f901 	bl	800e17c <CDC_Transmit_FS>
				pcIndexInput = strlen((const char*)pcInputString)+1;
 800df7a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800df7e:	4618      	mov	r0, r3
 800df80:	f7f2 f998 	bl	80002b4 <strlen>
 800df84:	4603      	mov	r3, r0
 800df86:	b2db      	uxtb	r3, r3
 800df88:	3301      	adds	r3, #1
 800df8a:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
				pcIndexInput--;
 800df8e:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800df92:	3b01      	subs	r3, #1
 800df94:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
 800df98:	e75b      	b.n	800de52 <Print_Task+0x1e>
			} else if(pcIndexInput < 64){
 800df9a:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800df9e:	2b3f      	cmp	r3, #63	; 0x3f
 800dfa0:	f63f af57 	bhi.w	800de52 <Print_Task+0x1e>
				(void) qtd;
				CDC_Transmit_FS(&xRchar, qtd);
 800dfa4:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800dfa8:	b29a      	uxth	r2, r3
 800dfaa:	f107 030f 	add.w	r3, r7, #15
 800dfae:	4611      	mov	r1, r2
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f000 f8e3 	bl	800e17c <CDC_Transmit_FS>
				pcInputString[pcIndexInput] = xRchar;
 800dfb6:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800dfba:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800dfbe:	f2a2 5249 	subw	r2, r2, #1353	; 0x549
 800dfc2:	7811      	ldrb	r1, [r2, #0]
 800dfc4:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800dfc8:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 800dfcc:	54d1      	strb	r1, [r2, r3]
				pcIndexInput++;
 800dfce:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
		qtd = xMessageBufferReceive(msg_buf_rx,(void *) buffer,sizeof(buffer),portMAX_DELAY);
 800dfd8:	e73b      	b.n	800de52 <Print_Task+0x1e>
 800dfda:	bf00      	nop
 800dfdc:	2000b204 	.word	0x2000b204
 800dfe0:	08010c8c 	.word	0x08010c8c
 800dfe4:	08010c90 	.word	0x08010c90
 800dfe8:	08010c98 	.word	0x08010c98
 800dfec:	08010cb0 	.word	0x08010cb0

0800dff0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dff4:	2200      	movs	r2, #0
 800dff6:	4905      	ldr	r1, [pc, #20]	; (800e00c <CDC_Init_FS+0x1c>)
 800dff8:	4805      	ldr	r0, [pc, #20]	; (800e010 <CDC_Init_FS+0x20>)
 800dffa:	f7fa f95f 	bl	80082bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dffe:	4905      	ldr	r1, [pc, #20]	; (800e014 <CDC_Init_FS+0x24>)
 800e000:	4803      	ldr	r0, [pc, #12]	; (800e010 <CDC_Init_FS+0x20>)
 800e002:	f7fa f97d 	bl	8008300 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e006:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e008:	4618      	mov	r0, r3
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	2000aa00 	.word	0x2000aa00
 800e010:	20009f24 	.word	0x20009f24
 800e014:	2000a200 	.word	0x2000a200

0800e018 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e018:	b480      	push	{r7}
 800e01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e01c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e01e:	4618      	mov	r0, r3
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	4603      	mov	r3, r0
 800e030:	6039      	str	r1, [r7, #0]
 800e032:	71fb      	strb	r3, [r7, #7]
 800e034:	4613      	mov	r3, r2
 800e036:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  portBASE_TYPE yield = pdFALSE;
 800e038:	2300      	movs	r3, #0
 800e03a:	60fb      	str	r3, [r7, #12]
  char data = 0;
 800e03c:	2300      	movs	r3, #0
 800e03e:	72fb      	strb	r3, [r7, #11]
  switch(cmd)
 800e040:	79fb      	ldrb	r3, [r7, #7]
 800e042:	2b23      	cmp	r3, #35	; 0x23
 800e044:	d85f      	bhi.n	800e106 <CDC_Control_FS+0xde>
 800e046:	a201      	add	r2, pc, #4	; (adr r2, 800e04c <CDC_Control_FS+0x24>)
 800e048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04c:	0800e107 	.word	0x0800e107
 800e050:	0800e107 	.word	0x0800e107
 800e054:	0800e107 	.word	0x0800e107
 800e058:	0800e107 	.word	0x0800e107
 800e05c:	0800e107 	.word	0x0800e107
 800e060:	0800e107 	.word	0x0800e107
 800e064:	0800e107 	.word	0x0800e107
 800e068:	0800e107 	.word	0x0800e107
 800e06c:	0800e107 	.word	0x0800e107
 800e070:	0800e107 	.word	0x0800e107
 800e074:	0800e107 	.word	0x0800e107
 800e078:	0800e107 	.word	0x0800e107
 800e07c:	0800e107 	.word	0x0800e107
 800e080:	0800e107 	.word	0x0800e107
 800e084:	0800e107 	.word	0x0800e107
 800e088:	0800e107 	.word	0x0800e107
 800e08c:	0800e107 	.word	0x0800e107
 800e090:	0800e107 	.word	0x0800e107
 800e094:	0800e107 	.word	0x0800e107
 800e098:	0800e107 	.word	0x0800e107
 800e09c:	0800e107 	.word	0x0800e107
 800e0a0:	0800e107 	.word	0x0800e107
 800e0a4:	0800e107 	.word	0x0800e107
 800e0a8:	0800e107 	.word	0x0800e107
 800e0ac:	0800e107 	.word	0x0800e107
 800e0b0:	0800e107 	.word	0x0800e107
 800e0b4:	0800e107 	.word	0x0800e107
 800e0b8:	0800e107 	.word	0x0800e107
 800e0bc:	0800e107 	.word	0x0800e107
 800e0c0:	0800e107 	.word	0x0800e107
 800e0c4:	0800e107 	.word	0x0800e107
 800e0c8:	0800e107 	.word	0x0800e107
 800e0cc:	0800e107 	.word	0x0800e107
 800e0d0:	0800e107 	.word	0x0800e107
 800e0d4:	0800e0dd 	.word	0x0800e0dd
 800e0d8:	0800e107 	.word	0x0800e107
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  	  xMessageBufferSendFromISR(msg_buf_rx, &data, 1, &yield);
 800e0dc:	4b0e      	ldr	r3, [pc, #56]	; (800e118 <CDC_Control_FS+0xf0>)
 800e0de:	6818      	ldr	r0, [r3, #0]
 800e0e0:	f107 030c 	add.w	r3, r7, #12
 800e0e4:	f107 010b 	add.w	r1, r7, #11
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	f7fc fdf1 	bl	800acd0 <xStreamBufferSendFromISR>
  	  portYIELD_FROM_ISR(yield);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00a      	beq.n	800e10a <CDC_Control_FS+0xe2>
 800e0f4:	4b09      	ldr	r3, [pc, #36]	; (800e11c <CDC_Control_FS+0xf4>)
 800e0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	f3bf 8f6f 	isb	sy

    break;
 800e104:	e001      	b.n	800e10a <CDC_Control_FS+0xe2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e106:	bf00      	nop
 800e108:	e000      	b.n	800e10c <CDC_Control_FS+0xe4>
    break;
 800e10a:	bf00      	nop
  }

  return (USBD_OK);
 800e10c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	2000b204 	.word	0x2000b204
 800e11c:	e000ed04 	.word	0xe000ed04

0800e120 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 800e12a:	2300      	movs	r3, #0
 800e12c:	60fb      	str	r3, [r7, #12]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	480f      	ldr	r0, [pc, #60]	; (800e170 <CDC_Receive_FS+0x50>)
 800e132:	f7fa f8e5 	bl	8008300 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e136:	480e      	ldr	r0, [pc, #56]	; (800e170 <CDC_Receive_FS+0x50>)
 800e138:	f7fa f946 	bl	80083c8 <USBD_CDC_ReceivePacket>

	  xMessageBufferSendFromISR(msg_buf_rx, Buf, *Len, &yield);
 800e13c:	4b0d      	ldr	r3, [pc, #52]	; (800e174 <CDC_Receive_FS+0x54>)
 800e13e:	6818      	ldr	r0, [r3, #0]
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	f107 030c 	add.w	r3, r7, #12
 800e148:	6879      	ldr	r1, [r7, #4]
 800e14a:	f7fc fdc1 	bl	800acd0 <xStreamBufferSendFromISR>
	  portYIELD_FROM_ISR(yield);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d007      	beq.n	800e164 <CDC_Receive_FS+0x44>
 800e154:	4b08      	ldr	r3, [pc, #32]	; (800e178 <CDC_Receive_FS+0x58>)
 800e156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800e164:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e166:	4618      	mov	r0, r3
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	20009f24 	.word	0x20009f24
 800e174:	2000b204 	.word	0x2000b204
 800e178:	e000ed04 	.word	0xe000ed04

0800e17c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	460b      	mov	r3, r1
 800e186:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e188:	2300      	movs	r3, #0
 800e18a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e18c:	4b10      	ldr	r3, [pc, #64]	; (800e1d0 <CDC_Transmit_FS+0x54>)
 800e18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e192:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d001      	beq.n	800e1a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e012      	b.n	800e1c8 <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e1a2:	887b      	ldrh	r3, [r7, #2]
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	4809      	ldr	r0, [pc, #36]	; (800e1d0 <CDC_Transmit_FS+0x54>)
 800e1aa:	f7fa f887 	bl	80082bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e1ae:	4808      	ldr	r0, [pc, #32]	; (800e1d0 <CDC_Transmit_FS+0x54>)
 800e1b0:	f7fa f8c4 	bl	800833c <USBD_CDC_TransmitPacket>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800e1b8:	4b06      	ldr	r3, [pc, #24]	; (800e1d4 <CDC_Transmit_FS+0x58>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7fc fa65 	bl	800a690 <xQueueSemaphoreTake>
  /* USER CODE END 7 */
  return result;
 800e1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	20009f24 	.word	0x20009f24
 800e1d4:	2000b200 	.word	0x2000b200

0800e1d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800e1ee:	4b0b      	ldr	r3, [pc, #44]	; (800e21c <CDC_TransmitCplt_FS+0x44>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f107 0210 	add.w	r2, r7, #16
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fc f8dc 	bl	800a3b6 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 800e1fe:	4b08      	ldr	r3, [pc, #32]	; (800e220 <CDC_TransmitCplt_FS+0x48>)
 800e200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e204:	601a      	str	r2, [r3, #0]
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800e20e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3718      	adds	r7, #24
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	2000b200 	.word	0x2000b200
 800e220:	e000ed04 	.word	0xe000ed04

0800e224 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	4603      	mov	r3, r0
 800e22c:	6039      	str	r1, [r7, #0]
 800e22e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2212      	movs	r2, #18
 800e234:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e236:	4b03      	ldr	r3, [pc, #12]	; (800e244 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e238:	4618      	mov	r0, r3
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr
 800e244:	200000d8 	.word	0x200000d8

0800e248 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	4603      	mov	r3, r0
 800e250:	6039      	str	r1, [r7, #0]
 800e252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	2204      	movs	r2, #4
 800e258:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e25a:	4b03      	ldr	r3, [pc, #12]	; (800e268 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr
 800e268:	200000ec 	.word	0x200000ec

0800e26c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	4603      	mov	r3, r0
 800e274:	6039      	str	r1, [r7, #0]
 800e276:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e278:	79fb      	ldrb	r3, [r7, #7]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d105      	bne.n	800e28a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e27e:	683a      	ldr	r2, [r7, #0]
 800e280:	4907      	ldr	r1, [pc, #28]	; (800e2a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e282:	4808      	ldr	r0, [pc, #32]	; (800e2a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e284:	f7fb fae8 	bl	8009858 <USBD_GetString>
 800e288:	e004      	b.n	800e294 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	4904      	ldr	r1, [pc, #16]	; (800e2a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e28e:	4805      	ldr	r0, [pc, #20]	; (800e2a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e290:	f7fb fae2 	bl	8009858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e294:	4b02      	ldr	r3, [pc, #8]	; (800e2a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	2000b210 	.word	0x2000b210
 800e2a4:	08010cb4 	.word	0x08010cb4

0800e2a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	6039      	str	r1, [r7, #0]
 800e2b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e2b4:	683a      	ldr	r2, [r7, #0]
 800e2b6:	4904      	ldr	r1, [pc, #16]	; (800e2c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e2b8:	4804      	ldr	r0, [pc, #16]	; (800e2cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e2ba:	f7fb facd 	bl	8009858 <USBD_GetString>
  return USBD_StrDesc;
 800e2be:	4b02      	ldr	r3, [pc, #8]	; (800e2c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	2000b210 	.word	0x2000b210
 800e2cc:	08010ccc 	.word	0x08010ccc

0800e2d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	6039      	str	r1, [r7, #0]
 800e2da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	221a      	movs	r2, #26
 800e2e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e2e2:	f000 f843 	bl	800e36c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e2e6:	4b02      	ldr	r3, [pc, #8]	; (800e2f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	200000f0 	.word	0x200000f0

0800e2f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	6039      	str	r1, [r7, #0]
 800e2fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e300:	79fb      	ldrb	r3, [r7, #7]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d105      	bne.n	800e312 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	4907      	ldr	r1, [pc, #28]	; (800e328 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e30a:	4808      	ldr	r0, [pc, #32]	; (800e32c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e30c:	f7fb faa4 	bl	8009858 <USBD_GetString>
 800e310:	e004      	b.n	800e31c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	4904      	ldr	r1, [pc, #16]	; (800e328 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e316:	4805      	ldr	r0, [pc, #20]	; (800e32c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e318:	f7fb fa9e 	bl	8009858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e31c:	4b02      	ldr	r3, [pc, #8]	; (800e328 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3708      	adds	r7, #8
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	2000b210 	.word	0x2000b210
 800e32c:	08010ce0 	.word	0x08010ce0

0800e330 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	4603      	mov	r3, r0
 800e338:	6039      	str	r1, [r7, #0]
 800e33a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e33c:	79fb      	ldrb	r3, [r7, #7]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d105      	bne.n	800e34e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e342:	683a      	ldr	r2, [r7, #0]
 800e344:	4907      	ldr	r1, [pc, #28]	; (800e364 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e346:	4808      	ldr	r0, [pc, #32]	; (800e368 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e348:	f7fb fa86 	bl	8009858 <USBD_GetString>
 800e34c:	e004      	b.n	800e358 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e34e:	683a      	ldr	r2, [r7, #0]
 800e350:	4904      	ldr	r1, [pc, #16]	; (800e364 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e352:	4805      	ldr	r0, [pc, #20]	; (800e368 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e354:	f7fb fa80 	bl	8009858 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e358:	4b02      	ldr	r3, [pc, #8]	; (800e364 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	2000b210 	.word	0x2000b210
 800e368:	08010cec 	.word	0x08010cec

0800e36c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e372:	4b0f      	ldr	r3, [pc, #60]	; (800e3b0 <Get_SerialNum+0x44>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e378:	4b0e      	ldr	r3, [pc, #56]	; (800e3b4 <Get_SerialNum+0x48>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e37e:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <Get_SerialNum+0x4c>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4413      	add	r3, r2
 800e38a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d009      	beq.n	800e3a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e392:	2208      	movs	r2, #8
 800e394:	4909      	ldr	r1, [pc, #36]	; (800e3bc <Get_SerialNum+0x50>)
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f000 f814 	bl	800e3c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e39c:	2204      	movs	r2, #4
 800e39e:	4908      	ldr	r1, [pc, #32]	; (800e3c0 <Get_SerialNum+0x54>)
 800e3a0:	68b8      	ldr	r0, [r7, #8]
 800e3a2:	f000 f80f 	bl	800e3c4 <IntToUnicode>
  }
}
 800e3a6:	bf00      	nop
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	1fff7a10 	.word	0x1fff7a10
 800e3b4:	1fff7a14 	.word	0x1fff7a14
 800e3b8:	1fff7a18 	.word	0x1fff7a18
 800e3bc:	200000f2 	.word	0x200000f2
 800e3c0:	20000102 	.word	0x20000102

0800e3c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	75fb      	strb	r3, [r7, #23]
 800e3da:	e027      	b.n	800e42c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	0f1b      	lsrs	r3, r3, #28
 800e3e0:	2b09      	cmp	r3, #9
 800e3e2:	d80b      	bhi.n	800e3fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	0f1b      	lsrs	r3, r3, #28
 800e3e8:	b2da      	uxtb	r2, r3
 800e3ea:	7dfb      	ldrb	r3, [r7, #23]
 800e3ec:	005b      	lsls	r3, r3, #1
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	440b      	add	r3, r1
 800e3f4:	3230      	adds	r2, #48	; 0x30
 800e3f6:	b2d2      	uxtb	r2, r2
 800e3f8:	701a      	strb	r2, [r3, #0]
 800e3fa:	e00a      	b.n	800e412 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	0f1b      	lsrs	r3, r3, #28
 800e400:	b2da      	uxtb	r2, r3
 800e402:	7dfb      	ldrb	r3, [r7, #23]
 800e404:	005b      	lsls	r3, r3, #1
 800e406:	4619      	mov	r1, r3
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	440b      	add	r3, r1
 800e40c:	3237      	adds	r2, #55	; 0x37
 800e40e:	b2d2      	uxtb	r2, r2
 800e410:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	011b      	lsls	r3, r3, #4
 800e416:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e418:	7dfb      	ldrb	r3, [r7, #23]
 800e41a:	005b      	lsls	r3, r3, #1
 800e41c:	3301      	adds	r3, #1
 800e41e:	68ba      	ldr	r2, [r7, #8]
 800e420:	4413      	add	r3, r2
 800e422:	2200      	movs	r2, #0
 800e424:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	3301      	adds	r3, #1
 800e42a:	75fb      	strb	r3, [r7, #23]
 800e42c:	7dfa      	ldrb	r2, [r7, #23]
 800e42e:	79fb      	ldrb	r3, [r7, #7]
 800e430:	429a      	cmp	r2, r3
 800e432:	d3d3      	bcc.n	800e3dc <IntToUnicode+0x18>
  }
}
 800e434:	bf00      	nop
 800e436:	bf00      	nop
 800e438:	371c      	adds	r7, #28
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
	...

0800e444 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b08a      	sub	sp, #40	; 0x28
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e44c:	f107 0314 	add.w	r3, r7, #20
 800e450:	2200      	movs	r2, #0
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	605a      	str	r2, [r3, #4]
 800e456:	609a      	str	r2, [r3, #8]
 800e458:	60da      	str	r2, [r3, #12]
 800e45a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e464:	d13a      	bne.n	800e4dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e466:	2300      	movs	r3, #0
 800e468:	613b      	str	r3, [r7, #16]
 800e46a:	4b1e      	ldr	r3, [pc, #120]	; (800e4e4 <HAL_PCD_MspInit+0xa0>)
 800e46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e46e:	4a1d      	ldr	r2, [pc, #116]	; (800e4e4 <HAL_PCD_MspInit+0xa0>)
 800e470:	f043 0301 	orr.w	r3, r3, #1
 800e474:	6313      	str	r3, [r2, #48]	; 0x30
 800e476:	4b1b      	ldr	r3, [pc, #108]	; (800e4e4 <HAL_PCD_MspInit+0xa0>)
 800e478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e47a:	f003 0301 	and.w	r3, r3, #1
 800e47e:	613b      	str	r3, [r7, #16]
 800e480:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e482:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e488:	2302      	movs	r3, #2
 800e48a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e48c:	2300      	movs	r3, #0
 800e48e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e490:	2303      	movs	r3, #3
 800e492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e494:	230a      	movs	r3, #10
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e498:	f107 0314 	add.w	r3, r7, #20
 800e49c:	4619      	mov	r1, r3
 800e49e:	4812      	ldr	r0, [pc, #72]	; (800e4e8 <HAL_PCD_MspInit+0xa4>)
 800e4a0:	f7f4 ffa2 	bl	80033e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e4a4:	4b0f      	ldr	r3, [pc, #60]	; (800e4e4 <HAL_PCD_MspInit+0xa0>)
 800e4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a8:	4a0e      	ldr	r2, [pc, #56]	; (800e4e4 <HAL_PCD_MspInit+0xa0>)
 800e4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4ae:	6353      	str	r3, [r2, #52]	; 0x34
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	60fb      	str	r3, [r7, #12]
 800e4b4:	4b0b      	ldr	r3, [pc, #44]	; (800e4e4 <HAL_PCD_MspInit+0xa0>)
 800e4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b8:	4a0a      	ldr	r2, [pc, #40]	; (800e4e4 <HAL_PCD_MspInit+0xa0>)
 800e4ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4be:	6453      	str	r3, [r2, #68]	; 0x44
 800e4c0:	4b08      	ldr	r3, [pc, #32]	; (800e4e4 <HAL_PCD_MspInit+0xa0>)
 800e4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4c8:	60fb      	str	r3, [r7, #12]
 800e4ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	2105      	movs	r1, #5
 800e4d0:	2043      	movs	r0, #67	; 0x43
 800e4d2:	f7f4 fbe2 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e4d6:	2043      	movs	r0, #67	; 0x43
 800e4d8:	f7f4 fbfb 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e4dc:	bf00      	nop
 800e4de:	3728      	adds	r7, #40	; 0x28
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	40023800 	.word	0x40023800
 800e4e8:	40020000 	.word	0x40020000

0800e4ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f7fa f849 	bl	800859a <USBD_LL_SetupStage>
}
 800e508:	bf00      	nop
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	460b      	mov	r3, r1
 800e51a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e522:	78fa      	ldrb	r2, [r7, #3]
 800e524:	6879      	ldr	r1, [r7, #4]
 800e526:	4613      	mov	r3, r2
 800e528:	00db      	lsls	r3, r3, #3
 800e52a:	4413      	add	r3, r2
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	440b      	add	r3, r1
 800e530:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	78fb      	ldrb	r3, [r7, #3]
 800e538:	4619      	mov	r1, r3
 800e53a:	f7fa f883 	bl	8008644 <USBD_LL_DataOutStage>
}
 800e53e:	bf00      	nop
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}

0800e546 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b082      	sub	sp, #8
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	460b      	mov	r3, r1
 800e550:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e558:	78fa      	ldrb	r2, [r7, #3]
 800e55a:	6879      	ldr	r1, [r7, #4]
 800e55c:	4613      	mov	r3, r2
 800e55e:	00db      	lsls	r3, r3, #3
 800e560:	4413      	add	r3, r2
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	440b      	add	r3, r1
 800e566:	334c      	adds	r3, #76	; 0x4c
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	78fb      	ldrb	r3, [r7, #3]
 800e56c:	4619      	mov	r1, r3
 800e56e:	f7fa f91c 	bl	80087aa <USBD_LL_DataInStage>
}
 800e572:	bf00      	nop
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b082      	sub	sp, #8
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fa fa50 	bl	8008a2e <USBD_LL_SOF>
}
 800e58e:	bf00      	nop
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b084      	sub	sp, #16
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d102      	bne.n	800e5b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	73fb      	strb	r3, [r7, #15]
 800e5ae:	e008      	b.n	800e5c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	2b02      	cmp	r3, #2
 800e5b6:	d102      	bne.n	800e5be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	73fb      	strb	r3, [r7, #15]
 800e5bc:	e001      	b.n	800e5c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e5be:	f7f3 fc25 	bl	8001e0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5c8:	7bfa      	ldrb	r2, [r7, #15]
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7fa f9f0 	bl	80089b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7fa f998 	bl	800890e <USBD_LL_Reset>
}
 800e5de:	bf00      	nop
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
	...

0800e5e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fa f9eb 	bl	80089d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	6812      	ldr	r2, [r2, #0]
 800e60a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e60e:	f043 0301 	orr.w	r3, r3, #1
 800e612:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a1b      	ldr	r3, [r3, #32]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d005      	beq.n	800e628 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e61c:	4b04      	ldr	r3, [pc, #16]	; (800e630 <HAL_PCD_SuspendCallback+0x48>)
 800e61e:	691b      	ldr	r3, [r3, #16]
 800e620:	4a03      	ldr	r2, [pc, #12]	; (800e630 <HAL_PCD_SuspendCallback+0x48>)
 800e622:	f043 0306 	orr.w	r3, r3, #6
 800e626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e628:	bf00      	nop
 800e62a:	3708      	adds	r7, #8
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	e000ed00 	.word	0xe000ed00

0800e634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e642:	4618      	mov	r0, r3
 800e644:	f7fa f9db 	bl	80089fe <USBD_LL_Resume>
}
 800e648:	bf00      	nop
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	460b      	mov	r3, r1
 800e65a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e662:	78fa      	ldrb	r2, [r7, #3]
 800e664:	4611      	mov	r1, r2
 800e666:	4618      	mov	r0, r3
 800e668:	f7fa fa33 	bl	8008ad2 <USBD_LL_IsoOUTIncomplete>
}
 800e66c:	bf00      	nop
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	460b      	mov	r3, r1
 800e67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e686:	78fa      	ldrb	r2, [r7, #3]
 800e688:	4611      	mov	r1, r2
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fa f9ef 	bl	8008a6e <USBD_LL_IsoINIncomplete>
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fa fa45 	bl	8008b36 <USBD_LL_DevConnected>
}
 800e6ac:	bf00      	nop
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fa fa42 	bl	8008b4c <USBD_LL_DevDisconnected>
}
 800e6c8:	bf00      	nop
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d13c      	bne.n	800e75a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e6e0:	4a20      	ldr	r2, [pc, #128]	; (800e764 <USBD_LL_Init+0x94>)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a1e      	ldr	r2, [pc, #120]	; (800e764 <USBD_LL_Init+0x94>)
 800e6ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e6f0:	4b1c      	ldr	r3, [pc, #112]	; (800e764 <USBD_LL_Init+0x94>)
 800e6f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e6f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e6f8:	4b1a      	ldr	r3, [pc, #104]	; (800e764 <USBD_LL_Init+0x94>)
 800e6fa:	2204      	movs	r2, #4
 800e6fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e6fe:	4b19      	ldr	r3, [pc, #100]	; (800e764 <USBD_LL_Init+0x94>)
 800e700:	2202      	movs	r2, #2
 800e702:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e704:	4b17      	ldr	r3, [pc, #92]	; (800e764 <USBD_LL_Init+0x94>)
 800e706:	2200      	movs	r2, #0
 800e708:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e70a:	4b16      	ldr	r3, [pc, #88]	; (800e764 <USBD_LL_Init+0x94>)
 800e70c:	2202      	movs	r2, #2
 800e70e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e710:	4b14      	ldr	r3, [pc, #80]	; (800e764 <USBD_LL_Init+0x94>)
 800e712:	2200      	movs	r2, #0
 800e714:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e716:	4b13      	ldr	r3, [pc, #76]	; (800e764 <USBD_LL_Init+0x94>)
 800e718:	2200      	movs	r2, #0
 800e71a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e71c:	4b11      	ldr	r3, [pc, #68]	; (800e764 <USBD_LL_Init+0x94>)
 800e71e:	2200      	movs	r2, #0
 800e720:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e722:	4b10      	ldr	r3, [pc, #64]	; (800e764 <USBD_LL_Init+0x94>)
 800e724:	2200      	movs	r2, #0
 800e726:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e728:	4b0e      	ldr	r3, [pc, #56]	; (800e764 <USBD_LL_Init+0x94>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e72e:	480d      	ldr	r0, [pc, #52]	; (800e764 <USBD_LL_Init+0x94>)
 800e730:	f7f5 f811 	bl	8003756 <HAL_PCD_Init>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d001      	beq.n	800e73e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e73a:	f7f3 fb67 	bl	8001e0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e73e:	2180      	movs	r1, #128	; 0x80
 800e740:	4808      	ldr	r0, [pc, #32]	; (800e764 <USBD_LL_Init+0x94>)
 800e742:	f7f6 fa68 	bl	8004c16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e746:	2240      	movs	r2, #64	; 0x40
 800e748:	2100      	movs	r1, #0
 800e74a:	4806      	ldr	r0, [pc, #24]	; (800e764 <USBD_LL_Init+0x94>)
 800e74c:	f7f6 fa1c 	bl	8004b88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e750:	2280      	movs	r2, #128	; 0x80
 800e752:	2101      	movs	r1, #1
 800e754:	4803      	ldr	r0, [pc, #12]	; (800e764 <USBD_LL_Init+0x94>)
 800e756:	f7f6 fa17 	bl	8004b88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3708      	adds	r7, #8
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	2000b410 	.word	0x2000b410

0800e768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e77e:	4618      	mov	r0, r3
 800e780:	f7f5 f906 	bl	8003990 <HAL_PCD_Start>
 800e784:	4603      	mov	r3, r0
 800e786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e788:	7bfb      	ldrb	r3, [r7, #15]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 f942 	bl	800ea14 <USBD_Get_USB_Status>
 800e790:	4603      	mov	r3, r0
 800e792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e794:	7bbb      	ldrb	r3, [r7, #14]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b084      	sub	sp, #16
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	4608      	mov	r0, r1
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	70fb      	strb	r3, [r7, #3]
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	70bb      	strb	r3, [r7, #2]
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e7c6:	78bb      	ldrb	r3, [r7, #2]
 800e7c8:	883a      	ldrh	r2, [r7, #0]
 800e7ca:	78f9      	ldrb	r1, [r7, #3]
 800e7cc:	f7f5 fdd7 	bl	800437e <HAL_PCD_EP_Open>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f000 f91c 	bl	800ea14 <USBD_Get_USB_Status>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3710      	adds	r7, #16
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e804:	78fa      	ldrb	r2, [r7, #3]
 800e806:	4611      	mov	r1, r2
 800e808:	4618      	mov	r0, r3
 800e80a:	f7f5 fe20 	bl	800444e <HAL_PCD_EP_Close>
 800e80e:	4603      	mov	r3, r0
 800e810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e812:	7bfb      	ldrb	r3, [r7, #15]
 800e814:	4618      	mov	r0, r3
 800e816:	f000 f8fd 	bl	800ea14 <USBD_Get_USB_Status>
 800e81a:	4603      	mov	r3, r0
 800e81c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e81e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	460b      	mov	r3, r1
 800e832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e834:	2300      	movs	r3, #0
 800e836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e838:	2300      	movs	r3, #0
 800e83a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e842:	78fa      	ldrb	r2, [r7, #3]
 800e844:	4611      	mov	r1, r2
 800e846:	4618      	mov	r0, r3
 800e848:	f7f5 fef8 	bl	800463c <HAL_PCD_EP_SetStall>
 800e84c:	4603      	mov	r3, r0
 800e84e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e850:	7bfb      	ldrb	r3, [r7, #15]
 800e852:	4618      	mov	r0, r3
 800e854:	f000 f8de 	bl	800ea14 <USBD_Get_USB_Status>
 800e858:	4603      	mov	r3, r0
 800e85a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e85c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e866:	b580      	push	{r7, lr}
 800e868:	b084      	sub	sp, #16
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	460b      	mov	r3, r1
 800e870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e872:	2300      	movs	r3, #0
 800e874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e876:	2300      	movs	r3, #0
 800e878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e880:	78fa      	ldrb	r2, [r7, #3]
 800e882:	4611      	mov	r1, r2
 800e884:	4618      	mov	r0, r3
 800e886:	f7f5 ff3d 	bl	8004704 <HAL_PCD_EP_ClrStall>
 800e88a:	4603      	mov	r3, r0
 800e88c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e88e:	7bfb      	ldrb	r3, [r7, #15]
 800e890:	4618      	mov	r0, r3
 800e892:	f000 f8bf 	bl	800ea14 <USBD_Get_USB_Status>
 800e896:	4603      	mov	r3, r0
 800e898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e89a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3710      	adds	r7, #16
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e8b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	da0b      	bge.n	800e8d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e8c0:	78fb      	ldrb	r3, [r7, #3]
 800e8c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8c6:	68f9      	ldr	r1, [r7, #12]
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	00db      	lsls	r3, r3, #3
 800e8cc:	4413      	add	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	440b      	add	r3, r1
 800e8d2:	333e      	adds	r3, #62	; 0x3e
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	e00b      	b.n	800e8f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e8d8:	78fb      	ldrb	r3, [r7, #3]
 800e8da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8de:	68f9      	ldr	r1, [r7, #12]
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	00db      	lsls	r3, r3, #3
 800e8e4:	4413      	add	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	440b      	add	r3, r1
 800e8ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e8ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3714      	adds	r7, #20
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	460b      	mov	r3, r1
 800e906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e908:	2300      	movs	r3, #0
 800e90a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e90c:	2300      	movs	r3, #0
 800e90e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e916:	78fa      	ldrb	r2, [r7, #3]
 800e918:	4611      	mov	r1, r2
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7f5 fd0a 	bl	8004334 <HAL_PCD_SetAddress>
 800e920:	4603      	mov	r3, r0
 800e922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e924:	7bfb      	ldrb	r3, [r7, #15]
 800e926:	4618      	mov	r0, r3
 800e928:	f000 f874 	bl	800ea14 <USBD_Get_USB_Status>
 800e92c:	4603      	mov	r3, r0
 800e92e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e930:	7bbb      	ldrb	r3, [r7, #14]
}
 800e932:	4618      	mov	r0, r3
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b086      	sub	sp, #24
 800e93e:	af00      	add	r7, sp, #0
 800e940:	60f8      	str	r0, [r7, #12]
 800e942:	607a      	str	r2, [r7, #4]
 800e944:	603b      	str	r3, [r7, #0]
 800e946:	460b      	mov	r3, r1
 800e948:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e94a:	2300      	movs	r3, #0
 800e94c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e958:	7af9      	ldrb	r1, [r7, #11]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	f7f5 fe23 	bl	80045a8 <HAL_PCD_EP_Transmit>
 800e962:	4603      	mov	r3, r0
 800e964:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e966:	7dfb      	ldrb	r3, [r7, #23]
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 f853 	bl	800ea14 <USBD_Get_USB_Status>
 800e96e:	4603      	mov	r3, r0
 800e970:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e972:	7dbb      	ldrb	r3, [r7, #22]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3718      	adds	r7, #24
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	607a      	str	r2, [r7, #4]
 800e986:	603b      	str	r3, [r7, #0]
 800e988:	460b      	mov	r3, r1
 800e98a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e98c:	2300      	movs	r3, #0
 800e98e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e99a:	7af9      	ldrb	r1, [r7, #11]
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	f7f5 fd9f 	bl	80044e2 <HAL_PCD_EP_Receive>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f000 f832 	bl	800ea14 <USBD_Get_USB_Status>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e9b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3718      	adds	r7, #24
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b082      	sub	sp, #8
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9d0:	78fa      	ldrb	r2, [r7, #3]
 800e9d2:	4611      	mov	r1, r2
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7f5 fdcf 	bl	8004578 <HAL_PCD_EP_GetRxCount>
 800e9da:	4603      	mov	r3, r0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e9ec:	4b03      	ldr	r3, [pc, #12]	; (800e9fc <USBD_static_malloc+0x18>)
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	370c      	adds	r7, #12
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	2000b91c 	.word	0x2000b91c

0800ea00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]

}
 800ea08:	bf00      	nop
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea22:	79fb      	ldrb	r3, [r7, #7]
 800ea24:	2b03      	cmp	r3, #3
 800ea26:	d817      	bhi.n	800ea58 <USBD_Get_USB_Status+0x44>
 800ea28:	a201      	add	r2, pc, #4	; (adr r2, 800ea30 <USBD_Get_USB_Status+0x1c>)
 800ea2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2e:	bf00      	nop
 800ea30:	0800ea41 	.word	0x0800ea41
 800ea34:	0800ea47 	.word	0x0800ea47
 800ea38:	0800ea4d 	.word	0x0800ea4d
 800ea3c:	0800ea53 	.word	0x0800ea53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea40:	2300      	movs	r3, #0
 800ea42:	73fb      	strb	r3, [r7, #15]
    break;
 800ea44:	e00b      	b.n	800ea5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea46:	2303      	movs	r3, #3
 800ea48:	73fb      	strb	r3, [r7, #15]
    break;
 800ea4a:	e008      	b.n	800ea5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea50:	e005      	b.n	800ea5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea52:	2303      	movs	r3, #3
 800ea54:	73fb      	strb	r3, [r7, #15]
    break;
 800ea56:	e002      	b.n	800ea5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea58:	2303      	movs	r3, #3
 800ea5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea5c:	bf00      	nop
  }
  return usb_status;
 800ea5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <arm_cfft_radix8by2_f32>:
 800ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea70:	ed2d 8b08 	vpush	{d8-d11}
 800ea74:	f8b0 e000 	ldrh.w	lr, [r0]
 800ea78:	6842      	ldr	r2, [r0, #4]
 800ea7a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800ea7e:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800ea82:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800ea86:	4607      	mov	r7, r0
 800ea88:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800ea8c:	f000 80af 	beq.w	800ebee <arm_cfft_radix8by2_f32+0x182>
 800ea90:	3310      	adds	r3, #16
 800ea92:	18ce      	adds	r6, r1, r3
 800ea94:	3210      	adds	r2, #16
 800ea96:	4443      	add	r3, r8
 800ea98:	f101 0510 	add.w	r5, r1, #16
 800ea9c:	f108 0410 	add.w	r4, r8, #16
 800eaa0:	ed54 1a04 	vldr	s3, [r4, #-16]
 800eaa4:	ed13 4a04 	vldr	s8, [r3, #-16]
 800eaa8:	ed53 3a03 	vldr	s7, [r3, #-12]
 800eaac:	ed53 5a02 	vldr	s11, [r3, #-8]
 800eab0:	ed13 5a01 	vldr	s10, [r3, #-4]
 800eab4:	ed54 6a03 	vldr	s13, [r4, #-12]
 800eab8:	ed14 0a02 	vldr	s0, [r4, #-8]
 800eabc:	ed16 2a04 	vldr	s4, [r6, #-16]
 800eac0:	ed56 2a03 	vldr	s5, [r6, #-12]
 800eac4:	ed15 6a03 	vldr	s12, [r5, #-12]
 800eac8:	ed15 7a01 	vldr	s14, [r5, #-4]
 800eacc:	ed15 3a04 	vldr	s6, [r5, #-16]
 800ead0:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ead4:	ed56 0a02 	vldr	s1, [r6, #-8]
 800ead8:	ed16 1a01 	vldr	s2, [r6, #-4]
 800eadc:	ed55 4a02 	vldr	s9, [r5, #-8]
 800eae0:	ee73 ba21 	vadd.f32	s23, s6, s3
 800eae4:	ee36 ba26 	vadd.f32	s22, s12, s13
 800eae8:	ee37 aa27 	vadd.f32	s20, s14, s15
 800eaec:	ee72 9a04 	vadd.f32	s19, s4, s8
 800eaf0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800eaf4:	ee31 8a05 	vadd.f32	s16, s2, s10
 800eaf8:	ee74 aa80 	vadd.f32	s21, s9, s0
 800eafc:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800eb00:	ed45 ba04 	vstr	s23, [r5, #-16]
 800eb04:	ed05 ba03 	vstr	s22, [r5, #-12]
 800eb08:	ed45 aa02 	vstr	s21, [r5, #-8]
 800eb0c:	ed05 aa01 	vstr	s20, [r5, #-4]
 800eb10:	ed06 8a01 	vstr	s16, [r6, #-4]
 800eb14:	ed46 9a04 	vstr	s19, [r6, #-16]
 800eb18:	ed06 9a03 	vstr	s18, [r6, #-12]
 800eb1c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800eb20:	ee76 6a66 	vsub.f32	s13, s12, s13
 800eb24:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800eb28:	ed12 6a03 	vldr	s12, [r2, #-12]
 800eb2c:	ed52 2a04 	vldr	s5, [r2, #-16]
 800eb30:	ee33 3a61 	vsub.f32	s6, s6, s3
 800eb34:	ee34 4a42 	vsub.f32	s8, s8, s4
 800eb38:	ee26 8a86 	vmul.f32	s16, s13, s12
 800eb3c:	ee24 2a06 	vmul.f32	s4, s8, s12
 800eb40:	ee63 1a22 	vmul.f32	s3, s6, s5
 800eb44:	ee24 4a22 	vmul.f32	s8, s8, s5
 800eb48:	ee23 3a06 	vmul.f32	s6, s6, s12
 800eb4c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800eb50:	ee23 6a86 	vmul.f32	s12, s7, s12
 800eb54:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800eb58:	ee36 6a04 	vadd.f32	s12, s12, s8
 800eb5c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800eb60:	ee72 3a63 	vsub.f32	s7, s4, s7
 800eb64:	ee71 2a88 	vadd.f32	s5, s3, s16
 800eb68:	ed44 6a03 	vstr	s13, [r4, #-12]
 800eb6c:	ed44 2a04 	vstr	s5, [r4, #-16]
 800eb70:	ed43 3a04 	vstr	s7, [r3, #-16]
 800eb74:	ed03 6a03 	vstr	s12, [r3, #-12]
 800eb78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb7c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800eb80:	ed12 7a01 	vldr	s14, [r2, #-4]
 800eb84:	ed52 5a02 	vldr	s11, [r2, #-8]
 800eb88:	ee35 6a41 	vsub.f32	s12, s10, s2
 800eb8c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800eb90:	ee67 3a87 	vmul.f32	s7, s15, s14
 800eb94:	ee26 5a87 	vmul.f32	s10, s13, s14
 800eb98:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800eb9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800eba0:	ee64 4a87 	vmul.f32	s9, s9, s14
 800eba4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800eba8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800ebac:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ebb0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ebb4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800ebb8:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ebbc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ebc0:	f1be 0e01 	subs.w	lr, lr, #1
 800ebc4:	ed44 5a02 	vstr	s11, [r4, #-8]
 800ebc8:	f105 0510 	add.w	r5, r5, #16
 800ebcc:	ed44 7a01 	vstr	s15, [r4, #-4]
 800ebd0:	f106 0610 	add.w	r6, r6, #16
 800ebd4:	ed03 6a02 	vstr	s12, [r3, #-8]
 800ebd8:	ed03 7a01 	vstr	s14, [r3, #-4]
 800ebdc:	f102 0210 	add.w	r2, r2, #16
 800ebe0:	f104 0410 	add.w	r4, r4, #16
 800ebe4:	f103 0310 	add.w	r3, r3, #16
 800ebe8:	f47f af5a 	bne.w	800eaa0 <arm_cfft_radix8by2_f32+0x34>
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	fa1f f48c 	uxth.w	r4, ip
 800ebf2:	4608      	mov	r0, r1
 800ebf4:	2302      	movs	r3, #2
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	f000 fc00 	bl	800f3fc <arm_radix8_butterfly_f32>
 800ebfc:	ecbd 8b08 	vpop	{d8-d11}
 800ec00:	4640      	mov	r0, r8
 800ec02:	4621      	mov	r1, r4
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	2302      	movs	r3, #2
 800ec08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec0c:	f000 bbf6 	b.w	800f3fc <arm_radix8_butterfly_f32>

0800ec10 <arm_cfft_radix8by4_f32>:
 800ec10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec14:	ed2d 8b0a 	vpush	{d8-d12}
 800ec18:	8802      	ldrh	r2, [r0, #0]
 800ec1a:	ed91 6a00 	vldr	s12, [r1]
 800ec1e:	b08f      	sub	sp, #60	; 0x3c
 800ec20:	460f      	mov	r7, r1
 800ec22:	0852      	lsrs	r2, r2, #1
 800ec24:	0093      	lsls	r3, r2, #2
 800ec26:	900c      	str	r0, [sp, #48]	; 0x30
 800ec28:	9103      	str	r1, [sp, #12]
 800ec2a:	6841      	ldr	r1, [r0, #4]
 800ec2c:	ed97 7a01 	vldr	s14, [r7, #4]
 800ec30:	4638      	mov	r0, r7
 800ec32:	4418      	add	r0, r3
 800ec34:	4606      	mov	r6, r0
 800ec36:	9009      	str	r0, [sp, #36]	; 0x24
 800ec38:	4418      	add	r0, r3
 800ec3a:	edd0 6a00 	vldr	s13, [r0]
 800ec3e:	edd6 3a00 	vldr	s7, [r6]
 800ec42:	edd6 2a01 	vldr	s5, [r6, #4]
 800ec46:	edd0 7a01 	vldr	s15, [r0, #4]
 800ec4a:	900a      	str	r0, [sp, #40]	; 0x28
 800ec4c:	ee76 5a26 	vadd.f32	s11, s12, s13
 800ec50:	4604      	mov	r4, r0
 800ec52:	4625      	mov	r5, r4
 800ec54:	441c      	add	r4, r3
 800ec56:	ed94 4a00 	vldr	s8, [r4]
 800ec5a:	ed94 5a01 	vldr	s10, [r4, #4]
 800ec5e:	9401      	str	r4, [sp, #4]
 800ec60:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800ec64:	4630      	mov	r0, r6
 800ec66:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ec6a:	463e      	mov	r6, r7
 800ec6c:	ee14 ea90 	vmov	lr, s9
 800ec70:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ec74:	f846 eb08 	str.w	lr, [r6], #8
 800ec78:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ec7c:	edd0 4a01 	vldr	s9, [r0, #4]
 800ec80:	9604      	str	r6, [sp, #16]
 800ec82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec86:	9e01      	ldr	r6, [sp, #4]
 800ec88:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800ec8c:	ed96 2a01 	vldr	s4, [r6, #4]
 800ec90:	ee36 7a24 	vadd.f32	s14, s12, s9
 800ec94:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800ec98:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800ec9c:	ee36 6a62 	vsub.f32	s12, s12, s5
 800eca0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800eca4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800eca8:	ee73 3a45 	vsub.f32	s7, s6, s10
 800ecac:	4604      	mov	r4, r0
 800ecae:	ee36 6a45 	vsub.f32	s12, s12, s10
 800ecb2:	ee75 6a26 	vadd.f32	s13, s10, s13
 800ecb6:	46a3      	mov	fp, r4
 800ecb8:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ecbc:	ee34 5a84 	vadd.f32	s10, s9, s8
 800ecc0:	ee13 8a90 	vmov	r8, s7
 800ecc4:	46a4      	mov	ip, r4
 800ecc6:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800ecca:	ed87 7a01 	vstr	s14, [r7, #4]
 800ecce:	f84b 8b08 	str.w	r8, [fp], #8
 800ecd2:	f1ac 0704 	sub.w	r7, ip, #4
 800ecd6:	ed8c 5a01 	vstr	s10, [ip, #4]
 800ecda:	f101 0c08 	add.w	ip, r1, #8
 800ecde:	462c      	mov	r4, r5
 800ece0:	f8cd c014 	str.w	ip, [sp, #20]
 800ece4:	ee15 ca90 	vmov	ip, s11
 800ece8:	f844 cb08 	str.w	ip, [r4], #8
 800ecec:	9407      	str	r4, [sp, #28]
 800ecee:	f101 0410 	add.w	r4, r1, #16
 800ecf2:	ed85 6a01 	vstr	s12, [r5, #4]
 800ecf6:	0852      	lsrs	r2, r2, #1
 800ecf8:	9402      	str	r4, [sp, #8]
 800ecfa:	462c      	mov	r4, r5
 800ecfc:	f101 0518 	add.w	r5, r1, #24
 800ed00:	920b      	str	r2, [sp, #44]	; 0x2c
 800ed02:	46b2      	mov	sl, r6
 800ed04:	9506      	str	r5, [sp, #24]
 800ed06:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800ed0a:	3a02      	subs	r2, #2
 800ed0c:	ee16 5a90 	vmov	r5, s13
 800ed10:	46b6      	mov	lr, r6
 800ed12:	4630      	mov	r0, r6
 800ed14:	0852      	lsrs	r2, r2, #1
 800ed16:	f84a 5b08 	str.w	r5, [sl], #8
 800ed1a:	f1a0 0604 	sub.w	r6, r0, #4
 800ed1e:	edce 7a01 	vstr	s15, [lr, #4]
 800ed22:	9208      	str	r2, [sp, #32]
 800ed24:	f000 8130 	beq.w	800ef88 <arm_cfft_radix8by4_f32+0x378>
 800ed28:	4691      	mov	r9, r2
 800ed2a:	9a03      	ldr	r2, [sp, #12]
 800ed2c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ed30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ed34:	3b08      	subs	r3, #8
 800ed36:	f102 0510 	add.w	r5, r2, #16
 800ed3a:	f101 0c20 	add.w	ip, r1, #32
 800ed3e:	f1a4 020c 	sub.w	r2, r4, #12
 800ed42:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800ed46:	4433      	add	r3, r6
 800ed48:	3410      	adds	r4, #16
 800ed4a:	4650      	mov	r0, sl
 800ed4c:	4659      	mov	r1, fp
 800ed4e:	ed55 3a02 	vldr	s7, [r5, #-8]
 800ed52:	ed14 5a02 	vldr	s10, [r4, #-8]
 800ed56:	ed91 7a00 	vldr	s14, [r1]
 800ed5a:	edd0 7a00 	vldr	s15, [r0]
 800ed5e:	ed15 4a01 	vldr	s8, [r5, #-4]
 800ed62:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ed66:	edd0 6a01 	vldr	s13, [r0, #4]
 800ed6a:	ed91 6a01 	vldr	s12, [r1, #4]
 800ed6e:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ed72:	ee34 0a25 	vadd.f32	s0, s8, s11
 800ed76:	ee78 4a07 	vadd.f32	s9, s16, s14
 800ed7a:	ee74 5a65 	vsub.f32	s11, s8, s11
 800ed7e:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800ed82:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800ed86:	ed45 4a02 	vstr	s9, [r5, #-8]
 800ed8a:	edd1 4a01 	vldr	s9, [r1, #4]
 800ed8e:	ed90 4a01 	vldr	s8, [r0, #4]
 800ed92:	ee70 4a24 	vadd.f32	s9, s0, s9
 800ed96:	ee76 aa05 	vadd.f32	s21, s12, s10
 800ed9a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ed9e:	ee35 aac7 	vsub.f32	s20, s11, s14
 800eda2:	ed45 4a01 	vstr	s9, [r5, #-4]
 800eda6:	edd6 1a00 	vldr	s3, [r6]
 800edaa:	edd7 0a00 	vldr	s1, [r7]
 800edae:	ed92 4a02 	vldr	s8, [r2, #8]
 800edb2:	edd3 3a02 	vldr	s7, [r3, #8]
 800edb6:	ed93 2a01 	vldr	s4, [r3, #4]
 800edba:	ed16 1a01 	vldr	s2, [r6, #-4]
 800edbe:	edd2 2a01 	vldr	s5, [r2, #4]
 800edc2:	ed57 9a01 	vldr	s19, [r7, #-4]
 800edc6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800edca:	ee39 3a81 	vadd.f32	s6, s19, s2
 800edce:	ee74 8a84 	vadd.f32	s17, s9, s8
 800edd2:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800edd6:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800edda:	ee7a aae6 	vsub.f32	s21, s21, s13
 800edde:	ee18 aa90 	vmov	sl, s17
 800ede2:	f847 a908 	str.w	sl, [r7], #-8
 800ede6:	edd2 8a01 	vldr	s17, [r2, #4]
 800edea:	ed93 9a01 	vldr	s18, [r3, #4]
 800edee:	ee73 8a28 	vadd.f32	s17, s6, s17
 800edf2:	ee3a aa27 	vadd.f32	s20, s20, s15
 800edf6:	ee78 8a89 	vadd.f32	s17, s17, s18
 800edfa:	ee74 0a63 	vsub.f32	s1, s8, s7
 800edfe:	edc7 8a01 	vstr	s17, [r7, #4]
 800ee02:	ed18 ba02 	vldr	s22, [r8, #-8]
 800ee06:	ed58 8a01 	vldr	s17, [r8, #-4]
 800ee0a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800ee0e:	ee6a ba28 	vmul.f32	s23, s20, s17
 800ee12:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800ee16:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800ee1a:	ee30 9a81 	vadd.f32	s18, s1, s2
 800ee1e:	ee79 9a82 	vadd.f32	s19, s19, s4
 800ee22:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800ee26:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800ee2a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800ee2e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800ee32:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800ee36:	ee69 8a28 	vmul.f32	s17, s18, s17
 800ee3a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800ee3e:	ee1c aa10 	vmov	sl, s24
 800ee42:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800ee46:	f841 ab08 	str.w	sl, [r1], #8
 800ee4a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800ee4e:	ee3b bacb 	vsub.f32	s22, s23, s22
 800ee52:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800ee56:	ee33 3a62 	vsub.f32	s6, s6, s5
 800ee5a:	ed01 aa01 	vstr	s20, [r1, #-4]
 800ee5e:	edc2 8a01 	vstr	s17, [r2, #4]
 800ee62:	ed82 ba02 	vstr	s22, [r2, #8]
 800ee66:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800ee6a:	ee74 3a63 	vsub.f32	s7, s8, s7
 800ee6e:	ee38 8a47 	vsub.f32	s16, s16, s14
 800ee72:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800ee76:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ee7a:	ee33 3a42 	vsub.f32	s6, s6, s4
 800ee7e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ee82:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ee86:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800ee8a:	ee63 8a04 	vmul.f32	s17, s6, s8
 800ee8e:	ee28 aa24 	vmul.f32	s20, s16, s9
 800ee92:	ee60 9a04 	vmul.f32	s19, s0, s8
 800ee96:	ee28 8a04 	vmul.f32	s16, s16, s8
 800ee9a:	ee20 0a24 	vmul.f32	s0, s0, s9
 800ee9e:	ee63 3a84 	vmul.f32	s7, s7, s8
 800eea2:	ee39 4a68 	vsub.f32	s8, s18, s17
 800eea6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800eeaa:	ee14 aa10 	vmov	sl, s8
 800eeae:	ee30 0a48 	vsub.f32	s0, s0, s16
 800eeb2:	ee63 4a24 	vmul.f32	s9, s6, s9
 800eeb6:	ed44 9a02 	vstr	s19, [r4, #-8]
 800eeba:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800eebe:	ed04 0a01 	vstr	s0, [r4, #-4]
 800eec2:	f846 a908 	str.w	sl, [r6], #-8
 800eec6:	ee35 6a46 	vsub.f32	s12, s10, s12
 800eeca:	ee35 7a87 	vadd.f32	s14, s11, s14
 800eece:	edc6 3a01 	vstr	s7, [r6, #4]
 800eed2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800eed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeda:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800eede:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800eee2:	ee67 5a86 	vmul.f32	s11, s15, s12
 800eee6:	ee26 5a87 	vmul.f32	s10, s13, s14
 800eeea:	ee72 2a62 	vsub.f32	s5, s4, s5
 800eeee:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800eef2:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800eef6:	ee75 5a25 	vadd.f32	s11, s10, s11
 800eefa:	ee62 0a86 	vmul.f32	s1, s5, s12
 800eefe:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ef02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef06:	ee21 6a06 	vmul.f32	s12, s2, s12
 800ef0a:	ee62 2a87 	vmul.f32	s5, s5, s14
 800ef0e:	ee21 1a07 	vmul.f32	s2, s2, s14
 800ef12:	ee15 aa90 	vmov	sl, s11
 800ef16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ef1a:	f840 ab08 	str.w	sl, [r0], #8
 800ef1e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800ef22:	ee76 2a22 	vadd.f32	s5, s12, s5
 800ef26:	f1b9 0901 	subs.w	r9, r9, #1
 800ef2a:	ed40 7a01 	vstr	s15, [r0, #-4]
 800ef2e:	f105 0508 	add.w	r5, r5, #8
 800ef32:	ed83 1a02 	vstr	s2, [r3, #8]
 800ef36:	edc3 2a01 	vstr	s5, [r3, #4]
 800ef3a:	f108 0808 	add.w	r8, r8, #8
 800ef3e:	f1a2 0208 	sub.w	r2, r2, #8
 800ef42:	f10c 0c10 	add.w	ip, ip, #16
 800ef46:	f104 0408 	add.w	r4, r4, #8
 800ef4a:	f10e 0e18 	add.w	lr, lr, #24
 800ef4e:	f1a3 0308 	sub.w	r3, r3, #8
 800ef52:	f47f aefc 	bne.w	800ed4e <arm_cfft_radix8by4_f32+0x13e>
 800ef56:	9908      	ldr	r1, [sp, #32]
 800ef58:	9802      	ldr	r0, [sp, #8]
 800ef5a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800ef5e:	00cb      	lsls	r3, r1, #3
 800ef60:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ef64:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ef68:	9102      	str	r1, [sp, #8]
 800ef6a:	9904      	ldr	r1, [sp, #16]
 800ef6c:	4419      	add	r1, r3
 800ef6e:	9104      	str	r1, [sp, #16]
 800ef70:	9905      	ldr	r1, [sp, #20]
 800ef72:	4419      	add	r1, r3
 800ef74:	9105      	str	r1, [sp, #20]
 800ef76:	9907      	ldr	r1, [sp, #28]
 800ef78:	449b      	add	fp, r3
 800ef7a:	4419      	add	r1, r3
 800ef7c:	449a      	add	sl, r3
 800ef7e:	9b06      	ldr	r3, [sp, #24]
 800ef80:	9107      	str	r1, [sp, #28]
 800ef82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef86:	9306      	str	r3, [sp, #24]
 800ef88:	9a04      	ldr	r2, [sp, #16]
 800ef8a:	9807      	ldr	r0, [sp, #28]
 800ef8c:	edd2 3a00 	vldr	s7, [r2]
 800ef90:	ed90 4a00 	vldr	s8, [r0]
 800ef94:	eddb 7a00 	vldr	s15, [fp]
 800ef98:	ed9a 3a00 	vldr	s6, [sl]
 800ef9c:	edd2 4a01 	vldr	s9, [r2, #4]
 800efa0:	ed90 7a01 	vldr	s14, [r0, #4]
 800efa4:	ed9b 2a01 	vldr	s4, [fp, #4]
 800efa8:	edda 5a01 	vldr	s11, [sl, #4]
 800efac:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800efb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800efb2:	ee73 6a84 	vadd.f32	s13, s7, s8
 800efb6:	ee34 6a87 	vadd.f32	s12, s9, s14
 800efba:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800efbe:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800efc2:	ee33 5a05 	vadd.f32	s10, s6, s10
 800efc6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800efca:	ed82 5a00 	vstr	s10, [r2]
 800efce:	ed9b 5a01 	vldr	s10, [fp, #4]
 800efd2:	edda 4a01 	vldr	s9, [sl, #4]
 800efd6:	ee36 5a05 	vadd.f32	s10, s12, s10
 800efda:	ee72 3a04 	vadd.f32	s7, s4, s8
 800efde:	ee35 5a24 	vadd.f32	s10, s10, s9
 800efe2:	ee77 4a67 	vsub.f32	s9, s14, s15
 800efe6:	ed82 5a01 	vstr	s10, [r2, #4]
 800efea:	9a05      	ldr	r2, [sp, #20]
 800efec:	ee34 5a83 	vadd.f32	s10, s9, s6
 800eff0:	edd2 1a00 	vldr	s3, [r2]
 800eff4:	edd2 2a01 	vldr	s5, [r2, #4]
 800eff8:	9a02      	ldr	r2, [sp, #8]
 800effa:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800effe:	ee36 6a42 	vsub.f32	s12, s12, s4
 800f002:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800f006:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800f00a:	ee65 2a22 	vmul.f32	s5, s10, s5
 800f00e:	ee25 5a21 	vmul.f32	s10, s10, s3
 800f012:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800f016:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f01a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f01e:	edcb 2a00 	vstr	s5, [fp]
 800f022:	ed8b 5a01 	vstr	s10, [fp, #4]
 800f026:	edd2 3a01 	vldr	s7, [r2, #4]
 800f02a:	ed92 5a00 	vldr	s10, [r2]
 800f02e:	9a06      	ldr	r2, [sp, #24]
 800f030:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f034:	ee36 6a65 	vsub.f32	s12, s12, s11
 800f038:	ee66 4a85 	vmul.f32	s9, s13, s10
 800f03c:	ee26 5a05 	vmul.f32	s10, s12, s10
 800f040:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800f044:	ee26 6a23 	vmul.f32	s12, s12, s7
 800f048:	ee75 6a66 	vsub.f32	s13, s10, s13
 800f04c:	ee34 6a86 	vadd.f32	s12, s9, s12
 800f050:	ee34 4a42 	vsub.f32	s8, s8, s4
 800f054:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f058:	edc0 6a01 	vstr	s13, [r0, #4]
 800f05c:	ed80 6a00 	vstr	s12, [r0]
 800f060:	ed92 6a01 	vldr	s12, [r2, #4]
 800f064:	9803      	ldr	r0, [sp, #12]
 800f066:	ee77 7a43 	vsub.f32	s15, s14, s6
 800f06a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800f06e:	ed92 7a00 	vldr	s14, [r2]
 800f072:	ee65 6a87 	vmul.f32	s13, s11, s14
 800f076:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f07a:	ee65 5a86 	vmul.f32	s11, s11, s12
 800f07e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f082:	ee77 5a65 	vsub.f32	s11, s14, s11
 800f086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f08a:	edca 5a01 	vstr	s11, [sl, #4]
 800f08e:	edca 7a00 	vstr	s15, [sl]
 800f092:	6872      	ldr	r2, [r6, #4]
 800f094:	4621      	mov	r1, r4
 800f096:	2304      	movs	r3, #4
 800f098:	f000 f9b0 	bl	800f3fc <arm_radix8_butterfly_f32>
 800f09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f09e:	6872      	ldr	r2, [r6, #4]
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	2304      	movs	r3, #4
 800f0a4:	f000 f9aa 	bl	800f3fc <arm_radix8_butterfly_f32>
 800f0a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f0aa:	6872      	ldr	r2, [r6, #4]
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	2304      	movs	r3, #4
 800f0b0:	f000 f9a4 	bl	800f3fc <arm_radix8_butterfly_f32>
 800f0b4:	9801      	ldr	r0, [sp, #4]
 800f0b6:	6872      	ldr	r2, [r6, #4]
 800f0b8:	4621      	mov	r1, r4
 800f0ba:	2304      	movs	r3, #4
 800f0bc:	b00f      	add	sp, #60	; 0x3c
 800f0be:	ecbd 8b0a 	vpop	{d8-d12}
 800f0c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c6:	f000 b999 	b.w	800f3fc <arm_radix8_butterfly_f32>
 800f0ca:	bf00      	nop

0800f0cc <arm_cfft_f32>:
 800f0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d0:	2a01      	cmp	r2, #1
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	4617      	mov	r7, r2
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	4698      	mov	r8, r3
 800f0da:	8805      	ldrh	r5, [r0, #0]
 800f0dc:	d054      	beq.n	800f188 <arm_cfft_f32+0xbc>
 800f0de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f0e2:	d04c      	beq.n	800f17e <arm_cfft_f32+0xb2>
 800f0e4:	d916      	bls.n	800f114 <arm_cfft_f32+0x48>
 800f0e6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800f0ea:	d01a      	beq.n	800f122 <arm_cfft_f32+0x56>
 800f0ec:	d95c      	bls.n	800f1a8 <arm_cfft_f32+0xdc>
 800f0ee:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800f0f2:	d044      	beq.n	800f17e <arm_cfft_f32+0xb2>
 800f0f4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800f0f8:	d105      	bne.n	800f106 <arm_cfft_f32+0x3a>
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	6872      	ldr	r2, [r6, #4]
 800f100:	2301      	movs	r3, #1
 800f102:	f000 f97b 	bl	800f3fc <arm_radix8_butterfly_f32>
 800f106:	f1b8 0f00 	cmp.w	r8, #0
 800f10a:	d111      	bne.n	800f130 <arm_cfft_f32+0x64>
 800f10c:	2f01      	cmp	r7, #1
 800f10e:	d016      	beq.n	800f13e <arm_cfft_f32+0x72>
 800f110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f114:	2d20      	cmp	r5, #32
 800f116:	d032      	beq.n	800f17e <arm_cfft_f32+0xb2>
 800f118:	d94a      	bls.n	800f1b0 <arm_cfft_f32+0xe4>
 800f11a:	2d40      	cmp	r5, #64	; 0x40
 800f11c:	d0ed      	beq.n	800f0fa <arm_cfft_f32+0x2e>
 800f11e:	2d80      	cmp	r5, #128	; 0x80
 800f120:	d1f1      	bne.n	800f106 <arm_cfft_f32+0x3a>
 800f122:	4630      	mov	r0, r6
 800f124:	4621      	mov	r1, r4
 800f126:	f7ff fca1 	bl	800ea6c <arm_cfft_radix8by2_f32>
 800f12a:	f1b8 0f00 	cmp.w	r8, #0
 800f12e:	d0ed      	beq.n	800f10c <arm_cfft_f32+0x40>
 800f130:	4620      	mov	r0, r4
 800f132:	89b1      	ldrh	r1, [r6, #12]
 800f134:	68b2      	ldr	r2, [r6, #8]
 800f136:	f7f1 f853 	bl	80001e0 <arm_bitreversal_32>
 800f13a:	2f01      	cmp	r7, #1
 800f13c:	d1e8      	bne.n	800f110 <arm_cfft_f32+0x44>
 800f13e:	ee07 5a90 	vmov	s15, r5
 800f142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f146:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f14a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800f14e:	2d00      	cmp	r5, #0
 800f150:	d0de      	beq.n	800f110 <arm_cfft_f32+0x44>
 800f152:	f104 0108 	add.w	r1, r4, #8
 800f156:	2300      	movs	r3, #0
 800f158:	3301      	adds	r3, #1
 800f15a:	429d      	cmp	r5, r3
 800f15c:	f101 0108 	add.w	r1, r1, #8
 800f160:	ed11 7a04 	vldr	s14, [r1, #-16]
 800f164:	ed51 7a03 	vldr	s15, [r1, #-12]
 800f168:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f16c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f170:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f174:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f178:	d1ee      	bne.n	800f158 <arm_cfft_f32+0x8c>
 800f17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f17e:	4630      	mov	r0, r6
 800f180:	4621      	mov	r1, r4
 800f182:	f7ff fd45 	bl	800ec10 <arm_cfft_radix8by4_f32>
 800f186:	e7be      	b.n	800f106 <arm_cfft_f32+0x3a>
 800f188:	b1ad      	cbz	r5, 800f1b6 <arm_cfft_f32+0xea>
 800f18a:	f101 030c 	add.w	r3, r1, #12
 800f18e:	2200      	movs	r2, #0
 800f190:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f194:	3201      	adds	r2, #1
 800f196:	eef1 7a67 	vneg.f32	s15, s15
 800f19a:	4295      	cmp	r5, r2
 800f19c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800f1a0:	f103 0308 	add.w	r3, r3, #8
 800f1a4:	d1f4      	bne.n	800f190 <arm_cfft_f32+0xc4>
 800f1a6:	e79a      	b.n	800f0de <arm_cfft_f32+0x12>
 800f1a8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f1ac:	d0a5      	beq.n	800f0fa <arm_cfft_f32+0x2e>
 800f1ae:	e7aa      	b.n	800f106 <arm_cfft_f32+0x3a>
 800f1b0:	2d10      	cmp	r5, #16
 800f1b2:	d0b6      	beq.n	800f122 <arm_cfft_f32+0x56>
 800f1b4:	e7a7      	b.n	800f106 <arm_cfft_f32+0x3a>
 800f1b6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f1ba:	d894      	bhi.n	800f0e6 <arm_cfft_f32+0x1a>
 800f1bc:	e7aa      	b.n	800f114 <arm_cfft_f32+0x48>
 800f1be:	bf00      	nop

0800f1c0 <arm_cmplx_mag_f32>:
 800f1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800f1c8:	b084      	sub	sp, #16
 800f1ca:	d07f      	beq.n	800f2cc <arm_cmplx_mag_f32+0x10c>
 800f1cc:	2700      	movs	r7, #0
 800f1ce:	f100 0420 	add.w	r4, r0, #32
 800f1d2:	f101 0510 	add.w	r5, r1, #16
 800f1d6:	4646      	mov	r6, r8
 800f1d8:	e05a      	b.n	800f290 <arm_cmplx_mag_f32+0xd0>
 800f1da:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f1de:	eeb4 0a40 	vcmp.f32	s0, s0
 800f1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e6:	f040 80a4 	bne.w	800f332 <arm_cmplx_mag_f32+0x172>
 800f1ea:	ed05 0a04 	vstr	s0, [r5, #-16]
 800f1ee:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800f1f2:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800f1f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f1fa:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f1fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20a:	f2c0 808f 	blt.w	800f32c <arm_cmplx_mag_f32+0x16c>
 800f20e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f212:	eeb4 0a40 	vcmp.f32	s0, s0
 800f216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f21a:	f040 80af 	bne.w	800f37c <arm_cmplx_mag_f32+0x1bc>
 800f21e:	ed05 0a03 	vstr	s0, [r5, #-12]
 800f222:	ed54 7a04 	vldr	s15, [r4, #-16]
 800f226:	ed14 0a03 	vldr	s0, [r4, #-12]
 800f22a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f22e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f232:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f23e:	db72      	blt.n	800f326 <arm_cmplx_mag_f32+0x166>
 800f240:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f244:	eeb4 0a40 	vcmp.f32	s0, s0
 800f248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f24c:	f040 808c 	bne.w	800f368 <arm_cmplx_mag_f32+0x1a8>
 800f250:	ed05 0a02 	vstr	s0, [r5, #-8]
 800f254:	ed54 7a02 	vldr	s15, [r4, #-8]
 800f258:	ed14 0a01 	vldr	s0, [r4, #-4]
 800f25c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f260:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f264:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f270:	db20      	blt.n	800f2b4 <arm_cmplx_mag_f32+0xf4>
 800f272:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f276:	eeb4 0a40 	vcmp.f32	s0, s0
 800f27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f27e:	d169      	bne.n	800f354 <arm_cmplx_mag_f32+0x194>
 800f280:	3e01      	subs	r6, #1
 800f282:	ed05 0a01 	vstr	s0, [r5, #-4]
 800f286:	f104 0420 	add.w	r4, r4, #32
 800f28a:	f105 0510 	add.w	r5, r5, #16
 800f28e:	d019      	beq.n	800f2c4 <arm_cmplx_mag_f32+0x104>
 800f290:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800f294:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800f298:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f29c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f2a0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f2a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ac:	da95      	bge.n	800f1da <arm_cmplx_mag_f32+0x1a>
 800f2ae:	f845 7c10 	str.w	r7, [r5, #-16]
 800f2b2:	e79c      	b.n	800f1ee <arm_cmplx_mag_f32+0x2e>
 800f2b4:	3e01      	subs	r6, #1
 800f2b6:	f845 7c04 	str.w	r7, [r5, #-4]
 800f2ba:	f104 0420 	add.w	r4, r4, #32
 800f2be:	f105 0510 	add.w	r5, r5, #16
 800f2c2:	d1e5      	bne.n	800f290 <arm_cmplx_mag_f32+0xd0>
 800f2c4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800f2c8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800f2cc:	f012 0503 	ands.w	r5, r2, #3
 800f2d0:	d026      	beq.n	800f320 <arm_cmplx_mag_f32+0x160>
 800f2d2:	2600      	movs	r6, #0
 800f2d4:	f100 0408 	add.w	r4, r0, #8
 800f2d8:	e00c      	b.n	800f2f4 <arm_cmplx_mag_f32+0x134>
 800f2da:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f2de:	eeb4 0a40 	vcmp.f32	s0, s0
 800f2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e6:	d12e      	bne.n	800f346 <arm_cmplx_mag_f32+0x186>
 800f2e8:	3d01      	subs	r5, #1
 800f2ea:	ed01 0a01 	vstr	s0, [r1, #-4]
 800f2ee:	f104 0408 	add.w	r4, r4, #8
 800f2f2:	d015      	beq.n	800f320 <arm_cmplx_mag_f32+0x160>
 800f2f4:	ed54 7a02 	vldr	s15, [r4, #-8]
 800f2f8:	ed14 0a01 	vldr	s0, [r4, #-4]
 800f2fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f300:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f304:	3104      	adds	r1, #4
 800f306:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f30a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f312:	dae2      	bge.n	800f2da <arm_cmplx_mag_f32+0x11a>
 800f314:	3d01      	subs	r5, #1
 800f316:	f841 6c04 	str.w	r6, [r1, #-4]
 800f31a:	f104 0408 	add.w	r4, r4, #8
 800f31e:	d1e9      	bne.n	800f2f4 <arm_cmplx_mag_f32+0x134>
 800f320:	b004      	add	sp, #16
 800f322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f326:	f845 7c08 	str.w	r7, [r5, #-8]
 800f32a:	e793      	b.n	800f254 <arm_cmplx_mag_f32+0x94>
 800f32c:	f845 7c0c 	str.w	r7, [r5, #-12]
 800f330:	e777      	b.n	800f222 <arm_cmplx_mag_f32+0x62>
 800f332:	eeb0 0a67 	vmov.f32	s0, s15
 800f336:	9203      	str	r2, [sp, #12]
 800f338:	9102      	str	r1, [sp, #8]
 800f33a:	9001      	str	r0, [sp, #4]
 800f33c:	f001 f90c 	bl	8010558 <sqrtf>
 800f340:	a801      	add	r0, sp, #4
 800f342:	c807      	ldmia	r0, {r0, r1, r2}
 800f344:	e751      	b.n	800f1ea <arm_cmplx_mag_f32+0x2a>
 800f346:	eeb0 0a67 	vmov.f32	s0, s15
 800f34a:	9101      	str	r1, [sp, #4]
 800f34c:	f001 f904 	bl	8010558 <sqrtf>
 800f350:	9901      	ldr	r1, [sp, #4]
 800f352:	e7c9      	b.n	800f2e8 <arm_cmplx_mag_f32+0x128>
 800f354:	eeb0 0a67 	vmov.f32	s0, s15
 800f358:	9203      	str	r2, [sp, #12]
 800f35a:	9102      	str	r1, [sp, #8]
 800f35c:	9001      	str	r0, [sp, #4]
 800f35e:	f001 f8fb 	bl	8010558 <sqrtf>
 800f362:	a801      	add	r0, sp, #4
 800f364:	c807      	ldmia	r0, {r0, r1, r2}
 800f366:	e78b      	b.n	800f280 <arm_cmplx_mag_f32+0xc0>
 800f368:	eeb0 0a67 	vmov.f32	s0, s15
 800f36c:	9203      	str	r2, [sp, #12]
 800f36e:	9102      	str	r1, [sp, #8]
 800f370:	9001      	str	r0, [sp, #4]
 800f372:	f001 f8f1 	bl	8010558 <sqrtf>
 800f376:	a801      	add	r0, sp, #4
 800f378:	c807      	ldmia	r0, {r0, r1, r2}
 800f37a:	e769      	b.n	800f250 <arm_cmplx_mag_f32+0x90>
 800f37c:	eeb0 0a67 	vmov.f32	s0, s15
 800f380:	9203      	str	r2, [sp, #12]
 800f382:	9102      	str	r1, [sp, #8]
 800f384:	9001      	str	r0, [sp, #4]
 800f386:	f001 f8e7 	bl	8010558 <sqrtf>
 800f38a:	a801      	add	r0, sp, #4
 800f38c:	c807      	ldmia	r0, {r0, r1, r2}
 800f38e:	e746      	b.n	800f21e <arm_cmplx_mag_f32+0x5e>

0800f390 <arm_scale_f32>:
 800f390:	b470      	push	{r4, r5, r6}
 800f392:	0896      	lsrs	r6, r2, #2
 800f394:	d025      	beq.n	800f3e2 <arm_scale_f32+0x52>
 800f396:	f100 0410 	add.w	r4, r0, #16
 800f39a:	f101 0310 	add.w	r3, r1, #16
 800f39e:	4635      	mov	r5, r6
 800f3a0:	ed14 6a04 	vldr	s12, [r4, #-16]
 800f3a4:	ed54 6a03 	vldr	s13, [r4, #-12]
 800f3a8:	ed14 7a02 	vldr	s14, [r4, #-8]
 800f3ac:	ed54 7a01 	vldr	s15, [r4, #-4]
 800f3b0:	ee26 6a00 	vmul.f32	s12, s12, s0
 800f3b4:	ee66 6a80 	vmul.f32	s13, s13, s0
 800f3b8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f3bc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f3c0:	3d01      	subs	r5, #1
 800f3c2:	ed03 6a04 	vstr	s12, [r3, #-16]
 800f3c6:	ed43 6a03 	vstr	s13, [r3, #-12]
 800f3ca:	ed03 7a02 	vstr	s14, [r3, #-8]
 800f3ce:	ed43 7a01 	vstr	s15, [r3, #-4]
 800f3d2:	f104 0410 	add.w	r4, r4, #16
 800f3d6:	f103 0310 	add.w	r3, r3, #16
 800f3da:	d1e1      	bne.n	800f3a0 <arm_scale_f32+0x10>
 800f3dc:	0136      	lsls	r6, r6, #4
 800f3de:	4430      	add	r0, r6
 800f3e0:	4431      	add	r1, r6
 800f3e2:	f012 0203 	ands.w	r2, r2, #3
 800f3e6:	d007      	beq.n	800f3f8 <arm_scale_f32+0x68>
 800f3e8:	ecf0 7a01 	vldmia	r0!, {s15}
 800f3ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f3f0:	3a01      	subs	r2, #1
 800f3f2:	ece1 7a01 	vstmia	r1!, {s15}
 800f3f6:	d1f7      	bne.n	800f3e8 <arm_scale_f32+0x58>
 800f3f8:	bc70      	pop	{r4, r5, r6}
 800f3fa:	4770      	bx	lr

0800f3fc <arm_radix8_butterfly_f32>:
 800f3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f400:	ed2d 8b10 	vpush	{d8-d15}
 800f404:	b09d      	sub	sp, #116	; 0x74
 800f406:	461c      	mov	r4, r3
 800f408:	ed9f bac8 	vldr	s22, [pc, #800]	; 800f72c <arm_radix8_butterfly_f32+0x330>
 800f40c:	921a      	str	r2, [sp, #104]	; 0x68
 800f40e:	1d03      	adds	r3, r0, #4
 800f410:	4682      	mov	sl, r0
 800f412:	4689      	mov	r9, r1
 800f414:	468b      	mov	fp, r1
 800f416:	931b      	str	r3, [sp, #108]	; 0x6c
 800f418:	9400      	str	r4, [sp, #0]
 800f41a:	469e      	mov	lr, r3
 800f41c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800f420:	005a      	lsls	r2, r3, #1
 800f422:	18d6      	adds	r6, r2, r3
 800f424:	18f5      	adds	r5, r6, r3
 800f426:	9203      	str	r2, [sp, #12]
 800f428:	195a      	adds	r2, r3, r5
 800f42a:	18d0      	adds	r0, r2, r3
 800f42c:	00df      	lsls	r7, r3, #3
 800f42e:	1819      	adds	r1, r3, r0
 800f430:	463c      	mov	r4, r7
 800f432:	9701      	str	r7, [sp, #4]
 800f434:	4457      	add	r7, sl
 800f436:	930c      	str	r3, [sp, #48]	; 0x30
 800f438:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800f43c:	011b      	lsls	r3, r3, #4
 800f43e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800f442:	eb07 0c04 	add.w	ip, r7, r4
 800f446:	9c00      	ldr	r4, [sp, #0]
 800f448:	9302      	str	r3, [sp, #8]
 800f44a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800f44e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800f452:	3204      	adds	r2, #4
 800f454:	3104      	adds	r1, #4
 800f456:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800f45a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f45e:	f04f 0800 	mov.w	r8, #0
 800f462:	eddc 7a00 	vldr	s15, [ip]
 800f466:	edd7 6a00 	vldr	s13, [r7]
 800f46a:	edd6 3a00 	vldr	s7, [r6]
 800f46e:	ed5e aa01 	vldr	s21, [lr, #-4]
 800f472:	edd5 4a00 	vldr	s9, [r5]
 800f476:	ed90 2a00 	vldr	s4, [r0]
 800f47a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800f47e:	ed51 0a01 	vldr	s1, [r1, #-4]
 800f482:	ee77 8a82 	vadd.f32	s17, s15, s4
 800f486:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800f48a:	ee76 1a87 	vadd.f32	s3, s13, s14
 800f48e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800f492:	ee31 6a84 	vadd.f32	s12, s3, s8
 800f496:	ee33 5a28 	vadd.f32	s10, s6, s17
 800f49a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f49e:	ee75 6a06 	vadd.f32	s13, s10, s12
 800f4a2:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f4a6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800f4aa:	ed85 5a00 	vstr	s10, [r5]
 800f4ae:	ed96 1a01 	vldr	s2, [r6, #4]
 800f4b2:	edd7 5a01 	vldr	s11, [r7, #4]
 800f4b6:	ed92 aa00 	vldr	s20, [r2]
 800f4ba:	ed91 6a00 	vldr	s12, [r1]
 800f4be:	ed9e 9a00 	vldr	s18, [lr]
 800f4c2:	ed95 5a01 	vldr	s10, [r5, #4]
 800f4c6:	eddc 6a01 	vldr	s13, [ip, #4]
 800f4ca:	edd0 9a01 	vldr	s19, [r0, #4]
 800f4ce:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800f4d2:	ee71 2a46 	vsub.f32	s5, s2, s12
 800f4d6:	ee75 3aca 	vsub.f32	s7, s11, s20
 800f4da:	ee37 0a60 	vsub.f32	s0, s14, s1
 800f4de:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800f4e2:	ee37 7a20 	vadd.f32	s14, s14, s1
 800f4e6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800f4ea:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800f4ee:	ee79 3a05 	vadd.f32	s7, s18, s10
 800f4f2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800f4f6:	ee39 5a45 	vsub.f32	s10, s18, s10
 800f4fa:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800f4fe:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800f502:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800f506:	ee31 6a06 	vadd.f32	s12, s2, s12
 800f50a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800f50e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800f512:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800f516:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800f51a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800f51e:	ee36 0a88 	vadd.f32	s0, s13, s16
 800f522:	ee75 8a86 	vadd.f32	s17, s11, s12
 800f526:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800f52a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800f52e:	ee75 6a62 	vsub.f32	s13, s10, s5
 800f532:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800f536:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f53a:	ee33 1a89 	vadd.f32	s2, s7, s18
 800f53e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800f542:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800f546:	ee75 4a22 	vadd.f32	s9, s10, s5
 800f54a:	ee32 5a27 	vadd.f32	s10, s4, s15
 800f54e:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f552:	ee33 8a06 	vadd.f32	s16, s6, s12
 800f556:	ee75 2a87 	vadd.f32	s5, s11, s14
 800f55a:	ee31 9a28 	vadd.f32	s18, s2, s17
 800f55e:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f562:	ee74 0a61 	vsub.f32	s1, s8, s3
 800f566:	ee33 2a80 	vadd.f32	s4, s7, s0
 800f56a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f56e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800f572:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f576:	ee31 1a68 	vsub.f32	s2, s2, s17
 800f57a:	ee34 4a21 	vadd.f32	s8, s8, s3
 800f57e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800f582:	ee74 4a85 	vadd.f32	s9, s9, s10
 800f586:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f58a:	44d8      	add	r8, fp
 800f58c:	45c1      	cmp	r9, r8
 800f58e:	ed8e 9a00 	vstr	s18, [lr]
 800f592:	ed85 1a01 	vstr	s2, [r5, #4]
 800f596:	449e      	add	lr, r3
 800f598:	ed8c 8a00 	vstr	s16, [ip]
 800f59c:	441d      	add	r5, r3
 800f59e:	ed80 6a00 	vstr	s12, [r0]
 800f5a2:	edcc 0a01 	vstr	s1, [ip, #4]
 800f5a6:	ed80 4a01 	vstr	s8, [r0, #4]
 800f5aa:	449c      	add	ip, r3
 800f5ac:	ed87 2a00 	vstr	s4, [r7]
 800f5b0:	4418      	add	r0, r3
 800f5b2:	ed41 3a01 	vstr	s7, [r1, #-4]
 800f5b6:	ed42 2a01 	vstr	s5, [r2, #-4]
 800f5ba:	ed86 7a00 	vstr	s14, [r6]
 800f5be:	ed87 3a01 	vstr	s6, [r7, #4]
 800f5c2:	edc1 4a00 	vstr	s9, [r1]
 800f5c6:	441f      	add	r7, r3
 800f5c8:	edc2 5a00 	vstr	s11, [r2]
 800f5cc:	4419      	add	r1, r3
 800f5ce:	edc6 6a01 	vstr	s13, [r6, #4]
 800f5d2:	441a      	add	r2, r3
 800f5d4:	441e      	add	r6, r3
 800f5d6:	f63f af44 	bhi.w	800f462 <arm_radix8_butterfly_f32+0x66>
 800f5da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f5dc:	2907      	cmp	r1, #7
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f240 81e9 	bls.w	800f9b6 <arm_radix8_butterfly_f32+0x5ba>
 800f5e4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800f5e8:	193e      	adds	r6, r7, r4
 800f5ea:	1935      	adds	r5, r6, r4
 800f5ec:	9c03      	ldr	r4, [sp, #12]
 800f5ee:	9000      	str	r0, [sp, #0]
 800f5f0:	4622      	mov	r2, r4
 800f5f2:	3201      	adds	r2, #1
 800f5f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f5f8:	9900      	ldr	r1, [sp, #0]
 800f5fa:	1828      	adds	r0, r5, r0
 800f5fc:	eb00 0e01 	add.w	lr, r0, r1
 800f600:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f602:	440a      	add	r2, r1
 800f604:	eb04 0c01 	add.w	ip, r4, r1
 800f608:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800f60c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800f610:	9a00      	ldr	r2, [sp, #0]
 800f612:	940f      	str	r4, [sp, #60]	; 0x3c
 800f614:	00ed      	lsls	r5, r5, #3
 800f616:	9511      	str	r5, [sp, #68]	; 0x44
 800f618:	00d5      	lsls	r5, r2, #3
 800f61a:	950d      	str	r5, [sp, #52]	; 0x34
 800f61c:	9d01      	ldr	r5, [sp, #4]
 800f61e:	3508      	adds	r5, #8
 800f620:	9516      	str	r5, [sp, #88]	; 0x58
 800f622:	9d02      	ldr	r5, [sp, #8]
 800f624:	3508      	adds	r5, #8
 800f626:	0114      	lsls	r4, r2, #4
 800f628:	9517      	str	r5, [sp, #92]	; 0x5c
 800f62a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f62c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f62e:	940e      	str	r4, [sp, #56]	; 0x38
 800f630:	00c0      	lsls	r0, r0, #3
 800f632:	9010      	str	r0, [sp, #64]	; 0x40
 800f634:	18aa      	adds	r2, r5, r2
 800f636:	9207      	str	r2, [sp, #28]
 800f638:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f63a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f63c:	18aa      	adds	r2, r5, r2
 800f63e:	9208      	str	r2, [sp, #32]
 800f640:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f642:	18aa      	adds	r2, r5, r2
 800f644:	9209      	str	r2, [sp, #36]	; 0x24
 800f646:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f64a:	f10e 0204 	add.w	r2, lr, #4
 800f64e:	920a      	str	r2, [sp, #40]	; 0x28
 800f650:	00c9      	lsls	r1, r1, #3
 800f652:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f654:	310c      	adds	r1, #12
 800f656:	00f6      	lsls	r6, r6, #3
 800f658:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800f65c:	9114      	str	r1, [sp, #80]	; 0x50
 800f65e:	18a9      	adds	r1, r5, r2
 800f660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f662:	9612      	str	r6, [sp, #72]	; 0x48
 800f664:	00ff      	lsls	r7, r7, #3
 800f666:	19ae      	adds	r6, r5, r6
 800f668:	3008      	adds	r0, #8
 800f66a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800f66e:	9606      	str	r6, [sp, #24]
 800f670:	9019      	str	r0, [sp, #100]	; 0x64
 800f672:	18aa      	adds	r2, r5, r2
 800f674:	0164      	lsls	r4, r4, #5
 800f676:	19ee      	adds	r6, r5, r7
 800f678:	f10c 000c 	add.w	r0, ip, #12
 800f67c:	9713      	str	r7, [sp, #76]	; 0x4c
 800f67e:	9604      	str	r6, [sp, #16]
 800f680:	9015      	str	r0, [sp, #84]	; 0x54
 800f682:	9103      	str	r1, [sp, #12]
 800f684:	9205      	str	r2, [sp, #20]
 800f686:	f104 0208 	add.w	r2, r4, #8
 800f68a:	9218      	str	r2, [sp, #96]	; 0x60
 800f68c:	f04f 0801 	mov.w	r8, #1
 800f690:	2200      	movs	r2, #0
 800f692:	f102 0108 	add.w	r1, r2, #8
 800f696:	460f      	mov	r7, r1
 800f698:	910b      	str	r1, [sp, #44]	; 0x2c
 800f69a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f69c:	188e      	adds	r6, r1, r2
 800f69e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f6a0:	188d      	adds	r5, r1, r2
 800f6a2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f6a4:	188c      	adds	r4, r1, r2
 800f6a6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f6a8:	1888      	adds	r0, r1, r2
 800f6aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f6ac:	eb01 0c02 	add.w	ip, r1, r2
 800f6b0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f6b2:	440a      	add	r2, r1
 800f6b4:	9903      	ldr	r1, [sp, #12]
 800f6b6:	edd1 fa00 	vldr	s31, [r1]
 800f6ba:	9905      	ldr	r1, [sp, #20]
 800f6bc:	ed91 fa00 	vldr	s30, [r1]
 800f6c0:	9904      	ldr	r1, [sp, #16]
 800f6c2:	edd1 ea00 	vldr	s29, [r1]
 800f6c6:	9906      	ldr	r1, [sp, #24]
 800f6c8:	ed91 ea00 	vldr	s28, [r1]
 800f6cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6ce:	edd1 da00 	vldr	s27, [r1]
 800f6d2:	9908      	ldr	r1, [sp, #32]
 800f6d4:	ed91 da00 	vldr	s26, [r1]
 800f6d8:	9907      	ldr	r1, [sp, #28]
 800f6da:	edd1 ca00 	vldr	s25, [r1]
 800f6de:	9903      	ldr	r1, [sp, #12]
 800f6e0:	ed91 ca01 	vldr	s24, [r1, #4]
 800f6e4:	9905      	ldr	r1, [sp, #20]
 800f6e6:	edd1 ba01 	vldr	s23, [r1, #4]
 800f6ea:	9904      	ldr	r1, [sp, #16]
 800f6ec:	edd1 aa01 	vldr	s21, [r1, #4]
 800f6f0:	9906      	ldr	r1, [sp, #24]
 800f6f2:	ed91 aa01 	vldr	s20, [r1, #4]
 800f6f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6f8:	edd1 7a01 	vldr	s15, [r1, #4]
 800f6fc:	9908      	ldr	r1, [sp, #32]
 800f6fe:	edcd 7a00 	vstr	s15, [sp]
 800f702:	edd1 7a01 	vldr	s15, [r1, #4]
 800f706:	9907      	ldr	r1, [sp, #28]
 800f708:	edcd 7a01 	vstr	s15, [sp, #4]
 800f70c:	edd1 7a01 	vldr	s15, [r1, #4]
 800f710:	eb0a 0e07 	add.w	lr, sl, r7
 800f714:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f716:	edcd 7a02 	vstr	s15, [sp, #8]
 800f71a:	eb0c 010a 	add.w	r1, ip, sl
 800f71e:	4456      	add	r6, sl
 800f720:	4455      	add	r5, sl
 800f722:	4454      	add	r4, sl
 800f724:	4450      	add	r0, sl
 800f726:	4452      	add	r2, sl
 800f728:	46c4      	mov	ip, r8
 800f72a:	e001      	b.n	800f730 <arm_radix8_butterfly_f32+0x334>
 800f72c:	3f3504f3 	.word	0x3f3504f3
 800f730:	ed96 5a00 	vldr	s10, [r6]
 800f734:	ed52 9a01 	vldr	s19, [r2, #-4]
 800f738:	ed11 6a01 	vldr	s12, [r1, #-4]
 800f73c:	edd0 7a00 	vldr	s15, [r0]
 800f740:	ed17 7a01 	vldr	s14, [r7, #-4]
 800f744:	edde 3a00 	vldr	s7, [lr]
 800f748:	ed94 3a00 	vldr	s6, [r4]
 800f74c:	ed95 2a00 	vldr	s4, [r5]
 800f750:	ed9e 0a01 	vldr	s0, [lr, #4]
 800f754:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f758:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f75c:	ee33 4a29 	vadd.f32	s8, s6, s19
 800f760:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f764:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f768:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f76c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f770:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f774:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f778:	ed8e 6a00 	vstr	s12, [lr]
 800f77c:	edd0 8a01 	vldr	s17, [r0, #4]
 800f780:	ed95 9a01 	vldr	s18, [r5, #4]
 800f784:	edd1 2a00 	vldr	s5, [r1]
 800f788:	ed97 7a00 	vldr	s14, [r7]
 800f78c:	edd4 0a01 	vldr	s1, [r4, #4]
 800f790:	ed96 6a01 	vldr	s12, [r6, #4]
 800f794:	edd2 5a00 	vldr	s11, [r2]
 800f798:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f79c:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f7a0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f7a4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800f7a8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f7ac:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f7b0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f7b4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f7b8:	ee75 8a69 	vsub.f32	s17, s10, s19
 800f7bc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f7c0:	ee35 5a29 	vadd.f32	s10, s10, s19
 800f7c4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f7c8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f7cc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800f7d0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f7d4:	ee32 9a08 	vadd.f32	s18, s4, s16
 800f7d8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f7dc:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f7e0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f7e4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f7e8:	ee32 1a87 	vadd.f32	s2, s5, s14
 800f7ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f7f0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f7f4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f7f8:	ee73 0a29 	vadd.f32	s1, s6, s19
 800f7fc:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f800:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f804:	ee32 7a64 	vsub.f32	s14, s4, s9
 800f808:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800f80c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f810:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f814:	ee75 8a85 	vadd.f32	s17, s11, s10
 800f818:	ee74 3a22 	vadd.f32	s7, s8, s5
 800f81c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800f820:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f824:	ee79 1a41 	vsub.f32	s3, s18, s2
 800f828:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800f82c:	ee76 5a43 	vsub.f32	s11, s12, s6
 800f830:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f834:	ee72 4a24 	vadd.f32	s9, s4, s9
 800f838:	ee30 4a60 	vsub.f32	s8, s0, s1
 800f83c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800f840:	ee30 0a20 	vadd.f32	s0, s0, s1
 800f844:	ee77 9a85 	vadd.f32	s19, s15, s10
 800f848:	ee36 6a03 	vadd.f32	s12, s12, s6
 800f84c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f850:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800f854:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800f858:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800f85c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800f860:	ee39 1a01 	vadd.f32	s2, s18, s2
 800f864:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800f868:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800f86c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800f870:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800f874:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800f878:	ee35 3a03 	vadd.f32	s6, s10, s6
 800f87c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800f880:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800f884:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800f888:	ed9d 4a02 	vldr	s8, [sp, #8]
 800f88c:	ed8e 1a01 	vstr	s2, [lr, #4]
 800f890:	ee77 3a63 	vsub.f32	s7, s14, s7
 800f894:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800f898:	ed9d 7a01 	vldr	s14, [sp, #4]
 800f89c:	ed86 3a00 	vstr	s6, [r6]
 800f8a0:	ee30 9a89 	vadd.f32	s18, s1, s18
 800f8a4:	ee32 2a05 	vadd.f32	s4, s4, s10
 800f8a8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800f8ac:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800f8b0:	ee67 2a22 	vmul.f32	s5, s14, s5
 800f8b4:	ee64 1a00 	vmul.f32	s3, s8, s0
 800f8b8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f8bc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800f8c0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800f8c4:	ee64 8a28 	vmul.f32	s17, s8, s17
 800f8c8:	ed9d 4a00 	vldr	s8, [sp]
 800f8cc:	edc6 6a01 	vstr	s13, [r6, #4]
 800f8d0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800f8d4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800f8d8:	ee64 9a29 	vmul.f32	s19, s8, s19
 800f8dc:	ee24 4a25 	vmul.f32	s8, s8, s11
 800f8e0:	ee30 7a87 	vadd.f32	s14, s1, s14
 800f8e4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f8e8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800f8ec:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800f8f0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800f8f4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800f8f8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800f8fc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800f900:	ee75 1a21 	vadd.f32	s3, s10, s3
 800f904:	ee30 0a68 	vsub.f32	s0, s0, s17
 800f908:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800f90c:	ee70 0a84 	vadd.f32	s1, s1, s8
 800f910:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f914:	44dc      	add	ip, fp
 800f916:	45e1      	cmp	r9, ip
 800f918:	ed84 9a00 	vstr	s18, [r4]
 800f91c:	edc4 3a01 	vstr	s7, [r4, #4]
 800f920:	449e      	add	lr, r3
 800f922:	ed02 7a01 	vstr	s14, [r2, #-4]
 800f926:	edc2 2a00 	vstr	s5, [r2]
 800f92a:	441e      	add	r6, r3
 800f92c:	ed85 2a00 	vstr	s4, [r5]
 800f930:	ed85 8a01 	vstr	s16, [r5, #4]
 800f934:	441c      	add	r4, r3
 800f936:	ed47 1a01 	vstr	s3, [r7, #-4]
 800f93a:	ed87 0a00 	vstr	s0, [r7]
 800f93e:	441a      	add	r2, r3
 800f940:	ed41 4a01 	vstr	s9, [r1, #-4]
 800f944:	edc1 9a00 	vstr	s19, [r1]
 800f948:	441d      	add	r5, r3
 800f94a:	edc0 0a00 	vstr	s1, [r0]
 800f94e:	441f      	add	r7, r3
 800f950:	ed80 6a01 	vstr	s12, [r0, #4]
 800f954:	4419      	add	r1, r3
 800f956:	4418      	add	r0, r3
 800f958:	f63f aeea 	bhi.w	800f730 <arm_radix8_butterfly_f32+0x334>
 800f95c:	9a03      	ldr	r2, [sp, #12]
 800f95e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f960:	440a      	add	r2, r1
 800f962:	9203      	str	r2, [sp, #12]
 800f964:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f966:	9a05      	ldr	r2, [sp, #20]
 800f968:	440a      	add	r2, r1
 800f96a:	9205      	str	r2, [sp, #20]
 800f96c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f96e:	9a04      	ldr	r2, [sp, #16]
 800f970:	440a      	add	r2, r1
 800f972:	9204      	str	r2, [sp, #16]
 800f974:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f976:	9a06      	ldr	r2, [sp, #24]
 800f978:	440a      	add	r2, r1
 800f97a:	9206      	str	r2, [sp, #24]
 800f97c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f97e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f980:	440a      	add	r2, r1
 800f982:	9209      	str	r2, [sp, #36]	; 0x24
 800f984:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f986:	9a08      	ldr	r2, [sp, #32]
 800f988:	440a      	add	r2, r1
 800f98a:	9208      	str	r2, [sp, #32]
 800f98c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f98e:	9a07      	ldr	r2, [sp, #28]
 800f990:	440a      	add	r2, r1
 800f992:	9207      	str	r2, [sp, #28]
 800f994:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f998:	f108 0801 	add.w	r8, r8, #1
 800f99c:	3208      	adds	r2, #8
 800f99e:	4588      	cmp	r8, r1
 800f9a0:	920a      	str	r2, [sp, #40]	; 0x28
 800f9a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9a4:	f47f ae75 	bne.w	800f692 <arm_radix8_butterfly_f32+0x296>
 800f9a8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800f9ac:	9300      	str	r3, [sp, #0]
 800f9ae:	46c3      	mov	fp, r8
 800f9b0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800f9b4:	e532      	b.n	800f41c <arm_radix8_butterfly_f32+0x20>
 800f9b6:	b01d      	add	sp, #116	; 0x74
 800f9b8:	ecbd 8b10 	vpop	{d8-d15}
 800f9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9c0 <atoi>:
 800f9c0:	220a      	movs	r2, #10
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	f000 ba22 	b.w	800fe0c <strtol>

0800f9c8 <__errno>:
 800f9c8:	4b01      	ldr	r3, [pc, #4]	; (800f9d0 <__errno+0x8>)
 800f9ca:	6818      	ldr	r0, [r3, #0]
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	2000010c 	.word	0x2000010c

0800f9d4 <__libc_init_array>:
 800f9d4:	b570      	push	{r4, r5, r6, lr}
 800f9d6:	4d0d      	ldr	r5, [pc, #52]	; (800fa0c <__libc_init_array+0x38>)
 800f9d8:	4c0d      	ldr	r4, [pc, #52]	; (800fa10 <__libc_init_array+0x3c>)
 800f9da:	1b64      	subs	r4, r4, r5
 800f9dc:	10a4      	asrs	r4, r4, #2
 800f9de:	2600      	movs	r6, #0
 800f9e0:	42a6      	cmp	r6, r4
 800f9e2:	d109      	bne.n	800f9f8 <__libc_init_array+0x24>
 800f9e4:	4d0b      	ldr	r5, [pc, #44]	; (800fa14 <__libc_init_array+0x40>)
 800f9e6:	4c0c      	ldr	r4, [pc, #48]	; (800fa18 <__libc_init_array+0x44>)
 800f9e8:	f000 ff54 	bl	8010894 <_init>
 800f9ec:	1b64      	subs	r4, r4, r5
 800f9ee:	10a4      	asrs	r4, r4, #2
 800f9f0:	2600      	movs	r6, #0
 800f9f2:	42a6      	cmp	r6, r4
 800f9f4:	d105      	bne.n	800fa02 <__libc_init_array+0x2e>
 800f9f6:	bd70      	pop	{r4, r5, r6, pc}
 800f9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9fc:	4798      	blx	r3
 800f9fe:	3601      	adds	r6, #1
 800fa00:	e7ee      	b.n	800f9e0 <__libc_init_array+0xc>
 800fa02:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa06:	4798      	blx	r3
 800fa08:	3601      	adds	r6, #1
 800fa0a:	e7f2      	b.n	800f9f2 <__libc_init_array+0x1e>
 800fa0c:	08011adc 	.word	0x08011adc
 800fa10:	08011adc 	.word	0x08011adc
 800fa14:	08011adc 	.word	0x08011adc
 800fa18:	08011ae0 	.word	0x08011ae0

0800fa1c <__retarget_lock_acquire_recursive>:
 800fa1c:	4770      	bx	lr

0800fa1e <__retarget_lock_release_recursive>:
 800fa1e:	4770      	bx	lr

0800fa20 <memcpy>:
 800fa20:	440a      	add	r2, r1
 800fa22:	4291      	cmp	r1, r2
 800fa24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fa28:	d100      	bne.n	800fa2c <memcpy+0xc>
 800fa2a:	4770      	bx	lr
 800fa2c:	b510      	push	{r4, lr}
 800fa2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa36:	4291      	cmp	r1, r2
 800fa38:	d1f9      	bne.n	800fa2e <memcpy+0xe>
 800fa3a:	bd10      	pop	{r4, pc}

0800fa3c <memset>:
 800fa3c:	4402      	add	r2, r0
 800fa3e:	4603      	mov	r3, r0
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d100      	bne.n	800fa46 <memset+0xa>
 800fa44:	4770      	bx	lr
 800fa46:	f803 1b01 	strb.w	r1, [r3], #1
 800fa4a:	e7f9      	b.n	800fa40 <memset+0x4>

0800fa4c <sbrk_aligned>:
 800fa4c:	b570      	push	{r4, r5, r6, lr}
 800fa4e:	4e0e      	ldr	r6, [pc, #56]	; (800fa88 <sbrk_aligned+0x3c>)
 800fa50:	460c      	mov	r4, r1
 800fa52:	6831      	ldr	r1, [r6, #0]
 800fa54:	4605      	mov	r5, r0
 800fa56:	b911      	cbnz	r1, 800fa5e <sbrk_aligned+0x12>
 800fa58:	f000 f8f6 	bl	800fc48 <_sbrk_r>
 800fa5c:	6030      	str	r0, [r6, #0]
 800fa5e:	4621      	mov	r1, r4
 800fa60:	4628      	mov	r0, r5
 800fa62:	f000 f8f1 	bl	800fc48 <_sbrk_r>
 800fa66:	1c43      	adds	r3, r0, #1
 800fa68:	d00a      	beq.n	800fa80 <sbrk_aligned+0x34>
 800fa6a:	1cc4      	adds	r4, r0, #3
 800fa6c:	f024 0403 	bic.w	r4, r4, #3
 800fa70:	42a0      	cmp	r0, r4
 800fa72:	d007      	beq.n	800fa84 <sbrk_aligned+0x38>
 800fa74:	1a21      	subs	r1, r4, r0
 800fa76:	4628      	mov	r0, r5
 800fa78:	f000 f8e6 	bl	800fc48 <_sbrk_r>
 800fa7c:	3001      	adds	r0, #1
 800fa7e:	d101      	bne.n	800fa84 <sbrk_aligned+0x38>
 800fa80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fa84:	4620      	mov	r0, r4
 800fa86:	bd70      	pop	{r4, r5, r6, pc}
 800fa88:	2000bb44 	.word	0x2000bb44

0800fa8c <_malloc_r>:
 800fa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa90:	1ccd      	adds	r5, r1, #3
 800fa92:	f025 0503 	bic.w	r5, r5, #3
 800fa96:	3508      	adds	r5, #8
 800fa98:	2d0c      	cmp	r5, #12
 800fa9a:	bf38      	it	cc
 800fa9c:	250c      	movcc	r5, #12
 800fa9e:	2d00      	cmp	r5, #0
 800faa0:	4607      	mov	r7, r0
 800faa2:	db01      	blt.n	800faa8 <_malloc_r+0x1c>
 800faa4:	42a9      	cmp	r1, r5
 800faa6:	d905      	bls.n	800fab4 <_malloc_r+0x28>
 800faa8:	230c      	movs	r3, #12
 800faaa:	603b      	str	r3, [r7, #0]
 800faac:	2600      	movs	r6, #0
 800faae:	4630      	mov	r0, r6
 800fab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fab4:	4e2e      	ldr	r6, [pc, #184]	; (800fb70 <_malloc_r+0xe4>)
 800fab6:	f000 f9b3 	bl	800fe20 <__malloc_lock>
 800faba:	6833      	ldr	r3, [r6, #0]
 800fabc:	461c      	mov	r4, r3
 800fabe:	bb34      	cbnz	r4, 800fb0e <_malloc_r+0x82>
 800fac0:	4629      	mov	r1, r5
 800fac2:	4638      	mov	r0, r7
 800fac4:	f7ff ffc2 	bl	800fa4c <sbrk_aligned>
 800fac8:	1c43      	adds	r3, r0, #1
 800faca:	4604      	mov	r4, r0
 800facc:	d14d      	bne.n	800fb6a <_malloc_r+0xde>
 800face:	6834      	ldr	r4, [r6, #0]
 800fad0:	4626      	mov	r6, r4
 800fad2:	2e00      	cmp	r6, #0
 800fad4:	d140      	bne.n	800fb58 <_malloc_r+0xcc>
 800fad6:	6823      	ldr	r3, [r4, #0]
 800fad8:	4631      	mov	r1, r6
 800fada:	4638      	mov	r0, r7
 800fadc:	eb04 0803 	add.w	r8, r4, r3
 800fae0:	f000 f8b2 	bl	800fc48 <_sbrk_r>
 800fae4:	4580      	cmp	r8, r0
 800fae6:	d13a      	bne.n	800fb5e <_malloc_r+0xd2>
 800fae8:	6821      	ldr	r1, [r4, #0]
 800faea:	3503      	adds	r5, #3
 800faec:	1a6d      	subs	r5, r5, r1
 800faee:	f025 0503 	bic.w	r5, r5, #3
 800faf2:	3508      	adds	r5, #8
 800faf4:	2d0c      	cmp	r5, #12
 800faf6:	bf38      	it	cc
 800faf8:	250c      	movcc	r5, #12
 800fafa:	4629      	mov	r1, r5
 800fafc:	4638      	mov	r0, r7
 800fafe:	f7ff ffa5 	bl	800fa4c <sbrk_aligned>
 800fb02:	3001      	adds	r0, #1
 800fb04:	d02b      	beq.n	800fb5e <_malloc_r+0xd2>
 800fb06:	6823      	ldr	r3, [r4, #0]
 800fb08:	442b      	add	r3, r5
 800fb0a:	6023      	str	r3, [r4, #0]
 800fb0c:	e00e      	b.n	800fb2c <_malloc_r+0xa0>
 800fb0e:	6822      	ldr	r2, [r4, #0]
 800fb10:	1b52      	subs	r2, r2, r5
 800fb12:	d41e      	bmi.n	800fb52 <_malloc_r+0xc6>
 800fb14:	2a0b      	cmp	r2, #11
 800fb16:	d916      	bls.n	800fb46 <_malloc_r+0xba>
 800fb18:	1961      	adds	r1, r4, r5
 800fb1a:	42a3      	cmp	r3, r4
 800fb1c:	6025      	str	r5, [r4, #0]
 800fb1e:	bf18      	it	ne
 800fb20:	6059      	strne	r1, [r3, #4]
 800fb22:	6863      	ldr	r3, [r4, #4]
 800fb24:	bf08      	it	eq
 800fb26:	6031      	streq	r1, [r6, #0]
 800fb28:	5162      	str	r2, [r4, r5]
 800fb2a:	604b      	str	r3, [r1, #4]
 800fb2c:	4638      	mov	r0, r7
 800fb2e:	f104 060b 	add.w	r6, r4, #11
 800fb32:	f000 f97b 	bl	800fe2c <__malloc_unlock>
 800fb36:	f026 0607 	bic.w	r6, r6, #7
 800fb3a:	1d23      	adds	r3, r4, #4
 800fb3c:	1af2      	subs	r2, r6, r3
 800fb3e:	d0b6      	beq.n	800faae <_malloc_r+0x22>
 800fb40:	1b9b      	subs	r3, r3, r6
 800fb42:	50a3      	str	r3, [r4, r2]
 800fb44:	e7b3      	b.n	800faae <_malloc_r+0x22>
 800fb46:	6862      	ldr	r2, [r4, #4]
 800fb48:	42a3      	cmp	r3, r4
 800fb4a:	bf0c      	ite	eq
 800fb4c:	6032      	streq	r2, [r6, #0]
 800fb4e:	605a      	strne	r2, [r3, #4]
 800fb50:	e7ec      	b.n	800fb2c <_malloc_r+0xa0>
 800fb52:	4623      	mov	r3, r4
 800fb54:	6864      	ldr	r4, [r4, #4]
 800fb56:	e7b2      	b.n	800fabe <_malloc_r+0x32>
 800fb58:	4634      	mov	r4, r6
 800fb5a:	6876      	ldr	r6, [r6, #4]
 800fb5c:	e7b9      	b.n	800fad2 <_malloc_r+0x46>
 800fb5e:	230c      	movs	r3, #12
 800fb60:	603b      	str	r3, [r7, #0]
 800fb62:	4638      	mov	r0, r7
 800fb64:	f000 f962 	bl	800fe2c <__malloc_unlock>
 800fb68:	e7a1      	b.n	800faae <_malloc_r+0x22>
 800fb6a:	6025      	str	r5, [r4, #0]
 800fb6c:	e7de      	b.n	800fb2c <_malloc_r+0xa0>
 800fb6e:	bf00      	nop
 800fb70:	2000bb40 	.word	0x2000bb40

0800fb74 <cleanup_glue>:
 800fb74:	b538      	push	{r3, r4, r5, lr}
 800fb76:	460c      	mov	r4, r1
 800fb78:	6809      	ldr	r1, [r1, #0]
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	b109      	cbz	r1, 800fb82 <cleanup_glue+0xe>
 800fb7e:	f7ff fff9 	bl	800fb74 <cleanup_glue>
 800fb82:	4621      	mov	r1, r4
 800fb84:	4628      	mov	r0, r5
 800fb86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb8a:	f000 b955 	b.w	800fe38 <_free_r>
	...

0800fb90 <_reclaim_reent>:
 800fb90:	4b2c      	ldr	r3, [pc, #176]	; (800fc44 <_reclaim_reent+0xb4>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4283      	cmp	r3, r0
 800fb96:	b570      	push	{r4, r5, r6, lr}
 800fb98:	4604      	mov	r4, r0
 800fb9a:	d051      	beq.n	800fc40 <_reclaim_reent+0xb0>
 800fb9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fb9e:	b143      	cbz	r3, 800fbb2 <_reclaim_reent+0x22>
 800fba0:	68db      	ldr	r3, [r3, #12]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d14a      	bne.n	800fc3c <_reclaim_reent+0xac>
 800fba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fba8:	6819      	ldr	r1, [r3, #0]
 800fbaa:	b111      	cbz	r1, 800fbb2 <_reclaim_reent+0x22>
 800fbac:	4620      	mov	r0, r4
 800fbae:	f000 f943 	bl	800fe38 <_free_r>
 800fbb2:	6961      	ldr	r1, [r4, #20]
 800fbb4:	b111      	cbz	r1, 800fbbc <_reclaim_reent+0x2c>
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f000 f93e 	bl	800fe38 <_free_r>
 800fbbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fbbe:	b111      	cbz	r1, 800fbc6 <_reclaim_reent+0x36>
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f000 f939 	bl	800fe38 <_free_r>
 800fbc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fbc8:	b111      	cbz	r1, 800fbd0 <_reclaim_reent+0x40>
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f000 f934 	bl	800fe38 <_free_r>
 800fbd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fbd2:	b111      	cbz	r1, 800fbda <_reclaim_reent+0x4a>
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f000 f92f 	bl	800fe38 <_free_r>
 800fbda:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fbdc:	b111      	cbz	r1, 800fbe4 <_reclaim_reent+0x54>
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f000 f92a 	bl	800fe38 <_free_r>
 800fbe4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fbe6:	b111      	cbz	r1, 800fbee <_reclaim_reent+0x5e>
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f000 f925 	bl	800fe38 <_free_r>
 800fbee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fbf0:	b111      	cbz	r1, 800fbf8 <_reclaim_reent+0x68>
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	f000 f920 	bl	800fe38 <_free_r>
 800fbf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbfa:	b111      	cbz	r1, 800fc02 <_reclaim_reent+0x72>
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f000 f91b 	bl	800fe38 <_free_r>
 800fc02:	69a3      	ldr	r3, [r4, #24]
 800fc04:	b1e3      	cbz	r3, 800fc40 <_reclaim_reent+0xb0>
 800fc06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fc08:	4620      	mov	r0, r4
 800fc0a:	4798      	blx	r3
 800fc0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fc0e:	b1b9      	cbz	r1, 800fc40 <_reclaim_reent+0xb0>
 800fc10:	4620      	mov	r0, r4
 800fc12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc16:	f7ff bfad 	b.w	800fb74 <cleanup_glue>
 800fc1a:	5949      	ldr	r1, [r1, r5]
 800fc1c:	b941      	cbnz	r1, 800fc30 <_reclaim_reent+0xa0>
 800fc1e:	3504      	adds	r5, #4
 800fc20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc22:	2d80      	cmp	r5, #128	; 0x80
 800fc24:	68d9      	ldr	r1, [r3, #12]
 800fc26:	d1f8      	bne.n	800fc1a <_reclaim_reent+0x8a>
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f000 f905 	bl	800fe38 <_free_r>
 800fc2e:	e7ba      	b.n	800fba6 <_reclaim_reent+0x16>
 800fc30:	680e      	ldr	r6, [r1, #0]
 800fc32:	4620      	mov	r0, r4
 800fc34:	f000 f900 	bl	800fe38 <_free_r>
 800fc38:	4631      	mov	r1, r6
 800fc3a:	e7ef      	b.n	800fc1c <_reclaim_reent+0x8c>
 800fc3c:	2500      	movs	r5, #0
 800fc3e:	e7ef      	b.n	800fc20 <_reclaim_reent+0x90>
 800fc40:	bd70      	pop	{r4, r5, r6, pc}
 800fc42:	bf00      	nop
 800fc44:	2000010c 	.word	0x2000010c

0800fc48 <_sbrk_r>:
 800fc48:	b538      	push	{r3, r4, r5, lr}
 800fc4a:	4d06      	ldr	r5, [pc, #24]	; (800fc64 <_sbrk_r+0x1c>)
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	4604      	mov	r4, r0
 800fc50:	4608      	mov	r0, r1
 800fc52:	602b      	str	r3, [r5, #0]
 800fc54:	f7f2 fa4c 	bl	80020f0 <_sbrk>
 800fc58:	1c43      	adds	r3, r0, #1
 800fc5a:	d102      	bne.n	800fc62 <_sbrk_r+0x1a>
 800fc5c:	682b      	ldr	r3, [r5, #0]
 800fc5e:	b103      	cbz	r3, 800fc62 <_sbrk_r+0x1a>
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	bd38      	pop	{r3, r4, r5, pc}
 800fc64:	2000bb48 	.word	0x2000bb48

0800fc68 <siprintf>:
 800fc68:	b40e      	push	{r1, r2, r3}
 800fc6a:	b500      	push	{lr}
 800fc6c:	b09c      	sub	sp, #112	; 0x70
 800fc6e:	ab1d      	add	r3, sp, #116	; 0x74
 800fc70:	9002      	str	r0, [sp, #8]
 800fc72:	9006      	str	r0, [sp, #24]
 800fc74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc78:	4809      	ldr	r0, [pc, #36]	; (800fca0 <siprintf+0x38>)
 800fc7a:	9107      	str	r1, [sp, #28]
 800fc7c:	9104      	str	r1, [sp, #16]
 800fc7e:	4909      	ldr	r1, [pc, #36]	; (800fca4 <siprintf+0x3c>)
 800fc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc84:	9105      	str	r1, [sp, #20]
 800fc86:	6800      	ldr	r0, [r0, #0]
 800fc88:	9301      	str	r3, [sp, #4]
 800fc8a:	a902      	add	r1, sp, #8
 800fc8c:	f000 f97c 	bl	800ff88 <_svfiprintf_r>
 800fc90:	9b02      	ldr	r3, [sp, #8]
 800fc92:	2200      	movs	r2, #0
 800fc94:	701a      	strb	r2, [r3, #0]
 800fc96:	b01c      	add	sp, #112	; 0x70
 800fc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc9c:	b003      	add	sp, #12
 800fc9e:	4770      	bx	lr
 800fca0:	2000010c 	.word	0x2000010c
 800fca4:	ffff0208 	.word	0xffff0208

0800fca8 <strcpy>:
 800fca8:	4603      	mov	r3, r0
 800fcaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcae:	f803 2b01 	strb.w	r2, [r3], #1
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	d1f9      	bne.n	800fcaa <strcpy+0x2>
 800fcb6:	4770      	bx	lr

0800fcb8 <strncmp>:
 800fcb8:	b510      	push	{r4, lr}
 800fcba:	b17a      	cbz	r2, 800fcdc <strncmp+0x24>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	3901      	subs	r1, #1
 800fcc0:	1884      	adds	r4, r0, r2
 800fcc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fcc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fcca:	4290      	cmp	r0, r2
 800fccc:	d101      	bne.n	800fcd2 <strncmp+0x1a>
 800fcce:	42a3      	cmp	r3, r4
 800fcd0:	d101      	bne.n	800fcd6 <strncmp+0x1e>
 800fcd2:	1a80      	subs	r0, r0, r2
 800fcd4:	bd10      	pop	{r4, pc}
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d1f3      	bne.n	800fcc2 <strncmp+0xa>
 800fcda:	e7fa      	b.n	800fcd2 <strncmp+0x1a>
 800fcdc:	4610      	mov	r0, r2
 800fcde:	e7f9      	b.n	800fcd4 <strncmp+0x1c>

0800fce0 <strncpy>:
 800fce0:	b510      	push	{r4, lr}
 800fce2:	3901      	subs	r1, #1
 800fce4:	4603      	mov	r3, r0
 800fce6:	b132      	cbz	r2, 800fcf6 <strncpy+0x16>
 800fce8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fcec:	f803 4b01 	strb.w	r4, [r3], #1
 800fcf0:	3a01      	subs	r2, #1
 800fcf2:	2c00      	cmp	r4, #0
 800fcf4:	d1f7      	bne.n	800fce6 <strncpy+0x6>
 800fcf6:	441a      	add	r2, r3
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d100      	bne.n	800fd00 <strncpy+0x20>
 800fcfe:	bd10      	pop	{r4, pc}
 800fd00:	f803 1b01 	strb.w	r1, [r3], #1
 800fd04:	e7f9      	b.n	800fcfa <strncpy+0x1a>
	...

0800fd08 <_strtol_l.constprop.0>:
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd0e:	d001      	beq.n	800fd14 <_strtol_l.constprop.0+0xc>
 800fd10:	2b24      	cmp	r3, #36	; 0x24
 800fd12:	d906      	bls.n	800fd22 <_strtol_l.constprop.0+0x1a>
 800fd14:	f7ff fe58 	bl	800f9c8 <__errno>
 800fd18:	2316      	movs	r3, #22
 800fd1a:	6003      	str	r3, [r0, #0]
 800fd1c:	2000      	movs	r0, #0
 800fd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fe08 <_strtol_l.constprop.0+0x100>
 800fd26:	460d      	mov	r5, r1
 800fd28:	462e      	mov	r6, r5
 800fd2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fd32:	f017 0708 	ands.w	r7, r7, #8
 800fd36:	d1f7      	bne.n	800fd28 <_strtol_l.constprop.0+0x20>
 800fd38:	2c2d      	cmp	r4, #45	; 0x2d
 800fd3a:	d132      	bne.n	800fda2 <_strtol_l.constprop.0+0x9a>
 800fd3c:	782c      	ldrb	r4, [r5, #0]
 800fd3e:	2701      	movs	r7, #1
 800fd40:	1cb5      	adds	r5, r6, #2
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d05b      	beq.n	800fdfe <_strtol_l.constprop.0+0xf6>
 800fd46:	2b10      	cmp	r3, #16
 800fd48:	d109      	bne.n	800fd5e <_strtol_l.constprop.0+0x56>
 800fd4a:	2c30      	cmp	r4, #48	; 0x30
 800fd4c:	d107      	bne.n	800fd5e <_strtol_l.constprop.0+0x56>
 800fd4e:	782c      	ldrb	r4, [r5, #0]
 800fd50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fd54:	2c58      	cmp	r4, #88	; 0x58
 800fd56:	d14d      	bne.n	800fdf4 <_strtol_l.constprop.0+0xec>
 800fd58:	786c      	ldrb	r4, [r5, #1]
 800fd5a:	2310      	movs	r3, #16
 800fd5c:	3502      	adds	r5, #2
 800fd5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fd62:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fd66:	f04f 0c00 	mov.w	ip, #0
 800fd6a:	fbb8 f9f3 	udiv	r9, r8, r3
 800fd6e:	4666      	mov	r6, ip
 800fd70:	fb03 8a19 	mls	sl, r3, r9, r8
 800fd74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fd78:	f1be 0f09 	cmp.w	lr, #9
 800fd7c:	d816      	bhi.n	800fdac <_strtol_l.constprop.0+0xa4>
 800fd7e:	4674      	mov	r4, lr
 800fd80:	42a3      	cmp	r3, r4
 800fd82:	dd24      	ble.n	800fdce <_strtol_l.constprop.0+0xc6>
 800fd84:	f1bc 0f00 	cmp.w	ip, #0
 800fd88:	db1e      	blt.n	800fdc8 <_strtol_l.constprop.0+0xc0>
 800fd8a:	45b1      	cmp	r9, r6
 800fd8c:	d31c      	bcc.n	800fdc8 <_strtol_l.constprop.0+0xc0>
 800fd8e:	d101      	bne.n	800fd94 <_strtol_l.constprop.0+0x8c>
 800fd90:	45a2      	cmp	sl, r4
 800fd92:	db19      	blt.n	800fdc8 <_strtol_l.constprop.0+0xc0>
 800fd94:	fb06 4603 	mla	r6, r6, r3, r4
 800fd98:	f04f 0c01 	mov.w	ip, #1
 800fd9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fda0:	e7e8      	b.n	800fd74 <_strtol_l.constprop.0+0x6c>
 800fda2:	2c2b      	cmp	r4, #43	; 0x2b
 800fda4:	bf04      	itt	eq
 800fda6:	782c      	ldrbeq	r4, [r5, #0]
 800fda8:	1cb5      	addeq	r5, r6, #2
 800fdaa:	e7ca      	b.n	800fd42 <_strtol_l.constprop.0+0x3a>
 800fdac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fdb0:	f1be 0f19 	cmp.w	lr, #25
 800fdb4:	d801      	bhi.n	800fdba <_strtol_l.constprop.0+0xb2>
 800fdb6:	3c37      	subs	r4, #55	; 0x37
 800fdb8:	e7e2      	b.n	800fd80 <_strtol_l.constprop.0+0x78>
 800fdba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fdbe:	f1be 0f19 	cmp.w	lr, #25
 800fdc2:	d804      	bhi.n	800fdce <_strtol_l.constprop.0+0xc6>
 800fdc4:	3c57      	subs	r4, #87	; 0x57
 800fdc6:	e7db      	b.n	800fd80 <_strtol_l.constprop.0+0x78>
 800fdc8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800fdcc:	e7e6      	b.n	800fd9c <_strtol_l.constprop.0+0x94>
 800fdce:	f1bc 0f00 	cmp.w	ip, #0
 800fdd2:	da05      	bge.n	800fde0 <_strtol_l.constprop.0+0xd8>
 800fdd4:	2322      	movs	r3, #34	; 0x22
 800fdd6:	6003      	str	r3, [r0, #0]
 800fdd8:	4646      	mov	r6, r8
 800fdda:	b942      	cbnz	r2, 800fdee <_strtol_l.constprop.0+0xe6>
 800fddc:	4630      	mov	r0, r6
 800fdde:	e79e      	b.n	800fd1e <_strtol_l.constprop.0+0x16>
 800fde0:	b107      	cbz	r7, 800fde4 <_strtol_l.constprop.0+0xdc>
 800fde2:	4276      	negs	r6, r6
 800fde4:	2a00      	cmp	r2, #0
 800fde6:	d0f9      	beq.n	800fddc <_strtol_l.constprop.0+0xd4>
 800fde8:	f1bc 0f00 	cmp.w	ip, #0
 800fdec:	d000      	beq.n	800fdf0 <_strtol_l.constprop.0+0xe8>
 800fdee:	1e69      	subs	r1, r5, #1
 800fdf0:	6011      	str	r1, [r2, #0]
 800fdf2:	e7f3      	b.n	800fddc <_strtol_l.constprop.0+0xd4>
 800fdf4:	2430      	movs	r4, #48	; 0x30
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d1b1      	bne.n	800fd5e <_strtol_l.constprop.0+0x56>
 800fdfa:	2308      	movs	r3, #8
 800fdfc:	e7af      	b.n	800fd5e <_strtol_l.constprop.0+0x56>
 800fdfe:	2c30      	cmp	r4, #48	; 0x30
 800fe00:	d0a5      	beq.n	800fd4e <_strtol_l.constprop.0+0x46>
 800fe02:	230a      	movs	r3, #10
 800fe04:	e7ab      	b.n	800fd5e <_strtol_l.constprop.0+0x56>
 800fe06:	bf00      	nop
 800fe08:	08011969 	.word	0x08011969

0800fe0c <strtol>:
 800fe0c:	4613      	mov	r3, r2
 800fe0e:	460a      	mov	r2, r1
 800fe10:	4601      	mov	r1, r0
 800fe12:	4802      	ldr	r0, [pc, #8]	; (800fe1c <strtol+0x10>)
 800fe14:	6800      	ldr	r0, [r0, #0]
 800fe16:	f7ff bf77 	b.w	800fd08 <_strtol_l.constprop.0>
 800fe1a:	bf00      	nop
 800fe1c:	2000010c 	.word	0x2000010c

0800fe20 <__malloc_lock>:
 800fe20:	4801      	ldr	r0, [pc, #4]	; (800fe28 <__malloc_lock+0x8>)
 800fe22:	f7ff bdfb 	b.w	800fa1c <__retarget_lock_acquire_recursive>
 800fe26:	bf00      	nop
 800fe28:	2000bb3c 	.word	0x2000bb3c

0800fe2c <__malloc_unlock>:
 800fe2c:	4801      	ldr	r0, [pc, #4]	; (800fe34 <__malloc_unlock+0x8>)
 800fe2e:	f7ff bdf6 	b.w	800fa1e <__retarget_lock_release_recursive>
 800fe32:	bf00      	nop
 800fe34:	2000bb3c 	.word	0x2000bb3c

0800fe38 <_free_r>:
 800fe38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe3a:	2900      	cmp	r1, #0
 800fe3c:	d044      	beq.n	800fec8 <_free_r+0x90>
 800fe3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe42:	9001      	str	r0, [sp, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f1a1 0404 	sub.w	r4, r1, #4
 800fe4a:	bfb8      	it	lt
 800fe4c:	18e4      	addlt	r4, r4, r3
 800fe4e:	f7ff ffe7 	bl	800fe20 <__malloc_lock>
 800fe52:	4a1e      	ldr	r2, [pc, #120]	; (800fecc <_free_r+0x94>)
 800fe54:	9801      	ldr	r0, [sp, #4]
 800fe56:	6813      	ldr	r3, [r2, #0]
 800fe58:	b933      	cbnz	r3, 800fe68 <_free_r+0x30>
 800fe5a:	6063      	str	r3, [r4, #4]
 800fe5c:	6014      	str	r4, [r2, #0]
 800fe5e:	b003      	add	sp, #12
 800fe60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe64:	f7ff bfe2 	b.w	800fe2c <__malloc_unlock>
 800fe68:	42a3      	cmp	r3, r4
 800fe6a:	d908      	bls.n	800fe7e <_free_r+0x46>
 800fe6c:	6825      	ldr	r5, [r4, #0]
 800fe6e:	1961      	adds	r1, r4, r5
 800fe70:	428b      	cmp	r3, r1
 800fe72:	bf01      	itttt	eq
 800fe74:	6819      	ldreq	r1, [r3, #0]
 800fe76:	685b      	ldreq	r3, [r3, #4]
 800fe78:	1949      	addeq	r1, r1, r5
 800fe7a:	6021      	streq	r1, [r4, #0]
 800fe7c:	e7ed      	b.n	800fe5a <_free_r+0x22>
 800fe7e:	461a      	mov	r2, r3
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	b10b      	cbz	r3, 800fe88 <_free_r+0x50>
 800fe84:	42a3      	cmp	r3, r4
 800fe86:	d9fa      	bls.n	800fe7e <_free_r+0x46>
 800fe88:	6811      	ldr	r1, [r2, #0]
 800fe8a:	1855      	adds	r5, r2, r1
 800fe8c:	42a5      	cmp	r5, r4
 800fe8e:	d10b      	bne.n	800fea8 <_free_r+0x70>
 800fe90:	6824      	ldr	r4, [r4, #0]
 800fe92:	4421      	add	r1, r4
 800fe94:	1854      	adds	r4, r2, r1
 800fe96:	42a3      	cmp	r3, r4
 800fe98:	6011      	str	r1, [r2, #0]
 800fe9a:	d1e0      	bne.n	800fe5e <_free_r+0x26>
 800fe9c:	681c      	ldr	r4, [r3, #0]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	6053      	str	r3, [r2, #4]
 800fea2:	4421      	add	r1, r4
 800fea4:	6011      	str	r1, [r2, #0]
 800fea6:	e7da      	b.n	800fe5e <_free_r+0x26>
 800fea8:	d902      	bls.n	800feb0 <_free_r+0x78>
 800feaa:	230c      	movs	r3, #12
 800feac:	6003      	str	r3, [r0, #0]
 800feae:	e7d6      	b.n	800fe5e <_free_r+0x26>
 800feb0:	6825      	ldr	r5, [r4, #0]
 800feb2:	1961      	adds	r1, r4, r5
 800feb4:	428b      	cmp	r3, r1
 800feb6:	bf04      	itt	eq
 800feb8:	6819      	ldreq	r1, [r3, #0]
 800feba:	685b      	ldreq	r3, [r3, #4]
 800febc:	6063      	str	r3, [r4, #4]
 800febe:	bf04      	itt	eq
 800fec0:	1949      	addeq	r1, r1, r5
 800fec2:	6021      	streq	r1, [r4, #0]
 800fec4:	6054      	str	r4, [r2, #4]
 800fec6:	e7ca      	b.n	800fe5e <_free_r+0x26>
 800fec8:	b003      	add	sp, #12
 800feca:	bd30      	pop	{r4, r5, pc}
 800fecc:	2000bb40 	.word	0x2000bb40

0800fed0 <__ssputs_r>:
 800fed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fed4:	688e      	ldr	r6, [r1, #8]
 800fed6:	429e      	cmp	r6, r3
 800fed8:	4682      	mov	sl, r0
 800feda:	460c      	mov	r4, r1
 800fedc:	4690      	mov	r8, r2
 800fede:	461f      	mov	r7, r3
 800fee0:	d838      	bhi.n	800ff54 <__ssputs_r+0x84>
 800fee2:	898a      	ldrh	r2, [r1, #12]
 800fee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fee8:	d032      	beq.n	800ff50 <__ssputs_r+0x80>
 800feea:	6825      	ldr	r5, [r4, #0]
 800feec:	6909      	ldr	r1, [r1, #16]
 800feee:	eba5 0901 	sub.w	r9, r5, r1
 800fef2:	6965      	ldr	r5, [r4, #20]
 800fef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fefc:	3301      	adds	r3, #1
 800fefe:	444b      	add	r3, r9
 800ff00:	106d      	asrs	r5, r5, #1
 800ff02:	429d      	cmp	r5, r3
 800ff04:	bf38      	it	cc
 800ff06:	461d      	movcc	r5, r3
 800ff08:	0553      	lsls	r3, r2, #21
 800ff0a:	d531      	bpl.n	800ff70 <__ssputs_r+0xa0>
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	f7ff fdbd 	bl	800fa8c <_malloc_r>
 800ff12:	4606      	mov	r6, r0
 800ff14:	b950      	cbnz	r0, 800ff2c <__ssputs_r+0x5c>
 800ff16:	230c      	movs	r3, #12
 800ff18:	f8ca 3000 	str.w	r3, [sl]
 800ff1c:	89a3      	ldrh	r3, [r4, #12]
 800ff1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff22:	81a3      	strh	r3, [r4, #12]
 800ff24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2c:	6921      	ldr	r1, [r4, #16]
 800ff2e:	464a      	mov	r2, r9
 800ff30:	f7ff fd76 	bl	800fa20 <memcpy>
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff3e:	81a3      	strh	r3, [r4, #12]
 800ff40:	6126      	str	r6, [r4, #16]
 800ff42:	6165      	str	r5, [r4, #20]
 800ff44:	444e      	add	r6, r9
 800ff46:	eba5 0509 	sub.w	r5, r5, r9
 800ff4a:	6026      	str	r6, [r4, #0]
 800ff4c:	60a5      	str	r5, [r4, #8]
 800ff4e:	463e      	mov	r6, r7
 800ff50:	42be      	cmp	r6, r7
 800ff52:	d900      	bls.n	800ff56 <__ssputs_r+0x86>
 800ff54:	463e      	mov	r6, r7
 800ff56:	6820      	ldr	r0, [r4, #0]
 800ff58:	4632      	mov	r2, r6
 800ff5a:	4641      	mov	r1, r8
 800ff5c:	f000 faa8 	bl	80104b0 <memmove>
 800ff60:	68a3      	ldr	r3, [r4, #8]
 800ff62:	1b9b      	subs	r3, r3, r6
 800ff64:	60a3      	str	r3, [r4, #8]
 800ff66:	6823      	ldr	r3, [r4, #0]
 800ff68:	4433      	add	r3, r6
 800ff6a:	6023      	str	r3, [r4, #0]
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	e7db      	b.n	800ff28 <__ssputs_r+0x58>
 800ff70:	462a      	mov	r2, r5
 800ff72:	f000 fab7 	bl	80104e4 <_realloc_r>
 800ff76:	4606      	mov	r6, r0
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	d1e1      	bne.n	800ff40 <__ssputs_r+0x70>
 800ff7c:	6921      	ldr	r1, [r4, #16]
 800ff7e:	4650      	mov	r0, sl
 800ff80:	f7ff ff5a 	bl	800fe38 <_free_r>
 800ff84:	e7c7      	b.n	800ff16 <__ssputs_r+0x46>
	...

0800ff88 <_svfiprintf_r>:
 800ff88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff8c:	4698      	mov	r8, r3
 800ff8e:	898b      	ldrh	r3, [r1, #12]
 800ff90:	061b      	lsls	r3, r3, #24
 800ff92:	b09d      	sub	sp, #116	; 0x74
 800ff94:	4607      	mov	r7, r0
 800ff96:	460d      	mov	r5, r1
 800ff98:	4614      	mov	r4, r2
 800ff9a:	d50e      	bpl.n	800ffba <_svfiprintf_r+0x32>
 800ff9c:	690b      	ldr	r3, [r1, #16]
 800ff9e:	b963      	cbnz	r3, 800ffba <_svfiprintf_r+0x32>
 800ffa0:	2140      	movs	r1, #64	; 0x40
 800ffa2:	f7ff fd73 	bl	800fa8c <_malloc_r>
 800ffa6:	6028      	str	r0, [r5, #0]
 800ffa8:	6128      	str	r0, [r5, #16]
 800ffaa:	b920      	cbnz	r0, 800ffb6 <_svfiprintf_r+0x2e>
 800ffac:	230c      	movs	r3, #12
 800ffae:	603b      	str	r3, [r7, #0]
 800ffb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffb4:	e0d1      	b.n	801015a <_svfiprintf_r+0x1d2>
 800ffb6:	2340      	movs	r3, #64	; 0x40
 800ffb8:	616b      	str	r3, [r5, #20]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9309      	str	r3, [sp, #36]	; 0x24
 800ffbe:	2320      	movs	r3, #32
 800ffc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffc8:	2330      	movs	r3, #48	; 0x30
 800ffca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010174 <_svfiprintf_r+0x1ec>
 800ffce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffd2:	f04f 0901 	mov.w	r9, #1
 800ffd6:	4623      	mov	r3, r4
 800ffd8:	469a      	mov	sl, r3
 800ffda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffde:	b10a      	cbz	r2, 800ffe4 <_svfiprintf_r+0x5c>
 800ffe0:	2a25      	cmp	r2, #37	; 0x25
 800ffe2:	d1f9      	bne.n	800ffd8 <_svfiprintf_r+0x50>
 800ffe4:	ebba 0b04 	subs.w	fp, sl, r4
 800ffe8:	d00b      	beq.n	8010002 <_svfiprintf_r+0x7a>
 800ffea:	465b      	mov	r3, fp
 800ffec:	4622      	mov	r2, r4
 800ffee:	4629      	mov	r1, r5
 800fff0:	4638      	mov	r0, r7
 800fff2:	f7ff ff6d 	bl	800fed0 <__ssputs_r>
 800fff6:	3001      	adds	r0, #1
 800fff8:	f000 80aa 	beq.w	8010150 <_svfiprintf_r+0x1c8>
 800fffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fffe:	445a      	add	r2, fp
 8010000:	9209      	str	r2, [sp, #36]	; 0x24
 8010002:	f89a 3000 	ldrb.w	r3, [sl]
 8010006:	2b00      	cmp	r3, #0
 8010008:	f000 80a2 	beq.w	8010150 <_svfiprintf_r+0x1c8>
 801000c:	2300      	movs	r3, #0
 801000e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010016:	f10a 0a01 	add.w	sl, sl, #1
 801001a:	9304      	str	r3, [sp, #16]
 801001c:	9307      	str	r3, [sp, #28]
 801001e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010022:	931a      	str	r3, [sp, #104]	; 0x68
 8010024:	4654      	mov	r4, sl
 8010026:	2205      	movs	r2, #5
 8010028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801002c:	4851      	ldr	r0, [pc, #324]	; (8010174 <_svfiprintf_r+0x1ec>)
 801002e:	f7f0 f94f 	bl	80002d0 <memchr>
 8010032:	9a04      	ldr	r2, [sp, #16]
 8010034:	b9d8      	cbnz	r0, 801006e <_svfiprintf_r+0xe6>
 8010036:	06d0      	lsls	r0, r2, #27
 8010038:	bf44      	itt	mi
 801003a:	2320      	movmi	r3, #32
 801003c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010040:	0711      	lsls	r1, r2, #28
 8010042:	bf44      	itt	mi
 8010044:	232b      	movmi	r3, #43	; 0x2b
 8010046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801004a:	f89a 3000 	ldrb.w	r3, [sl]
 801004e:	2b2a      	cmp	r3, #42	; 0x2a
 8010050:	d015      	beq.n	801007e <_svfiprintf_r+0xf6>
 8010052:	9a07      	ldr	r2, [sp, #28]
 8010054:	4654      	mov	r4, sl
 8010056:	2000      	movs	r0, #0
 8010058:	f04f 0c0a 	mov.w	ip, #10
 801005c:	4621      	mov	r1, r4
 801005e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010062:	3b30      	subs	r3, #48	; 0x30
 8010064:	2b09      	cmp	r3, #9
 8010066:	d94e      	bls.n	8010106 <_svfiprintf_r+0x17e>
 8010068:	b1b0      	cbz	r0, 8010098 <_svfiprintf_r+0x110>
 801006a:	9207      	str	r2, [sp, #28]
 801006c:	e014      	b.n	8010098 <_svfiprintf_r+0x110>
 801006e:	eba0 0308 	sub.w	r3, r0, r8
 8010072:	fa09 f303 	lsl.w	r3, r9, r3
 8010076:	4313      	orrs	r3, r2
 8010078:	9304      	str	r3, [sp, #16]
 801007a:	46a2      	mov	sl, r4
 801007c:	e7d2      	b.n	8010024 <_svfiprintf_r+0x9c>
 801007e:	9b03      	ldr	r3, [sp, #12]
 8010080:	1d19      	adds	r1, r3, #4
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	9103      	str	r1, [sp, #12]
 8010086:	2b00      	cmp	r3, #0
 8010088:	bfbb      	ittet	lt
 801008a:	425b      	neglt	r3, r3
 801008c:	f042 0202 	orrlt.w	r2, r2, #2
 8010090:	9307      	strge	r3, [sp, #28]
 8010092:	9307      	strlt	r3, [sp, #28]
 8010094:	bfb8      	it	lt
 8010096:	9204      	strlt	r2, [sp, #16]
 8010098:	7823      	ldrb	r3, [r4, #0]
 801009a:	2b2e      	cmp	r3, #46	; 0x2e
 801009c:	d10c      	bne.n	80100b8 <_svfiprintf_r+0x130>
 801009e:	7863      	ldrb	r3, [r4, #1]
 80100a0:	2b2a      	cmp	r3, #42	; 0x2a
 80100a2:	d135      	bne.n	8010110 <_svfiprintf_r+0x188>
 80100a4:	9b03      	ldr	r3, [sp, #12]
 80100a6:	1d1a      	adds	r2, r3, #4
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	9203      	str	r2, [sp, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	bfb8      	it	lt
 80100b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80100b4:	3402      	adds	r4, #2
 80100b6:	9305      	str	r3, [sp, #20]
 80100b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010184 <_svfiprintf_r+0x1fc>
 80100bc:	7821      	ldrb	r1, [r4, #0]
 80100be:	2203      	movs	r2, #3
 80100c0:	4650      	mov	r0, sl
 80100c2:	f7f0 f905 	bl	80002d0 <memchr>
 80100c6:	b140      	cbz	r0, 80100da <_svfiprintf_r+0x152>
 80100c8:	2340      	movs	r3, #64	; 0x40
 80100ca:	eba0 000a 	sub.w	r0, r0, sl
 80100ce:	fa03 f000 	lsl.w	r0, r3, r0
 80100d2:	9b04      	ldr	r3, [sp, #16]
 80100d4:	4303      	orrs	r3, r0
 80100d6:	3401      	adds	r4, #1
 80100d8:	9304      	str	r3, [sp, #16]
 80100da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100de:	4826      	ldr	r0, [pc, #152]	; (8010178 <_svfiprintf_r+0x1f0>)
 80100e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100e4:	2206      	movs	r2, #6
 80100e6:	f7f0 f8f3 	bl	80002d0 <memchr>
 80100ea:	2800      	cmp	r0, #0
 80100ec:	d038      	beq.n	8010160 <_svfiprintf_r+0x1d8>
 80100ee:	4b23      	ldr	r3, [pc, #140]	; (801017c <_svfiprintf_r+0x1f4>)
 80100f0:	bb1b      	cbnz	r3, 801013a <_svfiprintf_r+0x1b2>
 80100f2:	9b03      	ldr	r3, [sp, #12]
 80100f4:	3307      	adds	r3, #7
 80100f6:	f023 0307 	bic.w	r3, r3, #7
 80100fa:	3308      	adds	r3, #8
 80100fc:	9303      	str	r3, [sp, #12]
 80100fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010100:	4433      	add	r3, r6
 8010102:	9309      	str	r3, [sp, #36]	; 0x24
 8010104:	e767      	b.n	800ffd6 <_svfiprintf_r+0x4e>
 8010106:	fb0c 3202 	mla	r2, ip, r2, r3
 801010a:	460c      	mov	r4, r1
 801010c:	2001      	movs	r0, #1
 801010e:	e7a5      	b.n	801005c <_svfiprintf_r+0xd4>
 8010110:	2300      	movs	r3, #0
 8010112:	3401      	adds	r4, #1
 8010114:	9305      	str	r3, [sp, #20]
 8010116:	4619      	mov	r1, r3
 8010118:	f04f 0c0a 	mov.w	ip, #10
 801011c:	4620      	mov	r0, r4
 801011e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010122:	3a30      	subs	r2, #48	; 0x30
 8010124:	2a09      	cmp	r2, #9
 8010126:	d903      	bls.n	8010130 <_svfiprintf_r+0x1a8>
 8010128:	2b00      	cmp	r3, #0
 801012a:	d0c5      	beq.n	80100b8 <_svfiprintf_r+0x130>
 801012c:	9105      	str	r1, [sp, #20]
 801012e:	e7c3      	b.n	80100b8 <_svfiprintf_r+0x130>
 8010130:	fb0c 2101 	mla	r1, ip, r1, r2
 8010134:	4604      	mov	r4, r0
 8010136:	2301      	movs	r3, #1
 8010138:	e7f0      	b.n	801011c <_svfiprintf_r+0x194>
 801013a:	ab03      	add	r3, sp, #12
 801013c:	9300      	str	r3, [sp, #0]
 801013e:	462a      	mov	r2, r5
 8010140:	4b0f      	ldr	r3, [pc, #60]	; (8010180 <_svfiprintf_r+0x1f8>)
 8010142:	a904      	add	r1, sp, #16
 8010144:	4638      	mov	r0, r7
 8010146:	f3af 8000 	nop.w
 801014a:	1c42      	adds	r2, r0, #1
 801014c:	4606      	mov	r6, r0
 801014e:	d1d6      	bne.n	80100fe <_svfiprintf_r+0x176>
 8010150:	89ab      	ldrh	r3, [r5, #12]
 8010152:	065b      	lsls	r3, r3, #25
 8010154:	f53f af2c 	bmi.w	800ffb0 <_svfiprintf_r+0x28>
 8010158:	9809      	ldr	r0, [sp, #36]	; 0x24
 801015a:	b01d      	add	sp, #116	; 0x74
 801015c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010160:	ab03      	add	r3, sp, #12
 8010162:	9300      	str	r3, [sp, #0]
 8010164:	462a      	mov	r2, r5
 8010166:	4b06      	ldr	r3, [pc, #24]	; (8010180 <_svfiprintf_r+0x1f8>)
 8010168:	a904      	add	r1, sp, #16
 801016a:	4638      	mov	r0, r7
 801016c:	f000 f87a 	bl	8010264 <_printf_i>
 8010170:	e7eb      	b.n	801014a <_svfiprintf_r+0x1c2>
 8010172:	bf00      	nop
 8010174:	08011a69 	.word	0x08011a69
 8010178:	08011a73 	.word	0x08011a73
 801017c:	00000000 	.word	0x00000000
 8010180:	0800fed1 	.word	0x0800fed1
 8010184:	08011a6f 	.word	0x08011a6f

08010188 <_printf_common>:
 8010188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801018c:	4616      	mov	r6, r2
 801018e:	4699      	mov	r9, r3
 8010190:	688a      	ldr	r2, [r1, #8]
 8010192:	690b      	ldr	r3, [r1, #16]
 8010194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010198:	4293      	cmp	r3, r2
 801019a:	bfb8      	it	lt
 801019c:	4613      	movlt	r3, r2
 801019e:	6033      	str	r3, [r6, #0]
 80101a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101a4:	4607      	mov	r7, r0
 80101a6:	460c      	mov	r4, r1
 80101a8:	b10a      	cbz	r2, 80101ae <_printf_common+0x26>
 80101aa:	3301      	adds	r3, #1
 80101ac:	6033      	str	r3, [r6, #0]
 80101ae:	6823      	ldr	r3, [r4, #0]
 80101b0:	0699      	lsls	r1, r3, #26
 80101b2:	bf42      	ittt	mi
 80101b4:	6833      	ldrmi	r3, [r6, #0]
 80101b6:	3302      	addmi	r3, #2
 80101b8:	6033      	strmi	r3, [r6, #0]
 80101ba:	6825      	ldr	r5, [r4, #0]
 80101bc:	f015 0506 	ands.w	r5, r5, #6
 80101c0:	d106      	bne.n	80101d0 <_printf_common+0x48>
 80101c2:	f104 0a19 	add.w	sl, r4, #25
 80101c6:	68e3      	ldr	r3, [r4, #12]
 80101c8:	6832      	ldr	r2, [r6, #0]
 80101ca:	1a9b      	subs	r3, r3, r2
 80101cc:	42ab      	cmp	r3, r5
 80101ce:	dc26      	bgt.n	801021e <_printf_common+0x96>
 80101d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80101d4:	1e13      	subs	r3, r2, #0
 80101d6:	6822      	ldr	r2, [r4, #0]
 80101d8:	bf18      	it	ne
 80101da:	2301      	movne	r3, #1
 80101dc:	0692      	lsls	r2, r2, #26
 80101de:	d42b      	bmi.n	8010238 <_printf_common+0xb0>
 80101e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101e4:	4649      	mov	r1, r9
 80101e6:	4638      	mov	r0, r7
 80101e8:	47c0      	blx	r8
 80101ea:	3001      	adds	r0, #1
 80101ec:	d01e      	beq.n	801022c <_printf_common+0xa4>
 80101ee:	6823      	ldr	r3, [r4, #0]
 80101f0:	68e5      	ldr	r5, [r4, #12]
 80101f2:	6832      	ldr	r2, [r6, #0]
 80101f4:	f003 0306 	and.w	r3, r3, #6
 80101f8:	2b04      	cmp	r3, #4
 80101fa:	bf08      	it	eq
 80101fc:	1aad      	subeq	r5, r5, r2
 80101fe:	68a3      	ldr	r3, [r4, #8]
 8010200:	6922      	ldr	r2, [r4, #16]
 8010202:	bf0c      	ite	eq
 8010204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010208:	2500      	movne	r5, #0
 801020a:	4293      	cmp	r3, r2
 801020c:	bfc4      	itt	gt
 801020e:	1a9b      	subgt	r3, r3, r2
 8010210:	18ed      	addgt	r5, r5, r3
 8010212:	2600      	movs	r6, #0
 8010214:	341a      	adds	r4, #26
 8010216:	42b5      	cmp	r5, r6
 8010218:	d11a      	bne.n	8010250 <_printf_common+0xc8>
 801021a:	2000      	movs	r0, #0
 801021c:	e008      	b.n	8010230 <_printf_common+0xa8>
 801021e:	2301      	movs	r3, #1
 8010220:	4652      	mov	r2, sl
 8010222:	4649      	mov	r1, r9
 8010224:	4638      	mov	r0, r7
 8010226:	47c0      	blx	r8
 8010228:	3001      	adds	r0, #1
 801022a:	d103      	bne.n	8010234 <_printf_common+0xac>
 801022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010234:	3501      	adds	r5, #1
 8010236:	e7c6      	b.n	80101c6 <_printf_common+0x3e>
 8010238:	18e1      	adds	r1, r4, r3
 801023a:	1c5a      	adds	r2, r3, #1
 801023c:	2030      	movs	r0, #48	; 0x30
 801023e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010242:	4422      	add	r2, r4
 8010244:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010248:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801024c:	3302      	adds	r3, #2
 801024e:	e7c7      	b.n	80101e0 <_printf_common+0x58>
 8010250:	2301      	movs	r3, #1
 8010252:	4622      	mov	r2, r4
 8010254:	4649      	mov	r1, r9
 8010256:	4638      	mov	r0, r7
 8010258:	47c0      	blx	r8
 801025a:	3001      	adds	r0, #1
 801025c:	d0e6      	beq.n	801022c <_printf_common+0xa4>
 801025e:	3601      	adds	r6, #1
 8010260:	e7d9      	b.n	8010216 <_printf_common+0x8e>
	...

08010264 <_printf_i>:
 8010264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010268:	7e0f      	ldrb	r7, [r1, #24]
 801026a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801026c:	2f78      	cmp	r7, #120	; 0x78
 801026e:	4691      	mov	r9, r2
 8010270:	4680      	mov	r8, r0
 8010272:	460c      	mov	r4, r1
 8010274:	469a      	mov	sl, r3
 8010276:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801027a:	d807      	bhi.n	801028c <_printf_i+0x28>
 801027c:	2f62      	cmp	r7, #98	; 0x62
 801027e:	d80a      	bhi.n	8010296 <_printf_i+0x32>
 8010280:	2f00      	cmp	r7, #0
 8010282:	f000 80d8 	beq.w	8010436 <_printf_i+0x1d2>
 8010286:	2f58      	cmp	r7, #88	; 0x58
 8010288:	f000 80a3 	beq.w	80103d2 <_printf_i+0x16e>
 801028c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010290:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010294:	e03a      	b.n	801030c <_printf_i+0xa8>
 8010296:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801029a:	2b15      	cmp	r3, #21
 801029c:	d8f6      	bhi.n	801028c <_printf_i+0x28>
 801029e:	a101      	add	r1, pc, #4	; (adr r1, 80102a4 <_printf_i+0x40>)
 80102a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102a4:	080102fd 	.word	0x080102fd
 80102a8:	08010311 	.word	0x08010311
 80102ac:	0801028d 	.word	0x0801028d
 80102b0:	0801028d 	.word	0x0801028d
 80102b4:	0801028d 	.word	0x0801028d
 80102b8:	0801028d 	.word	0x0801028d
 80102bc:	08010311 	.word	0x08010311
 80102c0:	0801028d 	.word	0x0801028d
 80102c4:	0801028d 	.word	0x0801028d
 80102c8:	0801028d 	.word	0x0801028d
 80102cc:	0801028d 	.word	0x0801028d
 80102d0:	0801041d 	.word	0x0801041d
 80102d4:	08010341 	.word	0x08010341
 80102d8:	080103ff 	.word	0x080103ff
 80102dc:	0801028d 	.word	0x0801028d
 80102e0:	0801028d 	.word	0x0801028d
 80102e4:	0801043f 	.word	0x0801043f
 80102e8:	0801028d 	.word	0x0801028d
 80102ec:	08010341 	.word	0x08010341
 80102f0:	0801028d 	.word	0x0801028d
 80102f4:	0801028d 	.word	0x0801028d
 80102f8:	08010407 	.word	0x08010407
 80102fc:	682b      	ldr	r3, [r5, #0]
 80102fe:	1d1a      	adds	r2, r3, #4
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	602a      	str	r2, [r5, #0]
 8010304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801030c:	2301      	movs	r3, #1
 801030e:	e0a3      	b.n	8010458 <_printf_i+0x1f4>
 8010310:	6820      	ldr	r0, [r4, #0]
 8010312:	6829      	ldr	r1, [r5, #0]
 8010314:	0606      	lsls	r6, r0, #24
 8010316:	f101 0304 	add.w	r3, r1, #4
 801031a:	d50a      	bpl.n	8010332 <_printf_i+0xce>
 801031c:	680e      	ldr	r6, [r1, #0]
 801031e:	602b      	str	r3, [r5, #0]
 8010320:	2e00      	cmp	r6, #0
 8010322:	da03      	bge.n	801032c <_printf_i+0xc8>
 8010324:	232d      	movs	r3, #45	; 0x2d
 8010326:	4276      	negs	r6, r6
 8010328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801032c:	485e      	ldr	r0, [pc, #376]	; (80104a8 <_printf_i+0x244>)
 801032e:	230a      	movs	r3, #10
 8010330:	e019      	b.n	8010366 <_printf_i+0x102>
 8010332:	680e      	ldr	r6, [r1, #0]
 8010334:	602b      	str	r3, [r5, #0]
 8010336:	f010 0f40 	tst.w	r0, #64	; 0x40
 801033a:	bf18      	it	ne
 801033c:	b236      	sxthne	r6, r6
 801033e:	e7ef      	b.n	8010320 <_printf_i+0xbc>
 8010340:	682b      	ldr	r3, [r5, #0]
 8010342:	6820      	ldr	r0, [r4, #0]
 8010344:	1d19      	adds	r1, r3, #4
 8010346:	6029      	str	r1, [r5, #0]
 8010348:	0601      	lsls	r1, r0, #24
 801034a:	d501      	bpl.n	8010350 <_printf_i+0xec>
 801034c:	681e      	ldr	r6, [r3, #0]
 801034e:	e002      	b.n	8010356 <_printf_i+0xf2>
 8010350:	0646      	lsls	r6, r0, #25
 8010352:	d5fb      	bpl.n	801034c <_printf_i+0xe8>
 8010354:	881e      	ldrh	r6, [r3, #0]
 8010356:	4854      	ldr	r0, [pc, #336]	; (80104a8 <_printf_i+0x244>)
 8010358:	2f6f      	cmp	r7, #111	; 0x6f
 801035a:	bf0c      	ite	eq
 801035c:	2308      	moveq	r3, #8
 801035e:	230a      	movne	r3, #10
 8010360:	2100      	movs	r1, #0
 8010362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010366:	6865      	ldr	r5, [r4, #4]
 8010368:	60a5      	str	r5, [r4, #8]
 801036a:	2d00      	cmp	r5, #0
 801036c:	bfa2      	ittt	ge
 801036e:	6821      	ldrge	r1, [r4, #0]
 8010370:	f021 0104 	bicge.w	r1, r1, #4
 8010374:	6021      	strge	r1, [r4, #0]
 8010376:	b90e      	cbnz	r6, 801037c <_printf_i+0x118>
 8010378:	2d00      	cmp	r5, #0
 801037a:	d04d      	beq.n	8010418 <_printf_i+0x1b4>
 801037c:	4615      	mov	r5, r2
 801037e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010382:	fb03 6711 	mls	r7, r3, r1, r6
 8010386:	5dc7      	ldrb	r7, [r0, r7]
 8010388:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801038c:	4637      	mov	r7, r6
 801038e:	42bb      	cmp	r3, r7
 8010390:	460e      	mov	r6, r1
 8010392:	d9f4      	bls.n	801037e <_printf_i+0x11a>
 8010394:	2b08      	cmp	r3, #8
 8010396:	d10b      	bne.n	80103b0 <_printf_i+0x14c>
 8010398:	6823      	ldr	r3, [r4, #0]
 801039a:	07de      	lsls	r6, r3, #31
 801039c:	d508      	bpl.n	80103b0 <_printf_i+0x14c>
 801039e:	6923      	ldr	r3, [r4, #16]
 80103a0:	6861      	ldr	r1, [r4, #4]
 80103a2:	4299      	cmp	r1, r3
 80103a4:	bfde      	ittt	le
 80103a6:	2330      	movle	r3, #48	; 0x30
 80103a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80103ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80103b0:	1b52      	subs	r2, r2, r5
 80103b2:	6122      	str	r2, [r4, #16]
 80103b4:	f8cd a000 	str.w	sl, [sp]
 80103b8:	464b      	mov	r3, r9
 80103ba:	aa03      	add	r2, sp, #12
 80103bc:	4621      	mov	r1, r4
 80103be:	4640      	mov	r0, r8
 80103c0:	f7ff fee2 	bl	8010188 <_printf_common>
 80103c4:	3001      	adds	r0, #1
 80103c6:	d14c      	bne.n	8010462 <_printf_i+0x1fe>
 80103c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103cc:	b004      	add	sp, #16
 80103ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d2:	4835      	ldr	r0, [pc, #212]	; (80104a8 <_printf_i+0x244>)
 80103d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80103d8:	6829      	ldr	r1, [r5, #0]
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80103e0:	6029      	str	r1, [r5, #0]
 80103e2:	061d      	lsls	r5, r3, #24
 80103e4:	d514      	bpl.n	8010410 <_printf_i+0x1ac>
 80103e6:	07df      	lsls	r7, r3, #31
 80103e8:	bf44      	itt	mi
 80103ea:	f043 0320 	orrmi.w	r3, r3, #32
 80103ee:	6023      	strmi	r3, [r4, #0]
 80103f0:	b91e      	cbnz	r6, 80103fa <_printf_i+0x196>
 80103f2:	6823      	ldr	r3, [r4, #0]
 80103f4:	f023 0320 	bic.w	r3, r3, #32
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	2310      	movs	r3, #16
 80103fc:	e7b0      	b.n	8010360 <_printf_i+0xfc>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	f043 0320 	orr.w	r3, r3, #32
 8010404:	6023      	str	r3, [r4, #0]
 8010406:	2378      	movs	r3, #120	; 0x78
 8010408:	4828      	ldr	r0, [pc, #160]	; (80104ac <_printf_i+0x248>)
 801040a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801040e:	e7e3      	b.n	80103d8 <_printf_i+0x174>
 8010410:	0659      	lsls	r1, r3, #25
 8010412:	bf48      	it	mi
 8010414:	b2b6      	uxthmi	r6, r6
 8010416:	e7e6      	b.n	80103e6 <_printf_i+0x182>
 8010418:	4615      	mov	r5, r2
 801041a:	e7bb      	b.n	8010394 <_printf_i+0x130>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	6826      	ldr	r6, [r4, #0]
 8010420:	6961      	ldr	r1, [r4, #20]
 8010422:	1d18      	adds	r0, r3, #4
 8010424:	6028      	str	r0, [r5, #0]
 8010426:	0635      	lsls	r5, r6, #24
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	d501      	bpl.n	8010430 <_printf_i+0x1cc>
 801042c:	6019      	str	r1, [r3, #0]
 801042e:	e002      	b.n	8010436 <_printf_i+0x1d2>
 8010430:	0670      	lsls	r0, r6, #25
 8010432:	d5fb      	bpl.n	801042c <_printf_i+0x1c8>
 8010434:	8019      	strh	r1, [r3, #0]
 8010436:	2300      	movs	r3, #0
 8010438:	6123      	str	r3, [r4, #16]
 801043a:	4615      	mov	r5, r2
 801043c:	e7ba      	b.n	80103b4 <_printf_i+0x150>
 801043e:	682b      	ldr	r3, [r5, #0]
 8010440:	1d1a      	adds	r2, r3, #4
 8010442:	602a      	str	r2, [r5, #0]
 8010444:	681d      	ldr	r5, [r3, #0]
 8010446:	6862      	ldr	r2, [r4, #4]
 8010448:	2100      	movs	r1, #0
 801044a:	4628      	mov	r0, r5
 801044c:	f7ef ff40 	bl	80002d0 <memchr>
 8010450:	b108      	cbz	r0, 8010456 <_printf_i+0x1f2>
 8010452:	1b40      	subs	r0, r0, r5
 8010454:	6060      	str	r0, [r4, #4]
 8010456:	6863      	ldr	r3, [r4, #4]
 8010458:	6123      	str	r3, [r4, #16]
 801045a:	2300      	movs	r3, #0
 801045c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010460:	e7a8      	b.n	80103b4 <_printf_i+0x150>
 8010462:	6923      	ldr	r3, [r4, #16]
 8010464:	462a      	mov	r2, r5
 8010466:	4649      	mov	r1, r9
 8010468:	4640      	mov	r0, r8
 801046a:	47d0      	blx	sl
 801046c:	3001      	adds	r0, #1
 801046e:	d0ab      	beq.n	80103c8 <_printf_i+0x164>
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	079b      	lsls	r3, r3, #30
 8010474:	d413      	bmi.n	801049e <_printf_i+0x23a>
 8010476:	68e0      	ldr	r0, [r4, #12]
 8010478:	9b03      	ldr	r3, [sp, #12]
 801047a:	4298      	cmp	r0, r3
 801047c:	bfb8      	it	lt
 801047e:	4618      	movlt	r0, r3
 8010480:	e7a4      	b.n	80103cc <_printf_i+0x168>
 8010482:	2301      	movs	r3, #1
 8010484:	4632      	mov	r2, r6
 8010486:	4649      	mov	r1, r9
 8010488:	4640      	mov	r0, r8
 801048a:	47d0      	blx	sl
 801048c:	3001      	adds	r0, #1
 801048e:	d09b      	beq.n	80103c8 <_printf_i+0x164>
 8010490:	3501      	adds	r5, #1
 8010492:	68e3      	ldr	r3, [r4, #12]
 8010494:	9903      	ldr	r1, [sp, #12]
 8010496:	1a5b      	subs	r3, r3, r1
 8010498:	42ab      	cmp	r3, r5
 801049a:	dcf2      	bgt.n	8010482 <_printf_i+0x21e>
 801049c:	e7eb      	b.n	8010476 <_printf_i+0x212>
 801049e:	2500      	movs	r5, #0
 80104a0:	f104 0619 	add.w	r6, r4, #25
 80104a4:	e7f5      	b.n	8010492 <_printf_i+0x22e>
 80104a6:	bf00      	nop
 80104a8:	08011a7a 	.word	0x08011a7a
 80104ac:	08011a8b 	.word	0x08011a8b

080104b0 <memmove>:
 80104b0:	4288      	cmp	r0, r1
 80104b2:	b510      	push	{r4, lr}
 80104b4:	eb01 0402 	add.w	r4, r1, r2
 80104b8:	d902      	bls.n	80104c0 <memmove+0x10>
 80104ba:	4284      	cmp	r4, r0
 80104bc:	4623      	mov	r3, r4
 80104be:	d807      	bhi.n	80104d0 <memmove+0x20>
 80104c0:	1e43      	subs	r3, r0, #1
 80104c2:	42a1      	cmp	r1, r4
 80104c4:	d008      	beq.n	80104d8 <memmove+0x28>
 80104c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104ce:	e7f8      	b.n	80104c2 <memmove+0x12>
 80104d0:	4402      	add	r2, r0
 80104d2:	4601      	mov	r1, r0
 80104d4:	428a      	cmp	r2, r1
 80104d6:	d100      	bne.n	80104da <memmove+0x2a>
 80104d8:	bd10      	pop	{r4, pc}
 80104da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104e2:	e7f7      	b.n	80104d4 <memmove+0x24>

080104e4 <_realloc_r>:
 80104e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e8:	4680      	mov	r8, r0
 80104ea:	4614      	mov	r4, r2
 80104ec:	460e      	mov	r6, r1
 80104ee:	b921      	cbnz	r1, 80104fa <_realloc_r+0x16>
 80104f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104f4:	4611      	mov	r1, r2
 80104f6:	f7ff bac9 	b.w	800fa8c <_malloc_r>
 80104fa:	b92a      	cbnz	r2, 8010508 <_realloc_r+0x24>
 80104fc:	f7ff fc9c 	bl	800fe38 <_free_r>
 8010500:	4625      	mov	r5, r4
 8010502:	4628      	mov	r0, r5
 8010504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010508:	f000 f81b 	bl	8010542 <_malloc_usable_size_r>
 801050c:	4284      	cmp	r4, r0
 801050e:	4607      	mov	r7, r0
 8010510:	d802      	bhi.n	8010518 <_realloc_r+0x34>
 8010512:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010516:	d812      	bhi.n	801053e <_realloc_r+0x5a>
 8010518:	4621      	mov	r1, r4
 801051a:	4640      	mov	r0, r8
 801051c:	f7ff fab6 	bl	800fa8c <_malloc_r>
 8010520:	4605      	mov	r5, r0
 8010522:	2800      	cmp	r0, #0
 8010524:	d0ed      	beq.n	8010502 <_realloc_r+0x1e>
 8010526:	42bc      	cmp	r4, r7
 8010528:	4622      	mov	r2, r4
 801052a:	4631      	mov	r1, r6
 801052c:	bf28      	it	cs
 801052e:	463a      	movcs	r2, r7
 8010530:	f7ff fa76 	bl	800fa20 <memcpy>
 8010534:	4631      	mov	r1, r6
 8010536:	4640      	mov	r0, r8
 8010538:	f7ff fc7e 	bl	800fe38 <_free_r>
 801053c:	e7e1      	b.n	8010502 <_realloc_r+0x1e>
 801053e:	4635      	mov	r5, r6
 8010540:	e7df      	b.n	8010502 <_realloc_r+0x1e>

08010542 <_malloc_usable_size_r>:
 8010542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010546:	1f18      	subs	r0, r3, #4
 8010548:	2b00      	cmp	r3, #0
 801054a:	bfbc      	itt	lt
 801054c:	580b      	ldrlt	r3, [r1, r0]
 801054e:	18c0      	addlt	r0, r0, r3
 8010550:	4770      	bx	lr

08010552 <atan2f>:
 8010552:	f000 b81f 	b.w	8010594 <__ieee754_atan2f>
	...

08010558 <sqrtf>:
 8010558:	b508      	push	{r3, lr}
 801055a:	ed2d 8b02 	vpush	{d8}
 801055e:	eeb0 8a40 	vmov.f32	s16, s0
 8010562:	f000 f8b7 	bl	80106d4 <__ieee754_sqrtf>
 8010566:	eeb4 8a48 	vcmp.f32	s16, s16
 801056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801056e:	d60c      	bvs.n	801058a <sqrtf+0x32>
 8010570:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010590 <sqrtf+0x38>
 8010574:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057c:	d505      	bpl.n	801058a <sqrtf+0x32>
 801057e:	f7ff fa23 	bl	800f9c8 <__errno>
 8010582:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010586:	2321      	movs	r3, #33	; 0x21
 8010588:	6003      	str	r3, [r0, #0]
 801058a:	ecbd 8b02 	vpop	{d8}
 801058e:	bd08      	pop	{r3, pc}
 8010590:	00000000 	.word	0x00000000

08010594 <__ieee754_atan2f>:
 8010594:	ee10 2a90 	vmov	r2, s1
 8010598:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801059c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80105a0:	b510      	push	{r4, lr}
 80105a2:	eef0 7a40 	vmov.f32	s15, s0
 80105a6:	dc06      	bgt.n	80105b6 <__ieee754_atan2f+0x22>
 80105a8:	ee10 0a10 	vmov	r0, s0
 80105ac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80105b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80105b4:	dd04      	ble.n	80105c0 <__ieee754_atan2f+0x2c>
 80105b6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80105ba:	eeb0 0a67 	vmov.f32	s0, s15
 80105be:	bd10      	pop	{r4, pc}
 80105c0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80105c4:	d103      	bne.n	80105ce <__ieee754_atan2f+0x3a>
 80105c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105ca:	f000 b887 	b.w	80106dc <atanf>
 80105ce:	1794      	asrs	r4, r2, #30
 80105d0:	f004 0402 	and.w	r4, r4, #2
 80105d4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80105d8:	b943      	cbnz	r3, 80105ec <__ieee754_atan2f+0x58>
 80105da:	2c02      	cmp	r4, #2
 80105dc:	d05e      	beq.n	801069c <__ieee754_atan2f+0x108>
 80105de:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80106b0 <__ieee754_atan2f+0x11c>
 80105e2:	2c03      	cmp	r4, #3
 80105e4:	bf08      	it	eq
 80105e6:	eef0 7a47 	vmoveq.f32	s15, s14
 80105ea:	e7e6      	b.n	80105ba <__ieee754_atan2f+0x26>
 80105ec:	b941      	cbnz	r1, 8010600 <__ieee754_atan2f+0x6c>
 80105ee:	eddf 7a31 	vldr	s15, [pc, #196]	; 80106b4 <__ieee754_atan2f+0x120>
 80105f2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80106b8 <__ieee754_atan2f+0x124>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	bfb8      	it	lt
 80105fa:	eef0 7a40 	vmovlt.f32	s15, s0
 80105fe:	e7dc      	b.n	80105ba <__ieee754_atan2f+0x26>
 8010600:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010604:	d110      	bne.n	8010628 <__ieee754_atan2f+0x94>
 8010606:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801060a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801060e:	d107      	bne.n	8010620 <__ieee754_atan2f+0x8c>
 8010610:	2c02      	cmp	r4, #2
 8010612:	d846      	bhi.n	80106a2 <__ieee754_atan2f+0x10e>
 8010614:	4b29      	ldr	r3, [pc, #164]	; (80106bc <__ieee754_atan2f+0x128>)
 8010616:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801061a:	edd4 7a00 	vldr	s15, [r4]
 801061e:	e7cc      	b.n	80105ba <__ieee754_atan2f+0x26>
 8010620:	2c02      	cmp	r4, #2
 8010622:	d841      	bhi.n	80106a8 <__ieee754_atan2f+0x114>
 8010624:	4b26      	ldr	r3, [pc, #152]	; (80106c0 <__ieee754_atan2f+0x12c>)
 8010626:	e7f6      	b.n	8010616 <__ieee754_atan2f+0x82>
 8010628:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801062c:	d0df      	beq.n	80105ee <__ieee754_atan2f+0x5a>
 801062e:	1a5b      	subs	r3, r3, r1
 8010630:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8010634:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010638:	da1a      	bge.n	8010670 <__ieee754_atan2f+0xdc>
 801063a:	2a00      	cmp	r2, #0
 801063c:	da01      	bge.n	8010642 <__ieee754_atan2f+0xae>
 801063e:	313c      	adds	r1, #60	; 0x3c
 8010640:	db19      	blt.n	8010676 <__ieee754_atan2f+0xe2>
 8010642:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010646:	f000 f91d 	bl	8010884 <fabsf>
 801064a:	f000 f847 	bl	80106dc <atanf>
 801064e:	eef0 7a40 	vmov.f32	s15, s0
 8010652:	2c01      	cmp	r4, #1
 8010654:	d012      	beq.n	801067c <__ieee754_atan2f+0xe8>
 8010656:	2c02      	cmp	r4, #2
 8010658:	d017      	beq.n	801068a <__ieee754_atan2f+0xf6>
 801065a:	2c00      	cmp	r4, #0
 801065c:	d0ad      	beq.n	80105ba <__ieee754_atan2f+0x26>
 801065e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80106c4 <__ieee754_atan2f+0x130>
 8010662:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010666:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80106c8 <__ieee754_atan2f+0x134>
 801066a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801066e:	e7a4      	b.n	80105ba <__ieee754_atan2f+0x26>
 8010670:	eddf 7a10 	vldr	s15, [pc, #64]	; 80106b4 <__ieee754_atan2f+0x120>
 8010674:	e7ed      	b.n	8010652 <__ieee754_atan2f+0xbe>
 8010676:	eddf 7a15 	vldr	s15, [pc, #84]	; 80106cc <__ieee754_atan2f+0x138>
 801067a:	e7ea      	b.n	8010652 <__ieee754_atan2f+0xbe>
 801067c:	ee17 3a90 	vmov	r3, s15
 8010680:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010684:	ee07 3a90 	vmov	s15, r3
 8010688:	e797      	b.n	80105ba <__ieee754_atan2f+0x26>
 801068a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80106c4 <__ieee754_atan2f+0x130>
 801068e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010692:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80106c8 <__ieee754_atan2f+0x134>
 8010696:	ee70 7a67 	vsub.f32	s15, s0, s15
 801069a:	e78e      	b.n	80105ba <__ieee754_atan2f+0x26>
 801069c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80106c8 <__ieee754_atan2f+0x134>
 80106a0:	e78b      	b.n	80105ba <__ieee754_atan2f+0x26>
 80106a2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80106d0 <__ieee754_atan2f+0x13c>
 80106a6:	e788      	b.n	80105ba <__ieee754_atan2f+0x26>
 80106a8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80106cc <__ieee754_atan2f+0x138>
 80106ac:	e785      	b.n	80105ba <__ieee754_atan2f+0x26>
 80106ae:	bf00      	nop
 80106b0:	c0490fdb 	.word	0xc0490fdb
 80106b4:	3fc90fdb 	.word	0x3fc90fdb
 80106b8:	bfc90fdb 	.word	0xbfc90fdb
 80106bc:	08011a9c 	.word	0x08011a9c
 80106c0:	08011aa8 	.word	0x08011aa8
 80106c4:	33bbbd2e 	.word	0x33bbbd2e
 80106c8:	40490fdb 	.word	0x40490fdb
 80106cc:	00000000 	.word	0x00000000
 80106d0:	3f490fdb 	.word	0x3f490fdb

080106d4 <__ieee754_sqrtf>:
 80106d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80106d8:	4770      	bx	lr
	...

080106dc <atanf>:
 80106dc:	b538      	push	{r3, r4, r5, lr}
 80106de:	ee10 5a10 	vmov	r5, s0
 80106e2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80106e6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80106ea:	eef0 7a40 	vmov.f32	s15, s0
 80106ee:	db10      	blt.n	8010712 <atanf+0x36>
 80106f0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80106f4:	dd04      	ble.n	8010700 <atanf+0x24>
 80106f6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80106fa:	eeb0 0a67 	vmov.f32	s0, s15
 80106fe:	bd38      	pop	{r3, r4, r5, pc}
 8010700:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010838 <atanf+0x15c>
 8010704:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801083c <atanf+0x160>
 8010708:	2d00      	cmp	r5, #0
 801070a:	bfd8      	it	le
 801070c:	eef0 7a40 	vmovle.f32	s15, s0
 8010710:	e7f3      	b.n	80106fa <atanf+0x1e>
 8010712:	4b4b      	ldr	r3, [pc, #300]	; (8010840 <atanf+0x164>)
 8010714:	429c      	cmp	r4, r3
 8010716:	dc10      	bgt.n	801073a <atanf+0x5e>
 8010718:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801071c:	da0a      	bge.n	8010734 <atanf+0x58>
 801071e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010844 <atanf+0x168>
 8010722:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801072a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801072e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010732:	dce2      	bgt.n	80106fa <atanf+0x1e>
 8010734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010738:	e013      	b.n	8010762 <atanf+0x86>
 801073a:	f000 f8a3 	bl	8010884 <fabsf>
 801073e:	4b42      	ldr	r3, [pc, #264]	; (8010848 <atanf+0x16c>)
 8010740:	429c      	cmp	r4, r3
 8010742:	dc4f      	bgt.n	80107e4 <atanf+0x108>
 8010744:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010748:	429c      	cmp	r4, r3
 801074a:	dc41      	bgt.n	80107d0 <atanf+0xf4>
 801074c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010750:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010754:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010758:	2300      	movs	r3, #0
 801075a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801075e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010762:	1c5a      	adds	r2, r3, #1
 8010764:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010768:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801084c <atanf+0x170>
 801076c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010850 <atanf+0x174>
 8010770:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8010854 <atanf+0x178>
 8010774:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010778:	eee6 5a87 	vfma.f32	s11, s13, s14
 801077c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010858 <atanf+0x17c>
 8010780:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010784:	eddf 5a35 	vldr	s11, [pc, #212]	; 801085c <atanf+0x180>
 8010788:	eee7 5a26 	vfma.f32	s11, s14, s13
 801078c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010860 <atanf+0x184>
 8010790:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010794:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010864 <atanf+0x188>
 8010798:	eee7 5a26 	vfma.f32	s11, s14, s13
 801079c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010868 <atanf+0x18c>
 80107a0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80107a4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801086c <atanf+0x190>
 80107a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80107ac:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010870 <atanf+0x194>
 80107b0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80107b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010874 <atanf+0x198>
 80107b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80107bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80107c0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80107c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80107c8:	d121      	bne.n	801080e <atanf+0x132>
 80107ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80107ce:	e794      	b.n	80106fa <atanf+0x1e>
 80107d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80107d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80107d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80107dc:	2301      	movs	r3, #1
 80107de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80107e2:	e7be      	b.n	8010762 <atanf+0x86>
 80107e4:	4b24      	ldr	r3, [pc, #144]	; (8010878 <atanf+0x19c>)
 80107e6:	429c      	cmp	r4, r3
 80107e8:	dc0b      	bgt.n	8010802 <atanf+0x126>
 80107ea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80107ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80107f2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80107f6:	2302      	movs	r3, #2
 80107f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80107fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010800:	e7af      	b.n	8010762 <atanf+0x86>
 8010802:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010806:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801080a:	2303      	movs	r3, #3
 801080c:	e7a9      	b.n	8010762 <atanf+0x86>
 801080e:	4a1b      	ldr	r2, [pc, #108]	; (801087c <atanf+0x1a0>)
 8010810:	491b      	ldr	r1, [pc, #108]	; (8010880 <atanf+0x1a4>)
 8010812:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010816:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801081a:	ed93 0a00 	vldr	s0, [r3]
 801081e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8010822:	ed92 0a00 	vldr	s0, [r2]
 8010826:	ee77 7a67 	vsub.f32	s15, s14, s15
 801082a:	2d00      	cmp	r5, #0
 801082c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010830:	bfb8      	it	lt
 8010832:	eef1 7a67 	vneglt.f32	s15, s15
 8010836:	e760      	b.n	80106fa <atanf+0x1e>
 8010838:	3fc90fdb 	.word	0x3fc90fdb
 801083c:	bfc90fdb 	.word	0xbfc90fdb
 8010840:	3edfffff 	.word	0x3edfffff
 8010844:	7149f2ca 	.word	0x7149f2ca
 8010848:	3f97ffff 	.word	0x3f97ffff
 801084c:	3c8569d7 	.word	0x3c8569d7
 8010850:	3d4bda59 	.word	0x3d4bda59
 8010854:	bd6ef16b 	.word	0xbd6ef16b
 8010858:	3d886b35 	.word	0x3d886b35
 801085c:	3dba2e6e 	.word	0x3dba2e6e
 8010860:	3e124925 	.word	0x3e124925
 8010864:	3eaaaaab 	.word	0x3eaaaaab
 8010868:	bd15a221 	.word	0xbd15a221
 801086c:	bd9d8795 	.word	0xbd9d8795
 8010870:	bde38e38 	.word	0xbde38e38
 8010874:	be4ccccd 	.word	0xbe4ccccd
 8010878:	401bffff 	.word	0x401bffff
 801087c:	08011ab4 	.word	0x08011ab4
 8010880:	08011ac4 	.word	0x08011ac4

08010884 <fabsf>:
 8010884:	ee10 3a10 	vmov	r3, s0
 8010888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801088c:	ee00 3a10 	vmov	s0, r3
 8010890:	4770      	bx	lr
	...

08010894 <_init>:
 8010894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010896:	bf00      	nop
 8010898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801089a:	bc08      	pop	{r3}
 801089c:	469e      	mov	lr, r3
 801089e:	4770      	bx	lr

080108a0 <_fini>:
 80108a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108a2:	bf00      	nop
 80108a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108a6:	bc08      	pop	{r3}
 80108a8:	469e      	mov	lr, r3
 80108aa:	4770      	bx	lr
