
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b924  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800bac4  0800bac4  0001bac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc10  0800bc10  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc10  0800bc10  0001bc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc18  0800bc18  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc18  0800bc18  0001bc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc1c  0800bc1c  0001bc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800bc20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ab28  20000164  0800bd84  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ac8c  0800bd84  0002ac8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d725  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004892  00000000  00000000  0003d8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00042150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  00043738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006958  00000000  00000000  00044b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2a7  00000000  00000000  0004b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e7ed  00000000  00000000  00065747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103f34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d1c  00000000  00000000  00103f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800baac 	.word	0x0800baac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800baac 	.word	0x0800baac

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <task_led>:
	int timeout;
}led_t;

led_t green_led;

void task_led(void *param){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	889b      	ldrh	r3, [r3, #4]
 80004f8:	4619      	mov	r1, r3
 80004fa:	4610      	mov	r0, r2
 80004fc:	f001 fb67 	bl	8001bce <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4618      	mov	r0, r3
 8000506:	f008 fc07 	bl	8008d18 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 800050a:	e7f1      	b.n	80004f0 <task_led+0xc>

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 facb 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f837 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f913 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 800051e:	f000 f8f1 	bl	8000704 <MX_DMA_Init>
  MX_ADC1_Init();
 8000522:	f000 f89d 	bl	8000660 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000526:	f006 fe63 	bl	80071f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052a:	4a10      	ldr	r2, [pc, #64]	; (800056c <main+0x60>)
 800052c:	2100      	movs	r1, #0
 800052e:	4810      	ldr	r0, [pc, #64]	; (8000570 <main+0x64>)
 8000530:	f006 fea8 	bl	8007284 <osThreadNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <main+0x68>)
 8000538:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x6c>)
 800053c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000540:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0x6c>)
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <main+0x70>)
 8000546:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <main+0x6c>)
 800054a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054e:	809a      	strh	r2, [r3, #4]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8000550:	2300      	movs	r3, #0
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2301      	movs	r3, #1
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <main+0x6c>)
 800055a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800055e:	4908      	ldr	r1, [pc, #32]	; (8000580 <main+0x74>)
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x78>)
 8000562:	f008 fa7e 	bl	8008a62 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000566:	f006 fe67 	bl	8007238 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x5e>
 800056c:	0800bb74 	.word	0x0800bb74
 8000570:	08000805 	.word	0x08000805
 8000574:	20000228 	.word	0x20000228
 8000578:	2000022c 	.word	0x2000022c
 800057c:	40020800 	.word	0x40020800
 8000580:	0800bae4 	.word	0x0800bae4
 8000584:	080004e5 	.word	0x080004e5

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f00b f9be 	bl	800b918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <SystemClock_Config+0xd0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <SystemClock_Config+0xd4>)
 80005d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005fc:	2319      	movs	r3, #25
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000606:	2304      	movs	r3, #4
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fd72 	bl	80030fc <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061e:	f000 f929 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f002 ffd4 	bl	80035ec <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064a:	f000 f913 	bl	8000874 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC1_Init+0xa0>)
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006c2:	f000 fa89 	bl	8000bd8 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 f8d2 	bl	8000874 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006e2:	f000 fabd 	bl	8000c60 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ec:	f000 f8c2 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000180 	.word	0x20000180
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_DMA_Init+0x3c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <MX_DMA_Init+0x3c>)
 8000714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_DMA_Init+0x3c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2105      	movs	r1, #5
 800072a:	2038      	movs	r0, #56	; 0x38
 800072c:	f000 fd91 	bl	8001252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000730:	2038      	movs	r0, #56	; 0x38
 8000732:	f000 fdaa 	bl	800128a <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a26      	ldr	r2, [pc, #152]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_GPIO_Init+0xb8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_GPIO_Init+0xb8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_GPIO_Init+0xb8>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_GPIO_Init+0xb8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_GPIO_Init+0xb8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <MX_GPIO_Init+0xb8>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_GPIO_Init+0xb8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <MX_GPIO_Init+0xbc>)
 80007d2:	f001 f9e3 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0xbc>)
 80007f0:	f001 f850 	bl	8001894 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020800 	.word	0x40020800

08000804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800080c:	f00a faae 	bl	800ad6c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8000810:	f00a fadc 	bl	800adcc <init_usb_rtos_obj>
  uint8_t cRxedChar, buffer[32], cInputIndex = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  /*char data;
	  CDC_Receiveq_MS(&data,portMAX_DELAY);
	  (void) CDC_Transmit_FS((uint8_t *) "\n\r",2);
	  (void) CDC_Transmit_FS((uint8_t *) &data,1);*/

		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000822:	2120      	movs	r1, #32
 8000824:	4618      	mov	r0, r3
 8000826:	f00a faef 	bl	800ae08 <read_usb_cdc>
		cRxedChar = buffer[0];
 800082a:	7b3b      	ldrb	r3, [r7, #12]
 800082c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if( cRxedChar == '\r' ){
 8000830:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000834:	2b0d      	cmp	r3, #13
 8000836:	d108      	bne.n	800084a <StartDefaultTask+0x46>
			/*
			 * Entra quando finalizado envio de comando
			 */
			CDC_Transmit_FS((uint8_t *)"\n\r", 2);
 8000838:	2102      	movs	r1, #2
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <StartDefaultTask+0x64>)
 800083c:	f00a fbc0 	bl	800afc0 <CDC_Transmit_FS>


			CDC_Transmit_FS((uint8_t *)">> ", 3);
 8000840:	2103      	movs	r1, #3
 8000842:	480a      	ldr	r0, [pc, #40]	; (800086c <StartDefaultTask+0x68>)
 8000844:	f00a fbbc 	bl	800afc0 <CDC_Transmit_FS>
 8000848:	e7e7      	b.n	800081a <StartDefaultTask+0x16>
		} else {
			if( cRxedChar == '\0' ){
 800084a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800084e:	2b00      	cmp	r3, #0
 8000850:	d103      	bne.n	800085a <StartDefaultTask+0x56>
				 CDC_Transmit_FS((uint8_t *) "Welcome to FreeRTOS\n\r\n\r>> ", strlen("Welcome to FreeRTOS\n\r\n\r>> "));
 8000852:	211a      	movs	r1, #26
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <StartDefaultTask+0x6c>)
 8000856:	f00a fbb3 	bl	800afc0 <CDC_Transmit_FS>
			 }
			/*
			 * Replica digitado para tela
			 */
			CDC_Transmit_FS(&cRxedChar, 1);
 800085a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f00a fbad 	bl	800afc0 <CDC_Transmit_FS>
		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 8000866:	e7d8      	b.n	800081a <StartDefaultTask+0x16>
 8000868:	0800baf0 	.word	0x0800baf0
 800086c:	0800baf4 	.word	0x0800baf4
 8000870:	0800baf8 	.word	0x0800baf8

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	e7fe      	b.n	800087c <Error_Handler+0x8>
	...

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <HAL_MspInit+0x54>)
 8000890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x54>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_MspInit+0x54>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_MspInit+0x54>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	210f      	movs	r1, #15
 80008c2:	f06f 0001 	mvn.w	r0, #1
 80008c6:	f000 fcc4 	bl	8001252 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a2e      	ldr	r2, [pc, #184]	; (80009b0 <HAL_ADC_MspInit+0xd8>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d156      	bne.n	80009a8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <HAL_ADC_MspInit+0xdc>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <HAL_ADC_MspInit+0xdc>)
 8000904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <HAL_ADC_MspInit+0xdc>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <HAL_ADC_MspInit+0xdc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a25      	ldr	r2, [pc, #148]	; (80009b4 <HAL_ADC_MspInit+0xdc>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <HAL_ADC_MspInit+0xdc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000932:	2301      	movs	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000936:	2303      	movs	r3, #3
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	481c      	ldr	r0, [pc, #112]	; (80009b8 <HAL_ADC_MspInit+0xe0>)
 8000946:	f000 ffa5 	bl	8001894 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 800094c:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <HAL_ADC_MspInit+0xe8>)
 800094e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 800096c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000970:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 8000974:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000978:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800098c:	480b      	ldr	r0, [pc, #44]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 800098e:	f000 fc97 	bl	80012c0 <HAL_DMA_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000998:	f7ff ff6c 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 80009a0:	639a      	str	r2, [r3, #56]	; 0x38
 80009a2:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_ADC_MspInit+0xe4>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40012000 	.word	0x40012000
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400
 80009bc:	200001c8 	.word	0x200001c8
 80009c0:	40026410 	.word	0x40026410

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f8ac 	bl	8000b50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009f8:	f008 fe2e 	bl	8009658 <xTaskGetSchedulerState>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d001      	beq.n	8000a06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a02:	f009 ff39 	bl	800a878 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <DMA2_Stream0_IRQHandler+0x10>)
 8000a12:	f000 fd03 	bl	800141c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200001c8 	.word	0x200001c8

08000a20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <OTG_FS_IRQHandler+0x10>)
 8000a26:	f001 fa3c 	bl	8001ea2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000a558 	.word	0x2000a558

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5e:	490e      	ldr	r1, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a74:	4c0b      	ldr	r4, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a82:	f7ff ffd7 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f00a ff13 	bl	800b8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fd3f 	bl	800050c <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000a9c:	0800bc20 	.word	0x0800bc20
  ldr r2, =_sbss
 8000aa0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000aa4:	2000ac8c 	.word	0x2000ac8c

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_Init+0x40>)
 8000ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_Init+0x40>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x40>)
 8000ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 fbb1 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff fece 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023c00 	.word	0x40023c00

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fbc9 	bl	80012a6 <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b2c:	f000 fb91 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000238 	.word	0x20000238

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000238 	.word	0x20000238

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff ffee 	bl	8000b78 <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb6:	bf00      	nop
 8000bb8:	f7ff ffde 	bl	8000b78 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e033      	b.n	8000c56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d109      	bne.n	8000c0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fe6e 	bl	80008d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d118      	bne.n	8000c48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c1e:	f023 0302 	bic.w	r3, r3, #2
 8000c22:	f043 0202 	orr.w	r2, r3, #2
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 f93a 	bl	8000ea4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f023 0303 	bic.w	r3, r3, #3
 8000c3e:	f043 0201 	orr.w	r2, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	641a      	str	r2, [r3, #64]	; 0x40
 8000c46:	e001      	b.n	8000c4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <HAL_ADC_ConfigChannel+0x1c>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e105      	b.n	8000e88 <HAL_ADC_ConfigChannel+0x228>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b09      	cmp	r3, #9
 8000c8a:	d925      	bls.n	8000cd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68d9      	ldr	r1, [r3, #12]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3b1e      	subs	r3, #30
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	400a      	ands	r2, r1
 8000cb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68d9      	ldr	r1, [r3, #12]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4403      	add	r3, r0
 8000cca:	3b1e      	subs	r3, #30
 8000ccc:	409a      	lsls	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	e022      	b.n	8000d1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6919      	ldr	r1, [r3, #16]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	2207      	movs	r2, #7
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	400a      	ands	r2, r1
 8000cfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6919      	ldr	r1, [r3, #16]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	4603      	mov	r3, r0
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4403      	add	r3, r0
 8000d14:	409a      	lsls	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d824      	bhi.n	8000d70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	3b05      	subs	r3, #5
 8000d38:	221f      	movs	r2, #31
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	400a      	ands	r2, r1
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	3b05      	subs	r3, #5
 8000d62:	fa00 f203 	lsl.w	r2, r0, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d6e:	e04c      	b.n	8000e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b0c      	cmp	r3, #12
 8000d76:	d824      	bhi.n	8000dc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	3b23      	subs	r3, #35	; 0x23
 8000d8a:	221f      	movs	r2, #31
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43da      	mvns	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	400a      	ands	r2, r1
 8000d98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	4613      	mov	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	3b23      	subs	r3, #35	; 0x23
 8000db4:	fa00 f203 	lsl.w	r2, r0, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc0:	e023      	b.n	8000e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3b41      	subs	r3, #65	; 0x41
 8000dd4:	221f      	movs	r2, #31
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	400a      	ands	r2, r1
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3b41      	subs	r3, #65	; 0x41
 8000dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <HAL_ADC_ConfigChannel+0x234>)
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <HAL_ADC_ConfigChannel+0x238>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d109      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x1cc>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b12      	cmp	r3, #18
 8000e1e:	d105      	bne.n	8000e2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_ADC_ConfigChannel+0x238>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d123      	bne.n	8000e7e <HAL_ADC_ConfigChannel+0x21e>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	d003      	beq.n	8000e46 <HAL_ADC_ConfigChannel+0x1e6>
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b11      	cmp	r3, #17
 8000e44:	d11b      	bne.n	8000e7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b10      	cmp	r3, #16
 8000e58:	d111      	bne.n	8000e7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_ADC_ConfigChannel+0x23c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <HAL_ADC_ConfigChannel+0x240>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	0c9a      	lsrs	r2, r3, #18
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000e70:	e002      	b.n	8000e78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f9      	bne.n	8000e72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40012300 	.word	0x40012300
 8000e98:	40012000 	.word	0x40012000
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	431bde83 	.word	0x431bde83

08000ea4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eac:	4b79      	ldr	r3, [pc, #484]	; (8001094 <ADC_Init+0x1f0>)
 8000eae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6859      	ldr	r1, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	021a      	lsls	r2, r3, #8
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6859      	ldr	r1, [r3, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6899      	ldr	r1, [r3, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	4a58      	ldr	r2, [pc, #352]	; (8001098 <ADC_Init+0x1f4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d022      	beq.n	8000f82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6899      	ldr	r1, [r3, #8]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6899      	ldr	r1, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	e00f      	b.n	8000fa2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fa0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0202 	bic.w	r2, r2, #2
 8000fb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6899      	ldr	r1, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e1b      	ldrb	r3, [r3, #24]
 8000fbc:	005a      	lsls	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d01b      	beq.n	8001008 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6859      	ldr	r1, [r3, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	035a      	lsls	r2, r3, #13
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	e007      	b.n	8001018 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001016:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	3b01      	subs	r3, #1
 8001034:	051a      	lsls	r2, r3, #20
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	430a      	orrs	r2, r1
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800104c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6899      	ldr	r1, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800105a:	025a      	lsls	r2, r3, #9
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001072:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6899      	ldr	r1, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	029a      	lsls	r2, r3, #10
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	609a      	str	r2, [r3, #8]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40012300 	.word	0x40012300
 8001098:	0f000001 	.word	0x0f000001

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff29 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff3e 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff8e 	bl	8001190 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff31 	bl	8001100 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff fc54 	bl	8000b78 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e099      	b.n	8001410 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2202      	movs	r2, #2
 80012e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fc:	e00f      	b.n	800131e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012fe:	f7ff fc3b 	bl	8000b78 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b05      	cmp	r3, #5
 800130a:	d908      	bls.n	800131e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2220      	movs	r2, #32
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2203      	movs	r2, #3
 8001316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e078      	b.n	8001410 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e8      	bne.n	80012fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <HAL_DMA_Init+0x158>)
 8001338:	4013      	ands	r3, r2
 800133a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4313      	orrs	r3, r2
 800136e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	2b04      	cmp	r3, #4
 8001376:	d107      	bne.n	8001388 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	4313      	orrs	r3, r2
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4313      	orrs	r3, r2
 8001386:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f023 0307 	bic.w	r3, r3, #7
 800139e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d117      	bne.n	80013e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00e      	beq.n	80013e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f9e9 	bl	800179c <DMA_CheckFifoParam>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2240      	movs	r2, #64	; 0x40
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013de:	2301      	movs	r3, #1
 80013e0:	e016      	b.n	8001410 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f9a0 	bl	8001730 <DMA_CalcBaseAndBitshift>
 80013f0:	4603      	mov	r3, r0
 80013f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f8:	223f      	movs	r2, #63	; 0x3f
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	f010803f 	.word	0xf010803f

0800141c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001428:	4b8e      	ldr	r3, [pc, #568]	; (8001664 <HAL_DMA_IRQHandler+0x248>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a8e      	ldr	r2, [pc, #568]	; (8001668 <HAL_DMA_IRQHandler+0x24c>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0a9b      	lsrs	r3, r3, #10
 8001434:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001446:	2208      	movs	r2, #8
 8001448:	409a      	lsls	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0204 	bic.w	r2, r2, #4
 800146e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	2208      	movs	r2, #8
 8001476:	409a      	lsls	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	f043 0201 	orr.w	r2, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	2201      	movs	r2, #1
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d012      	beq.n	80014be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	2201      	movs	r2, #1
 80014ac:	409a      	lsls	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b6:	f043 0202 	orr.w	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	2204      	movs	r2, #4
 80014c4:	409a      	lsls	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d012      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00b      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	2204      	movs	r2, #4
 80014e2:	409a      	lsls	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ec:	f043 0204 	orr.w	r2, r3, #4
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	2210      	movs	r2, #16
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d043      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d03c      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2210      	movs	r2, #16
 8001518:	409a      	lsls	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d018      	beq.n	800155e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d108      	bne.n	800154c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d024      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
 800154a:	e01f      	b.n	800158c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01b      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
 800155c:	e016      	b.n	800158c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d107      	bne.n	800157c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0208 	bic.w	r2, r2, #8
 800157a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	2220      	movs	r2, #32
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 808f 	beq.w	80016bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 8087 	beq.w	80016bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	2220      	movs	r2, #32
 80015b4:	409a      	lsls	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d136      	bne.n	8001634 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0216 	bic.w	r2, r2, #22
 80015d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <HAL_DMA_IRQHandler+0x1da>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0208 	bic.w	r2, r2, #8
 8001604:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	223f      	movs	r2, #63	; 0x3f
 800160c:	409a      	lsls	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001626:	2b00      	cmp	r3, #0
 8001628:	d07e      	beq.n	8001728 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
        }
        return;
 8001632:	e079      	b.n	8001728 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d01d      	beq.n	800167e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	2b00      	cmp	r3, #0
 8001656:	d031      	beq.n	80016bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
 8001660:	e02c      	b.n	80016bc <HAL_DMA_IRQHandler+0x2a0>
 8001662:	bf00      	nop
 8001664:	20000000 	.word	0x20000000
 8001668:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d023      	beq.n	80016bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
 800167c:	e01e      	b.n	80016bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10f      	bne.n	80016ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0210 	bic.w	r2, r2, #16
 800169a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d032      	beq.n	800172a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d022      	beq.n	8001716 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2205      	movs	r2, #5
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d307      	bcc.n	8001704 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f2      	bne.n	80016e8 <HAL_DMA_IRQHandler+0x2cc>
 8001702:	e000      	b.n	8001706 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001704:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
 8001726:	e000      	b.n	800172a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001728:	bf00      	nop
    }
  }
}
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3b10      	subs	r3, #16
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <DMA_CalcBaseAndBitshift+0x64>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800174a:	4a13      	ldr	r2, [pc, #76]	; (8001798 <DMA_CalcBaseAndBitshift+0x68>)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d909      	bls.n	8001772 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	1d1a      	adds	r2, r3, #4
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	659a      	str	r2, [r3, #88]	; 0x58
 8001770:	e007      	b.n	8001782 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	aaaaaaab 	.word	0xaaaaaaab
 8001798:	0800bba8 	.word	0x0800bba8

0800179c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d11f      	bne.n	80017f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d856      	bhi.n	800186a <DMA_CheckFifoParam+0xce>
 80017bc:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <DMA_CheckFifoParam+0x28>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	080017d5 	.word	0x080017d5
 80017c8:	080017e7 	.word	0x080017e7
 80017cc:	080017d5 	.word	0x080017d5
 80017d0:	0800186b 	.word	0x0800186b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d046      	beq.n	800186e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e4:	e043      	b.n	800186e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017ee:	d140      	bne.n	8001872 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f4:	e03d      	b.n	8001872 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017fe:	d121      	bne.n	8001844 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d837      	bhi.n	8001876 <DMA_CheckFifoParam+0xda>
 8001806:	a201      	add	r2, pc, #4	; (adr r2, 800180c <DMA_CheckFifoParam+0x70>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	0800181d 	.word	0x0800181d
 8001810:	08001823 	.word	0x08001823
 8001814:	0800181d 	.word	0x0800181d
 8001818:	08001835 	.word	0x08001835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
      break;
 8001820:	e030      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d025      	beq.n	800187a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001832:	e022      	b.n	800187a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800183c:	d11f      	bne.n	800187e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001842:	e01c      	b.n	800187e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d903      	bls.n	8001852 <DMA_CheckFifoParam+0xb6>
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d003      	beq.n	8001858 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001850:	e018      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
      break;
 8001856:	e015      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00e      	beq.n	8001882 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
      break;
 8001868:	e00b      	b.n	8001882 <DMA_CheckFifoParam+0xe6>
      break;
 800186a:	bf00      	nop
 800186c:	e00a      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 800186e:	bf00      	nop
 8001870:	e008      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 8001872:	bf00      	nop
 8001874:	e006      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 8001876:	bf00      	nop
 8001878:	e004      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 800187a:	bf00      	nop
 800187c:	e002      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;   
 800187e:	bf00      	nop
 8001880:	e000      	b.n	8001884 <DMA_CheckFifoParam+0xe8>
      break;
 8001882:	bf00      	nop
    }
  } 
  
  return status; 
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e159      	b.n	8001b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8148 	bne.w	8001b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a2 	beq.w	8001b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a56      	ldr	r2, [pc, #344]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a36:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d019      	beq.n	8001a96 <HAL_GPIO_Init+0x202>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <HAL_GPIO_Init+0x2f4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x1fe>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a47      	ldr	r2, [pc, #284]	; (8001b8c <HAL_GPIO_Init+0x2f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <HAL_GPIO_Init+0x2fc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x1f6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <HAL_GPIO_Init+0x300>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x1f2>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a86:	2307      	movs	r3, #7
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x204>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	; (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f aea2 	bls.w	80018b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	041a      	lsls	r2, r3, #16
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	400b      	ands	r3, r1
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c04:	b08f      	sub	sp, #60	; 0x3c
 8001c06:	af0a      	add	r7, sp, #40	; 0x28
 8001c08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e10f      	b.n	8001e34 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f009 fb2a 	bl	800b288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2203      	movs	r2, #3
 8001c38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 ff97 	bl	8003b86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	687e      	ldr	r6, [r7, #4]
 8001c60:	466d      	mov	r5, sp
 8001c62:	f106 0410 	add.w	r4, r6, #16
 8001c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c72:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c76:	1d33      	adds	r3, r6, #4
 8001c78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f001 fe6e 	bl	800395c <USB_CoreInit>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0d0      	b.n	8001e34 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 ff85 	bl	8003ba8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	e04a      	b.n	8001d3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	333d      	adds	r3, #61	; 0x3d
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	333c      	adds	r3, #60	; 0x3c
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	b298      	uxth	r0, r3
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3344      	adds	r3, #68	; 0x44
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3340      	adds	r3, #64	; 0x40
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	3348      	adds	r3, #72	; 0x48
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	334c      	adds	r3, #76	; 0x4c
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3354      	adds	r3, #84	; 0x54
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	3301      	adds	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d3af      	bcc.n	8001ca4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e044      	b.n	8001dd4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3b5      	bcc.n	8001d4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	687e      	ldr	r6, [r7, #4]
 8001de6:	466d      	mov	r5, sp
 8001de8:	f106 0410 	add.w	r4, r6, #16
 8001dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001df8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dfc:	1d33      	adds	r3, r6, #4
 8001dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e00:	6838      	ldr	r0, [r7, #0]
 8001e02:	f001 ff1d 	bl	8003c40 <USB_DevInit>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e00d      	b.n	8001e34 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 f86c 	bl	8004f0a <USB_DevDisconnect>

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_PCD_Start+0x1c>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e020      	b.n	8001e9a <HAL_PCD_Start+0x5e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d109      	bne.n	8001e7c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d005      	beq.n	8001e7c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f001 fe6f 	bl	8003b64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 f81c 	bl	8004ec8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ea2:	b590      	push	{r4, r7, lr}
 8001ea4:	b08d      	sub	sp, #52	; 0x34
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f8da 	bl	8005072 <USB_GetMode>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f040 848a 	bne.w	80027da <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 f83e 	bl	8004f4c <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8480 	beq.w	80027d8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 f82b 	bl	8004f4c <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d107      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f002 0202 	and.w	r2, r2, #2
 8001f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 f819 	bl	8004f4c <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d161      	bne.n	8001fe8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0210 	bic.w	r2, r2, #16
 8001f32:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f003 020f 	and.w	r2, r3, #15
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	3304      	adds	r3, #4
 8001f52:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	0c5b      	lsrs	r3, r3, #17
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d124      	bne.n	8001faa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d035      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	6a38      	ldr	r0, [r7, #32]
 8001f80:	f002 fe50 	bl	8004c24 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f90:	441a      	add	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fa2:	441a      	add	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	621a      	str	r2, [r3, #32]
 8001fa8:	e016      	b.n	8001fd8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	0c5b      	lsrs	r3, r3, #17
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d110      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6a38      	ldr	r0, [r7, #32]
 8001fc2:	f002 fe2f 	bl	8004c24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd2:	441a      	add	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0210 	orr.w	r2, r2, #16
 8001fe6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 ffad 	bl	8004f4c <USB_ReadInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ffc:	f040 80a7 	bne.w	800214e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 ffb2 	bl	8004f72 <USB_ReadDevAllOutEpInterrupt>
 800200e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002010:	e099      	b.n	8002146 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 808e 	beq.w	800213a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f002 ffd6 	bl	8004fda <USB_ReadDevOutEPInterrupt>
 800202e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00c      	beq.n	8002054 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	461a      	mov	r2, r3
 8002048:	2301      	movs	r3, #1
 800204a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800204c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fec2 	bl	8002dd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00c      	beq.n	8002078 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206a:	461a      	mov	r2, r3
 800206c:	2308      	movs	r3, #8
 800206e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 ff98 	bl	8002fa8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208e:	461a      	mov	r2, r3
 8002090:	2310      	movs	r3, #16
 8002092:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d030      	beq.n	8002100 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a6:	2b80      	cmp	r3, #128	; 0x80
 80020a8:	d109      	bne.n	80020be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	3304      	adds	r3, #4
 80020d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	78db      	ldrb	r3, [r3, #3]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d108      	bne.n	80020ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2200      	movs	r2, #0
 80020e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f009 f9d3 	bl	800b494 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	461a      	mov	r2, r3
 80020fc:	2302      	movs	r3, #2
 80020fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002116:	461a      	mov	r2, r3
 8002118:	2320      	movs	r3, #32
 800211a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002132:	461a      	mov	r2, r3
 8002134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002138:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	3301      	adds	r3, #1
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002142:	085b      	lsrs	r3, r3, #1
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f af62 	bne.w	8002012 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fefa 	bl	8004f4c <USB_ReadInterrupts>
 8002158:	4603      	mov	r3, r0
 800215a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002162:	f040 80db 	bne.w	800231c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f002 ff1b 	bl	8004fa6 <USB_ReadDevAllInEpInterrupt>
 8002170:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002176:	e0cd      	b.n	8002314 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80c2 	beq.w	8002308 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	4611      	mov	r1, r2
 800218e:	4618      	mov	r0, r3
 8002190:	f002 ff41 	bl	8005016 <USB_ReadDevInEPInterrupt>
 8002194:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d057      	beq.n	8002250 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	2201      	movs	r2, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69f9      	ldr	r1, [r7, #28]
 80021bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021c0:	4013      	ands	r3, r2
 80021c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d0:	461a      	mov	r2, r3
 80021d2:	2301      	movs	r3, #1
 80021d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d132      	bne.n	8002244 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	334c      	adds	r3, #76	; 0x4c
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4403      	add	r3, r0
 80021fe:	3348      	adds	r3, #72	; 0x48
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4419      	add	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4403      	add	r3, r0
 8002212:	334c      	adds	r3, #76	; 0x4c
 8002214:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	d113      	bne.n	8002244 <HAL_PCD_IRQHandler+0x3a2>
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	3354      	adds	r3, #84	; 0x54
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800223c:	461a      	mov	r2, r3
 800223e:	2101      	movs	r1, #1
 8002240:	f002 ff48 	bl	80050d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f009 f89d 	bl	800b38a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002266:	461a      	mov	r2, r3
 8002268:	2308      	movs	r3, #8
 800226a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002282:	461a      	mov	r2, r3
 8002284:	2310      	movs	r3, #16
 8002286:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229e:	461a      	mov	r2, r3
 80022a0:	2340      	movs	r3, #64	; 0x40
 80022a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d023      	beq.n	80022f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b0:	6a38      	ldr	r0, [r7, #32]
 80022b2:	f001 fe29 	bl	8003f08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	3338      	adds	r3, #56	; 0x38
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	3304      	adds	r3, #4
 80022c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	78db      	ldrb	r3, [r3, #3]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2200      	movs	r2, #0
 80022d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4619      	mov	r1, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f009 f8ea 	bl	800b4b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f0:	461a      	mov	r2, r3
 80022f2:	2302      	movs	r3, #2
 80022f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fcdb 	bl	8002cbe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	3301      	adds	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	f47f af2e 	bne.w	8002178 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fe13 	bl	8004f4c <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800232c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002330:	d122      	bne.n	8002378 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002358:	2100      	movs	r1, #0
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fec2 	bl	80030e4 <HAL_PCDEx_LPM_Callback>
 8002360:	e002      	b.n	8002368 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f009 f888 	bl	800b478 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002376:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fde5 	bl	8004f4c <USB_ReadInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800238c:	d112      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f009 f844 	bl	800b42c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023b2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fdc7 	bl	8004f4c <USB_ReadInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	f040 80b7 	bne.w	800253a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2110      	movs	r1, #16
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 fd8e 	bl	8003f08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f0:	e046      	b.n	8002480 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023fe:	461a      	mov	r2, r3
 8002400:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002404:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002416:	0151      	lsls	r1, r2, #5
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	440a      	add	r2, r1
 800241c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002420:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002424:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002432:	461a      	mov	r2, r3
 8002434:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002438:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244a:	0151      	lsls	r1, r2, #5
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	440a      	add	r2, r1
 8002450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002454:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002458:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246a:	0151      	lsls	r1, r2, #5
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	440a      	add	r2, r1
 8002470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002474:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002478:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	3301      	adds	r3, #1
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002486:	429a      	cmp	r2, r3
 8002488:	d3b3      	bcc.n	80023f2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002498:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800249c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d016      	beq.n	80024d4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b6:	f043 030b 	orr.w	r3, r3, #11
 80024ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024cc:	f043 030b 	orr.w	r3, r3, #11
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	e015      	b.n	8002500 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024fa:	f043 030b 	orr.w	r3, r3, #11
 80024fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800250e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002512:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002524:	461a      	mov	r2, r3
 8002526:	f002 fdd5 	bl	80050d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f002 fd04 	bl	8004f4c <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254e:	d124      	bne.n	800259a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fd9a 	bl	800508e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fd4f 	bl	8004002 <USB_GetDevSpeed>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681c      	ldr	r4, [r3, #0]
 8002570:	f001 f9e8 	bl	8003944 <HAL_RCC_GetHCLKFreq>
 8002574:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4620      	mov	r0, r4
 8002580:	f001 fa4e 	bl	8003a20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f008 ff28 	bl	800b3da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002598:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 fcd4 	bl	8004f4c <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d10a      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f008 ff05 	bl	800b3be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f002 0208 	and.w	r2, r2, #8
 80025c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 fcbf 	bl	8004f4c <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d122      	bne.n	800261e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025e4:	2301      	movs	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e014      	b.n	8002614 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4619      	mov	r1, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fb27 	bl	8002c5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261a:	429a      	cmp	r2, r3
 800261c:	d3e5      	bcc.n	80025ea <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 fc92 	bl	8004f4c <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002632:	d13b      	bne.n	80026ac <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002634:	2301      	movs	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	e02b      	b.n	8002692 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	3340      	adds	r3, #64	; 0x40
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d115      	bne.n	800268c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002660:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002662:	2b00      	cmp	r3, #0
 8002664:	da12      	bge.n	800268c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	333f      	adds	r3, #63	; 0x3f
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fae8 	bl	8002c5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3301      	adds	r3, #1
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002698:	429a      	cmp	r2, r3
 800269a:	d3ce      	bcc.n	800263a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 fc4b 	bl	8004f4c <USB_ReadInterrupts>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c0:	d155      	bne.n	800276e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c2:	2301      	movs	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	e045      	b.n	8002754 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d12e      	bne.n	800274e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	da2b      	bge.n	800274e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002702:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002706:	429a      	cmp	r2, r3
 8002708:	d121      	bne.n	800274e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800274a:	6053      	str	r3, [r2, #4]
            break;
 800274c:	e007      	b.n	800275e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	3301      	adds	r3, #1
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275a:	429a      	cmp	r2, r3
 800275c:	d3b4      	bcc.n	80026c8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800276c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fbea 	bl	8004f4c <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002782:	d10a      	bne.n	800279a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f008 fea9 	bl	800b4dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fbd4 	bl	8004f4c <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d115      	bne.n	80027da <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f008 fe99 	bl	800b4f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	e000      	b.n	80027da <HAL_PCD_IRQHandler+0x938>
      return;
 80027d8:	bf00      	nop
    }
  }
}
 80027da:	3734      	adds	r7, #52	; 0x34
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}

080027e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_PCD_SetAddress+0x1a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e013      	b.n	8002822 <HAL_PCD_SetAddress+0x42>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f002 fb32 	bl	8004e7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	4608      	mov	r0, r1
 8002834:	4611      	mov	r1, r2
 8002836:	461a      	mov	r2, r3
 8002838:	4603      	mov	r3, r0
 800283a:	70fb      	strb	r3, [r7, #3]
 800283c:	460b      	mov	r3, r1
 800283e:	803b      	strh	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800284c:	2b00      	cmp	r3, #0
 800284e:	da0f      	bge.n	8002870 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3338      	adds	r3, #56	; 0x38
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	705a      	strb	r2, [r3, #1]
 800286e:	e00f      	b.n	8002890 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 020f 	and.w	r2, r3, #15
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	b2da      	uxtb	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800289c:	883a      	ldrh	r2, [r7, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	78ba      	ldrb	r2, [r7, #2]
 80028a6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028ba:	78bb      	ldrb	r3, [r7, #2]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d102      	bne.n	80028c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_PCD_EP_Open+0xaa>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e00e      	b.n	80028f2 <HAL_PCD_EP_Open+0xc8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68f9      	ldr	r1, [r7, #12]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fbb2 	bl	800404c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80028f0:	7afb      	ldrb	r3, [r7, #11]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da0f      	bge.n	800292e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	3338      	adds	r3, #56	; 0x38
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	705a      	strb	r2, [r3, #1]
 800292c:	e00f      	b.n	800294e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	f003 020f 	and.w	r2, r3, #15
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_PCD_EP_Close+0x6e>
 8002964:	2302      	movs	r3, #2
 8002966:	e00e      	b.n	8002986 <HAL_PCD_EP_Close+0x8c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	4618      	mov	r0, r3
 8002978:	f001 fbf0 	bl	800415c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	460b      	mov	r3, r1
 800299c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	3304      	adds	r3, #4
 80029b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d0:	7afb      	ldrb	r3, [r7, #11]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d102      	bne.n	80029ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ea:	7afb      	ldrb	r3, [r7, #11]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	f001 fecf 	bl	80047a4 <USB_EP0StartXfer>
 8002a06:	e008      	b.n	8002a1a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	6979      	ldr	r1, [r7, #20]
 8002a16:	f001 fc7d 	bl	8004314 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	460b      	mov	r3, r1
 8002a62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	f003 020f 	and.w	r2, r3, #15
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3338      	adds	r3, #56	; 0x38
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	3304      	adds	r3, #4
 8002a7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2201      	movs	r2, #1
 8002a92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a94:	7afb      	ldrb	r3, [r7, #11]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6979      	ldr	r1, [r7, #20]
 8002ac6:	f001 fe6d 	bl	80047a4 <USB_EP0StartXfer>
 8002aca:	e008      	b.n	8002ade <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6979      	ldr	r1, [r7, #20]
 8002ada:	f001 fc1b 	bl	8004314 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 020f 	and.w	r2, r3, #15
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d901      	bls.n	8002b06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e050      	b.n	8002ba8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	da0f      	bge.n	8002b2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	3338      	adds	r3, #56	; 0x38
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	3304      	adds	r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	705a      	strb	r2, [r3, #1]
 8002b2c:	e00d      	b.n	8002b4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_PCD_EP_SetStall+0x82>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e01e      	b.n	8002ba8 <HAL_PCD_EP_SetStall+0xc0>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 f8ab 	bl	8004cd4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	b2d9      	uxtb	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f002 fa9b 	bl	80050d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 020f 	and.w	r2, r3, #15
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d901      	bls.n	8002bce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e042      	b.n	8002c54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da0f      	bge.n	8002bf6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 020f 	and.w	r2, r3, #15
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	3338      	adds	r3, #56	; 0x38
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	3304      	adds	r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	705a      	strb	r2, [r3, #1]
 8002bf4:	e00f      	b.n	8002c16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_PCD_EP_ClrStall+0x86>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e00e      	b.n	8002c54 <HAL_PCD_EP_ClrStall+0xa4>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f002 f8b3 	bl	8004db0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	da0c      	bge.n	8002c8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	f003 020f 	and.w	r2, r3, #15
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	3338      	adds	r3, #56	; 0x38
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	3304      	adds	r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e00c      	b.n	8002ca4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 fed2 	bl	8004a54 <USB_EPStopXfer>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b08a      	sub	sp, #40	; 0x28
 8002cc2:	af02      	add	r7, sp, #8
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3338      	adds	r3, #56	; 0x38
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d901      	bls.n	8002cf6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06c      	b.n	8002dd0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d902      	bls.n	8002d12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3303      	adds	r3, #3
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d1a:	e02b      	b.n	8002d74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d902      	bls.n	8002d38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	3303      	adds	r3, #3
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6919      	ldr	r1, [r3, #16]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4603      	mov	r3, r0
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f001 ff26 	bl	8004ba8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	441a      	add	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	441a      	add	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d809      	bhi.n	8002d9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1a      	ldr	r2, [r3, #32]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d203      	bcs.n	8002d9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1be      	bne.n	8002d1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d811      	bhi.n	8002dce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	2201      	movs	r2, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	6939      	ldr	r1, [r7, #16]
 8002dc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dca:	4013      	ands	r3, r2
 8002dcc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	333c      	adds	r3, #60	; 0x3c
 8002df0:	3304      	adds	r3, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d17b      	bne.n	8002f06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d015      	beq.n	8002e44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4a61      	ldr	r2, [pc, #388]	; (8002fa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	f240 80b9 	bls.w	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80b3 	beq.w	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e40:	6093      	str	r3, [r2, #8]
 8002e42:	e0a7      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	6093      	str	r3, [r2, #8]
 8002e60:	e098      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 8093 	bne.w	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	4a4b      	ldr	r2, [pc, #300]	; (8002fa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d90f      	bls.n	8002e96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e92:	6093      	str	r3, [r2, #8]
 8002e94:	e07e      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	0159      	lsls	r1, r3, #5
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d114      	bne.n	8002ef8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	f002 f8f6 	bl	80050d4 <USB_EP0_OutStart>
 8002ee8:	e006      	b.n	8002ef8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	441a      	add	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f008 fa28 	bl	800b354 <HAL_PCD_DataOutStageCallback>
 8002f04:	e046      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d124      	bne.n	8002f58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2a:	6093      	str	r3, [r2, #8]
 8002f2c:	e032      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f44:	461a      	mov	r2, r3
 8002f46:	2320      	movs	r3, #32
 8002f48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f008 f9ff 	bl	800b354 <HAL_PCD_DataOutStageCallback>
 8002f56:	e01d      	b.n	8002f94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d114      	bne.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f80:	461a      	mov	r2, r3
 8002f82:	2100      	movs	r1, #0
 8002f84:	f002 f8a6 	bl	80050d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f008 f9e0 	bl	800b354 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	4f54300a 	.word	0x4f54300a
 8002fa4:	4f54310a 	.word	0x4f54310a

08002fa8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	333c      	adds	r3, #60	; 0x3c
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a15      	ldr	r2, [pc, #84]	; (8003030 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d90e      	bls.n	8002ffc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f008 f997 	bl	800b330 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <PCD_EP_OutSetupPacket_int+0x88>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d90c      	bls.n	8003024 <PCD_EP_OutSetupPacket_int+0x7c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800301c:	461a      	mov	r2, r3
 800301e:	2101      	movs	r1, #1
 8003020:	f002 f858 	bl	80050d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	4f54300a 	.word	0x4f54300a

08003034 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
 8003040:	4613      	mov	r3, r2
 8003042:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003052:	883b      	ldrh	r3, [r7, #0]
 8003054:	0419      	lsls	r1, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	430a      	orrs	r2, r1
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
 8003060:	e028      	b.n	80030b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	4413      	add	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e00d      	b.n	8003092 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	3340      	adds	r3, #64	; 0x40
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	4413      	add	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	3301      	adds	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	3b01      	subs	r3, #1
 8003098:	429a      	cmp	r2, r3
 800309a:	d3ec      	bcc.n	8003076 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800309c:	883b      	ldrh	r3, [r7, #0]
 800309e:	0418      	lsls	r0, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4302      	orrs	r2, r0
 80030ac:	3340      	adds	r3, #64	; 0x40
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e267      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d075      	beq.n	8003206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800311a:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d00c      	beq.n	8003140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003126:	4b85      	ldr	r3, [pc, #532]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312e:	2b08      	cmp	r3, #8
 8003130:	d112      	bne.n	8003158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003132:	4b82      	ldr	r3, [pc, #520]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313e:	d10b      	bne.n	8003158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	4b7e      	ldr	r3, [pc, #504]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d05b      	beq.n	8003204 <HAL_RCC_OscConfig+0x108>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d157      	bne.n	8003204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e242      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d106      	bne.n	8003170 <HAL_RCC_OscConfig+0x74>
 8003162:	4b76      	ldr	r3, [pc, #472]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a75      	ldr	r2, [pc, #468]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xb0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x98>
 800317a:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6f      	ldr	r2, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b6d      	ldr	r3, [pc, #436]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6c      	ldr	r2, [pc, #432]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xb0>
 8003194:	4b69      	ldr	r3, [pc, #420]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a68      	ldr	r2, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b66      	ldr	r3, [pc, #408]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fd fce0 	bl	8000b78 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fd fcdc 	bl	8000b78 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e207      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b5b      	ldr	r3, [pc, #364]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xc0>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fd fccc 	bl	8000b78 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fd fcc8 	bl	8000b78 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1f3      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b51      	ldr	r3, [pc, #324]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0xe8>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003212:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321e:	4b47      	ldr	r3, [pc, #284]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322a:	4b44      	ldr	r3, [pc, #272]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x152>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1c7      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b3b      	ldr	r3, [pc, #236]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4937      	ldr	r1, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e03a      	b.n	80032da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_RCC_OscConfig+0x244>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fd fc81 	bl	8000b78 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327a:	f7fd fc7d 	bl	8000b78 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1a8      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <HAL_RCC_OscConfig+0x240>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4925      	ldr	r1, [pc, #148]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_RCC_OscConfig+0x244>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fd fc60 	bl	8000b78 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fd fc5c 	bl	8000b78 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e187      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d036      	beq.n	8003354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_RCC_OscConfig+0x248>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fd fc40 	bl	8000b78 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fc:	f7fd fc3c 	bl	8000b78 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e167      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_OscConfig+0x240>)
 8003310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x200>
 800331a:	e01b      	b.n	8003354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_OscConfig+0x248>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7fd fc29 	bl	8000b78 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	e00e      	b.n	8003348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332a:	f7fd fc25 	bl	8000b78 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d907      	bls.n	8003348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e150      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
 800333c:	40023800 	.word	0x40023800
 8003340:	42470000 	.word	0x42470000
 8003344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800334a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1ea      	bne.n	800332a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8097 	beq.w	8003490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003366:	4b81      	ldr	r3, [pc, #516]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	4b7d      	ldr	r3, [pc, #500]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4a7c      	ldr	r2, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	; 0x40
 8003382:	4b7a      	ldr	r3, [pc, #488]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003392:	4b77      	ldr	r3, [pc, #476]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d118      	bne.n	80033d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800339e:	4b74      	ldr	r3, [pc, #464]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a73      	ldr	r2, [pc, #460]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 80033a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033aa:	f7fd fbe5 	bl	8000b78 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b2:	f7fd fbe1 	bl	8000b78 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e10c      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_OscConfig+0x474>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d106      	bne.n	80033e6 <HAL_RCC_OscConfig+0x2ea>
 80033d8:	4b64      	ldr	r3, [pc, #400]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a63      	ldr	r2, [pc, #396]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	e01c      	b.n	8003420 <HAL_RCC_OscConfig+0x324>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x30c>
 80033ee:	4b5f      	ldr	r3, [pc, #380]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a5e      	ldr	r2, [pc, #376]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	4b5c      	ldr	r3, [pc, #368]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a5b      	ldr	r2, [pc, #364]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0x324>
 8003408:	4b58      	ldr	r3, [pc, #352]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	4b55      	ldr	r3, [pc, #340]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a54      	ldr	r2, [pc, #336]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800341a:	f023 0304 	bic.w	r3, r3, #4
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d015      	beq.n	8003454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fd fba6 	bl	8000b78 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342e:	e00a      	b.n	8003446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fd fba2 	bl	8000b78 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0cb      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	4b49      	ldr	r3, [pc, #292]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ee      	beq.n	8003430 <HAL_RCC_OscConfig+0x334>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7fd fb90 	bl	8000b78 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7fd fb8c 	bl	8000b78 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e0b5      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ee      	bne.n	800345c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	4a38      	ldr	r2, [pc, #224]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80a1 	beq.w	80035dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_OscConfig+0x470>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d05c      	beq.n	8003560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d141      	bne.n	8003532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ae:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_RCC_OscConfig+0x478>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fd fb60 	bl	8000b78 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fd fb5c 	bl	8000b78 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e087      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x470>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	3b01      	subs	r3, #1
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	061b      	lsls	r3, r3, #24
 80034fe:	491b      	ldr	r1, [pc, #108]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_RCC_OscConfig+0x478>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fd fb35 	bl	8000b78 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003512:	f7fd fb31 	bl	8000b78 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e05c      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x416>
 8003530:	e054      	b.n	80035dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <HAL_RCC_OscConfig+0x478>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fd fb1e 	bl	8000b78 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003540:	f7fd fb1a 	bl	8000b78 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e045      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x470>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x444>
 800355e:	e03d      	b.n	80035dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e038      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
 800356c:	40023800 	.word	0x40023800
 8003570:	40007000 	.word	0x40007000
 8003574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <HAL_RCC_OscConfig+0x4ec>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d028      	beq.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d121      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d11a      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035a8:	4013      	ands	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d111      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	085b      	lsrs	r3, r3, #1
 80035c0:	3b01      	subs	r3, #1
 80035c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800

080035ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0cc      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d90c      	bls.n	8003628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b8      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800364a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a52      	ldr	r2, [pc, #328]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	494d      	ldr	r1, [pc, #308]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d044      	beq.n	800370c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d119      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e067      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4934      	ldr	r1, [pc, #208]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036dc:	f7fd fa4c 	bl	8000b78 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7fd fa48 	bl	8000b78 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e04f      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 020c 	and.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	429a      	cmp	r2, r3
 800370a:	d1eb      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d20c      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e032      	b.n	800379a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4916      	ldr	r1, [pc, #88]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	490e      	ldr	r1, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003772:	f000 f821 	bl	80037b8 <HAL_RCC_GetSysClockFreq>
 8003776:	4602      	mov	r2, r0
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	490a      	ldr	r1, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	5ccb      	ldrb	r3, [r1, r3]
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd f9ac 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023c00 	.word	0x40023c00
 80037a8:	40023800 	.word	0x40023800
 80037ac:	0800bb98 	.word	0x0800bb98
 80037b0:	20000000 	.word	0x20000000
 80037b4:	20000004 	.word	0x20000004

080037b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037bc:	b090      	sub	sp, #64	; 0x40
 80037be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
 80037c4:	2300      	movs	r3, #0
 80037c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c8:	2300      	movs	r3, #0
 80037ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d00d      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x40>
 80037dc:	2b08      	cmp	r3, #8
 80037de:	f200 80a1 	bhi.w	8003924 <HAL_RCC_GetSysClockFreq+0x16c>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x34>
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ea:	e09b      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b53      	ldr	r3, [pc, #332]	; (800393c <HAL_RCC_GetSysClockFreq+0x184>)
 80037ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037f0:	e09b      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037f2:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_GetSysClockFreq+0x188>)
 80037f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037f6:	e098      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f8:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <HAL_RCC_GetSysClockFreq+0x180>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003802:	4b4d      	ldr	r3, [pc, #308]	; (8003938 <HAL_RCC_GetSysClockFreq+0x180>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d028      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380e:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <HAL_RCC_GetSysClockFreq+0x180>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	099b      	lsrs	r3, r3, #6
 8003814:	2200      	movs	r2, #0
 8003816:	623b      	str	r3, [r7, #32]
 8003818:	627a      	str	r2, [r7, #36]	; 0x24
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003820:	2100      	movs	r1, #0
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_GetSysClockFreq+0x188>)
 8003824:	fb03 f201 	mul.w	r2, r3, r1
 8003828:	2300      	movs	r3, #0
 800382a:	fb00 f303 	mul.w	r3, r0, r3
 800382e:	4413      	add	r3, r2
 8003830:	4a43      	ldr	r2, [pc, #268]	; (8003940 <HAL_RCC_GetSysClockFreq+0x188>)
 8003832:	fba0 1202 	umull	r1, r2, r0, r2
 8003836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003838:	460a      	mov	r2, r1
 800383a:	62ba      	str	r2, [r7, #40]	; 0x28
 800383c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800383e:	4413      	add	r3, r2
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003844:	2200      	movs	r2, #0
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	61fa      	str	r2, [r7, #28]
 800384a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800384e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003852:	f7fc fcc5 	bl	80001e0 <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4613      	mov	r3, r2
 800385c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385e:	e053      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003860:	4b35      	ldr	r3, [pc, #212]	; (8003938 <HAL_RCC_GetSysClockFreq+0x180>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	2200      	movs	r2, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	617a      	str	r2, [r7, #20]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003872:	f04f 0b00 	mov.w	fp, #0
 8003876:	4652      	mov	r2, sl
 8003878:	465b      	mov	r3, fp
 800387a:	f04f 0000 	mov.w	r0, #0
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	0159      	lsls	r1, r3, #5
 8003884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003888:	0150      	lsls	r0, r2, #5
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	ebb2 080a 	subs.w	r8, r2, sl
 8003892:	eb63 090b 	sbc.w	r9, r3, fp
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038aa:	ebb2 0408 	subs.w	r4, r2, r8
 80038ae:	eb63 0509 	sbc.w	r5, r3, r9
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	00eb      	lsls	r3, r5, #3
 80038bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038c0:	00e2      	lsls	r2, r4, #3
 80038c2:	4614      	mov	r4, r2
 80038c4:	461d      	mov	r5, r3
 80038c6:	eb14 030a 	adds.w	r3, r4, sl
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	eb45 030b 	adc.w	r3, r5, fp
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038de:	4629      	mov	r1, r5
 80038e0:	028b      	lsls	r3, r1, #10
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e8:	4621      	mov	r1, r4
 80038ea:	028a      	lsls	r2, r1, #10
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	2200      	movs	r2, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	60fa      	str	r2, [r7, #12]
 80038f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038fc:	f7fc fc70 	bl	80001e0 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4613      	mov	r3, r2
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_GetSysClockFreq+0x180>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	3301      	adds	r3, #1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003922:	e002      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetSysClockFreq+0x184>)
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800392c:	4618      	mov	r0, r3
 800392e:	3740      	adds	r7, #64	; 0x40
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800
 800393c:	00f42400 	.word	0x00f42400
 8003940:	017d7840 	.word	0x017d7840

08003944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <HAL_RCC_GetHCLKFreq+0x14>)
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800395c:	b084      	sub	sp, #16
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	f107 001c 	add.w	r0, r7, #28
 800396a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	2b01      	cmp	r3, #1
 8003972:	d122      	bne.n	80039ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800399c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f001 fbee 	bl	8005190 <USB_CoreReset>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e01a      	b.n	80039f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f001 fbe2 	bl	8005190 <USB_CoreReset>
 80039cc:	4603      	mov	r3, r0
 80039ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
 80039e2:	e005      	b.n	80039f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d10b      	bne.n	8003a0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f043 0206 	orr.w	r2, r3, #6
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a1a:	b004      	add	sp, #16
 8003a1c:	4770      	bx	lr
	...

08003a20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d165      	bne.n	8003b00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4a41      	ldr	r2, [pc, #260]	; (8003b3c <USB_SetTurnaroundTime+0x11c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d906      	bls.n	8003a4a <USB_SetTurnaroundTime+0x2a>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4a40      	ldr	r2, [pc, #256]	; (8003b40 <USB_SetTurnaroundTime+0x120>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d202      	bcs.n	8003a4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a44:	230f      	movs	r3, #15
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e062      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4a3c      	ldr	r2, [pc, #240]	; (8003b40 <USB_SetTurnaroundTime+0x120>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d306      	bcc.n	8003a60 <USB_SetTurnaroundTime+0x40>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4a3b      	ldr	r2, [pc, #236]	; (8003b44 <USB_SetTurnaroundTime+0x124>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d202      	bcs.n	8003a60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a5a:	230e      	movs	r3, #14
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e057      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4a38      	ldr	r2, [pc, #224]	; (8003b44 <USB_SetTurnaroundTime+0x124>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d306      	bcc.n	8003a76 <USB_SetTurnaroundTime+0x56>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4a37      	ldr	r2, [pc, #220]	; (8003b48 <USB_SetTurnaroundTime+0x128>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d202      	bcs.n	8003a76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a70:	230d      	movs	r3, #13
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	e04c      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4a33      	ldr	r2, [pc, #204]	; (8003b48 <USB_SetTurnaroundTime+0x128>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d306      	bcc.n	8003a8c <USB_SetTurnaroundTime+0x6c>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4a32      	ldr	r2, [pc, #200]	; (8003b4c <USB_SetTurnaroundTime+0x12c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d802      	bhi.n	8003a8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a86:	230c      	movs	r3, #12
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e041      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4a2f      	ldr	r2, [pc, #188]	; (8003b4c <USB_SetTurnaroundTime+0x12c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d906      	bls.n	8003aa2 <USB_SetTurnaroundTime+0x82>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4a2e      	ldr	r2, [pc, #184]	; (8003b50 <USB_SetTurnaroundTime+0x130>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d802      	bhi.n	8003aa2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a9c:	230b      	movs	r3, #11
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e036      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <USB_SetTurnaroundTime+0x130>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d906      	bls.n	8003ab8 <USB_SetTurnaroundTime+0x98>
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4a29      	ldr	r2, [pc, #164]	; (8003b54 <USB_SetTurnaroundTime+0x134>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d802      	bhi.n	8003ab8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ab2:	230a      	movs	r3, #10
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e02b      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <USB_SetTurnaroundTime+0x134>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d906      	bls.n	8003ace <USB_SetTurnaroundTime+0xae>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4a25      	ldr	r2, [pc, #148]	; (8003b58 <USB_SetTurnaroundTime+0x138>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d202      	bcs.n	8003ace <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ac8:	2309      	movs	r3, #9
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	e020      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4a21      	ldr	r2, [pc, #132]	; (8003b58 <USB_SetTurnaroundTime+0x138>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d306      	bcc.n	8003ae4 <USB_SetTurnaroundTime+0xc4>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <USB_SetTurnaroundTime+0x13c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d802      	bhi.n	8003ae4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ade:	2308      	movs	r3, #8
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e015      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <USB_SetTurnaroundTime+0x13c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d906      	bls.n	8003afa <USB_SetTurnaroundTime+0xda>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <USB_SetTurnaroundTime+0x140>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d202      	bcs.n	8003afa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003af4:	2307      	movs	r3, #7
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e00a      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003afa:	2306      	movs	r3, #6
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e007      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b06:	2309      	movs	r3, #9
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e001      	b.n	8003b10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b0c:	2309      	movs	r3, #9
 8003b0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	00d8acbf 	.word	0x00d8acbf
 8003b40:	00e4e1c0 	.word	0x00e4e1c0
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	01067380 	.word	0x01067380
 8003b4c:	011a499f 	.word	0x011a499f
 8003b50:	01312cff 	.word	0x01312cff
 8003b54:	014ca43f 	.word	0x014ca43f
 8003b58:	016e3600 	.word	0x016e3600
 8003b5c:	01a6ab1f 	.word	0x01a6ab1f
 8003b60:	01e84800 	.word	0x01e84800

08003b64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f043 0201 	orr.w	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d115      	bne.n	8003bf6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f7fc ffda 	bl	8000b90 <HAL_Delay>
      ms++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3301      	adds	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 fa45 	bl	8005072 <USB_GetMode>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d01e      	beq.n	8003c2c <USB_SetCurrentMode+0x84>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b31      	cmp	r3, #49	; 0x31
 8003bf2:	d9f0      	bls.n	8003bd6 <USB_SetCurrentMode+0x2e>
 8003bf4:	e01a      	b.n	8003c2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d115      	bne.n	8003c28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7fc ffc1 	bl	8000b90 <HAL_Delay>
      ms++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3301      	adds	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 fa2c 	bl	8005072 <USB_GetMode>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <USB_SetCurrentMode+0x84>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b31      	cmp	r3, #49	; 0x31
 8003c24:	d9f0      	bls.n	8003c08 <USB_SetCurrentMode+0x60>
 8003c26:	e001      	b.n	8003c2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e005      	b.n	8003c38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b32      	cmp	r3, #50	; 0x32
 8003c30:	d101      	bne.n	8003c36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c40:	b084      	sub	sp, #16
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e009      	b.n	8003c74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3340      	adds	r3, #64	; 0x40
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3301      	adds	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b0e      	cmp	r3, #14
 8003c78:	d9f2      	bls.n	8003c60 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d11c      	bne.n	8003cba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c8e:	f043 0302 	orr.w	r3, r3, #2
 8003c92:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
 8003cb8:	e00b      	b.n	8003cd2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cec:	461a      	mov	r2, r3
 8003cee:	680b      	ldr	r3, [r1, #0]
 8003cf0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10c      	bne.n	8003d12 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d104      	bne.n	8003d08 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003cfe:	2100      	movs	r1, #0
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f965 	bl	8003fd0 <USB_SetDevSpeed>
 8003d06:	e008      	b.n	8003d1a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d08:	2101      	movs	r1, #1
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f960 	bl	8003fd0 <USB_SetDevSpeed>
 8003d10:	e003      	b.n	8003d1a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d12:	2103      	movs	r1, #3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f95b 	bl	8003fd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d1a:	2110      	movs	r1, #16
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f8f3 	bl	8003f08 <USB_FlushTxFifo>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f91f 	bl	8003f70 <USB_FlushRxFifo>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d42:	461a      	mov	r2, r3
 8003d44:	2300      	movs	r3, #0
 8003d46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2300      	movs	r3, #0
 8003d52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	e043      	b.n	8003dee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d7c:	d118      	bne.n	8003db0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10a      	bne.n	8003d9a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d90:	461a      	mov	r2, r3
 8003d92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	e013      	b.n	8003dc2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da6:	461a      	mov	r2, r3
 8003da8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e008      	b.n	8003dc2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de0:	461a      	mov	r2, r3
 8003de2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003de6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3301      	adds	r3, #1
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d3b7      	bcc.n	8003d66 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	e043      	b.n	8003e84 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e12:	d118      	bne.n	8003e46 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e26:	461a      	mov	r2, r3
 8003e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	e013      	b.n	8003e58 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	e008      	b.n	8003e58 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e52:	461a      	mov	r2, r3
 8003e54:	2300      	movs	r3, #0
 8003e56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	461a      	mov	r2, r3
 8003e66:	2300      	movs	r3, #0
 8003e68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e76:	461a      	mov	r2, r3
 8003e78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3301      	adds	r3, #1
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3b7      	bcc.n	8003dfc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003eac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f043 0210 	orr.w	r2, r3, #16
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699a      	ldr	r2, [r3, #24]
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <USB_DevInit+0x2c4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f043 0208 	orr.w	r2, r3, #8
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d107      	bne.n	8003ef4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f00:	b004      	add	sp, #16
 8003f02:	4770      	bx	lr
 8003f04:	803c3800 	.word	0x803c3800

08003f08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <USB_FlushTxFifo+0x64>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d901      	bls.n	8003f28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e01b      	b.n	8003f60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	daf2      	bge.n	8003f16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	019b      	lsls	r3, r3, #6
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3301      	adds	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <USB_FlushTxFifo+0x64>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e006      	b.n	8003f60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d0f0      	beq.n	8003f40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	00030d40 	.word	0x00030d40

08003f70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <USB_FlushRxFifo+0x5c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e018      	b.n	8003fc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	daf2      	bge.n	8003f7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <USB_FlushRxFifo+0x5c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e006      	b.n	8003fc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d0f0      	beq.n	8003fa0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	00030d40 	.word	0x00030d40

08003fd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004002:	b480      	push	{r7}
 8004004:	b087      	sub	sp, #28
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0306 	and.w	r3, r3, #6
 800401a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d102      	bne.n	8004028 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]
 8004026:	e00a      	b.n	800403e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d002      	beq.n	8004034 <USB_GetDevSpeed+0x32>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b06      	cmp	r3, #6
 8004032:	d102      	bne.n	800403a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004034:	2302      	movs	r3, #2
 8004036:	75fb      	strb	r3, [r7, #23]
 8004038:	e001      	b.n	800403e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800403a:	230f      	movs	r3, #15
 800403c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004040:	4618      	mov	r0, r3
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d13a      	bne.n	80040de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	2101      	movs	r1, #1
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	b29b      	uxth	r3, r3
 8004080:	68f9      	ldr	r1, [r7, #12]
 8004082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004086:	4313      	orrs	r3, r2
 8004088:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d155      	bne.n	800414c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	791b      	ldrb	r3, [r3, #4]
 80040ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	059b      	lsls	r3, r3, #22
 80040c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040c4:	4313      	orrs	r3, r2
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	e036      	b.n	800414c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	2101      	movs	r1, #1
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	041b      	lsls	r3, r3, #16
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11a      	bne.n	800414c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	791b      	ldrb	r3, [r3, #4]
 8004130:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004132:	430b      	orrs	r3, r1
 8004134:	4313      	orrs	r3, r2
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	0151      	lsls	r1, r2, #5
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	440a      	add	r2, r1
 800413e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d161      	bne.n	800423c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800418a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800418e:	d11f      	bne.n	80041d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	2101      	movs	r1, #1
 80041e2:	fa01 f303 	lsl.w	r3, r1, r3
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	68f9      	ldr	r1, [r7, #12]
 80041ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f0:	4013      	ands	r3, r2
 80041f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	b29b      	uxth	r3, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004214:	4013      	ands	r3, r2
 8004216:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	0159      	lsls	r1, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	440b      	add	r3, r1
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	4619      	mov	r1, r3
 8004234:	4b35      	ldr	r3, [pc, #212]	; (800430c <USB_DeactivateEndpoint+0x1b0>)
 8004236:	4013      	ands	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
 800423a:	e060      	b.n	80042fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800424e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004252:	d11f      	bne.n	8004294 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800426e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004272:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	440a      	add	r2, r1
 800428a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800428e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004292:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	2101      	movs	r1, #1
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	43db      	mvns	r3, r3
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042b4:	4013      	ands	r3, r2
 80042b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	2101      	movs	r1, #1
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	43db      	mvns	r3, r3
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d8:	4013      	ands	r3, r2
 80042da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	0159      	lsls	r1, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	440b      	add	r3, r1
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	4619      	mov	r1, r3
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <USB_DeactivateEndpoint+0x1b4>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	ec337800 	.word	0xec337800
 8004310:	eff37800 	.word	0xeff37800

08004314 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 815c 	bne.w	80045ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d132      	bne.n	80043a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004358:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800435c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439c:	0cdb      	lsrs	r3, r3, #19
 800439e:	04db      	lsls	r3, r3, #19
 80043a0:	6113      	str	r3, [r2, #16]
 80043a2:	e074      	b.n	800448e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043be:	0cdb      	lsrs	r3, r3, #19
 80043c0:	04db      	lsls	r3, r3, #19
 80043c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6999      	ldr	r1, [r3, #24]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	440b      	add	r3, r1
 8004400:	1e59      	subs	r1, r3, #1
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	fbb1 f3f3 	udiv	r3, r1, r3
 800440a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800440c:	4b9d      	ldr	r3, [pc, #628]	; (8004684 <USB_EPStartXfer+0x370>)
 800440e:	400b      	ands	r3, r1
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	0148      	lsls	r0, r1, #5
 8004414:	69f9      	ldr	r1, [r7, #28]
 8004416:	4401      	add	r1, r0
 8004418:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800441c:	4313      	orrs	r3, r2
 800441e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442c:	691a      	ldr	r2, [r3, #16]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004436:	69b9      	ldr	r1, [r7, #24]
 8004438:	0148      	lsls	r0, r1, #5
 800443a:	69f9      	ldr	r1, [r7, #28]
 800443c:	4401      	add	r1, r0
 800443e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004442:	4313      	orrs	r3, r2
 8004444:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	791b      	ldrb	r3, [r3, #4]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d11f      	bne.n	800448e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	440a      	add	r2, r1
 8004464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004468:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800446c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	0151      	lsls	r1, r2, #5
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	440a      	add	r2, r1
 8004484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004488:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800448c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d14b      	bne.n	800452c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	791b      	ldrb	r3, [r3, #4]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d128      	bne.n	800450a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d110      	bne.n	80044ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e00f      	b.n	800450a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004508:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	0151      	lsls	r1, r2, #5
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	440a      	add	r2, r1
 8004520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004524:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e133      	b.n	8004794 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800454a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	791b      	ldrb	r3, [r3, #4]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d015      	beq.n	8004580 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 811b 	beq.w	8004794 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	2101      	movs	r1, #1
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	69f9      	ldr	r1, [r7, #28]
 8004576:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800457a:	4313      	orrs	r3, r2
 800457c:	634b      	str	r3, [r1, #52]	; 0x34
 800457e:	e109      	b.n	8004794 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d110      	bne.n	80045b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e00f      	b.n	80045d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6919      	ldr	r1, [r3, #16]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	b298      	uxth	r0, r3
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	4603      	mov	r3, r0
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fade 	bl	8004ba8 <USB_WritePacket>
 80045ec:	e0d2      	b.n	8004794 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004608:	0cdb      	lsrs	r3, r3, #19
 800460a:	04db      	lsls	r3, r3, #19
 800460c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004628:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800462c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004630:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d126      	bne.n	8004688 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004650:	69b9      	ldr	r1, [r7, #24]
 8004652:	0148      	lsls	r0, r1, #5
 8004654:	69f9      	ldr	r1, [r7, #28]
 8004656:	4401      	add	r1, r0
 8004658:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800465c:	4313      	orrs	r3, r2
 800465e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800467e:	6113      	str	r3, [r2, #16]
 8004680:	e03a      	b.n	80046f8 <USB_EPStartXfer+0x3e4>
 8004682:	bf00      	nop
 8004684:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4413      	add	r3, r2
 8004692:	1e5a      	subs	r2, r3, #1
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	8afa      	ldrh	r2, [r7, #22]
 80046a4:	fb03 f202 	mul.w	r2, r3, r2
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	8afb      	ldrh	r3, [r7, #22]
 80046bc:	04d9      	lsls	r1, r3, #19
 80046be:	4b38      	ldr	r3, [pc, #224]	; (80047a0 <USB_EPStartXfer+0x48c>)
 80046c0:	400b      	ands	r3, r1
 80046c2:	69b9      	ldr	r1, [r7, #24]
 80046c4:	0148      	lsls	r0, r1, #5
 80046c6:	69f9      	ldr	r1, [r7, #28]
 80046c8:	4401      	add	r1, r0
 80046ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046ce:	4313      	orrs	r3, r2
 80046d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e8:	69b9      	ldr	r1, [r7, #24]
 80046ea:	0148      	lsls	r0, r1, #5
 80046ec:	69f9      	ldr	r1, [r7, #28]
 80046ee:	4401      	add	r1, r0
 80046f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046f4:	4313      	orrs	r3, r2
 80046f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10d      	bne.n	800471a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6919      	ldr	r1, [r3, #16]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	460a      	mov	r2, r1
 8004718:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	791b      	ldrb	r3, [r3, #4]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d128      	bne.n	8004774 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d110      	bne.n	8004754 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e00f      	b.n	8004774 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800476e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004772:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800478e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	1ff80000 	.word	0x1ff80000

080047a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	4613      	mov	r3, r2
 80047b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	f040 80ce 	bne.w	8004962 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d132      	bne.n	8004834 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800480c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	440a      	add	r2, r1
 8004828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482c:	0cdb      	lsrs	r3, r3, #19
 800482e:	04db      	lsls	r3, r3, #19
 8004830:	6113      	str	r3, [r2, #16]
 8004832:	e04e      	b.n	80048d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484e:	0cdb      	lsrs	r3, r3, #19
 8004850:	04db      	lsls	r3, r3, #19
 8004852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	0151      	lsls	r1, r2, #5
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	440a      	add	r2, r1
 800486a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004872:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004876:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	429a      	cmp	r2, r3
 8004882:	d903      	bls.n	800488c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	0151      	lsls	r1, r2, #5
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	440a      	add	r2, r1
 80048a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c2:	6939      	ldr	r1, [r7, #16]
 80048c4:	0148      	lsls	r0, r1, #5
 80048c6:	6979      	ldr	r1, [r7, #20]
 80048c8:	4401      	add	r1, r0
 80048ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048ce:	4313      	orrs	r3, r2
 80048d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d11e      	bne.n	8004916 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d009      	beq.n	80048f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	461a      	mov	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	440a      	add	r2, r1
 800490a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	e097      	b.n	8004a46 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	0151      	lsls	r1, r2, #5
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	440a      	add	r2, r1
 800492c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004930:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004934:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8083 	beq.w	8004a46 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	2101      	movs	r1, #1
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	6979      	ldr	r1, [r7, #20]
 8004958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800495c:	4313      	orrs	r3, r2
 800495e:	634b      	str	r3, [r1, #52]	; 0x34
 8004960:	e071      	b.n	8004a46 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800497c:	0cdb      	lsrs	r3, r3, #19
 800497e:	04db      	lsls	r3, r3, #19
 8004980:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800499c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f4:	6939      	ldr	r1, [r7, #16]
 80049f6:	0148      	lsls	r0, r1, #5
 80049f8:	6979      	ldr	r1, [r7, #20]
 80049fa:	4401      	add	r1, r0
 80049fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a00:	4313      	orrs	r3, r2
 8004a02:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10d      	bne.n	8004a26 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	6919      	ldr	r1, [r3, #16]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	460a      	mov	r2, r1
 8004a24:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	0151      	lsls	r1, r2, #5
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	440a      	add	r2, r1
 8004a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d14a      	bne.n	8004b08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a8a:	f040 8086 	bne.w	8004b9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ab0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ad4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d902      	bls.n	8004aec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8004aea:	e056      	b.n	8004b9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b04:	d0e7      	beq.n	8004ad6 <USB_EPStopXfer+0x82>
 8004b06:	e048      	b.n	8004b9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b20:	d13b      	bne.n	8004b9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	7812      	ldrb	r2, [r2, #0]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d902      	bls.n	8004b80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
          break;
 8004b7e:	e00c      	b.n	8004b9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b98:	d0e7      	beq.n	8004b6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	; 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	71fb      	strb	r3, [r7, #7]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004bc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d123      	bne.n	8004c16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004bce:	88bb      	ldrh	r3, [r7, #4]
 8004bd0:	3303      	adds	r3, #3
 8004bd2:	089b      	lsrs	r3, r3, #2
 8004bd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	e018      	b.n	8004c0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	031a      	lsls	r2, r3, #12
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be8:	461a      	mov	r2, r3
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3301      	adds	r3, #1
 8004c06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d3e2      	bcc.n	8004bdc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3724      	adds	r7, #36	; 0x24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b08b      	sub	sp, #44	; 0x2c
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	089b      	lsrs	r3, r3, #2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	623b      	str	r3, [r7, #32]
 8004c4e:	e014      	b.n	8004c7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	3301      	adds	r3, #1
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	3301      	adds	r3, #1
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	3301      	adds	r3, #1
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	3301      	adds	r3, #1
 8004c78:	623b      	str	r3, [r7, #32]
 8004c7a:	6a3a      	ldr	r2, [r7, #32]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d3e6      	bcc.n	8004c50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c82:	8bfb      	ldrh	r3, [r7, #30]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01e      	beq.n	8004cc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c92:	461a      	mov	r2, r3
 8004c94:	f107 0310 	add.w	r3, r7, #16
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	701a      	strb	r2, [r3, #0]
      i++;
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cba:	8bfb      	ldrh	r3, [r7, #30]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cc0:	8bfb      	ldrh	r3, [r7, #30]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1ea      	bne.n	8004c9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	372c      	adds	r7, #44	; 0x2c
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d12c      	bne.n	8004d4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	db12      	blt.n	8004d28 <USB_EPSetStall+0x54>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00f      	beq.n	8004d28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e02b      	b.n	8004da2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	db12      	blt.n	8004d82 <USB_EPSetStall+0xae>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00f      	beq.n	8004d82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004da0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d128      	bne.n	8004e1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	791b      	ldrb	r3, [r3, #4]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d003      	beq.n	8004dfc <USB_EPClearStall+0x4c>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	791b      	ldrb	r3, [r3, #4]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d138      	bne.n	8004e6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e027      	b.n	8004e6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d003      	beq.n	8004e4e <USB_EPClearStall+0x9e>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	791b      	ldrb	r3, [r3, #4]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d10f      	bne.n	8004e6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004eb0:	68f9      	ldr	r1, [r7, #12]
 8004eb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef6:	f023 0302 	bic.w	r3, r3, #2
 8004efa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f24:	f023 0303 	bic.w	r3, r3, #3
 8004f28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f38:	f043 0302 	orr.w	r3, r3, #2
 8004f3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4013      	ands	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f64:	68fb      	ldr	r3, [r7, #12]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	4013      	ands	r3, r2
 8004f94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	0c1b      	lsrs	r3, r3, #16
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	b29b      	uxth	r3, r3
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4013      	ands	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005008:	68bb      	ldr	r3, [r7, #8]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005016:	b480      	push	{r7}
 8005018:	b087      	sub	sp, #28
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005038:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	01db      	lsls	r3, r3, #7
 8005048:	b2db      	uxtb	r3, r3
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4013      	ands	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005064:	68bb      	ldr	r3, [r7, #8]
}
 8005066:	4618      	mov	r0, r3
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f003 0301 	and.w	r3, r3, #1
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050ac:	f023 0307 	bic.w	r3, r3, #7
 80050b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	460b      	mov	r3, r1
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	333c      	adds	r3, #60	; 0x3c
 80050ea:	3304      	adds	r3, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4a26      	ldr	r2, [pc, #152]	; (800518c <USB_EP0_OutStart+0xb8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d90a      	bls.n	800510e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005108:	d101      	bne.n	800510e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e037      	b.n	800517e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005128:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800512c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513c:	f043 0318 	orr.w	r3, r3, #24
 8005140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005150:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005154:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d10f      	bne.n	800517c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800517a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	4f54300a 	.word	0x4f54300a

08005190 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3301      	adds	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <USB_CoreReset+0x64>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e01b      	b.n	80051e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	daf2      	bge.n	800519c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f043 0201 	orr.w	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a09      	ldr	r2, [pc, #36]	; (80051f4 <USB_CoreReset+0x64>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e006      	b.n	80051e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d0f0      	beq.n	80051c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	00030d40 	.word	0x00030d40

080051f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005204:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005208:	f006 fb0e 	bl	800b828 <USBD_static_malloc>
 800520c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	32b0      	adds	r2, #176	; 0xb0
 800521e:	2100      	movs	r1, #0
 8005220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005224:	2302      	movs	r3, #2
 8005226:	e0d4      	b.n	80053d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005228:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800522c:	2100      	movs	r1, #0
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f006 fb72 	bl	800b918 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	32b0      	adds	r2, #176	; 0xb0
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	32b0      	adds	r2, #176	; 0xb0
 800524e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	7c1b      	ldrb	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d138      	bne.n	80052d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005260:	4b5e      	ldr	r3, [pc, #376]	; (80053dc <USBD_CDC_Init+0x1e4>)
 8005262:	7819      	ldrb	r1, [r3, #0]
 8005264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005268:	2202      	movs	r2, #2
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f006 f9b9 	bl	800b5e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005270:	4b5a      	ldr	r3, [pc, #360]	; (80053dc <USBD_CDC_Init+0x1e4>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	3324      	adds	r3, #36	; 0x24
 8005286:	2201      	movs	r2, #1
 8005288:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800528a:	4b55      	ldr	r3, [pc, #340]	; (80053e0 <USBD_CDC_Init+0x1e8>)
 800528c:	7819      	ldrb	r1, [r3, #0]
 800528e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005292:	2202      	movs	r2, #2
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f006 f9a4 	bl	800b5e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800529a:	4b51      	ldr	r3, [pc, #324]	; (80053e0 <USBD_CDC_Init+0x1e8>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	f003 020f 	and.w	r2, r3, #15
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052b2:	2201      	movs	r2, #1
 80052b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052b6:	4b4b      	ldr	r3, [pc, #300]	; (80053e4 <USBD_CDC_Init+0x1ec>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	f003 020f 	and.w	r2, r3, #15
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	3326      	adds	r3, #38	; 0x26
 80052cc:	2210      	movs	r2, #16
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	e035      	b.n	800533e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052d2:	4b42      	ldr	r3, [pc, #264]	; (80053dc <USBD_CDC_Init+0x1e4>)
 80052d4:	7819      	ldrb	r1, [r3, #0]
 80052d6:	2340      	movs	r3, #64	; 0x40
 80052d8:	2202      	movs	r2, #2
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f006 f981 	bl	800b5e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052e0:	4b3e      	ldr	r3, [pc, #248]	; (80053dc <USBD_CDC_Init+0x1e4>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	3324      	adds	r3, #36	; 0x24
 80052f6:	2201      	movs	r2, #1
 80052f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052fa:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <USBD_CDC_Init+0x1e8>)
 80052fc:	7819      	ldrb	r1, [r3, #0]
 80052fe:	2340      	movs	r3, #64	; 0x40
 8005300:	2202      	movs	r2, #2
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f006 f96d 	bl	800b5e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005308:	4b35      	ldr	r3, [pc, #212]	; (80053e0 <USBD_CDC_Init+0x1e8>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005320:	2201      	movs	r2, #1
 8005322:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005324:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <USBD_CDC_Init+0x1ec>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3326      	adds	r3, #38	; 0x26
 800533a:	2210      	movs	r2, #16
 800533c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800533e:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <USBD_CDC_Init+0x1ec>)
 8005340:	7819      	ldrb	r1, [r3, #0]
 8005342:	2308      	movs	r3, #8
 8005344:	2203      	movs	r2, #3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f006 f94b 	bl	800b5e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800534c:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <USBD_CDC_Init+0x1ec>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 020f 	and.w	r2, r3, #15
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	3324      	adds	r3, #36	; 0x24
 8005362:	2201      	movs	r2, #1
 8005364:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	33b0      	adds	r3, #176	; 0xb0
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800539c:	2302      	movs	r3, #2
 800539e:	e018      	b.n	80053d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	7c1b      	ldrb	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053a8:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <USBD_CDC_Init+0x1e8>)
 80053aa:	7819      	ldrb	r1, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f006 fa02 	bl	800b7c0 <USBD_LL_PrepareReceive>
 80053bc:	e008      	b.n	80053d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053be:	4b08      	ldr	r3, [pc, #32]	; (80053e0 <USBD_CDC_Init+0x1e8>)
 80053c0:	7819      	ldrb	r1, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053c8:	2340      	movs	r3, #64	; 0x40
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f006 f9f8 	bl	800b7c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000093 	.word	0x20000093
 80053e0:	20000094 	.word	0x20000094
 80053e4:	20000095 	.word	0x20000095

080053e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80053f4:	4b3a      	ldr	r3, [pc, #232]	; (80054e0 <USBD_CDC_DeInit+0xf8>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f006 f917 	bl	800b62e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005400:	4b37      	ldr	r3, [pc, #220]	; (80054e0 <USBD_CDC_DeInit+0xf8>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	f003 020f 	and.w	r2, r3, #15
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	3324      	adds	r3, #36	; 0x24
 8005416:	2200      	movs	r2, #0
 8005418:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800541a:	4b32      	ldr	r3, [pc, #200]	; (80054e4 <USBD_CDC_DeInit+0xfc>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f006 f904 	bl	800b62e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005426:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <USBD_CDC_DeInit+0xfc>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	f003 020f 	and.w	r2, r3, #15
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800543e:	2200      	movs	r2, #0
 8005440:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005442:	4b29      	ldr	r3, [pc, #164]	; (80054e8 <USBD_CDC_DeInit+0x100>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f006 f8f0 	bl	800b62e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800544e:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <USBD_CDC_DeInit+0x100>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f003 020f 	and.w	r2, r3, #15
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	3324      	adds	r3, #36	; 0x24
 8005464:	2200      	movs	r2, #0
 8005466:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005468:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <USBD_CDC_DeInit+0x100>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	3326      	adds	r3, #38	; 0x26
 800547e:	2200      	movs	r2, #0
 8005480:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	32b0      	adds	r2, #176	; 0xb0
 800548c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01f      	beq.n	80054d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	33b0      	adds	r3, #176	; 0xb0
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	32b0      	adds	r2, #176	; 0xb0
 80054b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f006 f9c4 	bl	800b844 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	32b0      	adds	r2, #176	; 0xb0
 80054c6:	2100      	movs	r1, #0
 80054c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000093 	.word	0x20000093
 80054e4:	20000094 	.word	0x20000094
 80054e8:	20000095 	.word	0x20000095

080054ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	32b0      	adds	r2, #176	; 0xb0
 8005500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005504:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005518:	2303      	movs	r3, #3
 800551a:	e0bf      	b.n	800569c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005524:	2b00      	cmp	r3, #0
 8005526:	d050      	beq.n	80055ca <USBD_CDC_Setup+0xde>
 8005528:	2b20      	cmp	r3, #32
 800552a:	f040 80af 	bne.w	800568c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	88db      	ldrh	r3, [r3, #6]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d03a      	beq.n	80055ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	b25b      	sxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	da1b      	bge.n	8005578 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	33b0      	adds	r3, #176	; 0xb0
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005556:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	88d2      	ldrh	r2, [r2, #6]
 800555c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	88db      	ldrh	r3, [r3, #6]
 8005562:	2b07      	cmp	r3, #7
 8005564:	bf28      	it	cs
 8005566:	2307      	movcs	r3, #7
 8005568:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	89fa      	ldrh	r2, [r7, #14]
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 fd89 	bl	8007088 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005576:	e090      	b.n	800569a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	785a      	ldrb	r2, [r3, #1]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	88db      	ldrh	r3, [r3, #6]
 8005586:	2b3f      	cmp	r3, #63	; 0x3f
 8005588:	d803      	bhi.n	8005592 <USBD_CDC_Setup+0xa6>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	88db      	ldrh	r3, [r3, #6]
 800558e:	b2da      	uxtb	r2, r3
 8005590:	e000      	b.n	8005594 <USBD_CDC_Setup+0xa8>
 8005592:	2240      	movs	r2, #64	; 0x40
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800559a:	6939      	ldr	r1, [r7, #16]
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80055a2:	461a      	mov	r2, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 fd9b 	bl	80070e0 <USBD_CtlPrepareRx>
      break;
 80055aa:	e076      	b.n	800569a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	33b0      	adds	r3, #176	; 0xb0
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	7850      	ldrb	r0, [r2, #1]
 80055c2:	2200      	movs	r2, #0
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	4798      	blx	r3
      break;
 80055c8:	e067      	b.n	800569a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b0b      	cmp	r3, #11
 80055d0:	d851      	bhi.n	8005676 <USBD_CDC_Setup+0x18a>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <USBD_CDC_Setup+0xec>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	08005609 	.word	0x08005609
 80055dc:	08005685 	.word	0x08005685
 80055e0:	08005677 	.word	0x08005677
 80055e4:	08005677 	.word	0x08005677
 80055e8:	08005677 	.word	0x08005677
 80055ec:	08005677 	.word	0x08005677
 80055f0:	08005677 	.word	0x08005677
 80055f4:	08005677 	.word	0x08005677
 80055f8:	08005677 	.word	0x08005677
 80055fc:	08005677 	.word	0x08005677
 8005600:	08005633 	.word	0x08005633
 8005604:	0800565d 	.word	0x0800565d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b03      	cmp	r3, #3
 8005612:	d107      	bne.n	8005624 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005614:	f107 030a 	add.w	r3, r7, #10
 8005618:	2202      	movs	r2, #2
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 fd33 	bl	8007088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005622:	e032      	b.n	800568a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fcbd 	bl	8006fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 800562c:	2303      	movs	r3, #3
 800562e:	75fb      	strb	r3, [r7, #23]
          break;
 8005630:	e02b      	b.n	800568a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b03      	cmp	r3, #3
 800563c:	d107      	bne.n	800564e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800563e:	f107 030d 	add.w	r3, r7, #13
 8005642:	2201      	movs	r2, #1
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fd1e 	bl	8007088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800564c:	e01d      	b.n	800568a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 fca8 	bl	8006fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005656:	2303      	movs	r3, #3
 8005658:	75fb      	strb	r3, [r7, #23]
          break;
 800565a:	e016      	b.n	800568a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b03      	cmp	r3, #3
 8005666:	d00f      	beq.n	8005688 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 fc9b 	bl	8006fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005670:	2303      	movs	r3, #3
 8005672:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005674:	e008      	b.n	8005688 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f001 fc94 	bl	8006fa6 <USBD_CtlError>
          ret = USBD_FAIL;
 800567e:	2303      	movs	r3, #3
 8005680:	75fb      	strb	r3, [r7, #23]
          break;
 8005682:	e002      	b.n	800568a <USBD_CDC_Setup+0x19e>
          break;
 8005684:	bf00      	nop
 8005686:	e008      	b.n	800569a <USBD_CDC_Setup+0x1ae>
          break;
 8005688:	bf00      	nop
      }
      break;
 800568a:	e006      	b.n	800569a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f001 fc89 	bl	8006fa6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005694:	2303      	movs	r3, #3
 8005696:	75fb      	strb	r3, [r7, #23]
      break;
 8005698:	bf00      	nop
  }

  return (uint8_t)ret;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80056b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	32b0      	adds	r2, #176	; 0xb0
 80056c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e065      	b.n	800579a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	32b0      	adds	r2, #176	; 0xb0
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	f003 020f 	and.w	r2, r3, #15
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	3318      	adds	r3, #24
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d02f      	beq.n	8005758 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	f003 020f 	and.w	r2, r3, #15
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	3318      	adds	r3, #24
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	f003 010f 	and.w	r1, r3, #15
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	460b      	mov	r3, r1
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	440b      	add	r3, r1
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4403      	add	r3, r0
 8005720:	3348      	adds	r3, #72	; 0x48
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	fbb2 f1f3 	udiv	r1, r2, r3
 8005728:	fb01 f303 	mul.w	r3, r1, r3
 800572c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800572e:	2b00      	cmp	r3, #0
 8005730:	d112      	bne.n	8005758 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	f003 020f 	and.w	r2, r3, #15
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	3318      	adds	r3, #24
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800574a:	78f9      	ldrb	r1, [r7, #3]
 800574c:	2300      	movs	r3, #0
 800574e:	2200      	movs	r2, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f006 f814 	bl	800b77e <USBD_LL_Transmit>
 8005756:	e01f      	b.n	8005798 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	33b0      	adds	r3, #176	; 0xb0
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d010      	beq.n	8005798 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	33b0      	adds	r3, #176	; 0xb0
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	32b0      	adds	r2, #176	; 0xb0
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	32b0      	adds	r2, #176	; 0xb0
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e01a      	b.n	800580a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f006 f812 	bl	800b802 <USBD_LL_GetRxDataSize>
 80057de:	4602      	mov	r2, r0
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	33b0      	adds	r3, #176	; 0xb0
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005804:	4611      	mov	r1, r2
 8005806:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	32b0      	adds	r2, #176	; 0xb0
 8005824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005828:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005830:	2303      	movs	r3, #3
 8005832:	e025      	b.n	8005880 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	33b0      	adds	r3, #176	; 0xb0
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01a      	beq.n	800587e <USBD_CDC_EP0_RxReady+0x6c>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800584e:	2bff      	cmp	r3, #255	; 0xff
 8005850:	d015      	beq.n	800587e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	33b0      	adds	r3, #176	; 0xb0
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800586a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005872:	b292      	uxth	r2, r2
 8005874:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	22ff      	movs	r2, #255	; 0xff
 800587a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005890:	2182      	movs	r1, #130	; 0x82
 8005892:	4818      	ldr	r0, [pc, #96]	; (80058f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005894:	f000 fd4f 	bl	8006336 <USBD_GetEpDesc>
 8005898:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800589a:	2101      	movs	r1, #1
 800589c:	4815      	ldr	r0, [pc, #84]	; (80058f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800589e:	f000 fd4a 	bl	8006336 <USBD_GetEpDesc>
 80058a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058a4:	2181      	movs	r1, #129	; 0x81
 80058a6:	4813      	ldr	r0, [pc, #76]	; (80058f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058a8:	f000 fd45 	bl	8006336 <USBD_GetEpDesc>
 80058ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2210      	movs	r2, #16
 80058b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d006      	beq.n	80058ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058c8:	711a      	strb	r2, [r3, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058dc:	711a      	strb	r2, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2243      	movs	r2, #67	; 0x43
 80058e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058e8:	4b02      	ldr	r3, [pc, #8]	; (80058f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000050 	.word	0x20000050

080058f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005900:	2182      	movs	r1, #130	; 0x82
 8005902:	4818      	ldr	r0, [pc, #96]	; (8005964 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005904:	f000 fd17 	bl	8006336 <USBD_GetEpDesc>
 8005908:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800590a:	2101      	movs	r1, #1
 800590c:	4815      	ldr	r0, [pc, #84]	; (8005964 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800590e:	f000 fd12 	bl	8006336 <USBD_GetEpDesc>
 8005912:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005914:	2181      	movs	r1, #129	; 0x81
 8005916:	4813      	ldr	r0, [pc, #76]	; (8005964 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005918:	f000 fd0d 	bl	8006336 <USBD_GetEpDesc>
 800591c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2210      	movs	r2, #16
 8005928:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d006      	beq.n	800593e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2200      	movs	r2, #0
 8005934:	711a      	strb	r2, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f042 0202 	orr.w	r2, r2, #2
 800593c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d006      	beq.n	8005952 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	711a      	strb	r2, [r3, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f042 0202 	orr.w	r2, r2, #2
 8005950:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2243      	movs	r2, #67	; 0x43
 8005956:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000050 	.word	0x20000050

08005968 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005970:	2182      	movs	r1, #130	; 0x82
 8005972:	4818      	ldr	r0, [pc, #96]	; (80059d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005974:	f000 fcdf 	bl	8006336 <USBD_GetEpDesc>
 8005978:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800597a:	2101      	movs	r1, #1
 800597c:	4815      	ldr	r0, [pc, #84]	; (80059d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800597e:	f000 fcda 	bl	8006336 <USBD_GetEpDesc>
 8005982:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005984:	2181      	movs	r1, #129	; 0x81
 8005986:	4813      	ldr	r0, [pc, #76]	; (80059d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005988:	f000 fcd5 	bl	8006336 <USBD_GetEpDesc>
 800598c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2210      	movs	r2, #16
 8005998:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d006      	beq.n	80059ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a8:	711a      	strb	r2, [r3, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d006      	beq.n	80059c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059bc:	711a      	strb	r2, [r3, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2243      	movs	r2, #67	; 0x43
 80059c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059c8:	4b02      	ldr	r3, [pc, #8]	; (80059d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000050 	.word	0x20000050

080059d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	220a      	movs	r2, #10
 80059e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80059e6:	4b03      	ldr	r3, [pc, #12]	; (80059f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	2000000c 	.word	0x2000000c

080059f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e009      	b.n	8005a20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	33b0      	adds	r3, #176	; 0xb0
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	32b0      	adds	r2, #176	; 0xb0
 8005a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a46:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e008      	b.n	8005a64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	32b0      	adds	r2, #176	; 0xb0
 8005a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e004      	b.n	8005a9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	32b0      	adds	r2, #176	; 0xb0
 8005abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	32b0      	adds	r2, #176	; 0xb0
 8005ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e025      	b.n	8005b2a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d11f      	bne.n	8005b28 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <USBD_CDC_TransmitPacket+0x88>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 020f 	and.w	r2, r3, #15
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4403      	add	r3, r0
 8005b0a:	3318      	adds	r3, #24
 8005b0c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <USBD_CDC_TransmitPacket+0x88>)
 8005b10:	7819      	ldrb	r1, [r3, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f005 fe2d 	bl	800b77e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000093 	.word	0x20000093

08005b38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	32b0      	adds	r2, #176	; 0xb0
 8005b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	32b0      	adds	r2, #176	; 0xb0
 8005b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e018      	b.n	8005b98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	7c1b      	ldrb	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <USBD_CDC_ReceivePacket+0x68>)
 8005b70:	7819      	ldrb	r1, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f005 fe1f 	bl	800b7c0 <USBD_LL_PrepareReceive>
 8005b82:	e008      	b.n	8005b96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b84:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <USBD_CDC_ReceivePacket+0x68>)
 8005b86:	7819      	ldrb	r1, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b8e:	2340      	movs	r3, #64	; 0x40
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f005 fe15 	bl	800b7c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000094 	.word	0x20000094

08005ba4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e01f      	b.n	8005bfc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	79fa      	ldrb	r2, [r7, #7]
 8005bee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f005 fc8f 	bl	800b514 <USBD_LL_Init>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e025      	b.n	8005c68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	32ae      	adds	r2, #174	; 0xae
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00f      	beq.n	8005c58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	32ae      	adds	r2, #174	; 0xae
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	f107 020e 	add.w	r2, r7, #14
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
 8005c50:	4602      	mov	r2, r0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f005 fc97 	bl	800b5ac <USBD_LL_Start>
 8005c7e:	4603      	mov	r3, r0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d009      	beq.n	8005ccc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	4798      	blx	r3
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 f908 	bl	8006f32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d30:	461a      	mov	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d01a      	beq.n	8005d7c <USBD_LL_SetupStage+0x72>
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d822      	bhi.n	8005d90 <USBD_LL_SetupStage+0x86>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <USBD_LL_SetupStage+0x4a>
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d00a      	beq.n	8005d68 <USBD_LL_SetupStage+0x5e>
 8005d52:	e01d      	b.n	8005d90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fb5f 	bl	8006420 <USBD_StdDevReq>
 8005d62:	4603      	mov	r3, r0
 8005d64:	73fb      	strb	r3, [r7, #15]
      break;
 8005d66:	e020      	b.n	8005daa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fbc7 	bl	8006504 <USBD_StdItfReq>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]
      break;
 8005d7a:	e016      	b.n	8005daa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fc29 	bl	80065dc <USBD_StdEPReq>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d8e:	e00c      	b.n	8005daa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f005 fc64 	bl	800b66c <USBD_LL_StallEP>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
      break;
 8005da8:	bf00      	nop
  }

  return ret;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005dc6:	7afb      	ldrb	r3, [r7, #11]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d16e      	bne.n	8005eaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005dd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	f040 8098 	bne.w	8005f10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d913      	bls.n	8005e14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	1ad2      	subs	r2, r2, r3
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	4293      	cmp	r3, r2
 8005e04:	bf28      	it	cs
 8005e06:	4613      	movcs	r3, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f001 f984 	bl	800711a <USBD_CtlContinueRx>
 8005e12:	e07d      	b.n	8005f10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d014      	beq.n	8005e4c <USBD_LL_DataOutStage+0x98>
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d81d      	bhi.n	8005e62 <USBD_LL_DataOutStage+0xae>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <USBD_LL_DataOutStage+0x7c>
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d003      	beq.n	8005e36 <USBD_LL_DataOutStage+0x82>
 8005e2e:	e018      	b.n	8005e62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75bb      	strb	r3, [r7, #22]
            break;
 8005e34:	e018      	b.n	8005e68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	4619      	mov	r1, r3
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fa5e 	bl	8006302 <USBD_CoreFindIF>
 8005e46:	4603      	mov	r3, r0
 8005e48:	75bb      	strb	r3, [r7, #22]
            break;
 8005e4a:	e00d      	b.n	8005e68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	4619      	mov	r1, r3
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fa60 	bl	800631c <USBD_CoreFindEP>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e60:	e002      	b.n	8005e68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75bb      	strb	r3, [r7, #22]
            break;
 8005e66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e68:	7dbb      	ldrb	r3, [r7, #22]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d119      	bne.n	8005ea2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d113      	bne.n	8005ea2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e7a:	7dba      	ldrb	r2, [r7, #22]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	32ae      	adds	r2, #174	; 0xae
 8005e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e8a:	7dba      	ldrb	r2, [r7, #22]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e92:	7dba      	ldrb	r2, [r7, #22]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	32ae      	adds	r2, #174	; 0xae
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f001 f94a 	bl	800713c <USBD_CtlSendStatus>
 8005ea8:	e032      	b.n	8005f10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fa31 	bl	800631c <USBD_CoreFindEP>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ebe:	7dbb      	ldrb	r3, [r7, #22]
 8005ec0:	2bff      	cmp	r3, #255	; 0xff
 8005ec2:	d025      	beq.n	8005f10 <USBD_LL_DataOutStage+0x15c>
 8005ec4:	7dbb      	ldrb	r3, [r7, #22]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d122      	bne.n	8005f10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d117      	bne.n	8005f06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ed6:	7dba      	ldrb	r2, [r7, #22]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	32ae      	adds	r2, #174	; 0xae
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00f      	beq.n	8005f06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ee6:	7dba      	ldrb	r2, [r7, #22]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005eee:	7dba      	ldrb	r2, [r7, #22]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	32ae      	adds	r2, #174	; 0xae
 8005ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	7afa      	ldrb	r2, [r7, #11]
 8005efc:	4611      	mov	r1, r2
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	4798      	blx	r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	e000      	b.n	8005f12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b086      	sub	sp, #24
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	460b      	mov	r3, r1
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f28:	7afb      	ldrb	r3, [r7, #11]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d16f      	bne.n	800600e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3314      	adds	r3, #20
 8005f32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d15a      	bne.n	8005ff4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d914      	bls.n	8005f74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	1ad2      	subs	r2, r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f001 f8ac 	bl	80070be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f66:	2300      	movs	r3, #0
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f005 fc27 	bl	800b7c0 <USBD_LL_PrepareReceive>
 8005f72:	e03f      	b.n	8005ff4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d11c      	bne.n	8005fba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d316      	bcc.n	8005fba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d20f      	bcs.n	8005fba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f001 f88d 	bl	80070be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fac:	2300      	movs	r3, #0
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f005 fc04 	bl	800b7c0 <USBD_LL_PrepareReceive>
 8005fb8:	e01c      	b.n	8005ff4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d10f      	bne.n	8005fe6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d009      	beq.n	8005fe6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fe6:	2180      	movs	r1, #128	; 0x80
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f005 fb3f 	bl	800b66c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f001 f8b7 	bl	8007162 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d03a      	beq.n	8006074 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7ff fe42 	bl	8005c88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800600c:	e032      	b.n	8006074 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006014:	b2db      	uxtb	r3, r3
 8006016:	4619      	mov	r1, r3
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f97f 	bl	800631c <USBD_CoreFindEP>
 800601e:	4603      	mov	r3, r0
 8006020:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006022:	7dfb      	ldrb	r3, [r7, #23]
 8006024:	2bff      	cmp	r3, #255	; 0xff
 8006026:	d025      	beq.n	8006074 <USBD_LL_DataInStage+0x15a>
 8006028:	7dfb      	ldrb	r3, [r7, #23]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d122      	bne.n	8006074 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b03      	cmp	r3, #3
 8006038:	d11c      	bne.n	8006074 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800603a:	7dfa      	ldrb	r2, [r7, #23]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	32ae      	adds	r2, #174	; 0xae
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d014      	beq.n	8006074 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800604a:	7dfa      	ldrb	r2, [r7, #23]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006052:	7dfa      	ldrb	r2, [r7, #23]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	32ae      	adds	r2, #174	; 0xae
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	7afa      	ldrb	r2, [r7, #11]
 8006060:	4611      	mov	r1, r2
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800606a:	7dbb      	ldrb	r3, [r7, #22]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006070:	7dbb      	ldrb	r3, [r7, #22]
 8006072:	e000      	b.n	8006076 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d014      	beq.n	80060e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00e      	beq.n	80060e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6852      	ldr	r2, [r2, #4]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	4611      	mov	r1, r2
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80060e0:	2303      	movs	r3, #3
 80060e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060e4:	2340      	movs	r3, #64	; 0x40
 80060e6:	2200      	movs	r2, #0
 80060e8:	2100      	movs	r1, #0
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f005 fa79 	bl	800b5e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2240      	movs	r2, #64	; 0x40
 80060fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006100:	2340      	movs	r3, #64	; 0x40
 8006102:	2200      	movs	r2, #0
 8006104:	2180      	movs	r1, #128	; 0x80
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f005 fa6b 	bl	800b5e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2240      	movs	r2, #64	; 0x40
 8006116:	621a      	str	r2, [r3, #32]

  return ret;
 8006118:	7bfb      	ldrb	r3, [r7, #15]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	78fa      	ldrb	r2, [r7, #3]
 8006132:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006150:	b2da      	uxtb	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2204      	movs	r2, #4
 800615c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b04      	cmp	r3, #4
 8006180:	d106      	bne.n	8006190 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006188:	b2da      	uxtb	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d110      	bne.n	80061d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	32ae      	adds	r2, #174	; 0xae
 80061f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e01c      	b.n	800623a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b03      	cmp	r3, #3
 800620a:	d115      	bne.n	8006238 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	32ae      	adds	r2, #174	; 0xae
 8006216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	32ae      	adds	r2, #174	; 0xae
 800622a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	78fa      	ldrb	r2, [r7, #3]
 8006232:	4611      	mov	r1, r2
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	32ae      	adds	r2, #174	; 0xae
 8006258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006260:	2303      	movs	r3, #3
 8006262:	e01c      	b.n	800629e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b03      	cmp	r3, #3
 800626e:	d115      	bne.n	800629c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	32ae      	adds	r2, #174	; 0xae
 800627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	32ae      	adds	r2, #174	; 0xae
 800628e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	4611      	mov	r1, r2
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00e      	beq.n	80062f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6852      	ldr	r2, [r2, #4]
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	4611      	mov	r1, r2
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062f4:	2303      	movs	r3, #3
 80062f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800630e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006328:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b086      	sub	sp, #24
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	885b      	ldrh	r3, [r3, #2]
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	429a      	cmp	r2, r3
 800635c:	d920      	bls.n	80063a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006366:	e013      	b.n	8006390 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006368:	f107 030a 	add.w	r3, r7, #10
 800636c:	4619      	mov	r1, r3
 800636e:	6978      	ldr	r0, [r7, #20]
 8006370:	f000 f81b 	bl	80063aa <USBD_GetNextDesc>
 8006374:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	2b05      	cmp	r3, #5
 800637c:	d108      	bne.n	8006390 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	789b      	ldrb	r3, [r3, #2]
 8006386:	78fa      	ldrb	r2, [r7, #3]
 8006388:	429a      	cmp	r2, r3
 800638a:	d008      	beq.n	800639e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	885b      	ldrh	r3, [r3, #2]
 8006394:	b29a      	uxth	r2, r3
 8006396:	897b      	ldrh	r3, [r7, #10]
 8006398:	429a      	cmp	r2, r3
 800639a:	d8e5      	bhi.n	8006368 <USBD_GetEpDesc+0x32>
 800639c:	e000      	b.n	80063a0 <USBD_GetEpDesc+0x6a>
          break;
 800639e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80063a0:	693b      	ldr	r3, [r7, #16]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	881a      	ldrh	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4413      	add	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	3301      	adds	r3, #1
 80063fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006402:	8a3b      	ldrh	r3, [r7, #16]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	b21a      	sxth	r2, r3
 8006408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800640c:	4313      	orrs	r3, r2
 800640e:	b21b      	sxth	r3, r3
 8006410:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006412:	89fb      	ldrh	r3, [r7, #14]
}
 8006414:	4618      	mov	r0, r3
 8006416:	371c      	adds	r7, #28
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d005      	beq.n	8006446 <USBD_StdDevReq+0x26>
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d857      	bhi.n	80064ee <USBD_StdDevReq+0xce>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00f      	beq.n	8006462 <USBD_StdDevReq+0x42>
 8006442:	2b20      	cmp	r3, #32
 8006444:	d153      	bne.n	80064ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	32ae      	adds	r2, #174	; 0xae
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
 800645c:	4603      	mov	r3, r0
 800645e:	73fb      	strb	r3, [r7, #15]
      break;
 8006460:	e04a      	b.n	80064f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	2b09      	cmp	r3, #9
 8006468:	d83b      	bhi.n	80064e2 <USBD_StdDevReq+0xc2>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <USBD_StdDevReq+0x50>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	080064c5 	.word	0x080064c5
 8006474:	080064d9 	.word	0x080064d9
 8006478:	080064e3 	.word	0x080064e3
 800647c:	080064cf 	.word	0x080064cf
 8006480:	080064e3 	.word	0x080064e3
 8006484:	080064a3 	.word	0x080064a3
 8006488:	08006499 	.word	0x08006499
 800648c:	080064e3 	.word	0x080064e3
 8006490:	080064bb 	.word	0x080064bb
 8006494:	080064ad 	.word	0x080064ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa3c 	bl	8006918 <USBD_GetDescriptor>
          break;
 80064a0:	e024      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fba1 	bl	8006bec <USBD_SetAddress>
          break;
 80064aa:	e01f      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fbe0 	bl	8006c74 <USBD_SetConfig>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]
          break;
 80064b8:	e018      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fc83 	bl	8006dc8 <USBD_GetConfig>
          break;
 80064c2:	e013      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fcb4 	bl	8006e34 <USBD_GetStatus>
          break;
 80064cc:	e00e      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fce3 	bl	8006e9c <USBD_SetFeature>
          break;
 80064d6:	e009      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fd07 	bl	8006eee <USBD_ClrFeature>
          break;
 80064e0:	e004      	b.n	80064ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fd5e 	bl	8006fa6 <USBD_CtlError>
          break;
 80064ea:	bf00      	nop
      }
      break;
 80064ec:	e004      	b.n	80064f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fd58 	bl	8006fa6 <USBD_CtlError>
      break;
 80064f6:	bf00      	nop
  }

  return ret;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop

08006504 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d005      	beq.n	800652a <USBD_StdItfReq+0x26>
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d852      	bhi.n	80065c8 <USBD_StdItfReq+0xc4>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <USBD_StdItfReq+0x26>
 8006526:	2b20      	cmp	r3, #32
 8006528:	d14e      	bne.n	80065c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006530:	b2db      	uxtb	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	2b02      	cmp	r3, #2
 8006536:	d840      	bhi.n	80065ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	889b      	ldrh	r3, [r3, #4]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b01      	cmp	r3, #1
 8006540:	d836      	bhi.n	80065b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	889b      	ldrh	r3, [r3, #4]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fed9 	bl	8006302 <USBD_CoreFindIF>
 8006550:	4603      	mov	r3, r0
 8006552:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	2bff      	cmp	r3, #255	; 0xff
 8006558:	d01d      	beq.n	8006596 <USBD_StdItfReq+0x92>
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d11a      	bne.n	8006596 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006560:	7bba      	ldrb	r2, [r7, #14]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	32ae      	adds	r2, #174	; 0xae
 8006566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00f      	beq.n	8006590 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006570:	7bba      	ldrb	r2, [r7, #14]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006578:	7bba      	ldrb	r2, [r7, #14]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32ae      	adds	r2, #174	; 0xae
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
 800658a:	4603      	mov	r3, r0
 800658c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800658e:	e004      	b.n	800659a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006590:	2303      	movs	r3, #3
 8006592:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006594:	e001      	b.n	800659a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006596:	2303      	movs	r3, #3
 8006598:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	88db      	ldrh	r3, [r3, #6]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d110      	bne.n	80065c4 <USBD_StdItfReq+0xc0>
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10d      	bne.n	80065c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fdc7 	bl	800713c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065ae:	e009      	b.n	80065c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fcf7 	bl	8006fa6 <USBD_CtlError>
          break;
 80065b8:	e004      	b.n	80065c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fcf2 	bl	8006fa6 <USBD_CtlError>
          break;
 80065c2:	e000      	b.n	80065c6 <USBD_StdItfReq+0xc2>
          break;
 80065c4:	bf00      	nop
      }
      break;
 80065c6:	e004      	b.n	80065d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fceb 	bl	8006fa6 <USBD_CtlError>
      break;
 80065d0:	bf00      	nop
  }

  return ret;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	889b      	ldrh	r3, [r3, #4]
 80065ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d007      	beq.n	800660c <USBD_StdEPReq+0x30>
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	f200 817f 	bhi.w	8006900 <USBD_StdEPReq+0x324>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d02a      	beq.n	800665c <USBD_StdEPReq+0x80>
 8006606:	2b20      	cmp	r3, #32
 8006608:	f040 817a 	bne.w	8006900 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff fe83 	bl	800631c <USBD_CoreFindEP>
 8006616:	4603      	mov	r3, r0
 8006618:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800661a:	7b7b      	ldrb	r3, [r7, #13]
 800661c:	2bff      	cmp	r3, #255	; 0xff
 800661e:	f000 8174 	beq.w	800690a <USBD_StdEPReq+0x32e>
 8006622:	7b7b      	ldrb	r3, [r7, #13]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 8170 	bne.w	800690a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800662a:	7b7a      	ldrb	r2, [r7, #13]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006632:	7b7a      	ldrb	r2, [r7, #13]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	32ae      	adds	r2, #174	; 0xae
 8006638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8163 	beq.w	800690a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006644:	7b7a      	ldrb	r2, [r7, #13]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32ae      	adds	r2, #174	; 0xae
 800664a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800665a:	e156      	b.n	800690a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d008      	beq.n	8006676 <USBD_StdEPReq+0x9a>
 8006664:	2b03      	cmp	r3, #3
 8006666:	f300 8145 	bgt.w	80068f4 <USBD_StdEPReq+0x318>
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 809b 	beq.w	80067a6 <USBD_StdEPReq+0x1ca>
 8006670:	2b01      	cmp	r3, #1
 8006672:	d03c      	beq.n	80066ee <USBD_StdEPReq+0x112>
 8006674:	e13e      	b.n	80068f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d002      	beq.n	8006688 <USBD_StdEPReq+0xac>
 8006682:	2b03      	cmp	r3, #3
 8006684:	d016      	beq.n	80066b4 <USBD_StdEPReq+0xd8>
 8006686:	e02c      	b.n	80066e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00d      	beq.n	80066aa <USBD_StdEPReq+0xce>
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	2b80      	cmp	r3, #128	; 0x80
 8006692:	d00a      	beq.n	80066aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f004 ffe7 	bl	800b66c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800669e:	2180      	movs	r1, #128	; 0x80
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f004 ffe3 	bl	800b66c <USBD_LL_StallEP>
 80066a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066a8:	e020      	b.n	80066ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fc7a 	bl	8006fa6 <USBD_CtlError>
              break;
 80066b2:	e01b      	b.n	80066ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	885b      	ldrh	r3, [r3, #2]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10e      	bne.n	80066da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <USBD_StdEPReq+0xfe>
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d008      	beq.n	80066da <USBD_StdEPReq+0xfe>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	88db      	ldrh	r3, [r3, #6]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f004 ffc9 	bl	800b66c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fd2e 	bl	800713c <USBD_CtlSendStatus>

              break;
 80066e0:	e004      	b.n	80066ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc5e 	bl	8006fa6 <USBD_CtlError>
              break;
 80066ea:	bf00      	nop
          }
          break;
 80066ec:	e107      	b.n	80068fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d002      	beq.n	8006700 <USBD_StdEPReq+0x124>
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d016      	beq.n	800672c <USBD_StdEPReq+0x150>
 80066fe:	e04b      	b.n	8006798 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00d      	beq.n	8006722 <USBD_StdEPReq+0x146>
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	2b80      	cmp	r3, #128	; 0x80
 800670a:	d00a      	beq.n	8006722 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f004 ffab 	bl	800b66c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006716:	2180      	movs	r1, #128	; 0x80
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f004 ffa7 	bl	800b66c <USBD_LL_StallEP>
 800671e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006720:	e040      	b.n	80067a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fc3e 	bl	8006fa6 <USBD_CtlError>
              break;
 800672a:	e03b      	b.n	80067a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	885b      	ldrh	r3, [r3, #2]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d136      	bne.n	80067a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f004 ffb1 	bl	800b6aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fcf7 	bl	800713c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fde2 	bl	800631c <USBD_CoreFindEP>
 8006758:	4603      	mov	r3, r0
 800675a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800675c:	7b7b      	ldrb	r3, [r7, #13]
 800675e:	2bff      	cmp	r3, #255	; 0xff
 8006760:	d01f      	beq.n	80067a2 <USBD_StdEPReq+0x1c6>
 8006762:	7b7b      	ldrb	r3, [r7, #13]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11c      	bne.n	80067a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006768:	7b7a      	ldrb	r2, [r7, #13]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006770:	7b7a      	ldrb	r2, [r7, #13]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32ae      	adds	r2, #174	; 0xae
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d010      	beq.n	80067a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006780:	7b7a      	ldrb	r2, [r7, #13]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	32ae      	adds	r2, #174	; 0xae
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006796:	e004      	b.n	80067a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fc03 	bl	8006fa6 <USBD_CtlError>
              break;
 80067a0:	e000      	b.n	80067a4 <USBD_StdEPReq+0x1c8>
              break;
 80067a2:	bf00      	nop
          }
          break;
 80067a4:	e0ab      	b.n	80068fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d002      	beq.n	80067b8 <USBD_StdEPReq+0x1dc>
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d032      	beq.n	800681c <USBD_StdEPReq+0x240>
 80067b6:	e097      	b.n	80068e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <USBD_StdEPReq+0x1f2>
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d004      	beq.n	80067ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fbed 	bl	8006fa6 <USBD_CtlError>
                break;
 80067cc:	e091      	b.n	80068f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da0b      	bge.n	80067ee <USBD_StdEPReq+0x212>
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	3310      	adds	r3, #16
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4413      	add	r3, r2
 80067ea:	3304      	adds	r3, #4
 80067ec:	e00b      	b.n	8006806 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	4413      	add	r3, r2
 8006804:	3304      	adds	r3, #4
 8006806:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2202      	movs	r2, #2
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fc37 	bl	8007088 <USBD_CtlSendData>
              break;
 800681a:	e06a      	b.n	80068f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800681c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	da11      	bge.n	8006848 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	f003 020f 	and.w	r2, r3, #15
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	3324      	adds	r3, #36	; 0x24
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d117      	bne.n	800686e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fbb0 	bl	8006fa6 <USBD_CtlError>
                  break;
 8006846:	e054      	b.n	80068f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fb9d 	bl	8006fa6 <USBD_CtlError>
                  break;
 800686c:	e041      	b.n	80068f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800686e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006872:	2b00      	cmp	r3, #0
 8006874:	da0b      	bge.n	800688e <USBD_StdEPReq+0x2b2>
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	3310      	adds	r3, #16
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	3304      	adds	r3, #4
 800688c:	e00b      	b.n	80068a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	3304      	adds	r3, #4
 80068a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <USBD_StdEPReq+0x2d8>
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	2b80      	cmp	r3, #128	; 0x80
 80068b2:	d103      	bne.n	80068bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e00e      	b.n	80068da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f004 ff11 	bl	800b6e8 <USBD_LL_IsStallEP>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e002      	b.n	80068da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2202      	movs	r2, #2
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fbd1 	bl	8007088 <USBD_CtlSendData>
              break;
 80068e6:	e004      	b.n	80068f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fb5b 	bl	8006fa6 <USBD_CtlError>
              break;
 80068f0:	bf00      	nop
          }
          break;
 80068f2:	e004      	b.n	80068fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fb55 	bl	8006fa6 <USBD_CtlError>
          break;
 80068fc:	bf00      	nop
      }
      break;
 80068fe:	e005      	b.n	800690c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fb4f 	bl	8006fa6 <USBD_CtlError>
      break;
 8006908:	e000      	b.n	800690c <USBD_StdEPReq+0x330>
      break;
 800690a:	bf00      	nop
  }

  return ret;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	2b06      	cmp	r3, #6
 800693a:	f200 8128 	bhi.w	8006b8e <USBD_GetDescriptor+0x276>
 800693e:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <USBD_GetDescriptor+0x2c>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	08006961 	.word	0x08006961
 8006948:	08006979 	.word	0x08006979
 800694c:	080069b9 	.word	0x080069b9
 8006950:	08006b8f 	.word	0x08006b8f
 8006954:	08006b8f 	.word	0x08006b8f
 8006958:	08006b2f 	.word	0x08006b2f
 800695c:	08006b5b 	.word	0x08006b5b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7c12      	ldrb	r2, [r2, #16]
 800696c:	f107 0108 	add.w	r1, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
      break;
 8006976:	e112      	b.n	8006b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	7c1b      	ldrb	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10d      	bne.n	800699c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	f107 0208 	add.w	r2, r7, #8
 800698c:	4610      	mov	r0, r2
 800698e:	4798      	blx	r3
 8006990:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	2202      	movs	r2, #2
 8006998:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800699a:	e100      	b.n	8006b9e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	f107 0208 	add.w	r2, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3301      	adds	r3, #1
 80069b2:	2202      	movs	r2, #2
 80069b4:	701a      	strb	r2, [r3, #0]
      break;
 80069b6:	e0f2      	b.n	8006b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	885b      	ldrh	r3, [r3, #2]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b05      	cmp	r3, #5
 80069c0:	f200 80ac 	bhi.w	8006b1c <USBD_GetDescriptor+0x204>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <USBD_GetDescriptor+0xb4>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069e5 	.word	0x080069e5
 80069d0:	08006a19 	.word	0x08006a19
 80069d4:	08006a4d 	.word	0x08006a4d
 80069d8:	08006a81 	.word	0x08006a81
 80069dc:	08006ab5 	.word	0x08006ab5
 80069e0:	08006ae9 	.word	0x08006ae9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	7c12      	ldrb	r2, [r2, #16]
 80069fc:	f107 0108 	add.w	r1, r7, #8
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
 8006a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a06:	e091      	b.n	8006b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 facb 	bl	8006fa6 <USBD_CtlError>
            err++;
 8006a10:	7afb      	ldrb	r3, [r7, #11]
 8006a12:	3301      	adds	r3, #1
 8006a14:	72fb      	strb	r3, [r7, #11]
          break;
 8006a16:	e089      	b.n	8006b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	7c12      	ldrb	r2, [r2, #16]
 8006a30:	f107 0108 	add.w	r1, r7, #8
 8006a34:	4610      	mov	r0, r2
 8006a36:	4798      	blx	r3
 8006a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a3a:	e077      	b.n	8006b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fab1 	bl	8006fa6 <USBD_CtlError>
            err++;
 8006a44:	7afb      	ldrb	r3, [r7, #11]
 8006a46:	3301      	adds	r3, #1
 8006a48:	72fb      	strb	r3, [r7, #11]
          break;
 8006a4a:	e06f      	b.n	8006b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	7c12      	ldrb	r2, [r2, #16]
 8006a64:	f107 0108 	add.w	r1, r7, #8
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
 8006a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a6e:	e05d      	b.n	8006b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa97 	bl	8006fa6 <USBD_CtlError>
            err++;
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a7e:	e055      	b.n	8006b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00b      	beq.n	8006aa4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	7c12      	ldrb	r2, [r2, #16]
 8006a98:	f107 0108 	add.w	r1, r7, #8
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
 8006aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aa2:	e043      	b.n	8006b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fa7d 	bl	8006fa6 <USBD_CtlError>
            err++;
 8006aac:	7afb      	ldrb	r3, [r7, #11]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ab2:	e03b      	b.n	8006b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	7c12      	ldrb	r2, [r2, #16]
 8006acc:	f107 0108 	add.w	r1, r7, #8
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4798      	blx	r3
 8006ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ad6:	e029      	b.n	8006b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fa63 	bl	8006fa6 <USBD_CtlError>
            err++;
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ae6:	e021      	b.n	8006b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	7c12      	ldrb	r2, [r2, #16]
 8006b00:	f107 0108 	add.w	r1, r7, #8
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b0a:	e00f      	b.n	8006b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa49 	bl	8006fa6 <USBD_CtlError>
            err++;
 8006b14:	7afb      	ldrb	r3, [r7, #11]
 8006b16:	3301      	adds	r3, #1
 8006b18:	72fb      	strb	r3, [r7, #11]
          break;
 8006b1a:	e007      	b.n	8006b2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa41 	bl	8006fa6 <USBD_CtlError>
          err++;
 8006b24:	7afb      	ldrb	r3, [r7, #11]
 8006b26:	3301      	adds	r3, #1
 8006b28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b2a:	bf00      	nop
      }
      break;
 8006b2c:	e037      	b.n	8006b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	7c1b      	ldrb	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	f107 0208 	add.w	r2, r7, #8
 8006b42:	4610      	mov	r0, r2
 8006b44:	4798      	blx	r3
 8006b46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b48:	e029      	b.n	8006b9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa2a 	bl	8006fa6 <USBD_CtlError>
        err++;
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	3301      	adds	r3, #1
 8006b56:	72fb      	strb	r3, [r7, #11]
      break;
 8006b58:	e021      	b.n	8006b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7c1b      	ldrb	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10d      	bne.n	8006b7e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	f107 0208 	add.w	r2, r7, #8
 8006b6e:	4610      	mov	r0, r2
 8006b70:	4798      	blx	r3
 8006b72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3301      	adds	r3, #1
 8006b78:	2207      	movs	r2, #7
 8006b7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b7c:	e00f      	b.n	8006b9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fa10 	bl	8006fa6 <USBD_CtlError>
        err++;
 8006b86:	7afb      	ldrb	r3, [r7, #11]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b8c:	e007      	b.n	8006b9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa08 	bl	8006fa6 <USBD_CtlError>
      err++;
 8006b96:	7afb      	ldrb	r3, [r7, #11]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b9c:	bf00      	nop
  }

  if (err != 0U)
 8006b9e:	7afb      	ldrb	r3, [r7, #11]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d11e      	bne.n	8006be2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	88db      	ldrh	r3, [r3, #6]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d016      	beq.n	8006bda <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006bac:	893b      	ldrh	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00e      	beq.n	8006bd0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	88da      	ldrh	r2, [r3, #6]
 8006bb6:	893b      	ldrh	r3, [r7, #8]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	bf28      	it	cs
 8006bbc:	4613      	movcs	r3, r2
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bc2:	893b      	ldrh	r3, [r7, #8]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68f9      	ldr	r1, [r7, #12]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fa5d 	bl	8007088 <USBD_CtlSendData>
 8006bce:	e009      	b.n	8006be4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9e7 	bl	8006fa6 <USBD_CtlError>
 8006bd8:	e004      	b.n	8006be4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 faae 	bl	800713c <USBD_CtlSendStatus>
 8006be0:	e000      	b.n	8006be4 <USBD_GetDescriptor+0x2cc>
    return;
 8006be2:	bf00      	nop
  }
}
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop

08006bec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	889b      	ldrh	r3, [r3, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d131      	bne.n	8006c62 <USBD_SetAddress+0x76>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	88db      	ldrh	r3, [r3, #6]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d12d      	bne.n	8006c62 <USBD_SetAddress+0x76>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0c:	d829      	bhi.n	8006c62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	885b      	ldrh	r3, [r3, #2]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d104      	bne.n	8006c30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f9bc 	bl	8006fa6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2e:	e01d      	b.n	8006c6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f004 fd7f 	bl	800b740 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa7a 	bl	800713c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c56:	e009      	b.n	8006c6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c60:	e004      	b.n	8006c6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f99e 	bl	8006fa6 <USBD_CtlError>
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	885b      	ldrh	r3, [r3, #2]
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	4b4e      	ldr	r3, [pc, #312]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006c8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c8c:	4b4d      	ldr	r3, [pc, #308]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d905      	bls.n	8006ca0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f985 	bl	8006fa6 <USBD_CtlError>
    return USBD_FAIL;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e08c      	b.n	8006dba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d002      	beq.n	8006cb2 <USBD_SetConfig+0x3e>
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d029      	beq.n	8006d04 <USBD_SetConfig+0x90>
 8006cb0:	e075      	b.n	8006d9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006cb2:	4b44      	ldr	r3, [pc, #272]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d020      	beq.n	8006cfc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006cba:	4b42      	ldr	r3, [pc, #264]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cc4:	4b3f      	ldr	r3, [pc, #252]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fe ffe7 	bl	8005c9e <USBD_SetClassConfig>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d008      	beq.n	8006cec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f962 	bl	8006fa6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cea:	e065      	b.n	8006db8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fa25 	bl	800713c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cfa:	e05d      	b.n	8006db8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa1d 	bl	800713c <USBD_CtlSendStatus>
      break;
 8006d02:	e059      	b.n	8006db8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d04:	4b2f      	ldr	r3, [pc, #188]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d112      	bne.n	8006d32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d14:	4b2b      	ldr	r3, [pc, #172]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d1e:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fe ffd6 	bl	8005cd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa06 	bl	800713c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d30:	e042      	b.n	8006db8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d32:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d02a      	beq.n	8006d96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fe ffc4 	bl	8005cd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d58:	4b1a      	ldr	r3, [pc, #104]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fe ff9d 	bl	8005c9e <USBD_SetClassConfig>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00f      	beq.n	8006d8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f918 	bl	8006fa6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fe ffa9 	bl	8005cd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d8c:	e014      	b.n	8006db8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f9d4 	bl	800713c <USBD_CtlSendStatus>
      break;
 8006d94:	e010      	b.n	8006db8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f9d0 	bl	800713c <USBD_CtlSendStatus>
      break;
 8006d9c:	e00c      	b.n	8006db8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f900 	bl	8006fa6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <USBD_SetConfig+0x150>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7fe ff92 	bl	8005cd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006db2:	2303      	movs	r3, #3
 8006db4:	73fb      	strb	r3, [r7, #15]
      break;
 8006db6:	bf00      	nop
  }

  return ret;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	2000023c 	.word	0x2000023c

08006dc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d004      	beq.n	8006de4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f8e2 	bl	8006fa6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006de2:	e023      	b.n	8006e2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	dc02      	bgt.n	8006df6 <USBD_GetConfig+0x2e>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc03      	bgt.n	8006dfc <USBD_GetConfig+0x34>
 8006df4:	e015      	b.n	8006e22 <USBD_GetConfig+0x5a>
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d00b      	beq.n	8006e12 <USBD_GetConfig+0x4a>
 8006dfa:	e012      	b.n	8006e22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3308      	adds	r3, #8
 8006e06:	2201      	movs	r2, #1
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f93c 	bl	8007088 <USBD_CtlSendData>
        break;
 8006e10:	e00c      	b.n	8006e2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3304      	adds	r3, #4
 8006e16:	2201      	movs	r2, #1
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f934 	bl	8007088 <USBD_CtlSendData>
        break;
 8006e20:	e004      	b.n	8006e2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f8be 	bl	8006fa6 <USBD_CtlError>
        break;
 8006e2a:	bf00      	nop
}
 8006e2c:	bf00      	nop
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d81e      	bhi.n	8006e8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	88db      	ldrh	r3, [r3, #6]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d004      	beq.n	8006e5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f8a5 	bl	8006fa6 <USBD_CtlError>
        break;
 8006e5c:	e01a      	b.n	8006e94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f043 0202 	orr.w	r2, r3, #2
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	2202      	movs	r2, #2
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f900 	bl	8007088 <USBD_CtlSendData>
      break;
 8006e88:	e004      	b.n	8006e94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f88a 	bl	8006fa6 <USBD_CtlError>
      break;
 8006e92:	bf00      	nop
  }
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	885b      	ldrh	r3, [r3, #2]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d107      	bne.n	8006ebe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f940 	bl	800713c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ebc:	e013      	b.n	8006ee6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	885b      	ldrh	r3, [r3, #2]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d10b      	bne.n	8006ede <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	889b      	ldrh	r3, [r3, #4]
 8006eca:	0a1b      	lsrs	r3, r3, #8
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f930 	bl	800713c <USBD_CtlSendStatus>
}
 8006edc:	e003      	b.n	8006ee6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f860 	bl	8006fa6 <USBD_CtlError>
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b082      	sub	sp, #8
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d80b      	bhi.n	8006f1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	885b      	ldrh	r3, [r3, #2]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d10c      	bne.n	8006f28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f910 	bl	800713c <USBD_CtlSendStatus>
      }
      break;
 8006f1c:	e004      	b.n	8006f28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f840 	bl	8006fa6 <USBD_CtlError>
      break;
 8006f26:	e000      	b.n	8006f2a <USBD_ClrFeature+0x3c>
      break;
 8006f28:	bf00      	nop
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff fa41 	bl	80063e4 <SWAPBYTE>
 8006f62:	4603      	mov	r3, r0
 8006f64:	461a      	mov	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7ff fa34 	bl	80063e4 <SWAPBYTE>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fa27 	bl	80063e4 <SWAPBYTE>
 8006f96:	4603      	mov	r3, r0
 8006f98:	461a      	mov	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	80da      	strh	r2, [r3, #6]
}
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fb0:	2180      	movs	r1, #128	; 0x80
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f004 fb5a 	bl	800b66c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fb8:	2100      	movs	r1, #0
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f004 fb56 	bl	800b66c <USBD_LL_StallEP>
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d036      	beq.n	800704c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006fe2:	6938      	ldr	r0, [r7, #16]
 8006fe4:	f000 f836 	bl	8007054 <USBD_GetLen>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	3301      	adds	r3, #1
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	7812      	ldrb	r2, [r2, #0]
 8007000:	701a      	strb	r2, [r3, #0]
  idx++;
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	3301      	adds	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4413      	add	r3, r2
 800700e:	2203      	movs	r2, #3
 8007010:	701a      	strb	r2, [r3, #0]
  idx++;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	3301      	adds	r3, #1
 8007016:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007018:	e013      	b.n	8007042 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4413      	add	r3, r2
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	3301      	adds	r3, #1
 800702a:	613b      	str	r3, [r7, #16]
    idx++;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	3301      	adds	r3, #1
 8007030:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	4413      	add	r3, r2
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
    idx++;
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	3301      	adds	r3, #1
 8007040:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e7      	bne.n	800701a <USBD_GetString+0x52>
 800704a:	e000      	b.n	800704e <USBD_GetString+0x86>
    return;
 800704c:	bf00      	nop
  }
}
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007064:	e005      	b.n	8007072 <USBD_GetLen+0x1e>
  {
    len++;
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	3301      	adds	r3, #1
 800706a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	3301      	adds	r3, #1
 8007070:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f5      	bne.n	8007066 <USBD_GetLen+0x12>
  }

  return len;
 800707a:	7bfb      	ldrb	r3, [r7, #15]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2202      	movs	r2, #2
 8007098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	2100      	movs	r1, #0
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f004 fb65 	bl	800b77e <USBD_LL_Transmit>

  return USBD_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	2100      	movs	r1, #0
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f004 fb54 	bl	800b77e <USBD_LL_Transmit>

  return USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2203      	movs	r2, #3
 80070f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	2100      	movs	r1, #0
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f004 fb58 	bl	800b7c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	2100      	movs	r1, #0
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f004 fb47 	bl	800b7c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2204      	movs	r2, #4
 8007148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800714c:	2300      	movs	r3, #0
 800714e:	2200      	movs	r2, #0
 8007150:	2100      	movs	r1, #0
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f004 fb13 	bl	800b77e <USBD_LL_Transmit>

  return USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2205      	movs	r2, #5
 800716e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007172:	2300      	movs	r3, #0
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f004 fb21 	bl	800b7c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <__NVIC_SetPriority>:
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007198:	2b00      	cmp	r3, #0
 800719a:	db0a      	blt.n	80071b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	490c      	ldr	r1, [pc, #48]	; (80071d4 <__NVIC_SetPriority+0x4c>)
 80071a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a6:	0112      	lsls	r2, r2, #4
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	440b      	add	r3, r1
 80071ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071b0:	e00a      	b.n	80071c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	4908      	ldr	r1, [pc, #32]	; (80071d8 <__NVIC_SetPriority+0x50>)
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	3b04      	subs	r3, #4
 80071c0:	0112      	lsls	r2, r2, #4
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	440b      	add	r3, r1
 80071c6:	761a      	strb	r2, [r3, #24]
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	e000e100 	.word	0xe000e100
 80071d8:	e000ed00 	.word	0xe000ed00

080071dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071e0:	2100      	movs	r1, #0
 80071e2:	f06f 0004 	mvn.w	r0, #4
 80071e6:	f7ff ffcf 	bl	8007188 <__NVIC_SetPriority>
#endif
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071f6:	f3ef 8305 	mrs	r3, IPSR
 80071fa:	603b      	str	r3, [r7, #0]
  return(result);
 80071fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007202:	f06f 0305 	mvn.w	r3, #5
 8007206:	607b      	str	r3, [r7, #4]
 8007208:	e00c      	b.n	8007224 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800720a:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <osKernelInitialize+0x44>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d105      	bne.n	800721e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007212:	4b08      	ldr	r3, [pc, #32]	; (8007234 <osKernelInitialize+0x44>)
 8007214:	2201      	movs	r2, #1
 8007216:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007218:	2300      	movs	r3, #0
 800721a:	607b      	str	r3, [r7, #4]
 800721c:	e002      	b.n	8007224 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800721e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007222:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007224:	687b      	ldr	r3, [r7, #4]
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000240 	.word	0x20000240

08007238 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800723e:	f3ef 8305 	mrs	r3, IPSR
 8007242:	603b      	str	r3, [r7, #0]
  return(result);
 8007244:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <osKernelStart+0x1a>
    stat = osErrorISR;
 800724a:	f06f 0305 	mvn.w	r3, #5
 800724e:	607b      	str	r3, [r7, #4]
 8007250:	e010      	b.n	8007274 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007252:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <osKernelStart+0x48>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d109      	bne.n	800726e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800725a:	f7ff ffbf 	bl	80071dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800725e:	4b08      	ldr	r3, [pc, #32]	; (8007280 <osKernelStart+0x48>)
 8007260:	2202      	movs	r2, #2
 8007262:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007264:	f001 fd8c 	bl	8008d80 <vTaskStartScheduler>
      stat = osOK;
 8007268:	2300      	movs	r3, #0
 800726a:	607b      	str	r3, [r7, #4]
 800726c:	e002      	b.n	8007274 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800726e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007274:	687b      	ldr	r3, [r7, #4]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000240 	.word	0x20000240

08007284 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b08e      	sub	sp, #56	; 0x38
 8007288:	af04      	add	r7, sp, #16
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007290:	2300      	movs	r3, #0
 8007292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007294:	f3ef 8305 	mrs	r3, IPSR
 8007298:	617b      	str	r3, [r7, #20]
  return(result);
 800729a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800729c:	2b00      	cmp	r3, #0
 800729e:	d17e      	bne.n	800739e <osThreadNew+0x11a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d07b      	beq.n	800739e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072a6:	2380      	movs	r3, #128	; 0x80
 80072a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072aa:	2318      	movs	r3, #24
 80072ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80072b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d045      	beq.n	800734a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <osThreadNew+0x48>
        name = attr->name;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <osThreadNew+0x6e>
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	2b38      	cmp	r3, #56	; 0x38
 80072e4:	d805      	bhi.n	80072f2 <osThreadNew+0x6e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <osThreadNew+0x72>
        return (NULL);
 80072f2:	2300      	movs	r3, #0
 80072f4:	e054      	b.n	80073a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	089b      	lsrs	r3, r3, #2
 8007304:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <osThreadNew+0xa8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2bcb      	cmp	r3, #203	; 0xcb
 8007314:	d90a      	bls.n	800732c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800731a:	2b00      	cmp	r3, #0
 800731c:	d006      	beq.n	800732c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <osThreadNew+0xa8>
        mem = 1;
 8007326:	2301      	movs	r3, #1
 8007328:	61bb      	str	r3, [r7, #24]
 800732a:	e010      	b.n	800734e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10c      	bne.n	800734e <osThreadNew+0xca>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d108      	bne.n	800734e <osThreadNew+0xca>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d104      	bne.n	800734e <osThreadNew+0xca>
          mem = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	61bb      	str	r3, [r7, #24]
 8007348:	e001      	b.n	800734e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d110      	bne.n	8007376 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800735c:	9202      	str	r2, [sp, #8]
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f001 fb1c 	bl	80089a8 <xTaskCreateStatic>
 8007370:	4603      	mov	r3, r0
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	e013      	b.n	800739e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d110      	bne.n	800739e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	b29a      	uxth	r2, r3
 8007380:	f107 0310 	add.w	r3, r7, #16
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f001 fb67 	bl	8008a62 <xTaskCreate>
 8007394:	4603      	mov	r3, r0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d001      	beq.n	800739e <osThreadNew+0x11a>
            hTask = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800739e:	693b      	ldr	r3, [r7, #16]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3728      	adds	r7, #40	; 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4a07      	ldr	r2, [pc, #28]	; (80073d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80073b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4a06      	ldr	r2, [pc, #24]	; (80073d8 <vApplicationGetIdleTaskMemory+0x30>)
 80073be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2280      	movs	r2, #128	; 0x80
 80073c4:	601a      	str	r2, [r3, #0]
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20000244 	.word	0x20000244
 80073d8:	20000310 	.word	0x20000310

080073dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a07      	ldr	r2, [pc, #28]	; (8007408 <vApplicationGetTimerTaskMemory+0x2c>)
 80073ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4a06      	ldr	r2, [pc, #24]	; (800740c <vApplicationGetTimerTaskMemory+0x30>)
 80073f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073fa:	601a      	str	r2, [r3, #0]
}
 80073fc:	bf00      	nop
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	20000510 	.word	0x20000510
 800740c:	200005dc 	.word	0x200005dc

08007410 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f103 0208 	add.w	r2, r3, #8
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007428:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f103 0208 	add.w	r2, r3, #8
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f103 0208 	add.w	r2, r3, #8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	601a      	str	r2, [r3, #0]
}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074c8:	d103      	bne.n	80074d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	e00c      	b.n	80074ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3308      	adds	r3, #8
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	e002      	b.n	80074e0 <vListInsert+0x2e>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d2f6      	bcs.n	80074da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	601a      	str	r2, [r3, #0]
}
 8007518:	bf00      	nop
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6892      	ldr	r2, [r2, #8]
 800753a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6852      	ldr	r2, [r2, #4]
 8007544:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	d103      	bne.n	8007558 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	1e5a      	subs	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075a2:	f003 f8d7 	bl	800a754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ae:	68f9      	ldr	r1, [r7, #12]
 80075b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	441a      	add	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d2:	3b01      	subs	r3, #1
 80075d4:	68f9      	ldr	r1, [r7, #12]
 80075d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	441a      	add	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	22ff      	movs	r2, #255	; 0xff
 80075e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	22ff      	movs	r2, #255	; 0xff
 80075ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d114      	bne.n	8007622 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01a      	beq.n	8007636 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3310      	adds	r3, #16
 8007604:	4618      	mov	r0, r3
 8007606:	f001 fe55 	bl	80092b4 <xTaskRemoveFromEventList>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d012      	beq.n	8007636 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007610:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <xQueueGenericReset+0xcc>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	e009      	b.n	8007636 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3310      	adds	r3, #16
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff fef2 	bl	8007410 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3324      	adds	r3, #36	; 0x24
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff feed 	bl	8007410 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007636:	f003 f8bd 	bl	800a7b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800763a:	2301      	movs	r3, #1
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	; 0x38
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <xQueueGenericCreateStatic+0x52>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <xQueueGenericCreateStatic+0x56>
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <xQueueGenericCreateStatic+0x58>
 800769e:	2300      	movs	r3, #0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	623b      	str	r3, [r7, #32]
}
 80076b6:	bf00      	nop
 80076b8:	e7fe      	b.n	80076b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <xQueueGenericCreateStatic+0x7e>
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <xQueueGenericCreateStatic+0x82>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e000      	b.n	80076cc <xQueueGenericCreateStatic+0x84>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	61fb      	str	r3, [r7, #28]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076e6:	2350      	movs	r3, #80	; 0x50
 80076e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b50      	cmp	r3, #80	; 0x50
 80076ee:	d00a      	beq.n	8007706 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	61bb      	str	r3, [r7, #24]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007706:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00d      	beq.n	800772e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800771a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	4613      	mov	r3, r2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f83f 	bl	80077ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800772e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007730:	4618      	mov	r0, r3
 8007732:	3730      	adds	r7, #48	; 0x30
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <xQueueGenericCreate+0x2a>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	613b      	str	r3, [r7, #16]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	3350      	adds	r3, #80	; 0x50
 8007770:	4618      	mov	r0, r3
 8007772:	f003 f911 	bl	800a998 <pvPortMalloc>
 8007776:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d011      	beq.n	80077a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	3350      	adds	r3, #80	; 0x50
 8007786:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007790:	79fa      	ldrb	r2, [r7, #7]
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	4613      	mov	r3, r2
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f805 	bl	80077ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077a2:	69bb      	ldr	r3, [r7, #24]
	}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e002      	b.n	80077ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077da:	2101      	movs	r1, #1
 80077dc:	69b8      	ldr	r0, [r7, #24]
 80077de:	f7ff fecb 	bl	8007578 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08e      	sub	sp, #56	; 0x38
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007802:	2300      	movs	r3, #0
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <xQueueGenericSend+0x32>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d103      	bne.n	8007834 <xQueueGenericSend+0x40>
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <xQueueGenericSend+0x44>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <xQueueGenericSend+0x46>
 8007838:	2300      	movs	r3, #0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <xQueueGenericSend+0x60>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d103      	bne.n	8007862 <xQueueGenericSend+0x6e>
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <xQueueGenericSend+0x72>
 8007862:	2301      	movs	r3, #1
 8007864:	e000      	b.n	8007868 <xQueueGenericSend+0x74>
 8007866:	2300      	movs	r3, #0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <xQueueGenericSend+0x8e>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	623b      	str	r3, [r7, #32]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007882:	f001 fee9 	bl	8009658 <xTaskGetSchedulerState>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <xQueueGenericSend+0x9e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <xQueueGenericSend+0xa2>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <xQueueGenericSend+0xa4>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	61fb      	str	r3, [r7, #28]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078b2:	f002 ff4f 	bl	800a754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078be:	429a      	cmp	r2, r3
 80078c0:	d302      	bcc.n	80078c8 <xQueueGenericSend+0xd4>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d129      	bne.n	800791c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	68b9      	ldr	r1, [r7, #8]
 80078cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ce:	f000 fbbb 	bl	8008048 <prvCopyDataToQueue>
 80078d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d010      	beq.n	80078fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	3324      	adds	r3, #36	; 0x24
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 fce7 	bl	80092b4 <xTaskRemoveFromEventList>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d013      	beq.n	8007914 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078ec:	4b3f      	ldr	r3, [pc, #252]	; (80079ec <xQueueGenericSend+0x1f8>)
 80078ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	e00a      	b.n	8007914 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007904:	4b39      	ldr	r3, [pc, #228]	; (80079ec <xQueueGenericSend+0x1f8>)
 8007906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007914:	f002 ff4e 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 8007918:	2301      	movs	r3, #1
 800791a:	e063      	b.n	80079e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d103      	bne.n	800792a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007922:	f002 ff47 	bl	800a7b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007926:	2300      	movs	r3, #0
 8007928:	e05c      	b.n	80079e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800792a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007930:	f107 0314 	add.w	r3, r7, #20
 8007934:	4618      	mov	r0, r3
 8007936:	f001 fd21 	bl	800937c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800793a:	2301      	movs	r3, #1
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800793e:	f002 ff39 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007942:	f001 fa8d 	bl	8008e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007946:	f002 ff05 	bl	800a754 <vPortEnterCritical>
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007950:	b25b      	sxtb	r3, r3
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007956:	d103      	bne.n	8007960 <xQueueGenericSend+0x16c>
 8007958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007966:	b25b      	sxtb	r3, r3
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800796c:	d103      	bne.n	8007976 <xQueueGenericSend+0x182>
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007976:	f002 ff1d 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800797a:	1d3a      	adds	r2, r7, #4
 800797c:	f107 0314 	add.w	r3, r7, #20
 8007980:	4611      	mov	r1, r2
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fd10 	bl	80093a8 <xTaskCheckForTimeOut>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d124      	bne.n	80079d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800798e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007990:	f000 fc52 	bl	8008238 <prvIsQueueFull>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d018      	beq.n	80079cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	3310      	adds	r3, #16
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 fc36 	bl	8009214 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079aa:	f000 fbdd 	bl	8008168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079ae:	f001 fa65 	bl	8008e7c <xTaskResumeAll>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f47f af7c 	bne.w	80078b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <xQueueGenericSend+0x1f8>)
 80079bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	e772      	b.n	80078b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ce:	f000 fbcb 	bl	8008168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079d2:	f001 fa53 	bl	8008e7c <xTaskResumeAll>
 80079d6:	e76c      	b.n	80078b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079da:	f000 fbc5 	bl	8008168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079de:	f001 fa4d 	bl	8008e7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3738      	adds	r7, #56	; 0x38
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b090      	sub	sp, #64	; 0x40
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <xQueueGenericSendFromISR+0x3c>
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <xQueueGenericSendFromISR+0x40>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <xQueueGenericSendFromISR+0x42>
 8007a30:	2300      	movs	r3, #0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d103      	bne.n	8007a5a <xQueueGenericSendFromISR+0x6a>
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <xQueueGenericSendFromISR+0x6e>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <xQueueGenericSendFromISR+0x70>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	623b      	str	r3, [r7, #32]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a7a:	f002 ff4d 	bl	800a918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	61fa      	str	r2, [r7, #28]
 8007a94:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d302      	bcc.n	8007aac <xQueueGenericSendFromISR+0xbc>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d12f      	bne.n	8007b0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	68b9      	ldr	r1, [r7, #8]
 8007ac0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ac2:	f000 fac1 	bl	8008048 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ac6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ace:	d112      	bne.n	8007af6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d016      	beq.n	8007b06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	3324      	adds	r3, #36	; 0x24
 8007adc:	4618      	mov	r0, r3
 8007ade:	f001 fbe9 	bl	80092b4 <xTaskRemoveFromEventList>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00e      	beq.n	8007b06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	e007      	b.n	8007b06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007af6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007afa:	3301      	adds	r3, #1
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	b25a      	sxtb	r2, r3
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b06:	2301      	movs	r3, #1
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b0a:	e001      	b.n	8007b10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b12:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3740      	adds	r7, #64	; 0x40
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b08e      	sub	sp, #56	; 0x38
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	623b      	str	r3, [r7, #32]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	61fb      	str	r3, [r7, #28]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <xQueueGiveFromISR+0x58>
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <xQueueGiveFromISR+0x5c>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <xQueueGiveFromISR+0x5e>
 8007b82:	2300      	movs	r3, #0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10a      	bne.n	8007b9e <xQueueGiveFromISR+0x78>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	61bb      	str	r3, [r7, #24]
}
 8007b9a:	bf00      	nop
 8007b9c:	e7fe      	b.n	8007b9c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b9e:	f002 febb 	bl	800a918 <vPortValidateInterruptPriority>
	__asm volatile
 8007ba2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	617a      	str	r2, [r7, #20]
 8007bb8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007bba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d22b      	bcs.n	8007c26 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007be0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be8:	d112      	bne.n	8007c10 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d016      	beq.n	8007c20 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	3324      	adds	r3, #36	; 0x24
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 fb5c 	bl	80092b4 <xTaskRemoveFromEventList>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00e      	beq.n	8007c20 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e007      	b.n	8007c20 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c14:	3301      	adds	r3, #1
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	b25a      	sxtb	r2, r3
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c20:	2301      	movs	r3, #1
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
 8007c24:	e001      	b.n	8007c2a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f383 8811 	msr	BASEPRI, r3
}
 8007c34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3738      	adds	r7, #56	; 0x38
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08c      	sub	sp, #48	; 0x30
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <xQueueReceive+0x30>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	623b      	str	r3, [r7, #32]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <xQueueReceive+0x3e>
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <xQueueReceive+0x42>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <xQueueReceive+0x44>
 8007c82:	2300      	movs	r3, #0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <xQueueReceive+0x5e>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	61fb      	str	r3, [r7, #28]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c9e:	f001 fcdb 	bl	8009658 <xTaskGetSchedulerState>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <xQueueReceive+0x6e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <xQueueReceive+0x72>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <xQueueReceive+0x74>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xQueueReceive+0x8e>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	61bb      	str	r3, [r7, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cce:	f002 fd41 	bl	800a754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01f      	beq.n	8007d1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce2:	f000 fa1b 	bl	800811c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	1e5a      	subs	r2, r3, #1
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00f      	beq.n	8007d16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	3310      	adds	r3, #16
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 fada 	bl	80092b4 <xTaskRemoveFromEventList>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d007      	beq.n	8007d16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d06:	4b3d      	ldr	r3, [pc, #244]	; (8007dfc <xQueueReceive+0x1bc>)
 8007d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d16:	f002 fd4d 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e069      	b.n	8007df2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d24:	f002 fd46 	bl	800a7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e062      	b.n	8007df2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d32:	f107 0310 	add.w	r3, r7, #16
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 fb20 	bl	800937c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d40:	f002 fd38 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d44:	f001 f88c 	bl	8008e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d48:	f002 fd04 	bl	800a754 <vPortEnterCritical>
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d52:	b25b      	sxtb	r3, r3
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d58:	d103      	bne.n	8007d62 <xQueueReceive+0x122>
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d68:	b25b      	sxtb	r3, r3
 8007d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d6e:	d103      	bne.n	8007d78 <xQueueReceive+0x138>
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d78:	f002 fd1c 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d7c:	1d3a      	adds	r2, r7, #4
 8007d7e:	f107 0310 	add.w	r3, r7, #16
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fb0f 	bl	80093a8 <xTaskCheckForTimeOut>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d123      	bne.n	8007dd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d92:	f000 fa3b 	bl	800820c <prvIsQueueEmpty>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d017      	beq.n	8007dcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	3324      	adds	r3, #36	; 0x24
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	4611      	mov	r1, r2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 fa35 	bl	8009214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dac:	f000 f9dc 	bl	8008168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007db0:	f001 f864 	bl	8008e7c <xTaskResumeAll>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d189      	bne.n	8007cce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007dba:	4b10      	ldr	r3, [pc, #64]	; (8007dfc <xQueueReceive+0x1bc>)
 8007dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	e780      	b.n	8007cce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dce:	f000 f9cb 	bl	8008168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dd2:	f001 f853 	bl	8008e7c <xTaskResumeAll>
 8007dd6:	e77a      	b.n	8007cce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dda:	f000 f9c5 	bl	8008168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dde:	f001 f84d 	bl	8008e7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de4:	f000 fa12 	bl	800820c <prvIsQueueEmpty>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f43f af6f 	beq.w	8007cce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007df0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3730      	adds	r7, #48	; 0x30
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08e      	sub	sp, #56	; 0x38
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	623b      	str	r3, [r7, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	61fb      	str	r3, [r7, #28]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e50:	f001 fc02 	bl	8009658 <xTaskGetSchedulerState>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <xQueueSemaphoreTake+0x60>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <xQueueSemaphoreTake+0x64>
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <xQueueSemaphoreTake+0x66>
 8007e64:	2300      	movs	r3, #0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10a      	bne.n	8007e80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	61bb      	str	r3, [r7, #24]
}
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e80:	f002 fc68 	bl	800a754 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d024      	beq.n	8007eda <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	1e5a      	subs	r2, r3, #1
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d104      	bne.n	8007eaa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ea0:	f001 fd50 	bl	8009944 <pvTaskIncrementMutexHeldCount>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00f      	beq.n	8007ed2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	3310      	adds	r3, #16
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 f9fc 	bl	80092b4 <xTaskRemoveFromEventList>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d007      	beq.n	8007ed2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ec2:	4b54      	ldr	r3, [pc, #336]	; (8008014 <xQueueSemaphoreTake+0x214>)
 8007ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ed2:	f002 fc6f 	bl	800a7b4 <vPortExitCritical>
				return pdPASS;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e097      	b.n	800800a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d111      	bne.n	8007f04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	617b      	str	r3, [r7, #20]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007efc:	f002 fc5a 	bl	800a7b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f00:	2300      	movs	r3, #0
 8007f02:	e082      	b.n	800800a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f0a:	f107 030c 	add.w	r3, r7, #12
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f001 fa34 	bl	800937c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f18:	f002 fc4c 	bl	800a7b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f1c:	f000 ffa0 	bl	8008e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f20:	f002 fc18 	bl	800a754 <vPortEnterCritical>
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f2a:	b25b      	sxtb	r3, r3
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f30:	d103      	bne.n	8007f3a <xQueueSemaphoreTake+0x13a>
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f40:	b25b      	sxtb	r3, r3
 8007f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f46:	d103      	bne.n	8007f50 <xQueueSemaphoreTake+0x150>
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f50:	f002 fc30 	bl	800a7b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f54:	463a      	mov	r2, r7
 8007f56:	f107 030c 	add.w	r3, r7, #12
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 fa23 	bl	80093a8 <xTaskCheckForTimeOut>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d132      	bne.n	8007fce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f6a:	f000 f94f 	bl	800820c <prvIsQueueEmpty>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d026      	beq.n	8007fc2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007f7c:	f002 fbea 	bl	800a754 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f001 fb85 	bl	8009694 <xTaskPriorityInherit>
 8007f8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f8c:	f002 fc12 	bl	800a7b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	3324      	adds	r3, #36	; 0x24
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 f93b 	bl	8009214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fa0:	f000 f8e2 	bl	8008168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fa4:	f000 ff6a 	bl	8008e7c <xTaskResumeAll>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f47f af68 	bne.w	8007e80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007fb0:	4b18      	ldr	r3, [pc, #96]	; (8008014 <xQueueSemaphoreTake+0x214>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	e75e      	b.n	8007e80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fc4:	f000 f8d0 	bl	8008168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fc8:	f000 ff58 	bl	8008e7c <xTaskResumeAll>
 8007fcc:	e758      	b.n	8007e80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fd0:	f000 f8ca 	bl	8008168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fd4:	f000 ff52 	bl	8008e7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fda:	f000 f917 	bl	800820c <prvIsQueueEmpty>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f43f af4d 	beq.w	8007e80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00d      	beq.n	8008008 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007fec:	f002 fbb2 	bl	800a754 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ff2:	f000 f811 	bl	8008018 <prvGetDisinheritPriorityAfterTimeout>
 8007ff6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 fc1e 	bl	8009840 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008004:	f002 fbd6 	bl	800a7b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008008:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800800a:	4618      	mov	r0, r3
 800800c:	3738      	adds	r7, #56	; 0x38
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d006      	beq.n	8008036 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	e001      	b.n	800803a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800803a:	68fb      	ldr	r3, [r7, #12]
	}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10d      	bne.n	8008082 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d14d      	bne.n	800810a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	4618      	mov	r0, r3
 8008074:	f001 fb76 	bl	8009764 <xTaskPriorityDisinherit>
 8008078:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	609a      	str	r2, [r3, #8]
 8008080:	e043      	b.n	800810a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d119      	bne.n	80080bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6858      	ldr	r0, [r3, #4]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008090:	461a      	mov	r2, r3
 8008092:	68b9      	ldr	r1, [r7, #8]
 8008094:	f003 fc32 	bl	800b8fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d32b      	bcc.n	800810a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	605a      	str	r2, [r3, #4]
 80080ba:	e026      	b.n	800810a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	68d8      	ldr	r0, [r3, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	461a      	mov	r2, r3
 80080c6:	68b9      	ldr	r1, [r7, #8]
 80080c8:	f003 fc18 	bl	800b8fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	425b      	negs	r3, r3
 80080d6:	441a      	add	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d207      	bcs.n	80080f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f0:	425b      	negs	r3, r3
 80080f2:	441a      	add	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d105      	bne.n	800810a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	3b01      	subs	r3, #1
 8008108:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008112:	697b      	ldr	r3, [r7, #20]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	2b00      	cmp	r3, #0
 800812c:	d018      	beq.n	8008160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	441a      	add	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	429a      	cmp	r2, r3
 8008146:	d303      	bcc.n	8008150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68d9      	ldr	r1, [r3, #12]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008158:	461a      	mov	r2, r3
 800815a:	6838      	ldr	r0, [r7, #0]
 800815c:	f003 fbce 	bl	800b8fc <memcpy>
	}
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008170:	f002 faf0 	bl	800a754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800817a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800817c:	e011      	b.n	80081a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	2b00      	cmp	r3, #0
 8008184:	d012      	beq.n	80081ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3324      	adds	r3, #36	; 0x24
 800818a:	4618      	mov	r0, r3
 800818c:	f001 f892 	bl	80092b4 <xTaskRemoveFromEventList>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008196:	f001 f969 	bl	800946c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	3b01      	subs	r3, #1
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dce9      	bgt.n	800817e <prvUnlockQueue+0x16>
 80081aa:	e000      	b.n	80081ae <prvUnlockQueue+0x46>
					break;
 80081ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	22ff      	movs	r2, #255	; 0xff
 80081b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081b6:	f002 fafd 	bl	800a7b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081ba:	f002 facb 	bl	800a754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081c6:	e011      	b.n	80081ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d012      	beq.n	80081f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3310      	adds	r3, #16
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 f86d 	bl	80092b4 <xTaskRemoveFromEventList>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081e0:	f001 f944 	bl	800946c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	dce9      	bgt.n	80081c8 <prvUnlockQueue+0x60>
 80081f4:	e000      	b.n	80081f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	22ff      	movs	r2, #255	; 0xff
 80081fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008200:	f002 fad8 	bl	800a7b4 <vPortExitCritical>
}
 8008204:	bf00      	nop
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008214:	f002 fa9e 	bl	800a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	2b00      	cmp	r3, #0
 800821e:	d102      	bne.n	8008226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008220:	2301      	movs	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e001      	b.n	800822a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800822a:	f002 fac3 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 800822e:	68fb      	ldr	r3, [r7, #12]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008240:	f002 fa88 	bl	800a754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824c:	429a      	cmp	r2, r3
 800824e:	d102      	bne.n	8008256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008250:	2301      	movs	r3, #1
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e001      	b.n	800825a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800825a:	f002 faab 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 800825e:	68fb      	ldr	r3, [r7, #12]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e014      	b.n	80082a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008278:	4a0f      	ldr	r2, [pc, #60]	; (80082b8 <vQueueAddToRegistry+0x50>)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10b      	bne.n	800829c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008284:	490c      	ldr	r1, [pc, #48]	; (80082b8 <vQueueAddToRegistry+0x50>)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800828e:	4a0a      	ldr	r2, [pc, #40]	; (80082b8 <vQueueAddToRegistry+0x50>)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	4413      	add	r3, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800829a:	e006      	b.n	80082aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3301      	adds	r3, #1
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b07      	cmp	r3, #7
 80082a6:	d9e7      	bls.n	8008278 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	200009dc 	.word	0x200009dc

080082bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082cc:	f002 fa42 	bl	800a754 <vPortEnterCritical>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082dc:	d103      	bne.n	80082e6 <vQueueWaitForMessageRestricted+0x2a>
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ec:	b25b      	sxtb	r3, r3
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f2:	d103      	bne.n	80082fc <vQueueWaitForMessageRestricted+0x40>
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082fc:	f002 fa5a 	bl	800a7b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	3324      	adds	r3, #36	; 0x24
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	4618      	mov	r0, r3
 8008312:	f000 ffa3 	bl	800925c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008316:	6978      	ldr	r0, [r7, #20]
 8008318:	f7ff ff26 	bl	8008168 <prvUnlockQueue>
	}
 800831c:	bf00      	nop
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08c      	sub	sp, #48	; 0x30
 8008328:	af02      	add	r7, sp, #8
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d110      	bne.n	8008358 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8008336:	2301      	movs	r3, #1
 8008338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b04      	cmp	r3, #4
 8008340:	d81b      	bhi.n	800837a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	61fb      	str	r3, [r7, #28]
}
 8008354:	bf00      	nop
 8008356:	e7fe      	b.n	8008356 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	61bb      	str	r3, [r7, #24]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	429a      	cmp	r2, r3
 8008380:	d90a      	bls.n	8008398 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	617b      	str	r3, [r7, #20]
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3324      	adds	r3, #36	; 0x24
 80083ac:	4618      	mov	r0, r3
 80083ae:	f002 faf3 	bl	800a998 <pvPortMalloc>
 80083b2:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80083c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	6a38      	ldr	r0, [r7, #32]
 80083cc:	f000 fab9 	bl	8008942 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80083d0:	6a3b      	ldr	r3, [r7, #32]
	}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3728      	adds	r7, #40	; 0x28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80083da:	b480      	push	{r7}
 80083dc:	b087      	sub	sp, #28
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10a      	bne.n	8008402 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	60fb      	str	r3, [r7, #12]
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4413      	add	r3, r2
 800840c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	3b01      	subs	r3, #1
 800841c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	429a      	cmp	r2, r3
 8008426:	d304      	bcc.n	8008432 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8008432:	697b      	ldr	r3, [r7, #20]
}
 8008434:	4618      	mov	r0, r3
 8008436:	371c      	adds	r7, #28
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b090      	sub	sp, #64	; 0x40
 8008444:	af02      	add	r7, sp, #8
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	623b      	str	r3, [r7, #32]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	61fb      	str	r3, [r7, #28]
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	7f1b      	ldrb	r3, [r3, #28]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849c:	3304      	adds	r3, #4
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80084a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084a2:	f7ff ff9a 	bl	80083da <xStreamBufferSpacesAvailable>
 80084a6:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80084a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084b4:	f000 f835 	bl	8008522 <prvWriteMessageToBuffer>
 80084b8:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d02b      	beq.n	8008518 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80084c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084c2:	f000 fa1e 	bl	8008902 <prvBytesInBuffer>
 80084c6:	4602      	mov	r2, r0
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d323      	bcc.n	8008518 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 80084d0:	f3ef 8211 	mrs	r2, BASEPRI
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	61ba      	str	r2, [r7, #24]
 80084e6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80084e8:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <xStreamBufferSendFromISR+0xcc>
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	6918      	ldr	r0, [r3, #16]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	2300      	movs	r3, #0
 80084fe:	2200      	movs	r2, #0
 8008500:	2100      	movs	r1, #0
 8008502:	f001 fb51 	bl	8009ba8 <xTaskGenericNotifyFromISR>
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	2200      	movs	r2, #0
 800850a:	611a      	str	r2, [r3, #16]
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f383 8811 	msr	BASEPRI, r3
}
 8008516:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800851a:	4618      	mov	r0, r3
 800851c:	3738      	adds	r7, #56	; 0x38
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b086      	sub	sp, #24
 8008526:	af00      	add	r7, sp, #0
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	607a      	str	r2, [r7, #4]
 800852e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]
 800853a:	e01d      	b.n	8008578 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	7f1b      	ldrb	r3, [r3, #28]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d108      	bne.n	800855a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8008548:	2301      	movs	r3, #1
 800854a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	4293      	cmp	r3, r2
 8008552:	bf28      	it	cs
 8008554:	4613      	movcs	r3, r2
 8008556:	607b      	str	r3, [r7, #4]
 8008558:	e00e      	b.n	8008578 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	429a      	cmp	r2, r3
 8008560:	d308      	bcc.n	8008574 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8008562:	2301      	movs	r3, #1
 8008564:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	2204      	movs	r2, #4
 800856a:	4619      	mov	r1, r3
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 f8dc 	bl	800872a <prvWriteBytesToBuffer>
 8008572:	e001      	b.n	8008578 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8008574:	2300      	movs	r3, #0
 8008576:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d007      	beq.n	800858e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	461a      	mov	r2, r3
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 f8d0 	bl	800872a <prvWriteBytesToBuffer>
 800858a:	6138      	str	r0, [r7, #16]
 800858c:	e001      	b.n	8008592 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8008592:	693b      	ldr	r3, [r7, #16]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08e      	sub	sp, #56	; 0x38
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80085ae:	2300      	movs	r3, #0
 80085b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10a      	bne.n	80085ce <xStreamBufferReceive+0x32>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	61fb      	str	r3, [r7, #28]
}
 80085ca:	bf00      	nop
 80085cc:	e7fe      	b.n	80085cc <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10a      	bne.n	80085ea <xStreamBufferReceive+0x4e>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	61bb      	str	r3, [r7, #24]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	7f1b      	ldrb	r3, [r3, #28]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80085f6:	2304      	movs	r3, #4
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
 80085fa:	e001      	b.n	8008600 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d034      	beq.n	8008670 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8008606:	f002 f8a5 	bl	800a754 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800860a:	6a38      	ldr	r0, [r7, #32]
 800860c:	f000 f979 	bl	8008902 <prvBytesInBuffer>
 8008610:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	429a      	cmp	r2, r3
 8008618:	d816      	bhi.n	8008648 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800861a:	2000      	movs	r0, #0
 800861c:	f001 fba8 	bl	8009d70 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00a      	beq.n	800863e <xStreamBufferReceive+0xa2>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	617b      	str	r3, [r7, #20]
}
 800863a:	bf00      	nop
 800863c:	e7fe      	b.n	800863c <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800863e:	f000 fffb 	bl	8009638 <xTaskGetCurrentTaskHandle>
 8008642:	4602      	mov	r2, r0
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008648:	f002 f8b4 	bl	800a7b4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800864c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800864e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008650:	429a      	cmp	r2, r3
 8008652:	d811      	bhi.n	8008678 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	2100      	movs	r1, #0
 800865a:	2000      	movs	r0, #0
 800865c:	f001 f986 	bl	800996c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	2200      	movs	r2, #0
 8008664:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008666:	6a38      	ldr	r0, [r7, #32]
 8008668:	f000 f94b 	bl	8008902 <prvBytesInBuffer>
 800866c:	62b8      	str	r0, [r7, #40]	; 0x28
 800866e:	e003      	b.n	8008678 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008670:	6a38      	ldr	r0, [r7, #32]
 8008672:	f000 f946 	bl	8008902 <prvBytesInBuffer>
 8008676:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8008678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	429a      	cmp	r2, r3
 800867e:	d91d      	bls.n	80086bc <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	6a38      	ldr	r0, [r7, #32]
 800868c:	f000 f81b 	bl	80086c6 <prvReadMessageFromBuffer>
 8008690:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d011      	beq.n	80086bc <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8008698:	f000 fbe2 	bl	8008e60 <vTaskSuspendAll>
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d009      	beq.n	80086b8 <xStreamBufferReceive+0x11c>
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	6958      	ldr	r0, [r3, #20]
 80086a8:	2300      	movs	r3, #0
 80086aa:	2200      	movs	r2, #0
 80086ac:	2100      	movs	r1, #0
 80086ae:	f001 f9bd 	bl	8009a2c <xTaskGenericNotify>
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	2200      	movs	r2, #0
 80086b6:	615a      	str	r2, [r3, #20]
 80086b8:	f000 fbe0 	bl	8008e7c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3730      	adds	r7, #48	; 0x30
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b088      	sub	sp, #32
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	607a      	str	r2, [r7, #4]
 80086d2:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d019      	beq.n	800870e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80086e0:	f107 0110 	add.w	r1, r7, #16
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f890 	bl	800880e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d907      	bls.n	8008712 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	61fb      	str	r3, [r7, #28]
 800870c:	e001      	b.n	8008712 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 f878 	bl	800880e <prvReadBytesFromBuffer>
 800871e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8008720:	697b      	ldr	r3, [r7, #20]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b08a      	sub	sp, #40	; 0x28
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	61fb      	str	r3, [r7, #28]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	4293      	cmp	r3, r2
 8008764:	bf28      	it	cs
 8008766:	4613      	movcs	r3, r2
 8008768:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800876a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	441a      	add	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	429a      	cmp	r2, r3
 8008776:	d90a      	bls.n	800878e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	61bb      	str	r3, [r7, #24]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	699a      	ldr	r2, [r3, #24]
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	4413      	add	r3, r2
 8008796:	6a3a      	ldr	r2, [r7, #32]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	4618      	mov	r0, r3
 800879c:	f003 f8ae 	bl	800b8fc <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d91c      	bls.n	80087e2 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	1ad2      	subs	r2, r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d90a      	bls.n	80087cc <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	617b      	str	r3, [r7, #20]
}
 80087c8:	bf00      	nop
 80087ca:	e7fe      	b.n	80087ca <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6998      	ldr	r0, [r3, #24]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	18d1      	adds	r1, r2, r3
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	f003 f88d 	bl	800b8fc <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80087e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4413      	add	r3, r2
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d304      	bcc.n	80087fe <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008802:	605a      	str	r2, [r3, #4]

	return xCount;
 8008804:	687b      	ldr	r3, [r7, #4]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3728      	adds	r7, #40	; 0x28
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b08a      	sub	sp, #40	; 0x28
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
 800881a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	4293      	cmp	r3, r2
 8008822:	bf28      	it	cs
 8008824:	4613      	movcs	r3, r2
 8008826:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d064      	beq.n	80088f8 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	6a3a      	ldr	r2, [r7, #32]
 800883e:	4293      	cmp	r3, r2
 8008840:	bf28      	it	cs
 8008842:	4613      	movcs	r3, r2
 8008844:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	429a      	cmp	r2, r3
 800884c:	d90a      	bls.n	8008864 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	61bb      	str	r3, [r7, #24]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	441a      	add	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	429a      	cmp	r2, r3
 8008870:	d90a      	bls.n	8008888 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	617b      	str	r3, [r7, #20]
}
 8008884:	bf00      	nop
 8008886:	e7fe      	b.n	8008886 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	4413      	add	r3, r2
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	4619      	mov	r1, r3
 8008894:	68b8      	ldr	r0, [r7, #8]
 8008896:	f003 f831 	bl	800b8fc <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800889a:	6a3a      	ldr	r2, [r7, #32]
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d919      	bls.n	80088d6 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d90a      	bls.n	80088c0 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	613b      	str	r3, [r7, #16]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	18d0      	adds	r0, r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6999      	ldr	r1, [r3, #24]
 80088ca:	6a3a      	ldr	r2, [r7, #32]
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	461a      	mov	r2, r3
 80088d2:	f003 f813 	bl	800b8fc <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80088d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	4413      	add	r3, r2
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d304      	bcc.n	80088f2 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f6:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80088f8:	6a3b      	ldr	r3, [r7, #32]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3728      	adds	r7, #40	; 0x28
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	4413      	add	r3, r2
 8008914:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	429a      	cmp	r2, r3
 8008928:	d304      	bcc.n	8008934 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008934:	68fb      	ldr	r3, [r7, #12]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b086      	sub	sp, #24
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8008950:	2355      	movs	r3, #85	; 0x55
 8008952:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	6979      	ldr	r1, [r7, #20]
 8008958:	68b8      	ldr	r0, [r7, #8]
 800895a:	f002 ffdd 	bl	800b918 <memset>
 800895e:	4602      	mov	r2, r0
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4293      	cmp	r3, r2
 8008964:	d00a      	beq.n	800897c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	613b      	str	r3, [r7, #16]
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800897c:	2224      	movs	r2, #36	; 0x24
 800897e:	2100      	movs	r1, #0
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f002 ffc9 	bl	800b918 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800899e:	771a      	strb	r2, [r3, #28]
}
 80089a0:	bf00      	nop
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08e      	sub	sp, #56	; 0x38
 80089ac:	af04      	add	r7, sp, #16
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	623b      	str	r3, [r7, #32]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10a      	bne.n	80089ee <xTaskCreateStatic+0x46>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	61fb      	str	r3, [r7, #28]
}
 80089ea:	bf00      	nop
 80089ec:	e7fe      	b.n	80089ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089ee:	23cc      	movs	r3, #204	; 0xcc
 80089f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2bcc      	cmp	r3, #204	; 0xcc
 80089f6:	d00a      	beq.n	8008a0e <xTaskCreateStatic+0x66>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	61bb      	str	r3, [r7, #24]
}
 8008a0a:	bf00      	nop
 8008a0c:	e7fe      	b.n	8008a0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d01e      	beq.n	8008a54 <xTaskCreateStatic+0xac>
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01b      	beq.n	8008a54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9303      	str	r3, [sp, #12]
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	9302      	str	r3, [sp, #8]
 8008a36:	f107 0314 	add.w	r3, r7, #20
 8008a3a:	9301      	str	r3, [sp, #4]
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	68b9      	ldr	r1, [r7, #8]
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f850 	bl	8008aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a4e:	f000 f8f3 	bl	8008c38 <prvAddNewTaskToReadyList>
 8008a52:	e001      	b.n	8008a58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a58:	697b      	ldr	r3, [r7, #20]
	}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3728      	adds	r7, #40	; 0x28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b08c      	sub	sp, #48	; 0x30
 8008a66:	af04      	add	r7, sp, #16
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	603b      	str	r3, [r7, #0]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 ff8e 	bl	800a998 <pvPortMalloc>
 8008a7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a84:	20cc      	movs	r0, #204	; 0xcc
 8008a86:	f001 ff87 	bl	800a998 <pvPortMalloc>
 8008a8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	697a      	ldr	r2, [r7, #20]
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
 8008a98:	e005      	b.n	8008aa6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a9a:	6978      	ldr	r0, [r7, #20]
 8008a9c:	f002 f848 	bl	800ab30 <vPortFree>
 8008aa0:	e001      	b.n	8008aa6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d017      	beq.n	8008adc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ab4:	88fa      	ldrh	r2, [r7, #6]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9303      	str	r3, [sp, #12]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 f80e 	bl	8008aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ad0:	69f8      	ldr	r0, [r7, #28]
 8008ad2:	f000 f8b1 	bl	8008c38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	61bb      	str	r3, [r7, #24]
 8008ada:	e002      	b.n	8008ae2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ae0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3720      	adds	r7, #32
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	461a      	mov	r2, r3
 8008b04:	21a5      	movs	r1, #165	; 0xa5
 8008b06:	f002 ff07 	bl	800b918 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b14:	3b01      	subs	r3, #1
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	f023 0307 	bic.w	r3, r3, #7
 8008b22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	617b      	str	r3, [r7, #20]
}
 8008b40:	bf00      	nop
 8008b42:	e7fe      	b.n	8008b42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d01f      	beq.n	8008b8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	61fb      	str	r3, [r7, #28]
 8008b4e:	e012      	b.n	8008b76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	7819      	ldrb	r1, [r3, #0]
 8008b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	3334      	adds	r3, #52	; 0x34
 8008b60:	460a      	mov	r2, r1
 8008b62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	4413      	add	r3, r2
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d006      	beq.n	8008b7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	3301      	adds	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	2b1f      	cmp	r3, #31
 8008b7a:	d9e9      	bls.n	8008b50 <prvInitialiseNewTask+0x64>
 8008b7c:	e000      	b.n	8008b80 <prvInitialiseNewTask+0x94>
			{
				break;
 8008b7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008b88:	e003      	b.n	8008b92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	2b37      	cmp	r3, #55	; 0x37
 8008b96:	d901      	bls.n	8008b9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b98:	2337      	movs	r3, #55	; 0x37
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ba0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ba6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008baa:	2200      	movs	r2, #0
 8008bac:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fc4c 	bl	8007450 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	3318      	adds	r3, #24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe fc47 	bl	8007450 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	3364      	adds	r3, #100	; 0x64
 8008bec:	2260      	movs	r2, #96	; 0x60
 8008bee:	2100      	movs	r1, #0
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f002 fe91 	bl	800b918 <memset>
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf8:	4a0c      	ldr	r2, [pc, #48]	; (8008c2c <prvInitialiseNewTask+0x140>)
 8008bfa:	669a      	str	r2, [r3, #104]	; 0x68
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	4a0c      	ldr	r2, [pc, #48]	; (8008c30 <prvInitialiseNewTask+0x144>)
 8008c00:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	4a0b      	ldr	r2, [pc, #44]	; (8008c34 <prvInitialiseNewTask+0x148>)
 8008c06:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	68f9      	ldr	r1, [r7, #12]
 8008c0c:	69b8      	ldr	r0, [r7, #24]
 8008c0e:	f001 fc77 	bl	800a500 <pxPortInitialiseStack>
 8008c12:	4602      	mov	r2, r0
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c24:	bf00      	nop
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	0800bbd0 	.word	0x0800bbd0
 8008c30:	0800bbf0 	.word	0x0800bbf0
 8008c34:	0800bbb0 	.word	0x0800bbb0

08008c38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c40:	f001 fd88 	bl	800a754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c44:	4b2d      	ldr	r3, [pc, #180]	; (8008cfc <prvAddNewTaskToReadyList+0xc4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	4a2c      	ldr	r2, [pc, #176]	; (8008cfc <prvAddNewTaskToReadyList+0xc4>)
 8008c4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c4e:	4b2c      	ldr	r3, [pc, #176]	; (8008d00 <prvAddNewTaskToReadyList+0xc8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c56:	4a2a      	ldr	r2, [pc, #168]	; (8008d00 <prvAddNewTaskToReadyList+0xc8>)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c5c:	4b27      	ldr	r3, [pc, #156]	; (8008cfc <prvAddNewTaskToReadyList+0xc4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d110      	bne.n	8008c86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c64:	f000 fc26 	bl	80094b4 <prvInitialiseTaskLists>
 8008c68:	e00d      	b.n	8008c86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c6a:	4b26      	ldr	r3, [pc, #152]	; (8008d04 <prvAddNewTaskToReadyList+0xcc>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d109      	bne.n	8008c86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c72:	4b23      	ldr	r3, [pc, #140]	; (8008d00 <prvAddNewTaskToReadyList+0xc8>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d802      	bhi.n	8008c86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c80:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <prvAddNewTaskToReadyList+0xc8>)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c86:	4b20      	ldr	r3, [pc, #128]	; (8008d08 <prvAddNewTaskToReadyList+0xd0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	4a1e      	ldr	r2, [pc, #120]	; (8008d08 <prvAddNewTaskToReadyList+0xd0>)
 8008c8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c90:	4b1d      	ldr	r3, [pc, #116]	; (8008d08 <prvAddNewTaskToReadyList+0xd0>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9c:	4b1b      	ldr	r3, [pc, #108]	; (8008d0c <prvAddNewTaskToReadyList+0xd4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d903      	bls.n	8008cac <prvAddNewTaskToReadyList+0x74>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca8:	4a18      	ldr	r2, [pc, #96]	; (8008d0c <prvAddNewTaskToReadyList+0xd4>)
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4a15      	ldr	r2, [pc, #84]	; (8008d10 <prvAddNewTaskToReadyList+0xd8>)
 8008cba:	441a      	add	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	f7fe fbd1 	bl	800746a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cc8:	f001 fd74 	bl	800a7b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <prvAddNewTaskToReadyList+0xcc>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00e      	beq.n	8008cf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <prvAddNewTaskToReadyList+0xc8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d207      	bcs.n	8008cf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ce2:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <prvAddNewTaskToReadyList+0xdc>)
 8008ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000ef0 	.word	0x20000ef0
 8008d00:	20000a1c 	.word	0x20000a1c
 8008d04:	20000efc 	.word	0x20000efc
 8008d08:	20000f0c 	.word	0x20000f0c
 8008d0c:	20000ef8 	.word	0x20000ef8
 8008d10:	20000a20 	.word	0x20000a20
 8008d14:	e000ed04 	.word	0xe000ed04

08008d18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d017      	beq.n	8008d5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d2a:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <vTaskDelay+0x60>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00a      	beq.n	8008d48 <vTaskDelay+0x30>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	60bb      	str	r3, [r7, #8]
}
 8008d44:	bf00      	nop
 8008d46:	e7fe      	b.n	8008d46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d48:	f000 f88a 	bl	8008e60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 f834 	bl	8009dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d54:	f000 f892 	bl	8008e7c <xTaskResumeAll>
 8008d58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d107      	bne.n	8008d70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d60:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <vTaskDelay+0x64>)
 8008d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000f18 	.word	0x20000f18
 8008d7c:	e000ed04 	.word	0xe000ed04

08008d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08a      	sub	sp, #40	; 0x28
 8008d84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d8e:	463a      	mov	r2, r7
 8008d90:	1d39      	adds	r1, r7, #4
 8008d92:	f107 0308 	add.w	r3, r7, #8
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe fb06 	bl	80073a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	9202      	str	r2, [sp, #8]
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	2300      	movs	r3, #0
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	2300      	movs	r3, #0
 8008dac:	460a      	mov	r2, r1
 8008dae:	4924      	ldr	r1, [pc, #144]	; (8008e40 <vTaskStartScheduler+0xc0>)
 8008db0:	4824      	ldr	r0, [pc, #144]	; (8008e44 <vTaskStartScheduler+0xc4>)
 8008db2:	f7ff fdf9 	bl	80089a8 <xTaskCreateStatic>
 8008db6:	4603      	mov	r3, r0
 8008db8:	4a23      	ldr	r2, [pc, #140]	; (8008e48 <vTaskStartScheduler+0xc8>)
 8008dba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008dbc:	4b22      	ldr	r3, [pc, #136]	; (8008e48 <vTaskStartScheduler+0xc8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	e001      	b.n	8008dce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d102      	bne.n	8008dda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dd4:	f001 f846 	bl	8009e64 <xTimerCreateTimerTask>
 8008dd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d11b      	bne.n	8008e18 <vTaskStartScheduler+0x98>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	613b      	str	r3, [r7, #16]
}
 8008df2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008df4:	4b15      	ldr	r3, [pc, #84]	; (8008e4c <vTaskStartScheduler+0xcc>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3364      	adds	r3, #100	; 0x64
 8008dfa:	4a15      	ldr	r2, [pc, #84]	; (8008e50 <vTaskStartScheduler+0xd0>)
 8008dfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dfe:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <vTaskStartScheduler+0xd4>)
 8008e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e06:	4b14      	ldr	r3, [pc, #80]	; (8008e58 <vTaskStartScheduler+0xd8>)
 8008e08:	2201      	movs	r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e0c:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <vTaskStartScheduler+0xdc>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e12:	f001 fbfd 	bl	800a610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e16:	e00e      	b.n	8008e36 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e1e:	d10a      	bne.n	8008e36 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	60fb      	str	r3, [r7, #12]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <vTaskStartScheduler+0xb4>
}
 8008e36:	bf00      	nop
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	0800bb14 	.word	0x0800bb14
 8008e44:	08009485 	.word	0x08009485
 8008e48:	20000f14 	.word	0x20000f14
 8008e4c:	20000a1c 	.word	0x20000a1c
 8008e50:	20000100 	.word	0x20000100
 8008e54:	20000f10 	.word	0x20000f10
 8008e58:	20000efc 	.word	0x20000efc
 8008e5c:	20000ef4 	.word	0x20000ef4

08008e60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e60:	b480      	push	{r7}
 8008e62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e64:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <vTaskSuspendAll+0x18>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	4a03      	ldr	r2, [pc, #12]	; (8008e78 <vTaskSuspendAll+0x18>)
 8008e6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e6e:	bf00      	nop
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	20000f18 	.word	0x20000f18

08008e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e8a:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <xTaskResumeAll+0x118>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	603b      	str	r3, [r7, #0]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ea8:	f001 fc54 	bl	800a754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008eac:	4b39      	ldr	r3, [pc, #228]	; (8008f94 <xTaskResumeAll+0x118>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	4a38      	ldr	r2, [pc, #224]	; (8008f94 <xTaskResumeAll+0x118>)
 8008eb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb6:	4b37      	ldr	r3, [pc, #220]	; (8008f94 <xTaskResumeAll+0x118>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d162      	bne.n	8008f84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ebe:	4b36      	ldr	r3, [pc, #216]	; (8008f98 <xTaskResumeAll+0x11c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d05e      	beq.n	8008f84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ec6:	e02f      	b.n	8008f28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ec8:	4b34      	ldr	r3, [pc, #208]	; (8008f9c <xTaskResumeAll+0x120>)
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3318      	adds	r3, #24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fb25 	bl	8007524 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3304      	adds	r3, #4
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fb20 	bl	8007524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee8:	4b2d      	ldr	r3, [pc, #180]	; (8008fa0 <xTaskResumeAll+0x124>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d903      	bls.n	8008ef8 <xTaskResumeAll+0x7c>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	4a2a      	ldr	r2, [pc, #168]	; (8008fa0 <xTaskResumeAll+0x124>)
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efc:	4613      	mov	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4a27      	ldr	r2, [pc, #156]	; (8008fa4 <xTaskResumeAll+0x128>)
 8008f06:	441a      	add	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4610      	mov	r0, r2
 8008f10:	f7fe faab 	bl	800746a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f18:	4b23      	ldr	r3, [pc, #140]	; (8008fa8 <xTaskResumeAll+0x12c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d302      	bcc.n	8008f28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f22:	4b22      	ldr	r3, [pc, #136]	; (8008fac <xTaskResumeAll+0x130>)
 8008f24:	2201      	movs	r2, #1
 8008f26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f28:	4b1c      	ldr	r3, [pc, #112]	; (8008f9c <xTaskResumeAll+0x120>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1cb      	bne.n	8008ec8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f36:	f000 fb5f 	bl	80095f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f3a:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <xTaskResumeAll+0x134>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d010      	beq.n	8008f68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f46:	f000 f847 	bl	8008fd8 <xTaskIncrementTick>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f50:	4b16      	ldr	r3, [pc, #88]	; (8008fac <xTaskResumeAll+0x130>)
 8008f52:	2201      	movs	r2, #1
 8008f54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1f1      	bne.n	8008f46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f62:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <xTaskResumeAll+0x134>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f68:	4b10      	ldr	r3, [pc, #64]	; (8008fac <xTaskResumeAll+0x130>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d009      	beq.n	8008f84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f74:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <xTaskResumeAll+0x138>)
 8008f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f84:	f001 fc16 	bl	800a7b4 <vPortExitCritical>

	return xAlreadyYielded;
 8008f88:	68bb      	ldr	r3, [r7, #8]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20000f18 	.word	0x20000f18
 8008f98:	20000ef0 	.word	0x20000ef0
 8008f9c:	20000eb0 	.word	0x20000eb0
 8008fa0:	20000ef8 	.word	0x20000ef8
 8008fa4:	20000a20 	.word	0x20000a20
 8008fa8:	20000a1c 	.word	0x20000a1c
 8008fac:	20000f04 	.word	0x20000f04
 8008fb0:	20000f00 	.word	0x20000f00
 8008fb4:	e000ed04 	.word	0xe000ed04

08008fb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fbe:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <xTaskGetTickCount+0x1c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fc4:	687b      	ldr	r3, [r7, #4]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	20000ef4 	.word	0x20000ef4

08008fd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fe2:	4b4f      	ldr	r3, [pc, #316]	; (8009120 <xTaskIncrementTick+0x148>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f040 808f 	bne.w	800910a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fec:	4b4d      	ldr	r3, [pc, #308]	; (8009124 <xTaskIncrementTick+0x14c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ff4:	4a4b      	ldr	r2, [pc, #300]	; (8009124 <xTaskIncrementTick+0x14c>)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d120      	bne.n	8009042 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009000:	4b49      	ldr	r3, [pc, #292]	; (8009128 <xTaskIncrementTick+0x150>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <xTaskIncrementTick+0x48>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	603b      	str	r3, [r7, #0]
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <xTaskIncrementTick+0x46>
 8009020:	4b41      	ldr	r3, [pc, #260]	; (8009128 <xTaskIncrementTick+0x150>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	4b41      	ldr	r3, [pc, #260]	; (800912c <xTaskIncrementTick+0x154>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a3f      	ldr	r2, [pc, #252]	; (8009128 <xTaskIncrementTick+0x150>)
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	4a3f      	ldr	r2, [pc, #252]	; (800912c <xTaskIncrementTick+0x154>)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	4b3e      	ldr	r3, [pc, #248]	; (8009130 <xTaskIncrementTick+0x158>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3301      	adds	r3, #1
 800903a:	4a3d      	ldr	r2, [pc, #244]	; (8009130 <xTaskIncrementTick+0x158>)
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	f000 fadb 	bl	80095f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009042:	4b3c      	ldr	r3, [pc, #240]	; (8009134 <xTaskIncrementTick+0x15c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	429a      	cmp	r2, r3
 800904a:	d349      	bcc.n	80090e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800904c:	4b36      	ldr	r3, [pc, #216]	; (8009128 <xTaskIncrementTick+0x150>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d104      	bne.n	8009060 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009056:	4b37      	ldr	r3, [pc, #220]	; (8009134 <xTaskIncrementTick+0x15c>)
 8009058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800905c:	601a      	str	r2, [r3, #0]
					break;
 800905e:	e03f      	b.n	80090e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009060:	4b31      	ldr	r3, [pc, #196]	; (8009128 <xTaskIncrementTick+0x150>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d203      	bcs.n	8009080 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009078:	4a2e      	ldr	r2, [pc, #184]	; (8009134 <xTaskIncrementTick+0x15c>)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800907e:	e02f      	b.n	80090e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	3304      	adds	r3, #4
 8009084:	4618      	mov	r0, r3
 8009086:	f7fe fa4d 	bl	8007524 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908e:	2b00      	cmp	r3, #0
 8009090:	d004      	beq.n	800909c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	3318      	adds	r3, #24
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe fa44 	bl	8007524 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a0:	4b25      	ldr	r3, [pc, #148]	; (8009138 <xTaskIncrementTick+0x160>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d903      	bls.n	80090b0 <xTaskIncrementTick+0xd8>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	4a22      	ldr	r2, [pc, #136]	; (8009138 <xTaskIncrementTick+0x160>)
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4a1f      	ldr	r2, [pc, #124]	; (800913c <xTaskIncrementTick+0x164>)
 80090be:	441a      	add	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f7fe f9cf 	bl	800746a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d0:	4b1b      	ldr	r3, [pc, #108]	; (8009140 <xTaskIncrementTick+0x168>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d3b8      	bcc.n	800904c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090da:	2301      	movs	r3, #1
 80090dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090de:	e7b5      	b.n	800904c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090e0:	4b17      	ldr	r3, [pc, #92]	; (8009140 <xTaskIncrementTick+0x168>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e6:	4915      	ldr	r1, [pc, #84]	; (800913c <xTaskIncrementTick+0x164>)
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d901      	bls.n	80090fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090f8:	2301      	movs	r3, #1
 80090fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090fc:	4b11      	ldr	r3, [pc, #68]	; (8009144 <xTaskIncrementTick+0x16c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d007      	beq.n	8009114 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009104:	2301      	movs	r3, #1
 8009106:	617b      	str	r3, [r7, #20]
 8009108:	e004      	b.n	8009114 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <xTaskIncrementTick+0x170>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3301      	adds	r3, #1
 8009110:	4a0d      	ldr	r2, [pc, #52]	; (8009148 <xTaskIncrementTick+0x170>)
 8009112:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009114:	697b      	ldr	r3, [r7, #20]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000f18 	.word	0x20000f18
 8009124:	20000ef4 	.word	0x20000ef4
 8009128:	20000ea8 	.word	0x20000ea8
 800912c:	20000eac 	.word	0x20000eac
 8009130:	20000f08 	.word	0x20000f08
 8009134:	20000f10 	.word	0x20000f10
 8009138:	20000ef8 	.word	0x20000ef8
 800913c:	20000a20 	.word	0x20000a20
 8009140:	20000a1c 	.word	0x20000a1c
 8009144:	20000f04 	.word	0x20000f04
 8009148:	20000f00 	.word	0x20000f00

0800914c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009152:	4b2a      	ldr	r3, [pc, #168]	; (80091fc <vTaskSwitchContext+0xb0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800915a:	4b29      	ldr	r3, [pc, #164]	; (8009200 <vTaskSwitchContext+0xb4>)
 800915c:	2201      	movs	r2, #1
 800915e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009160:	e046      	b.n	80091f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009162:	4b27      	ldr	r3, [pc, #156]	; (8009200 <vTaskSwitchContext+0xb4>)
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009168:	4b26      	ldr	r3, [pc, #152]	; (8009204 <vTaskSwitchContext+0xb8>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	e010      	b.n	8009192 <vTaskSwitchContext+0x46>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10a      	bne.n	800918c <vTaskSwitchContext+0x40>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	607b      	str	r3, [r7, #4]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <vTaskSwitchContext+0x3e>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3b01      	subs	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	491d      	ldr	r1, [pc, #116]	; (8009208 <vTaskSwitchContext+0xbc>)
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	440b      	add	r3, r1
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0e4      	beq.n	8009170 <vTaskSwitchContext+0x24>
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	4613      	mov	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4a15      	ldr	r2, [pc, #84]	; (8009208 <vTaskSwitchContext+0xbc>)
 80091b2:	4413      	add	r3, r2
 80091b4:	60bb      	str	r3, [r7, #8]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	605a      	str	r2, [r3, #4]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	3308      	adds	r3, #8
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d104      	bne.n	80091d6 <vTaskSwitchContext+0x8a>
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	605a      	str	r2, [r3, #4]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	4a0b      	ldr	r2, [pc, #44]	; (800920c <vTaskSwitchContext+0xc0>)
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	4a08      	ldr	r2, [pc, #32]	; (8009204 <vTaskSwitchContext+0xb8>)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091e6:	4b09      	ldr	r3, [pc, #36]	; (800920c <vTaskSwitchContext+0xc0>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3364      	adds	r3, #100	; 0x64
 80091ec:	4a08      	ldr	r2, [pc, #32]	; (8009210 <vTaskSwitchContext+0xc4>)
 80091ee:	6013      	str	r3, [r2, #0]
}
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	20000f18 	.word	0x20000f18
 8009200:	20000f04 	.word	0x20000f04
 8009204:	20000ef8 	.word	0x20000ef8
 8009208:	20000a20 	.word	0x20000a20
 800920c:	20000a1c 	.word	0x20000a1c
 8009210:	20000100 	.word	0x20000100

08009214 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	60fb      	str	r3, [r7, #12]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800923a:	4b07      	ldr	r3, [pc, #28]	; (8009258 <vTaskPlaceOnEventList+0x44>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3318      	adds	r3, #24
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fe f935 	bl	80074b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009248:	2101      	movs	r1, #1
 800924a:	6838      	ldr	r0, [r7, #0]
 800924c:	f000 fdb6 	bl	8009dbc <prvAddCurrentTaskToDelayedList>
}
 8009250:	bf00      	nop
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	20000a1c 	.word	0x20000a1c

0800925c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	617b      	str	r3, [r7, #20]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009284:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3318      	adds	r3, #24
 800928a:	4619      	mov	r1, r3
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7fe f8ec 	bl	800746a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800929c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	68b8      	ldr	r0, [r7, #8]
 80092a2:	f000 fd8b 	bl	8009dbc <prvAddCurrentTaskToDelayedList>
	}
 80092a6:	bf00      	nop
 80092a8:	3718      	adds	r7, #24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20000a1c 	.word	0x20000a1c

080092b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10a      	bne.n	80092e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	60fb      	str	r3, [r7, #12]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	3318      	adds	r3, #24
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fe f91d 	bl	8007524 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ea:	4b1e      	ldr	r3, [pc, #120]	; (8009364 <xTaskRemoveFromEventList+0xb0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d11d      	bne.n	800932e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe f914 	bl	8007524 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009300:	4b19      	ldr	r3, [pc, #100]	; (8009368 <xTaskRemoveFromEventList+0xb4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	429a      	cmp	r2, r3
 8009306:	d903      	bls.n	8009310 <xTaskRemoveFromEventList+0x5c>
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	4a16      	ldr	r2, [pc, #88]	; (8009368 <xTaskRemoveFromEventList+0xb4>)
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4a13      	ldr	r2, [pc, #76]	; (800936c <xTaskRemoveFromEventList+0xb8>)
 800931e:	441a      	add	r2, r3
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	3304      	adds	r3, #4
 8009324:	4619      	mov	r1, r3
 8009326:	4610      	mov	r0, r2
 8009328:	f7fe f89f 	bl	800746a <vListInsertEnd>
 800932c:	e005      	b.n	800933a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	3318      	adds	r3, #24
 8009332:	4619      	mov	r1, r3
 8009334:	480e      	ldr	r0, [pc, #56]	; (8009370 <xTaskRemoveFromEventList+0xbc>)
 8009336:	f7fe f898 	bl	800746a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933e:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <xTaskRemoveFromEventList+0xc0>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009344:	429a      	cmp	r2, r3
 8009346:	d905      	bls.n	8009354 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009348:	2301      	movs	r3, #1
 800934a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800934c:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <xTaskRemoveFromEventList+0xc4>)
 800934e:	2201      	movs	r2, #1
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e001      	b.n	8009358 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009358:	697b      	ldr	r3, [r7, #20]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000f18 	.word	0x20000f18
 8009368:	20000ef8 	.word	0x20000ef8
 800936c:	20000a20 	.word	0x20000a20
 8009370:	20000eb0 	.word	0x20000eb0
 8009374:	20000a1c 	.word	0x20000a1c
 8009378:	20000f04 	.word	0x20000f04

0800937c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009384:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <vTaskInternalSetTimeOutState+0x24>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <vTaskInternalSetTimeOutState+0x28>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	605a      	str	r2, [r3, #4]
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	20000f08 	.word	0x20000f08
 80093a4:	20000ef4 	.word	0x20000ef4

080093a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10a      	bne.n	80093ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	613b      	str	r3, [r7, #16]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	60fb      	str	r3, [r7, #12]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80093ea:	f001 f9b3 	bl	800a754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093ee:	4b1d      	ldr	r3, [pc, #116]	; (8009464 <xTaskCheckForTimeOut+0xbc>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009406:	d102      	bne.n	800940e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009408:	2300      	movs	r3, #0
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	e023      	b.n	8009456 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	4b15      	ldr	r3, [pc, #84]	; (8009468 <xTaskCheckForTimeOut+0xc0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d007      	beq.n	800942a <xTaskCheckForTimeOut+0x82>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	429a      	cmp	r2, r3
 8009422:	d302      	bcc.n	800942a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009424:	2301      	movs	r3, #1
 8009426:	61fb      	str	r3, [r7, #28]
 8009428:	e015      	b.n	8009456 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	429a      	cmp	r2, r3
 8009432:	d20b      	bcs.n	800944c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	1ad2      	subs	r2, r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff ff9b 	bl	800937c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009446:	2300      	movs	r3, #0
 8009448:	61fb      	str	r3, [r7, #28]
 800944a:	e004      	b.n	8009456 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009456:	f001 f9ad 	bl	800a7b4 <vPortExitCritical>

	return xReturn;
 800945a:	69fb      	ldr	r3, [r7, #28]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3720      	adds	r7, #32
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20000ef4 	.word	0x20000ef4
 8009468:	20000f08 	.word	0x20000f08

0800946c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009470:	4b03      	ldr	r3, [pc, #12]	; (8009480 <vTaskMissedYield+0x14>)
 8009472:	2201      	movs	r2, #1
 8009474:	601a      	str	r2, [r3, #0]
}
 8009476:	bf00      	nop
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	20000f04 	.word	0x20000f04

08009484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800948c:	f000 f852 	bl	8009534 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009490:	4b06      	ldr	r3, [pc, #24]	; (80094ac <prvIdleTask+0x28>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d9f9      	bls.n	800948c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009498:	4b05      	ldr	r3, [pc, #20]	; (80094b0 <prvIdleTask+0x2c>)
 800949a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094a8:	e7f0      	b.n	800948c <prvIdleTask+0x8>
 80094aa:	bf00      	nop
 80094ac:	20000a20 	.word	0x20000a20
 80094b0:	e000ed04 	.word	0xe000ed04

080094b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094ba:	2300      	movs	r3, #0
 80094bc:	607b      	str	r3, [r7, #4]
 80094be:	e00c      	b.n	80094da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4a12      	ldr	r2, [pc, #72]	; (8009514 <prvInitialiseTaskLists+0x60>)
 80094cc:	4413      	add	r3, r2
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fd ff9e 	bl	8007410 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3301      	adds	r3, #1
 80094d8:	607b      	str	r3, [r7, #4]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b37      	cmp	r3, #55	; 0x37
 80094de:	d9ef      	bls.n	80094c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094e0:	480d      	ldr	r0, [pc, #52]	; (8009518 <prvInitialiseTaskLists+0x64>)
 80094e2:	f7fd ff95 	bl	8007410 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094e6:	480d      	ldr	r0, [pc, #52]	; (800951c <prvInitialiseTaskLists+0x68>)
 80094e8:	f7fd ff92 	bl	8007410 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094ec:	480c      	ldr	r0, [pc, #48]	; (8009520 <prvInitialiseTaskLists+0x6c>)
 80094ee:	f7fd ff8f 	bl	8007410 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094f2:	480c      	ldr	r0, [pc, #48]	; (8009524 <prvInitialiseTaskLists+0x70>)
 80094f4:	f7fd ff8c 	bl	8007410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094f8:	480b      	ldr	r0, [pc, #44]	; (8009528 <prvInitialiseTaskLists+0x74>)
 80094fa:	f7fd ff89 	bl	8007410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094fe:	4b0b      	ldr	r3, [pc, #44]	; (800952c <prvInitialiseTaskLists+0x78>)
 8009500:	4a05      	ldr	r2, [pc, #20]	; (8009518 <prvInitialiseTaskLists+0x64>)
 8009502:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009504:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <prvInitialiseTaskLists+0x7c>)
 8009506:	4a05      	ldr	r2, [pc, #20]	; (800951c <prvInitialiseTaskLists+0x68>)
 8009508:	601a      	str	r2, [r3, #0]
}
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	20000a20 	.word	0x20000a20
 8009518:	20000e80 	.word	0x20000e80
 800951c:	20000e94 	.word	0x20000e94
 8009520:	20000eb0 	.word	0x20000eb0
 8009524:	20000ec4 	.word	0x20000ec4
 8009528:	20000edc 	.word	0x20000edc
 800952c:	20000ea8 	.word	0x20000ea8
 8009530:	20000eac 	.word	0x20000eac

08009534 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800953a:	e019      	b.n	8009570 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800953c:	f001 f90a 	bl	800a754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009540:	4b10      	ldr	r3, [pc, #64]	; (8009584 <prvCheckTasksWaitingTermination+0x50>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	3304      	adds	r3, #4
 800954c:	4618      	mov	r0, r3
 800954e:	f7fd ffe9 	bl	8007524 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009552:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <prvCheckTasksWaitingTermination+0x54>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3b01      	subs	r3, #1
 8009558:	4a0b      	ldr	r2, [pc, #44]	; (8009588 <prvCheckTasksWaitingTermination+0x54>)
 800955a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800955c:	4b0b      	ldr	r3, [pc, #44]	; (800958c <prvCheckTasksWaitingTermination+0x58>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3b01      	subs	r3, #1
 8009562:	4a0a      	ldr	r2, [pc, #40]	; (800958c <prvCheckTasksWaitingTermination+0x58>)
 8009564:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009566:	f001 f925 	bl	800a7b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f810 	bl	8009590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009570:	4b06      	ldr	r3, [pc, #24]	; (800958c <prvCheckTasksWaitingTermination+0x58>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e1      	bne.n	800953c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	20000ec4 	.word	0x20000ec4
 8009588:	20000ef0 	.word	0x20000ef0
 800958c:	20000ed8 	.word	0x20000ed8

08009590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3364      	adds	r3, #100	; 0x64
 800959c:	4618      	mov	r0, r3
 800959e:	f002 f9d1 	bl	800b944 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d108      	bne.n	80095be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 fabd 	bl	800ab30 <vPortFree>
				vPortFree( pxTCB );
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f001 faba 	bl	800ab30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095bc:	e018      	b.n	80095f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d103      	bne.n	80095d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 fab1 	bl	800ab30 <vPortFree>
	}
 80095ce:	e00f      	b.n	80095f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d00a      	beq.n	80095f0 <prvDeleteTCB+0x60>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	60fb      	str	r3, [r7, #12]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <prvDeleteTCB+0x5e>
	}
 80095f0:	bf00      	nop
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095fe:	4b0c      	ldr	r3, [pc, #48]	; (8009630 <prvResetNextTaskUnblockTime+0x38>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d104      	bne.n	8009612 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009608:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <prvResetNextTaskUnblockTime+0x3c>)
 800960a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800960e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009610:	e008      	b.n	8009624 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009612:	4b07      	ldr	r3, [pc, #28]	; (8009630 <prvResetNextTaskUnblockTime+0x38>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	4a04      	ldr	r2, [pc, #16]	; (8009634 <prvResetNextTaskUnblockTime+0x3c>)
 8009622:	6013      	str	r3, [r2, #0]
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	20000ea8 	.word	0x20000ea8
 8009634:	20000f10 	.word	0x20000f10

08009638 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800963e:	4b05      	ldr	r3, [pc, #20]	; (8009654 <xTaskGetCurrentTaskHandle+0x1c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009644:	687b      	ldr	r3, [r7, #4]
	}
 8009646:	4618      	mov	r0, r3
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	20000a1c 	.word	0x20000a1c

08009658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800965e:	4b0b      	ldr	r3, [pc, #44]	; (800968c <xTaskGetSchedulerState+0x34>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009666:	2301      	movs	r3, #1
 8009668:	607b      	str	r3, [r7, #4]
 800966a:	e008      	b.n	800967e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800966c:	4b08      	ldr	r3, [pc, #32]	; (8009690 <xTaskGetSchedulerState+0x38>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d102      	bne.n	800967a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009674:	2302      	movs	r3, #2
 8009676:	607b      	str	r3, [r7, #4]
 8009678:	e001      	b.n	800967e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800967a:	2300      	movs	r3, #0
 800967c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800967e:	687b      	ldr	r3, [r7, #4]
	}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20000efc 	.word	0x20000efc
 8009690:	20000f18 	.word	0x20000f18

08009694 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d051      	beq.n	800974e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ae:	4b2a      	ldr	r3, [pc, #168]	; (8009758 <xTaskPriorityInherit+0xc4>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d241      	bcs.n	800973c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	db06      	blt.n	80096ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096c0:	4b25      	ldr	r3, [pc, #148]	; (8009758 <xTaskPriorityInherit+0xc4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6959      	ldr	r1, [r3, #20]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4a1f      	ldr	r2, [pc, #124]	; (800975c <xTaskPriorityInherit+0xc8>)
 80096e0:	4413      	add	r3, r2
 80096e2:	4299      	cmp	r1, r3
 80096e4:	d122      	bne.n	800972c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	3304      	adds	r3, #4
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fd ff1a 	bl	8007524 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096f0:	4b19      	ldr	r3, [pc, #100]	; (8009758 <xTaskPriorityInherit+0xc4>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fe:	4b18      	ldr	r3, [pc, #96]	; (8009760 <xTaskPriorityInherit+0xcc>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d903      	bls.n	800970e <xTaskPriorityInherit+0x7a>
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	4a15      	ldr	r2, [pc, #84]	; (8009760 <xTaskPriorityInherit+0xcc>)
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009712:	4613      	mov	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4a10      	ldr	r2, [pc, #64]	; (800975c <xTaskPriorityInherit+0xc8>)
 800971c:	441a      	add	r2, r3
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	3304      	adds	r3, #4
 8009722:	4619      	mov	r1, r3
 8009724:	4610      	mov	r0, r2
 8009726:	f7fd fea0 	bl	800746a <vListInsertEnd>
 800972a:	e004      	b.n	8009736 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800972c:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <xTaskPriorityInherit+0xc4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009736:	2301      	movs	r3, #1
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	e008      	b.n	800974e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009740:	4b05      	ldr	r3, [pc, #20]	; (8009758 <xTaskPriorityInherit+0xc4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	429a      	cmp	r2, r3
 8009748:	d201      	bcs.n	800974e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800974a:	2301      	movs	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800974e:	68fb      	ldr	r3, [r7, #12]
	}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20000a1c 	.word	0x20000a1c
 800975c:	20000a20 	.word	0x20000a20
 8009760:	20000ef8 	.word	0x20000ef8

08009764 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009770:	2300      	movs	r3, #0
 8009772:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d056      	beq.n	8009828 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800977a:	4b2e      	ldr	r3, [pc, #184]	; (8009834 <xTaskPriorityDisinherit+0xd0>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	429a      	cmp	r2, r3
 8009782:	d00a      	beq.n	800979a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	60fb      	str	r3, [r7, #12]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	60bb      	str	r3, [r7, #8]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097bc:	1e5a      	subs	r2, r3, #1
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d02c      	beq.n	8009828 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d128      	bne.n	8009828 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	3304      	adds	r3, #4
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fd fea2 	bl	8007524 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <xTaskPriorityDisinherit+0xd4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d903      	bls.n	8009808 <xTaskPriorityDisinherit+0xa4>
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	4a0c      	ldr	r2, [pc, #48]	; (8009838 <xTaskPriorityDisinherit+0xd4>)
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4a09      	ldr	r2, [pc, #36]	; (800983c <xTaskPriorityDisinherit+0xd8>)
 8009816:	441a      	add	r2, r3
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	3304      	adds	r3, #4
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7fd fe23 	bl	800746a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009824:	2301      	movs	r3, #1
 8009826:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009828:	697b      	ldr	r3, [r7, #20]
	}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000a1c 	.word	0x20000a1c
 8009838:	20000ef8 	.word	0x20000ef8
 800983c:	20000a20 	.word	0x20000a20

08009840 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800984e:	2301      	movs	r3, #1
 8009850:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d06a      	beq.n	800992e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10a      	bne.n	8009876 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	60fb      	str	r3, [r7, #12]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d902      	bls.n	8009886 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	61fb      	str	r3, [r7, #28]
 8009884:	e002      	b.n	800988c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800988a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	429a      	cmp	r2, r3
 8009894:	d04b      	beq.n	800992e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	429a      	cmp	r2, r3
 800989e:	d146      	bne.n	800992e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80098a0:	4b25      	ldr	r3, [pc, #148]	; (8009938 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	69ba      	ldr	r2, [r7, #24]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d10a      	bne.n	80098c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	60bb      	str	r3, [r7, #8]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	69fa      	ldr	r2, [r7, #28]
 80098ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	db04      	blt.n	80098de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	6959      	ldr	r1, [r3, #20]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4a13      	ldr	r2, [pc, #76]	; (800993c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80098ee:	4413      	add	r3, r2
 80098f0:	4299      	cmp	r1, r3
 80098f2:	d11c      	bne.n	800992e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fd fe13 	bl	8007524 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009902:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d903      	bls.n	8009912 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990e:	4a0c      	ldr	r2, [pc, #48]	; (8009940 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4a07      	ldr	r2, [pc, #28]	; (800993c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009920:	441a      	add	r2, r3
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	3304      	adds	r3, #4
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7fd fd9e 	bl	800746a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800992e:	bf00      	nop
 8009930:	3720      	adds	r7, #32
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20000a1c 	.word	0x20000a1c
 800993c:	20000a20 	.word	0x20000a20
 8009940:	20000ef8 	.word	0x20000ef8

08009944 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009944:	b480      	push	{r7}
 8009946:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009948:	4b07      	ldr	r3, [pc, #28]	; (8009968 <pvTaskIncrementMutexHeldCount+0x24>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d004      	beq.n	800995a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009950:	4b05      	ldr	r3, [pc, #20]	; (8009968 <pvTaskIncrementMutexHeldCount+0x24>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009956:	3201      	adds	r2, #1
 8009958:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800995a:	4b03      	ldr	r3, [pc, #12]	; (8009968 <pvTaskIncrementMutexHeldCount+0x24>)
 800995c:	681b      	ldr	r3, [r3, #0]
	}
 800995e:	4618      	mov	r0, r3
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	20000a1c 	.word	0x20000a1c

0800996c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
 8009978:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800997a:	f000 feeb 	bl	800a754 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800997e:	4b29      	ldr	r3, [pc, #164]	; (8009a24 <xTaskNotifyWait+0xb8>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	d01c      	beq.n	80099c6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800998c:	4b25      	ldr	r3, [pc, #148]	; (8009a24 <xTaskNotifyWait+0xb8>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	43d2      	mvns	r2, r2
 8009998:	400a      	ands	r2, r1
 800999a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800999e:	4b21      	ldr	r3, [pc, #132]	; (8009a24 <xTaskNotifyWait+0xb8>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00b      	beq.n	80099c6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ae:	2101      	movs	r1, #1
 80099b0:	6838      	ldr	r0, [r7, #0]
 80099b2:	f000 fa03 	bl	8009dbc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80099b6:	4b1c      	ldr	r3, [pc, #112]	; (8009a28 <xTaskNotifyWait+0xbc>)
 80099b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80099c6:	f000 fef5 	bl	800a7b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80099ca:	f000 fec3 	bl	800a754 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80099d4:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <xTaskNotifyWait+0xb8>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80099e0:	4b10      	ldr	r3, [pc, #64]	; (8009a24 <xTaskNotifyWait+0xb8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d002      	beq.n	80099f4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	617b      	str	r3, [r7, #20]
 80099f2:	e00a      	b.n	8009a0a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80099f4:	4b0b      	ldr	r3, [pc, #44]	; (8009a24 <xTaskNotifyWait+0xb8>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	43d2      	mvns	r2, r2
 8009a00:	400a      	ands	r2, r1
 8009a02:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 8009a06:	2301      	movs	r3, #1
 8009a08:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a0a:	4b06      	ldr	r3, [pc, #24]	; (8009a24 <xTaskNotifyWait+0xb8>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 8009a14:	f000 fece 	bl	800a7b4 <vPortExitCritical>

		return xReturn;
 8009a18:	697b      	ldr	r3, [r7, #20]
	}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000a1c 	.word	0x20000a1c
 8009a28:	e000ed04 	.word	0xe000ed04

08009a2c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08a      	sub	sp, #40	; 0x28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10a      	bne.n	8009a5c <xTaskGenericNotify+0x30>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	61bb      	str	r3, [r7, #24]
}
 8009a58:	bf00      	nop
 8009a5a:	e7fe      	b.n	8009a5a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009a60:	f000 fe78 	bl	800a754 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d004      	beq.n	8009a74 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009a7a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	d82d      	bhi.n	8009ae6 <xTaskGenericNotify+0xba>
 8009a8a:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <xTaskGenericNotify+0x64>)
 8009a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a90:	08009b09 	.word	0x08009b09
 8009a94:	08009aa5 	.word	0x08009aa5
 8009a98:	08009ab7 	.word	0x08009ab7
 8009a9c:	08009ac7 	.word	0x08009ac7
 8009aa0:	08009ad1 	.word	0x08009ad1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	431a      	orrs	r2, r3
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009ab4:	e02b      	b.n	8009b0e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	6a3b      	ldr	r3, [r7, #32]
 8009ac0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009ac4:	e023      	b.n	8009b0e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009ace:	e01e      	b.n	8009b0e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009ad0:	7ffb      	ldrb	r3, [r7, #31]
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d004      	beq.n	8009ae0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009ade:	e016      	b.n	8009b0e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009ae4:	e013      	b.n	8009b0e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009af0:	d00c      	beq.n	8009b0c <xTaskGenericNotify+0xe0>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	617b      	str	r3, [r7, #20]
}
 8009b04:	bf00      	nop
 8009b06:	e7fe      	b.n	8009b06 <xTaskGenericNotify+0xda>
					break;
 8009b08:	bf00      	nop
 8009b0a:	e000      	b.n	8009b0e <xTaskGenericNotify+0xe2>

					break;
 8009b0c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b0e:	7ffb      	ldrb	r3, [r7, #31]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d13a      	bne.n	8009b8a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	3304      	adds	r3, #4
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fd fd03 	bl	8007524 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b22:	4b1d      	ldr	r3, [pc, #116]	; (8009b98 <xTaskGenericNotify+0x16c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d903      	bls.n	8009b32 <xTaskGenericNotify+0x106>
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2e:	4a1a      	ldr	r2, [pc, #104]	; (8009b98 <xTaskGenericNotify+0x16c>)
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4a17      	ldr	r2, [pc, #92]	; (8009b9c <xTaskGenericNotify+0x170>)
 8009b40:	441a      	add	r2, r3
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	3304      	adds	r3, #4
 8009b46:	4619      	mov	r1, r3
 8009b48:	4610      	mov	r0, r2
 8009b4a:	f7fd fc8e 	bl	800746a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <xTaskGenericNotify+0x140>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	613b      	str	r3, [r7, #16]
}
 8009b68:	bf00      	nop
 8009b6a:	e7fe      	b.n	8009b6a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <xTaskGenericNotify+0x174>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d907      	bls.n	8009b8a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <xTaskGenericNotify+0x178>)
 8009b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009b8a:	f000 fe13 	bl	800a7b4 <vPortExitCritical>

		return xReturn;
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3728      	adds	r7, #40	; 0x28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20000ef8 	.word	0x20000ef8
 8009b9c:	20000a20 	.word	0x20000a20
 8009ba0:	20000a1c 	.word	0x20000a1c
 8009ba4:	e000ed04 	.word	0xe000ed04

08009ba8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08e      	sub	sp, #56	; 0x38
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	603b      	str	r3, [r7, #0]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10a      	bne.n	8009bd8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bd4:	bf00      	nop
 8009bd6:	e7fe      	b.n	8009bd6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bd8:	f000 fe9e 	bl	800a918 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009be0:	f3ef 8211 	mrs	r2, BASEPRI
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	623a      	str	r2, [r7, #32]
 8009bf6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009bf8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d004      	beq.n	8009c0c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	2202      	movs	r2, #2
 8009c1a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d82f      	bhi.n	8009c84 <xTaskGenericNotifyFromISR+0xdc>
 8009c24:	a201      	add	r2, pc, #4	; (adr r2, 8009c2c <xTaskGenericNotifyFromISR+0x84>)
 8009c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2a:	bf00      	nop
 8009c2c:	08009ca7 	.word	0x08009ca7
 8009c30:	08009c41 	.word	0x08009c41
 8009c34:	08009c53 	.word	0x08009c53
 8009c38:	08009c63 	.word	0x08009c63
 8009c3c:	08009c6d 	.word	0x08009c6d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009c50:	e02c      	b.n	8009cac <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009c60:	e024      	b.n	8009cac <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009c6a:	e01f      	b.n	8009cac <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d004      	beq.n	8009c7e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009c7c:	e016      	b.n	8009cac <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009c82:	e013      	b.n	8009cac <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c8e:	d00c      	beq.n	8009caa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	61bb      	str	r3, [r7, #24]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009ca6:	bf00      	nop
 8009ca8:	e000      	b.n	8009cac <xTaskGenericNotifyFromISR+0x104>
					break;
 8009caa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d146      	bne.n	8009d42 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00a      	beq.n	8009cd2 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	617b      	str	r3, [r7, #20]
}
 8009cce:	bf00      	nop
 8009cd0:	e7fe      	b.n	8009cd0 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cd2:	4b21      	ldr	r3, [pc, #132]	; (8009d58 <xTaskGenericNotifyFromISR+0x1b0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d11d      	bne.n	8009d16 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cdc:	3304      	adds	r3, #4
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fd fc20 	bl	8007524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce8:	4b1c      	ldr	r3, [pc, #112]	; (8009d5c <xTaskGenericNotifyFromISR+0x1b4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d903      	bls.n	8009cf8 <xTaskGenericNotifyFromISR+0x150>
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf4:	4a19      	ldr	r2, [pc, #100]	; (8009d5c <xTaskGenericNotifyFromISR+0x1b4>)
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4a16      	ldr	r2, [pc, #88]	; (8009d60 <xTaskGenericNotifyFromISR+0x1b8>)
 8009d06:	441a      	add	r2, r3
 8009d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f7fd fbab 	bl	800746a <vListInsertEnd>
 8009d14:	e005      	b.n	8009d22 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	3318      	adds	r3, #24
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	4811      	ldr	r0, [pc, #68]	; (8009d64 <xTaskGenericNotifyFromISR+0x1bc>)
 8009d1e:	f7fd fba4 	bl	800746a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d26:	4b10      	ldr	r3, [pc, #64]	; (8009d68 <xTaskGenericNotifyFromISR+0x1c0>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d908      	bls.n	8009d42 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d002      	beq.n	8009d3c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d38:	2201      	movs	r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009d3c:	4b0b      	ldr	r3, [pc, #44]	; (8009d6c <xTaskGenericNotifyFromISR+0x1c4>)
 8009d3e:	2201      	movs	r2, #1
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f383 8811 	msr	BASEPRI, r3
}
 8009d4c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3738      	adds	r7, #56	; 0x38
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20000f18 	.word	0x20000f18
 8009d5c:	20000ef8 	.word	0x20000ef8
 8009d60:	20000a20 	.word	0x20000a20
 8009d64:	20000eb0 	.word	0x20000eb0
 8009d68:	20000a1c 	.word	0x20000a1c
 8009d6c:	20000f04 	.word	0x20000f04

08009d70 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <xTaskNotifyStateClear+0x14>
 8009d7e:	4b0e      	ldr	r3, [pc, #56]	; (8009db8 <xTaskNotifyStateClear+0x48>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	e000      	b.n	8009d86 <xTaskNotifyStateClear+0x16>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8009d88:	f000 fce4 	bl	800a754 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d106      	bne.n	8009da6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 8009da0:	2301      	movs	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e001      	b.n	8009daa <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8009daa:	f000 fd03 	bl	800a7b4 <vPortExitCritical>

		return xReturn;
 8009dae:	68fb      	ldr	r3, [r7, #12]
	}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20000a1c 	.word	0x20000a1c

08009dbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009dc6:	4b21      	ldr	r3, [pc, #132]	; (8009e4c <prvAddCurrentTaskToDelayedList+0x90>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dcc:	4b20      	ldr	r3, [pc, #128]	; (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fd fba6 	bl	8007524 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dde:	d10a      	bne.n	8009df6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d007      	beq.n	8009df6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009de6:	4b1a      	ldr	r3, [pc, #104]	; (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3304      	adds	r3, #4
 8009dec:	4619      	mov	r1, r3
 8009dee:	4819      	ldr	r0, [pc, #100]	; (8009e54 <prvAddCurrentTaskToDelayedList+0x98>)
 8009df0:	f7fd fb3b 	bl	800746a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009df4:	e026      	b.n	8009e44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dfe:	4b14      	ldr	r3, [pc, #80]	; (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d209      	bcs.n	8009e22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e0e:	4b12      	ldr	r3, [pc, #72]	; (8009e58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b0f      	ldr	r3, [pc, #60]	; (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3304      	adds	r3, #4
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	f7fd fb49 	bl	80074b2 <vListInsert>
}
 8009e20:	e010      	b.n	8009e44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e22:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	4b0a      	ldr	r3, [pc, #40]	; (8009e50 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4610      	mov	r0, r2
 8009e30:	f7fd fb3f 	bl	80074b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e34:	4b0a      	ldr	r3, [pc, #40]	; (8009e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d202      	bcs.n	8009e44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e3e:	4a08      	ldr	r2, [pc, #32]	; (8009e60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	6013      	str	r3, [r2, #0]
}
 8009e44:	bf00      	nop
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20000ef4 	.word	0x20000ef4
 8009e50:	20000a1c 	.word	0x20000a1c
 8009e54:	20000edc 	.word	0x20000edc
 8009e58:	20000eac 	.word	0x20000eac
 8009e5c:	20000ea8 	.word	0x20000ea8
 8009e60:	20000f10 	.word	0x20000f10

08009e64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08a      	sub	sp, #40	; 0x28
 8009e68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e6e:	f000 fb07 	bl	800a480 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e72:	4b1c      	ldr	r3, [pc, #112]	; (8009ee4 <xTimerCreateTimerTask+0x80>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d021      	beq.n	8009ebe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e82:	1d3a      	adds	r2, r7, #4
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	f107 030c 	add.w	r3, r7, #12
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fd faa5 	bl	80073dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	9202      	str	r2, [sp, #8]
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	460a      	mov	r2, r1
 8009ea4:	4910      	ldr	r1, [pc, #64]	; (8009ee8 <xTimerCreateTimerTask+0x84>)
 8009ea6:	4811      	ldr	r0, [pc, #68]	; (8009eec <xTimerCreateTimerTask+0x88>)
 8009ea8:	f7fe fd7e 	bl	80089a8 <xTaskCreateStatic>
 8009eac:	4603      	mov	r3, r0
 8009eae:	4a10      	ldr	r2, [pc, #64]	; (8009ef0 <xTimerCreateTimerTask+0x8c>)
 8009eb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009eb2:	4b0f      	ldr	r3, [pc, #60]	; (8009ef0 <xTimerCreateTimerTask+0x8c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	613b      	str	r3, [r7, #16]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009eda:	697b      	ldr	r3, [r7, #20]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	20000f4c 	.word	0x20000f4c
 8009ee8:	0800bb1c 	.word	0x0800bb1c
 8009eec:	0800a029 	.word	0x0800a029
 8009ef0:	20000f50 	.word	0x20000f50

08009ef4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b08a      	sub	sp, #40	; 0x28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	623b      	str	r3, [r7, #32]
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f22:	4b1a      	ldr	r3, [pc, #104]	; (8009f8c <xTimerGenericCommand+0x98>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d02a      	beq.n	8009f80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2b05      	cmp	r3, #5
 8009f3a:	dc18      	bgt.n	8009f6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f3c:	f7ff fb8c 	bl	8009658 <xTaskGetSchedulerState>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d109      	bne.n	8009f5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f46:	4b11      	ldr	r3, [pc, #68]	; (8009f8c <xTimerGenericCommand+0x98>)
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	f107 0110 	add.w	r1, r7, #16
 8009f4e:	2300      	movs	r3, #0
 8009f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f52:	f7fd fc4f 	bl	80077f4 <xQueueGenericSend>
 8009f56:	6278      	str	r0, [r7, #36]	; 0x24
 8009f58:	e012      	b.n	8009f80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f5a:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <xTimerGenericCommand+0x98>)
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	f107 0110 	add.w	r1, r7, #16
 8009f62:	2300      	movs	r3, #0
 8009f64:	2200      	movs	r2, #0
 8009f66:	f7fd fc45 	bl	80077f4 <xQueueGenericSend>
 8009f6a:	6278      	str	r0, [r7, #36]	; 0x24
 8009f6c:	e008      	b.n	8009f80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f6e:	4b07      	ldr	r3, [pc, #28]	; (8009f8c <xTimerGenericCommand+0x98>)
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	f107 0110 	add.w	r1, r7, #16
 8009f76:	2300      	movs	r3, #0
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	f7fd fd39 	bl	80079f0 <xQueueGenericSendFromISR>
 8009f7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3728      	adds	r7, #40	; 0x28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000f4c 	.word	0x20000f4c

08009f90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b088      	sub	sp, #32
 8009f94:	af02      	add	r7, sp, #8
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f9a:	4b22      	ldr	r3, [pc, #136]	; (800a024 <prvProcessExpiredTimer+0x94>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fd fabb 	bl	8007524 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fb4:	f003 0304 	and.w	r3, r3, #4
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d022      	beq.n	800a002 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	699a      	ldr	r2, [r3, #24]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	18d1      	adds	r1, r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	6978      	ldr	r0, [r7, #20]
 8009fca:	f000 f8d1 	bl	800a170 <prvInsertTimerInActiveList>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01f      	beq.n	800a014 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	2100      	movs	r1, #0
 8009fde:	6978      	ldr	r0, [r7, #20]
 8009fe0:	f7ff ff88 	bl	8009ef4 <xTimerGenericCommand>
 8009fe4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d113      	bne.n	800a014 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	60fb      	str	r3, [r7, #12]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a008:	f023 0301 	bic.w	r3, r3, #1
 800a00c:	b2da      	uxtb	r2, r3
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	6978      	ldr	r0, [r7, #20]
 800a01a:	4798      	blx	r3
}
 800a01c:	bf00      	nop
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20000f44 	.word	0x20000f44

0800a028 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a030:	f107 0308 	add.w	r3, r7, #8
 800a034:	4618      	mov	r0, r3
 800a036:	f000 f857 	bl	800a0e8 <prvGetNextExpireTime>
 800a03a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	4619      	mov	r1, r3
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f803 	bl	800a04c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a046:	f000 f8d5 	bl	800a1f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a04a:	e7f1      	b.n	800a030 <prvTimerTask+0x8>

0800a04c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a056:	f7fe ff03 	bl	8008e60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a05a:	f107 0308 	add.w	r3, r7, #8
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 f866 	bl	800a130 <prvSampleTimeNow>
 800a064:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d130      	bne.n	800a0ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <prvProcessTimerOrBlockTask+0x3c>
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	429a      	cmp	r2, r3
 800a078:	d806      	bhi.n	800a088 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a07a:	f7fe feff 	bl	8008e7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a07e:	68f9      	ldr	r1, [r7, #12]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f7ff ff85 	bl	8009f90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a086:	e024      	b.n	800a0d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d008      	beq.n	800a0a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a08e:	4b13      	ldr	r3, [pc, #76]	; (800a0dc <prvProcessTimerOrBlockTask+0x90>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <prvProcessTimerOrBlockTask+0x50>
 800a098:	2301      	movs	r3, #1
 800a09a:	e000      	b.n	800a09e <prvProcessTimerOrBlockTask+0x52>
 800a09c:	2300      	movs	r3, #0
 800a09e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0a0:	4b0f      	ldr	r3, [pc, #60]	; (800a0e0 <prvProcessTimerOrBlockTask+0x94>)
 800a0a2:	6818      	ldr	r0, [r3, #0]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f7fe f905 	bl	80082bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a0b2:	f7fe fee3 	bl	8008e7c <xTaskResumeAll>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a0bc:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <prvProcessTimerOrBlockTask+0x98>)
 800a0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	f3bf 8f6f 	isb	sy
}
 800a0cc:	e001      	b.n	800a0d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0ce:	f7fe fed5 	bl	8008e7c <xTaskResumeAll>
}
 800a0d2:	bf00      	nop
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000f48 	.word	0x20000f48
 800a0e0:	20000f4c 	.word	0x20000f4c
 800a0e4:	e000ed04 	.word	0xe000ed04

0800a0e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0f0:	4b0e      	ldr	r3, [pc, #56]	; (800a12c <prvGetNextExpireTime+0x44>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <prvGetNextExpireTime+0x16>
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	e000      	b.n	800a100 <prvGetNextExpireTime+0x18>
 800a0fe:	2200      	movs	r2, #0
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d105      	bne.n	800a118 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a10c:	4b07      	ldr	r3, [pc, #28]	; (800a12c <prvGetNextExpireTime+0x44>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	e001      	b.n	800a11c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a11c:	68fb      	ldr	r3, [r7, #12]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	20000f44 	.word	0x20000f44

0800a130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a138:	f7fe ff3e 	bl	8008fb8 <xTaskGetTickCount>
 800a13c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a13e:	4b0b      	ldr	r3, [pc, #44]	; (800a16c <prvSampleTimeNow+0x3c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	429a      	cmp	r2, r3
 800a146:	d205      	bcs.n	800a154 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a148:	f000 f936 	bl	800a3b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	e002      	b.n	800a15a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a15a:	4a04      	ldr	r2, [pc, #16]	; (800a16c <prvSampleTimeNow+0x3c>)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a160:	68fb      	ldr	r3, [r7, #12]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000f54 	.word	0x20000f54

0800a170 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a17e:	2300      	movs	r3, #0
 800a180:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	429a      	cmp	r2, r3
 800a194:	d812      	bhi.n	800a1bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	1ad2      	subs	r2, r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d302      	bcc.n	800a1aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	e01b      	b.n	800a1e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1aa:	4b10      	ldr	r3, [pc, #64]	; (800a1ec <prvInsertTimerInActiveList+0x7c>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	f7fd f97c 	bl	80074b2 <vListInsert>
 800a1ba:	e012      	b.n	800a1e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d206      	bcs.n	800a1d2 <prvInsertTimerInActiveList+0x62>
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d302      	bcc.n	800a1d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	e007      	b.n	800a1e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1d2:	4b07      	ldr	r3, [pc, #28]	; (800a1f0 <prvInsertTimerInActiveList+0x80>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3304      	adds	r3, #4
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4610      	mov	r0, r2
 800a1de:	f7fd f968 	bl	80074b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1e2:	697b      	ldr	r3, [r7, #20]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20000f48 	.word	0x20000f48
 800a1f0:	20000f44 	.word	0x20000f44

0800a1f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08e      	sub	sp, #56	; 0x38
 800a1f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1fa:	e0ca      	b.n	800a392 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	da18      	bge.n	800a234 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a202:	1d3b      	adds	r3, r7, #4
 800a204:	3304      	adds	r3, #4
 800a206:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	61fb      	str	r3, [r7, #28]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a22a:	6850      	ldr	r0, [r2, #4]
 800a22c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a22e:	6892      	ldr	r2, [r2, #8]
 800a230:	4611      	mov	r1, r2
 800a232:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f2c0 80aa 	blt.w	800a390 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d004      	beq.n	800a252 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	3304      	adds	r3, #4
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fd f969 	bl	8007524 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a252:	463b      	mov	r3, r7
 800a254:	4618      	mov	r0, r3
 800a256:	f7ff ff6b 	bl	800a130 <prvSampleTimeNow>
 800a25a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b09      	cmp	r3, #9
 800a260:	f200 8097 	bhi.w	800a392 <prvProcessReceivedCommands+0x19e>
 800a264:	a201      	add	r2, pc, #4	; (adr r2, 800a26c <prvProcessReceivedCommands+0x78>)
 800a266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26a:	bf00      	nop
 800a26c:	0800a295 	.word	0x0800a295
 800a270:	0800a295 	.word	0x0800a295
 800a274:	0800a295 	.word	0x0800a295
 800a278:	0800a309 	.word	0x0800a309
 800a27c:	0800a31d 	.word	0x0800a31d
 800a280:	0800a367 	.word	0x0800a367
 800a284:	0800a295 	.word	0x0800a295
 800a288:	0800a295 	.word	0x0800a295
 800a28c:	0800a309 	.word	0x0800a309
 800a290:	0800a31d 	.word	0x0800a31d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a29a:	f043 0301 	orr.w	r3, r3, #1
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	18d1      	adds	r1, r2, r3
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b4:	f7ff ff5c 	bl	800a170 <prvInsertTimerInActiveList>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d069      	beq.n	800a392 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2cc:	f003 0304 	and.w	r3, r3, #4
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d05e      	beq.n	800a392 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	441a      	add	r2, r3
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2e6:	f7ff fe05 	bl	8009ef4 <xTimerGenericCommand>
 800a2ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d14f      	bne.n	800a392 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	61bb      	str	r3, [r7, #24]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a30e:	f023 0301 	bic.w	r3, r3, #1
 800a312:	b2da      	uxtb	r2, r3
 800a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a31a:	e03a      	b.n	800a392 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a322:	f043 0301 	orr.w	r3, r3, #1
 800a326:	b2da      	uxtb	r2, r3
 800a328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	617b      	str	r3, [r7, #20]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	699a      	ldr	r2, [r3, #24]
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	18d1      	adds	r1, r2, r3
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a360:	f7ff ff06 	bl	800a170 <prvInsertTimerInActiveList>
					break;
 800a364:	e015      	b.n	800a392 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a36c:	f003 0302 	and.w	r3, r3, #2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d103      	bne.n	800a37c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a376:	f000 fbdb 	bl	800ab30 <vPortFree>
 800a37a:	e00a      	b.n	800a392 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a382:	f023 0301 	bic.w	r3, r3, #1
 800a386:	b2da      	uxtb	r2, r3
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a38e:	e000      	b.n	800a392 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a390:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a392:	4b08      	ldr	r3, [pc, #32]	; (800a3b4 <prvProcessReceivedCommands+0x1c0>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	1d39      	adds	r1, r7, #4
 800a398:	2200      	movs	r2, #0
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fd fc50 	bl	8007c40 <xQueueReceive>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f47f af2a 	bne.w	800a1fc <prvProcessReceivedCommands+0x8>
	}
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	3730      	adds	r7, #48	; 0x30
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000f4c 	.word	0x20000f4c

0800a3b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3be:	e048      	b.n	800a452 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3c0:	4b2d      	ldr	r3, [pc, #180]	; (800a478 <prvSwitchTimerLists+0xc0>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ca:	4b2b      	ldr	r3, [pc, #172]	; (800a478 <prvSwitchTimerLists+0xc0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fd f8a3 	bl	8007524 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d02e      	beq.n	800a452 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	429a      	cmp	r2, r3
 800a404:	d90e      	bls.n	800a424 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a412:	4b19      	ldr	r3, [pc, #100]	; (800a478 <prvSwitchTimerLists+0xc0>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3304      	adds	r3, #4
 800a41a:	4619      	mov	r1, r3
 800a41c:	4610      	mov	r0, r2
 800a41e:	f7fd f848 	bl	80074b2 <vListInsert>
 800a422:	e016      	b.n	800a452 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a424:	2300      	movs	r3, #0
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	2300      	movs	r3, #0
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	2100      	movs	r1, #0
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff fd60 	bl	8009ef4 <xTimerGenericCommand>
 800a434:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	603b      	str	r3, [r7, #0]
}
 800a44e:	bf00      	nop
 800a450:	e7fe      	b.n	800a450 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <prvSwitchTimerLists+0xc0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1b1      	bne.n	800a3c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a45c:	4b06      	ldr	r3, [pc, #24]	; (800a478 <prvSwitchTimerLists+0xc0>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a462:	4b06      	ldr	r3, [pc, #24]	; (800a47c <prvSwitchTimerLists+0xc4>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a04      	ldr	r2, [pc, #16]	; (800a478 <prvSwitchTimerLists+0xc0>)
 800a468:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a46a:	4a04      	ldr	r2, [pc, #16]	; (800a47c <prvSwitchTimerLists+0xc4>)
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	6013      	str	r3, [r2, #0]
}
 800a470:	bf00      	nop
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20000f44 	.word	0x20000f44
 800a47c:	20000f48 	.word	0x20000f48

0800a480 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a486:	f000 f965 	bl	800a754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a48a:	4b15      	ldr	r3, [pc, #84]	; (800a4e0 <prvCheckForValidListAndQueue+0x60>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d120      	bne.n	800a4d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a492:	4814      	ldr	r0, [pc, #80]	; (800a4e4 <prvCheckForValidListAndQueue+0x64>)
 800a494:	f7fc ffbc 	bl	8007410 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a498:	4813      	ldr	r0, [pc, #76]	; (800a4e8 <prvCheckForValidListAndQueue+0x68>)
 800a49a:	f7fc ffb9 	bl	8007410 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a49e:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <prvCheckForValidListAndQueue+0x6c>)
 800a4a0:	4a10      	ldr	r2, [pc, #64]	; (800a4e4 <prvCheckForValidListAndQueue+0x64>)
 800a4a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a4a4:	4b12      	ldr	r3, [pc, #72]	; (800a4f0 <prvCheckForValidListAndQueue+0x70>)
 800a4a6:	4a10      	ldr	r2, [pc, #64]	; (800a4e8 <prvCheckForValidListAndQueue+0x68>)
 800a4a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	4b11      	ldr	r3, [pc, #68]	; (800a4f4 <prvCheckForValidListAndQueue+0x74>)
 800a4b0:	4a11      	ldr	r2, [pc, #68]	; (800a4f8 <prvCheckForValidListAndQueue+0x78>)
 800a4b2:	2110      	movs	r1, #16
 800a4b4:	200a      	movs	r0, #10
 800a4b6:	f7fd f8c7 	bl	8007648 <xQueueGenericCreateStatic>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	4a08      	ldr	r2, [pc, #32]	; (800a4e0 <prvCheckForValidListAndQueue+0x60>)
 800a4be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4c0:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <prvCheckForValidListAndQueue+0x60>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4c8:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <prvCheckForValidListAndQueue+0x60>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	490b      	ldr	r1, [pc, #44]	; (800a4fc <prvCheckForValidListAndQueue+0x7c>)
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fd feca 	bl	8008268 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4d4:	f000 f96e 	bl	800a7b4 <vPortExitCritical>
}
 800a4d8:	bf00      	nop
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000f4c 	.word	0x20000f4c
 800a4e4:	20000f1c 	.word	0x20000f1c
 800a4e8:	20000f30 	.word	0x20000f30
 800a4ec:	20000f44 	.word	0x20000f44
 800a4f0:	20000f48 	.word	0x20000f48
 800a4f4:	20000ff8 	.word	0x20000ff8
 800a4f8:	20000f58 	.word	0x20000f58
 800a4fc:	0800bb24 	.word	0x0800bb24

0800a500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3b04      	subs	r3, #4
 800a510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3b04      	subs	r3, #4
 800a51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f023 0201 	bic.w	r2, r3, #1
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3b04      	subs	r3, #4
 800a52e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a530:	4a0c      	ldr	r2, [pc, #48]	; (800a564 <pxPortInitialiseStack+0x64>)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3b14      	subs	r3, #20
 800a53a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3b04      	subs	r3, #4
 800a546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f06f 0202 	mvn.w	r2, #2
 800a54e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	3b20      	subs	r3, #32
 800a554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a556:	68fb      	ldr	r3, [r7, #12]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	0800a569 	.word	0x0800a569

0800a568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a572:	4b12      	ldr	r3, [pc, #72]	; (800a5bc <prvTaskExitError+0x54>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a57a:	d00a      	beq.n	800a592 <prvTaskExitError+0x2a>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	60fb      	str	r3, [r7, #12]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <prvTaskExitError+0x28>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	60bb      	str	r3, [r7, #8]
}
 800a5a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5a6:	bf00      	nop
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d0fc      	beq.n	800a5a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	20000098 	.word	0x20000098

0800a5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5c0:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <pxCurrentTCBConst2>)
 800a5c2:	6819      	ldr	r1, [r3, #0]
 800a5c4:	6808      	ldr	r0, [r1, #0]
 800a5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	f380 8809 	msr	PSP, r0
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f04f 0000 	mov.w	r0, #0
 800a5d6:	f380 8811 	msr	BASEPRI, r0
 800a5da:	4770      	bx	lr
 800a5dc:	f3af 8000 	nop.w

0800a5e0 <pxCurrentTCBConst2>:
 800a5e0:	20000a1c 	.word	0x20000a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop

0800a5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5e8:	4808      	ldr	r0, [pc, #32]	; (800a60c <prvPortStartFirstTask+0x24>)
 800a5ea:	6800      	ldr	r0, [r0, #0]
 800a5ec:	6800      	ldr	r0, [r0, #0]
 800a5ee:	f380 8808 	msr	MSP, r0
 800a5f2:	f04f 0000 	mov.w	r0, #0
 800a5f6:	f380 8814 	msr	CONTROL, r0
 800a5fa:	b662      	cpsie	i
 800a5fc:	b661      	cpsie	f
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	df00      	svc	0
 800a608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a60a:	bf00      	nop
 800a60c:	e000ed08 	.word	0xe000ed08

0800a610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a616:	4b46      	ldr	r3, [pc, #280]	; (800a730 <xPortStartScheduler+0x120>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a46      	ldr	r2, [pc, #280]	; (800a734 <xPortStartScheduler+0x124>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d10a      	bne.n	800a636 <xPortStartScheduler+0x26>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	613b      	str	r3, [r7, #16]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a636:	4b3e      	ldr	r3, [pc, #248]	; (800a730 <xPortStartScheduler+0x120>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a3f      	ldr	r2, [pc, #252]	; (800a738 <xPortStartScheduler+0x128>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d10a      	bne.n	800a656 <xPortStartScheduler+0x46>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	60fb      	str	r3, [r7, #12]
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a656:	4b39      	ldr	r3, [pc, #228]	; (800a73c <xPortStartScheduler+0x12c>)
 800a658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	22ff      	movs	r2, #255	; 0xff
 800a666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	4b31      	ldr	r3, [pc, #196]	; (800a740 <xPortStartScheduler+0x130>)
 800a67c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a67e:	4b31      	ldr	r3, [pc, #196]	; (800a744 <xPortStartScheduler+0x134>)
 800a680:	2207      	movs	r2, #7
 800a682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a684:	e009      	b.n	800a69a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a686:	4b2f      	ldr	r3, [pc, #188]	; (800a744 <xPortStartScheduler+0x134>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	4a2d      	ldr	r2, [pc, #180]	; (800a744 <xPortStartScheduler+0x134>)
 800a68e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a690:	78fb      	ldrb	r3, [r7, #3]
 800a692:	b2db      	uxtb	r3, r3
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	b2db      	uxtb	r3, r3
 800a698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a2:	2b80      	cmp	r3, #128	; 0x80
 800a6a4:	d0ef      	beq.n	800a686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6a6:	4b27      	ldr	r3, [pc, #156]	; (800a744 <xPortStartScheduler+0x134>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f1c3 0307 	rsb	r3, r3, #7
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d00a      	beq.n	800a6c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	60bb      	str	r3, [r7, #8]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6c8:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <xPortStartScheduler+0x134>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	021b      	lsls	r3, r3, #8
 800a6ce:	4a1d      	ldr	r2, [pc, #116]	; (800a744 <xPortStartScheduler+0x134>)
 800a6d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <xPortStartScheduler+0x134>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6da:	4a1a      	ldr	r2, [pc, #104]	; (800a744 <xPortStartScheduler+0x134>)
 800a6dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6e6:	4b18      	ldr	r3, [pc, #96]	; (800a748 <xPortStartScheduler+0x138>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a17      	ldr	r2, [pc, #92]	; (800a748 <xPortStartScheduler+0x138>)
 800a6ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6f2:	4b15      	ldr	r3, [pc, #84]	; (800a748 <xPortStartScheduler+0x138>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a14      	ldr	r2, [pc, #80]	; (800a748 <xPortStartScheduler+0x138>)
 800a6f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a6fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6fe:	f000 f8dd 	bl	800a8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a702:	4b12      	ldr	r3, [pc, #72]	; (800a74c <xPortStartScheduler+0x13c>)
 800a704:	2200      	movs	r2, #0
 800a706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a708:	f000 f8fc 	bl	800a904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a70c:	4b10      	ldr	r3, [pc, #64]	; (800a750 <xPortStartScheduler+0x140>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a0f      	ldr	r2, [pc, #60]	; (800a750 <xPortStartScheduler+0x140>)
 800a712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a718:	f7ff ff66 	bl	800a5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a71c:	f7fe fd16 	bl	800914c <vTaskSwitchContext>
	prvTaskExitError();
 800a720:	f7ff ff22 	bl	800a568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	e000ed00 	.word	0xe000ed00
 800a734:	410fc271 	.word	0x410fc271
 800a738:	410fc270 	.word	0x410fc270
 800a73c:	e000e400 	.word	0xe000e400
 800a740:	20001048 	.word	0x20001048
 800a744:	2000104c 	.word	0x2000104c
 800a748:	e000ed20 	.word	0xe000ed20
 800a74c:	20000098 	.word	0x20000098
 800a750:	e000ef34 	.word	0xe000ef34

0800a754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	607b      	str	r3, [r7, #4]
}
 800a76c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <vPortEnterCritical+0x58>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	4a0d      	ldr	r2, [pc, #52]	; (800a7ac <vPortEnterCritical+0x58>)
 800a776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a778:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <vPortEnterCritical+0x58>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d10f      	bne.n	800a7a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a780:	4b0b      	ldr	r3, [pc, #44]	; (800a7b0 <vPortEnterCritical+0x5c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00a      	beq.n	800a7a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	603b      	str	r3, [r7, #0]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <vPortEnterCritical+0x4a>
	}
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	20000098 	.word	0x20000098
 800a7b0:	e000ed04 	.word	0xe000ed04

0800a7b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7ba:	4b12      	ldr	r3, [pc, #72]	; (800a804 <vPortExitCritical+0x50>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10a      	bne.n	800a7d8 <vPortExitCritical+0x24>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	607b      	str	r3, [r7, #4]
}
 800a7d4:	bf00      	nop
 800a7d6:	e7fe      	b.n	800a7d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7d8:	4b0a      	ldr	r3, [pc, #40]	; (800a804 <vPortExitCritical+0x50>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	4a09      	ldr	r2, [pc, #36]	; (800a804 <vPortExitCritical+0x50>)
 800a7e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7e2:	4b08      	ldr	r3, [pc, #32]	; (800a804 <vPortExitCritical+0x50>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d105      	bne.n	800a7f6 <vPortExitCritical+0x42>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	f383 8811 	msr	BASEPRI, r3
}
 800a7f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20000098 	.word	0x20000098
	...

0800a810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a810:	f3ef 8009 	mrs	r0, PSP
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	4b15      	ldr	r3, [pc, #84]	; (800a870 <pxCurrentTCBConst>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	f01e 0f10 	tst.w	lr, #16
 800a820:	bf08      	it	eq
 800a822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	6010      	str	r0, [r2, #0]
 800a82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a834:	f380 8811 	msr	BASEPRI, r0
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f7fe fc84 	bl	800914c <vTaskSwitchContext>
 800a844:	f04f 0000 	mov.w	r0, #0
 800a848:	f380 8811 	msr	BASEPRI, r0
 800a84c:	bc09      	pop	{r0, r3}
 800a84e:	6819      	ldr	r1, [r3, #0]
 800a850:	6808      	ldr	r0, [r1, #0]
 800a852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a856:	f01e 0f10 	tst.w	lr, #16
 800a85a:	bf08      	it	eq
 800a85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a860:	f380 8809 	msr	PSP, r0
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	f3af 8000 	nop.w

0800a870 <pxCurrentTCBConst>:
 800a870:	20000a1c 	.word	0x20000a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a874:	bf00      	nop
 800a876:	bf00      	nop

0800a878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	607b      	str	r3, [r7, #4]
}
 800a890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a892:	f7fe fba1 	bl	8008fd8 <xTaskIncrementTick>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <xPortSysTickHandler+0x40>)
 800a89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f383 8811 	msr	BASEPRI, r3
}
 800a8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <vPortSetupTimerInterrupt+0x38>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <vPortSetupTimerInterrupt+0x3c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <vPortSetupTimerInterrupt+0x40>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	099b      	lsrs	r3, r3, #6
 800a8d8:	4a09      	ldr	r2, [pc, #36]	; (800a900 <vPortSetupTimerInterrupt+0x44>)
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8de:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8e0:	2207      	movs	r2, #7
 800a8e2:	601a      	str	r2, [r3, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	e000e010 	.word	0xe000e010
 800a8f4:	e000e018 	.word	0xe000e018
 800a8f8:	20000000 	.word	0x20000000
 800a8fc:	10624dd3 	.word	0x10624dd3
 800a900:	e000e014 	.word	0xe000e014

0800a904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a914 <vPortEnableVFP+0x10>
 800a908:	6801      	ldr	r1, [r0, #0]
 800a90a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a90e:	6001      	str	r1, [r0, #0]
 800a910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a912:	bf00      	nop
 800a914:	e000ed88 	.word	0xe000ed88

0800a918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a91e:	f3ef 8305 	mrs	r3, IPSR
 800a922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b0f      	cmp	r3, #15
 800a928:	d914      	bls.n	800a954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a92a:	4a17      	ldr	r2, [pc, #92]	; (800a988 <vPortValidateInterruptPriority+0x70>)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a934:	4b15      	ldr	r3, [pc, #84]	; (800a98c <vPortValidateInterruptPriority+0x74>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	7afa      	ldrb	r2, [r7, #11]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d20a      	bcs.n	800a954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	607b      	str	r3, [r7, #4]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a954:	4b0e      	ldr	r3, [pc, #56]	; (800a990 <vPortValidateInterruptPriority+0x78>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a95c:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <vPortValidateInterruptPriority+0x7c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d90a      	bls.n	800a97a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	603b      	str	r3, [r7, #0]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <vPortValidateInterruptPriority+0x60>
	}
 800a97a:	bf00      	nop
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	e000e3f0 	.word	0xe000e3f0
 800a98c:	20001048 	.word	0x20001048
 800a990:	e000ed0c 	.word	0xe000ed0c
 800a994:	2000104c 	.word	0x2000104c

0800a998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08a      	sub	sp, #40	; 0x28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9a4:	f7fe fa5c 	bl	8008e60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9a8:	4b5b      	ldr	r3, [pc, #364]	; (800ab18 <pvPortMalloc+0x180>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9b0:	f000 f920 	bl	800abf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9b4:	4b59      	ldr	r3, [pc, #356]	; (800ab1c <pvPortMalloc+0x184>)
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f040 8093 	bne.w	800aae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01d      	beq.n	800aa04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9c8:	2208      	movs	r2, #8
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f003 0307 	and.w	r3, r3, #7
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d014      	beq.n	800aa04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f023 0307 	bic.w	r3, r3, #7
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00a      	beq.n	800aa04 <pvPortMalloc+0x6c>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	617b      	str	r3, [r7, #20]
}
 800aa00:	bf00      	nop
 800aa02:	e7fe      	b.n	800aa02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d06e      	beq.n	800aae8 <pvPortMalloc+0x150>
 800aa0a:	4b45      	ldr	r3, [pc, #276]	; (800ab20 <pvPortMalloc+0x188>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d869      	bhi.n	800aae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa14:	4b43      	ldr	r3, [pc, #268]	; (800ab24 <pvPortMalloc+0x18c>)
 800aa16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa18:	4b42      	ldr	r3, [pc, #264]	; (800ab24 <pvPortMalloc+0x18c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa1e:	e004      	b.n	800aa2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d903      	bls.n	800aa3c <pvPortMalloc+0xa4>
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1f1      	bne.n	800aa20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa3c:	4b36      	ldr	r3, [pc, #216]	; (800ab18 <pvPortMalloc+0x180>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d050      	beq.n	800aae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2208      	movs	r2, #8
 800aa4c:	4413      	add	r3, r2
 800aa4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	685a      	ldr	r2, [r3, #4]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	1ad2      	subs	r2, r2, r3
 800aa60:	2308      	movs	r3, #8
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d91f      	bls.n	800aaa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	f003 0307 	and.w	r3, r3, #7
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00a      	beq.n	800aa90 <pvPortMalloc+0xf8>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	613b      	str	r3, [r7, #16]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	1ad2      	subs	r2, r2, r3
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aaa2:	69b8      	ldr	r0, [r7, #24]
 800aaa4:	f000 f908 	bl	800acb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aaa8:	4b1d      	ldr	r3, [pc, #116]	; (800ab20 <pvPortMalloc+0x188>)
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	4a1b      	ldr	r2, [pc, #108]	; (800ab20 <pvPortMalloc+0x188>)
 800aab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aab6:	4b1a      	ldr	r3, [pc, #104]	; (800ab20 <pvPortMalloc+0x188>)
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	4b1b      	ldr	r3, [pc, #108]	; (800ab28 <pvPortMalloc+0x190>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d203      	bcs.n	800aaca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aac2:	4b17      	ldr	r3, [pc, #92]	; (800ab20 <pvPortMalloc+0x188>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a18      	ldr	r2, [pc, #96]	; (800ab28 <pvPortMalloc+0x190>)
 800aac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	4b13      	ldr	r3, [pc, #76]	; (800ab1c <pvPortMalloc+0x184>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	431a      	orrs	r2, r3
 800aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aade:	4b13      	ldr	r3, [pc, #76]	; (800ab2c <pvPortMalloc+0x194>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3301      	adds	r3, #1
 800aae4:	4a11      	ldr	r2, [pc, #68]	; (800ab2c <pvPortMalloc+0x194>)
 800aae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aae8:	f7fe f9c8 	bl	8008e7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	f003 0307 	and.w	r3, r3, #7
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00a      	beq.n	800ab0c <pvPortMalloc+0x174>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	60fb      	str	r3, [r7, #12]
}
 800ab08:	bf00      	nop
 800ab0a:	e7fe      	b.n	800ab0a <pvPortMalloc+0x172>
	return pvReturn;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3728      	adds	r7, #40	; 0x28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20009058 	.word	0x20009058
 800ab1c:	2000906c 	.word	0x2000906c
 800ab20:	2000905c 	.word	0x2000905c
 800ab24:	20009050 	.word	0x20009050
 800ab28:	20009060 	.word	0x20009060
 800ab2c:	20009064 	.word	0x20009064

0800ab30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d04d      	beq.n	800abde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab42:	2308      	movs	r3, #8
 800ab44:	425b      	negs	r3, r3
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	4413      	add	r3, r2
 800ab4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	685a      	ldr	r2, [r3, #4]
 800ab54:	4b24      	ldr	r3, [pc, #144]	; (800abe8 <vPortFree+0xb8>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4013      	ands	r3, r2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <vPortFree+0x44>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	60fb      	str	r3, [r7, #12]
}
 800ab70:	bf00      	nop
 800ab72:	e7fe      	b.n	800ab72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00a      	beq.n	800ab92 <vPortFree+0x62>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	60bb      	str	r3, [r7, #8]
}
 800ab8e:	bf00      	nop
 800ab90:	e7fe      	b.n	800ab90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	4b14      	ldr	r3, [pc, #80]	; (800abe8 <vPortFree+0xb8>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d01e      	beq.n	800abde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d11a      	bne.n	800abde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <vPortFree+0xb8>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	43db      	mvns	r3, r3
 800abb2:	401a      	ands	r2, r3
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abb8:	f7fe f952 	bl	8008e60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <vPortFree+0xbc>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4413      	add	r3, r2
 800abc6:	4a09      	ldr	r2, [pc, #36]	; (800abec <vPortFree+0xbc>)
 800abc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abca:	6938      	ldr	r0, [r7, #16]
 800abcc:	f000 f874 	bl	800acb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abd0:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <vPortFree+0xc0>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3301      	adds	r3, #1
 800abd6:	4a06      	ldr	r2, [pc, #24]	; (800abf0 <vPortFree+0xc0>)
 800abd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800abda:	f7fe f94f 	bl	8008e7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abde:	bf00      	nop
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	2000906c 	.word	0x2000906c
 800abec:	2000905c 	.word	0x2000905c
 800abf0:	20009068 	.word	0x20009068

0800abf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac00:	4b27      	ldr	r3, [pc, #156]	; (800aca0 <prvHeapInit+0xac>)
 800ac02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00c      	beq.n	800ac28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3307      	adds	r3, #7
 800ac12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f023 0307 	bic.w	r3, r3, #7
 800ac1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	4a1f      	ldr	r2, [pc, #124]	; (800aca0 <prvHeapInit+0xac>)
 800ac24:	4413      	add	r3, r2
 800ac26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac2c:	4a1d      	ldr	r2, [pc, #116]	; (800aca4 <prvHeapInit+0xb0>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac32:	4b1c      	ldr	r3, [pc, #112]	; (800aca4 <prvHeapInit+0xb0>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac40:	2208      	movs	r2, #8
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	1a9b      	subs	r3, r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 0307 	bic.w	r3, r3, #7
 800ac4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4a15      	ldr	r2, [pc, #84]	; (800aca8 <prvHeapInit+0xb4>)
 800ac54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac56:	4b14      	ldr	r3, [pc, #80]	; (800aca8 <prvHeapInit+0xb4>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac5e:	4b12      	ldr	r3, [pc, #72]	; (800aca8 <prvHeapInit+0xb4>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	1ad2      	subs	r2, r2, r3
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac74:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <prvHeapInit+0xb4>)
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	4a0a      	ldr	r2, [pc, #40]	; (800acac <prvHeapInit+0xb8>)
 800ac82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	4a09      	ldr	r2, [pc, #36]	; (800acb0 <prvHeapInit+0xbc>)
 800ac8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac8c:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <prvHeapInit+0xc0>)
 800ac8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac92:	601a      	str	r2, [r3, #0]
}
 800ac94:	bf00      	nop
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	20001050 	.word	0x20001050
 800aca4:	20009050 	.word	0x20009050
 800aca8:	20009058 	.word	0x20009058
 800acac:	20009060 	.word	0x20009060
 800acb0:	2000905c 	.word	0x2000905c
 800acb4:	2000906c 	.word	0x2000906c

0800acb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800acc0:	4b28      	ldr	r3, [pc, #160]	; (800ad64 <prvInsertBlockIntoFreeList+0xac>)
 800acc2:	60fb      	str	r3, [r7, #12]
 800acc4:	e002      	b.n	800accc <prvInsertBlockIntoFreeList+0x14>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d8f7      	bhi.n	800acc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	4413      	add	r3, r2
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d108      	bne.n	800acfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	441a      	add	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	441a      	add	r2, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d118      	bne.n	800ad40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	4b15      	ldr	r3, [pc, #84]	; (800ad68 <prvInsertBlockIntoFreeList+0xb0>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d00d      	beq.n	800ad36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	441a      	add	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	e008      	b.n	800ad48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad36:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <prvInsertBlockIntoFreeList+0xb0>)
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	e003      	b.n	800ad48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d002      	beq.n	800ad56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad56:	bf00      	nop
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	20009050 	.word	0x20009050
 800ad68:	20009058 	.word	0x20009058

0800ad6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ad70:	2200      	movs	r2, #0
 800ad72:	4912      	ldr	r1, [pc, #72]	; (800adbc <MX_USB_DEVICE_Init+0x50>)
 800ad74:	4812      	ldr	r0, [pc, #72]	; (800adc0 <MX_USB_DEVICE_Init+0x54>)
 800ad76:	f7fa ff15 	bl	8005ba4 <USBD_Init>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad80:	f7f5 fd78 	bl	8000874 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad84:	490f      	ldr	r1, [pc, #60]	; (800adc4 <MX_USB_DEVICE_Init+0x58>)
 800ad86:	480e      	ldr	r0, [pc, #56]	; (800adc0 <MX_USB_DEVICE_Init+0x54>)
 800ad88:	f7fa ff3c 	bl	8005c04 <USBD_RegisterClass>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad92:	f7f5 fd6f 	bl	8000874 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad96:	490c      	ldr	r1, [pc, #48]	; (800adc8 <MX_USB_DEVICE_Init+0x5c>)
 800ad98:	4809      	ldr	r0, [pc, #36]	; (800adc0 <MX_USB_DEVICE_Init+0x54>)
 800ad9a:	f7fa fe2d 	bl	80059f8 <USBD_CDC_RegisterInterface>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ada4:	f7f5 fd66 	bl	8000874 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ada8:	4805      	ldr	r0, [pc, #20]	; (800adc0 <MX_USB_DEVICE_Init+0x54>)
 800adaa:	f7fa ff61 	bl	8005c70 <USBD_Start>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d001      	beq.n	800adb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800adb4:	f7f5 fd5e 	bl	8000874 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800adb8:	bf00      	nop
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	200000b0 	.word	0x200000b0
 800adc0:	20009070 	.word	0x20009070
 800adc4:	20000018 	.word	0x20000018
 800adc8:	2000009c 	.word	0x2000009c

0800adcc <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void init_usb_rtos_obj(void){
 800adcc:	b580      	push	{r7, lr}
 800adce:	af00      	add	r7, sp, #0
	sem_usb_tx = xSemaphoreCreateBinary();
 800add0:	2203      	movs	r2, #3
 800add2:	2100      	movs	r1, #0
 800add4:	2001      	movs	r0, #1
 800add6:	f7fc fcaf 	bl	8007738 <xQueueGenericCreate>
 800adda:	4603      	mov	r3, r0
 800addc:	4a07      	ldr	r2, [pc, #28]	; (800adfc <init_usb_rtos_obj+0x30>)
 800adde:	6013      	str	r3, [r2, #0]
	msg_buf_rx = xMessageBufferCreate(768);
 800ade0:	2201      	movs	r2, #1
 800ade2:	2100      	movs	r1, #0
 800ade4:	f44f 7040 	mov.w	r0, #768	; 0x300
 800ade8:	f7fd fa9c 	bl	8008324 <xStreamBufferGenericCreate>
 800adec:	4603      	mov	r3, r0
 800adee:	4a04      	ldr	r2, [pc, #16]	; (800ae00 <init_usb_rtos_obj+0x34>)
 800adf0:	6013      	str	r3, [r2, #0]
	usb_on = 1;
 800adf2:	4b04      	ldr	r3, [pc, #16]	; (800ae04 <init_usb_rtos_obj+0x38>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	601a      	str	r2, [r3, #0]
}
 800adf8:	bf00      	nop
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	2000a350 	.word	0x2000a350
 800ae00:	2000934c 	.word	0x2000934c
 800ae04:	2000a354 	.word	0x2000a354

0800ae08 <read_usb_cdc>:
/*
BaseType_t CDC_Receiveq_MS(char *data, TickType_t timeout){
	return xQueueReceive(queue_usb, data, timeout);
}*/

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
 800ae14:	4b06      	ldr	r3, [pc, #24]	; (800ae30 <read_usb_cdc+0x28>)
 800ae16:	6818      	ldr	r0, [r3, #0]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	68f9      	ldr	r1, [r7, #12]
 800ae1e:	f7fd fbbd 	bl	800859c <xStreamBufferReceive>
 800ae22:	4603      	mov	r3, r0
 800ae24:	b2db      	uxtb	r3, r3
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	2000934c 	.word	0x2000934c

0800ae34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae38:	2200      	movs	r2, #0
 800ae3a:	4905      	ldr	r1, [pc, #20]	; (800ae50 <CDC_Init_FS+0x1c>)
 800ae3c:	4805      	ldr	r0, [pc, #20]	; (800ae54 <CDC_Init_FS+0x20>)
 800ae3e:	f7fa fdf5 	bl	8005a2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae42:	4905      	ldr	r1, [pc, #20]	; (800ae58 <CDC_Init_FS+0x24>)
 800ae44:	4803      	ldr	r0, [pc, #12]	; (800ae54 <CDC_Init_FS+0x20>)
 800ae46:	f7fa fe13 	bl	8005a70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20009b50 	.word	0x20009b50
 800ae54:	20009070 	.word	0x20009070
 800ae58:	20009350 	.word	0x20009350

0800ae5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ae60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	71fb      	strb	r3, [r7, #7]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  portBASE_TYPE yield = pdFALSE;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	60fb      	str	r3, [r7, #12]
  char data = 0;
 800ae80:	2300      	movs	r3, #0
 800ae82:	72fb      	strb	r3, [r7, #11]
  switch(cmd)
 800ae84:	79fb      	ldrb	r3, [r7, #7]
 800ae86:	2b23      	cmp	r3, #35	; 0x23
 800ae88:	d85f      	bhi.n	800af4a <CDC_Control_FS+0xde>
 800ae8a:	a201      	add	r2, pc, #4	; (adr r2, 800ae90 <CDC_Control_FS+0x24>)
 800ae8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae90:	0800af4b 	.word	0x0800af4b
 800ae94:	0800af4b 	.word	0x0800af4b
 800ae98:	0800af4b 	.word	0x0800af4b
 800ae9c:	0800af4b 	.word	0x0800af4b
 800aea0:	0800af4b 	.word	0x0800af4b
 800aea4:	0800af4b 	.word	0x0800af4b
 800aea8:	0800af4b 	.word	0x0800af4b
 800aeac:	0800af4b 	.word	0x0800af4b
 800aeb0:	0800af4b 	.word	0x0800af4b
 800aeb4:	0800af4b 	.word	0x0800af4b
 800aeb8:	0800af4b 	.word	0x0800af4b
 800aebc:	0800af4b 	.word	0x0800af4b
 800aec0:	0800af4b 	.word	0x0800af4b
 800aec4:	0800af4b 	.word	0x0800af4b
 800aec8:	0800af4b 	.word	0x0800af4b
 800aecc:	0800af4b 	.word	0x0800af4b
 800aed0:	0800af4b 	.word	0x0800af4b
 800aed4:	0800af4b 	.word	0x0800af4b
 800aed8:	0800af4b 	.word	0x0800af4b
 800aedc:	0800af4b 	.word	0x0800af4b
 800aee0:	0800af4b 	.word	0x0800af4b
 800aee4:	0800af4b 	.word	0x0800af4b
 800aee8:	0800af4b 	.word	0x0800af4b
 800aeec:	0800af4b 	.word	0x0800af4b
 800aef0:	0800af4b 	.word	0x0800af4b
 800aef4:	0800af4b 	.word	0x0800af4b
 800aef8:	0800af4b 	.word	0x0800af4b
 800aefc:	0800af4b 	.word	0x0800af4b
 800af00:	0800af4b 	.word	0x0800af4b
 800af04:	0800af4b 	.word	0x0800af4b
 800af08:	0800af4b 	.word	0x0800af4b
 800af0c:	0800af4b 	.word	0x0800af4b
 800af10:	0800af4b 	.word	0x0800af4b
 800af14:	0800af4b 	.word	0x0800af4b
 800af18:	0800af21 	.word	0x0800af21
 800af1c:	0800af4b 	.word	0x0800af4b
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  	  xMessageBufferSendFromISR(msg_buf_rx, &data, 1, &yield);
 800af20:	4b0e      	ldr	r3, [pc, #56]	; (800af5c <CDC_Control_FS+0xf0>)
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	f107 030c 	add.w	r3, r7, #12
 800af28:	f107 010b 	add.w	r1, r7, #11
 800af2c:	2201      	movs	r2, #1
 800af2e:	f7fd fa87 	bl	8008440 <xStreamBufferSendFromISR>
  	  portYIELD_FROM_ISR(yield);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00a      	beq.n	800af4e <CDC_Control_FS+0xe2>
 800af38:	4b09      	ldr	r3, [pc, #36]	; (800af60 <CDC_Control_FS+0xf4>)
 800af3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	f3bf 8f6f 	isb	sy

    break;
 800af48:	e001      	b.n	800af4e <CDC_Control_FS+0xe2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af4a:	bf00      	nop
 800af4c:	e000      	b.n	800af50 <CDC_Control_FS+0xe4>
    break;
 800af4e:	bf00      	nop
  }

  return (USBD_OK);
 800af50:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	2000934c 	.word	0x2000934c
 800af60:	e000ed04 	.word	0xe000ed04

0800af64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800af72:	6879      	ldr	r1, [r7, #4]
 800af74:	480f      	ldr	r0, [pc, #60]	; (800afb4 <CDC_Receive_FS+0x50>)
 800af76:	f7fa fd7b 	bl	8005a70 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800af7a:	480e      	ldr	r0, [pc, #56]	; (800afb4 <CDC_Receive_FS+0x50>)
 800af7c:	f7fa fddc 	bl	8005b38 <USBD_CDC_ReceivePacket>

	  xMessageBufferSendFromISR(msg_buf_rx, Buf, *Len, &yield);
 800af80:	4b0d      	ldr	r3, [pc, #52]	; (800afb8 <CDC_Receive_FS+0x54>)
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	f107 030c 	add.w	r3, r7, #12
 800af8c:	6879      	ldr	r1, [r7, #4]
 800af8e:	f7fd fa57 	bl	8008440 <xStreamBufferSendFromISR>
	  portYIELD_FROM_ISR(yield);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <CDC_Receive_FS+0x44>
 800af98:	4b08      	ldr	r3, [pc, #32]	; (800afbc <CDC_Receive_FS+0x58>)
 800af9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800afa8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20009070 	.word	0x20009070
 800afb8:	2000934c 	.word	0x2000934c
 800afbc:	e000ed04 	.word	0xe000ed04

0800afc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	460b      	mov	r3, r1
 800afca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
	  xSemaphoreGive(mutex_usb);
  }*/
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800afd0:	4b10      	ldr	r3, [pc, #64]	; (800b014 <CDC_Transmit_FS+0x54>)
 800afd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e012      	b.n	800b00c <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800afe6:	887b      	ldrh	r3, [r7, #2]
 800afe8:	461a      	mov	r2, r3
 800afea:	6879      	ldr	r1, [r7, #4]
 800afec:	4809      	ldr	r0, [pc, #36]	; (800b014 <CDC_Transmit_FS+0x54>)
 800afee:	f7fa fd1d 	bl	8005a2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aff2:	4808      	ldr	r0, [pc, #32]	; (800b014 <CDC_Transmit_FS+0x54>)
 800aff4:	f7fa fd5a 	bl	8005aac <USBD_CDC_TransmitPacket>
 800aff8:	4603      	mov	r3, r0
 800affa:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800affc:	4b06      	ldr	r3, [pc, #24]	; (800b018 <CDC_Transmit_FS+0x58>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b004:	4618      	mov	r0, r3
 800b006:	f7fc fefb 	bl	8007e00 <xQueueSemaphoreTake>
  /* USER CODE END 7 */
  return result;
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20009070 	.word	0x20009070
 800b018:	2000a350 	.word	0x2000a350

0800b01c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	4613      	mov	r3, r2
 800b028:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800b02e:	2300      	movs	r3, #0
 800b030:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800b032:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <CDC_TransmitCplt_FS+0x44>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f107 0210 	add.w	r2, r7, #16
 800b03a:	4611      	mov	r1, r2
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fc fd72 	bl	8007b26 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 800b042:	4b08      	ldr	r3, [pc, #32]	; (800b064 <CDC_TransmitCplt_FS+0x48>)
 800b044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800b052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	2000a350 	.word	0x2000a350
 800b064:	e000ed04 	.word	0xe000ed04

0800b068 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	6039      	str	r1, [r7, #0]
 800b072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	2212      	movs	r2, #18
 800b078:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b07a:	4b03      	ldr	r3, [pc, #12]	; (800b088 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	200000cc 	.word	0x200000cc

0800b08c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	4603      	mov	r3, r0
 800b094:	6039      	str	r1, [r7, #0]
 800b096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	2204      	movs	r2, #4
 800b09c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b09e:	4b03      	ldr	r3, [pc, #12]	; (800b0ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	200000e0 	.word	0x200000e0

0800b0b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	6039      	str	r1, [r7, #0]
 800b0ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0bc:	79fb      	ldrb	r3, [r7, #7]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d105      	bne.n	800b0ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0c2:	683a      	ldr	r2, [r7, #0]
 800b0c4:	4907      	ldr	r1, [pc, #28]	; (800b0e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b0c6:	4808      	ldr	r0, [pc, #32]	; (800b0e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0c8:	f7fb ff7e 	bl	8006fc8 <USBD_GetString>
 800b0cc:	e004      	b.n	800b0d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	4904      	ldr	r1, [pc, #16]	; (800b0e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b0d2:	4805      	ldr	r0, [pc, #20]	; (800b0e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0d4:	f7fb ff78 	bl	8006fc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0d8:	4b02      	ldr	r3, [pc, #8]	; (800b0e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	2000a358 	.word	0x2000a358
 800b0e8:	0800bb2c 	.word	0x0800bb2c

0800b0ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6039      	str	r1, [r7, #0]
 800b0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	4904      	ldr	r1, [pc, #16]	; (800b10c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b0fc:	4804      	ldr	r0, [pc, #16]	; (800b110 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b0fe:	f7fb ff63 	bl	8006fc8 <USBD_GetString>
  return USBD_StrDesc;
 800b102:	4b02      	ldr	r3, [pc, #8]	; (800b10c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b104:	4618      	mov	r0, r3
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	2000a358 	.word	0x2000a358
 800b110:	0800bb44 	.word	0x0800bb44

0800b114 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	6039      	str	r1, [r7, #0]
 800b11e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	221a      	movs	r2, #26
 800b124:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b126:	f000 f843 	bl	800b1b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b12a:	4b02      	ldr	r3, [pc, #8]	; (800b134 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	200000e4 	.word	0x200000e4

0800b138 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	4603      	mov	r3, r0
 800b140:	6039      	str	r1, [r7, #0]
 800b142:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b144:	79fb      	ldrb	r3, [r7, #7]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d105      	bne.n	800b156 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	4907      	ldr	r1, [pc, #28]	; (800b16c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b14e:	4808      	ldr	r0, [pc, #32]	; (800b170 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b150:	f7fb ff3a 	bl	8006fc8 <USBD_GetString>
 800b154:	e004      	b.n	800b160 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	4904      	ldr	r1, [pc, #16]	; (800b16c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b15a:	4805      	ldr	r0, [pc, #20]	; (800b170 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b15c:	f7fb ff34 	bl	8006fc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b160:	4b02      	ldr	r3, [pc, #8]	; (800b16c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	2000a358 	.word	0x2000a358
 800b170:	0800bb58 	.word	0x0800bb58

0800b174 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	4603      	mov	r3, r0
 800b17c:	6039      	str	r1, [r7, #0]
 800b17e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d105      	bne.n	800b192 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	4907      	ldr	r1, [pc, #28]	; (800b1a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b18a:	4808      	ldr	r0, [pc, #32]	; (800b1ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b18c:	f7fb ff1c 	bl	8006fc8 <USBD_GetString>
 800b190:	e004      	b.n	800b19c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	4904      	ldr	r1, [pc, #16]	; (800b1a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b196:	4805      	ldr	r0, [pc, #20]	; (800b1ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b198:	f7fb ff16 	bl	8006fc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b19c:	4b02      	ldr	r3, [pc, #8]	; (800b1a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	2000a358 	.word	0x2000a358
 800b1ac:	0800bb64 	.word	0x0800bb64

0800b1b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1b6:	4b0f      	ldr	r3, [pc, #60]	; (800b1f4 <Get_SerialNum+0x44>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1bc:	4b0e      	ldr	r3, [pc, #56]	; (800b1f8 <Get_SerialNum+0x48>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1c2:	4b0e      	ldr	r3, [pc, #56]	; (800b1fc <Get_SerialNum+0x4c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b1c8:	68fa      	ldr	r2, [r7, #12]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d009      	beq.n	800b1ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1d6:	2208      	movs	r2, #8
 800b1d8:	4909      	ldr	r1, [pc, #36]	; (800b200 <Get_SerialNum+0x50>)
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f000 f814 	bl	800b208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1e0:	2204      	movs	r2, #4
 800b1e2:	4908      	ldr	r1, [pc, #32]	; (800b204 <Get_SerialNum+0x54>)
 800b1e4:	68b8      	ldr	r0, [r7, #8]
 800b1e6:	f000 f80f 	bl	800b208 <IntToUnicode>
  }
}
 800b1ea:	bf00      	nop
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	1fff7a10 	.word	0x1fff7a10
 800b1f8:	1fff7a14 	.word	0x1fff7a14
 800b1fc:	1fff7a18 	.word	0x1fff7a18
 800b200:	200000e6 	.word	0x200000e6
 800b204:	200000f6 	.word	0x200000f6

0800b208 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b208:	b480      	push	{r7}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b21a:	2300      	movs	r3, #0
 800b21c:	75fb      	strb	r3, [r7, #23]
 800b21e:	e027      	b.n	800b270 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	0f1b      	lsrs	r3, r3, #28
 800b224:	2b09      	cmp	r3, #9
 800b226:	d80b      	bhi.n	800b240 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	0f1b      	lsrs	r3, r3, #28
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
 800b230:	005b      	lsls	r3, r3, #1
 800b232:	4619      	mov	r1, r3
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	440b      	add	r3, r1
 800b238:	3230      	adds	r2, #48	; 0x30
 800b23a:	b2d2      	uxtb	r2, r2
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	e00a      	b.n	800b256 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	0f1b      	lsrs	r3, r3, #28
 800b244:	b2da      	uxtb	r2, r3
 800b246:	7dfb      	ldrb	r3, [r7, #23]
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	4619      	mov	r1, r3
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	440b      	add	r3, r1
 800b250:	3237      	adds	r2, #55	; 0x37
 800b252:	b2d2      	uxtb	r2, r2
 800b254:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	011b      	lsls	r3, r3, #4
 800b25a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
 800b25e:	005b      	lsls	r3, r3, #1
 800b260:	3301      	adds	r3, #1
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	4413      	add	r3, r2
 800b266:	2200      	movs	r2, #0
 800b268:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b26a:	7dfb      	ldrb	r3, [r7, #23]
 800b26c:	3301      	adds	r3, #1
 800b26e:	75fb      	strb	r3, [r7, #23]
 800b270:	7dfa      	ldrb	r2, [r7, #23]
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	429a      	cmp	r2, r3
 800b276:	d3d3      	bcc.n	800b220 <IntToUnicode+0x18>
  }
}
 800b278:	bf00      	nop
 800b27a:	bf00      	nop
 800b27c:	371c      	adds	r7, #28
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
	...

0800b288 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08a      	sub	sp, #40	; 0x28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b290:	f107 0314 	add.w	r3, r7, #20
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	605a      	str	r2, [r3, #4]
 800b29a:	609a      	str	r2, [r3, #8]
 800b29c:	60da      	str	r2, [r3, #12]
 800b29e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2a8:	d13a      	bne.n	800b320 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	613b      	str	r3, [r7, #16]
 800b2ae:	4b1e      	ldr	r3, [pc, #120]	; (800b328 <HAL_PCD_MspInit+0xa0>)
 800b2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b2:	4a1d      	ldr	r2, [pc, #116]	; (800b328 <HAL_PCD_MspInit+0xa0>)
 800b2b4:	f043 0301 	orr.w	r3, r3, #1
 800b2b8:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ba:	4b1b      	ldr	r3, [pc, #108]	; (800b328 <HAL_PCD_MspInit+0xa0>)
 800b2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b2c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b2ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b2d8:	230a      	movs	r3, #10
 800b2da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2dc:	f107 0314 	add.w	r3, r7, #20
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4812      	ldr	r0, [pc, #72]	; (800b32c <HAL_PCD_MspInit+0xa4>)
 800b2e4:	f7f6 fad6 	bl	8001894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2e8:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <HAL_PCD_MspInit+0xa0>)
 800b2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ec:	4a0e      	ldr	r2, [pc, #56]	; (800b328 <HAL_PCD_MspInit+0xa0>)
 800b2ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f2:	6353      	str	r3, [r2, #52]	; 0x34
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	4b0b      	ldr	r3, [pc, #44]	; (800b328 <HAL_PCD_MspInit+0xa0>)
 800b2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2fc:	4a0a      	ldr	r2, [pc, #40]	; (800b328 <HAL_PCD_MspInit+0xa0>)
 800b2fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b302:	6453      	str	r3, [r2, #68]	; 0x44
 800b304:	4b08      	ldr	r3, [pc, #32]	; (800b328 <HAL_PCD_MspInit+0xa0>)
 800b306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b30c:	60fb      	str	r3, [r7, #12]
 800b30e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b310:	2200      	movs	r2, #0
 800b312:	2105      	movs	r1, #5
 800b314:	2043      	movs	r0, #67	; 0x43
 800b316:	f7f5 ff9c 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b31a:	2043      	movs	r0, #67	; 0x43
 800b31c:	f7f5 ffb5 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b320:	bf00      	nop
 800b322:	3728      	adds	r7, #40	; 0x28
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	40023800 	.word	0x40023800
 800b32c:	40020000 	.word	0x40020000

0800b330 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b344:	4619      	mov	r1, r3
 800b346:	4610      	mov	r0, r2
 800b348:	f7fa fcdf 	bl	8005d0a <USBD_LL_SetupStage>
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	460b      	mov	r3, r1
 800b35e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	4613      	mov	r3, r2
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	4413      	add	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	440b      	add	r3, r1
 800b374:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	4619      	mov	r1, r3
 800b37e:	f7fa fd19 	bl	8005db4 <USBD_LL_DataOutStage>
}
 800b382:	bf00      	nop
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	460b      	mov	r3, r1
 800b394:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b39c:	78fa      	ldrb	r2, [r7, #3]
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	4413      	add	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	440b      	add	r3, r1
 800b3aa:	334c      	adds	r3, #76	; 0x4c
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	78fb      	ldrb	r3, [r7, #3]
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	f7fa fdb2 	bl	8005f1a <USBD_LL_DataInStage>
}
 800b3b6:	bf00      	nop
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fa fee6 	bl	800619e <USBD_LL_SOF>
}
 800b3d2:	bf00      	nop
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b084      	sub	sp, #16
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d102      	bne.n	800b3f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]
 800b3f2:	e008      	b.n	800b406 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d102      	bne.n	800b402 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	73fb      	strb	r3, [r7, #15]
 800b400:	e001      	b.n	800b406 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b402:	f7f5 fa37 	bl	8000874 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b40c:	7bfa      	ldrb	r2, [r7, #15]
 800b40e:	4611      	mov	r1, r2
 800b410:	4618      	mov	r0, r3
 800b412:	f7fa fe86 	bl	8006122 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fa fe2e 	bl	800607e <USBD_LL_Reset>
}
 800b422:	bf00      	nop
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
	...

0800b42c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fa fe81 	bl	8006142 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	6812      	ldr	r2, [r2, #0]
 800b44e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b452:	f043 0301 	orr.w	r3, r3, #1
 800b456:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d005      	beq.n	800b46c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b460:	4b04      	ldr	r3, [pc, #16]	; (800b474 <HAL_PCD_SuspendCallback+0x48>)
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	4a03      	ldr	r2, [pc, #12]	; (800b474 <HAL_PCD_SuspendCallback+0x48>)
 800b466:	f043 0306 	orr.w	r3, r3, #6
 800b46a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b46c:	bf00      	nop
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	e000ed00 	.word	0xe000ed00

0800b478 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b486:	4618      	mov	r0, r3
 800b488:	f7fa fe71 	bl	800616e <USBD_LL_Resume>
}
 800b48c:	bf00      	nop
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4a6:	78fa      	ldrb	r2, [r7, #3]
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fa fec9 	bl	8006242 <USBD_LL_IsoOUTIncomplete>
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4ca:	78fa      	ldrb	r2, [r7, #3]
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fa fe85 	bl	80061de <USBD_LL_IsoINIncomplete>
}
 800b4d4:	bf00      	nop
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fa fedb 	bl	80062a6 <USBD_LL_DevConnected>
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b506:	4618      	mov	r0, r3
 800b508:	f7fa fed8 	bl	80062bc <USBD_LL_DevDisconnected>
}
 800b50c:	bf00      	nop
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d13c      	bne.n	800b59e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b524:	4a20      	ldr	r2, [pc, #128]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a1e      	ldr	r2, [pc, #120]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b530:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b534:	4b1c      	ldr	r3, [pc, #112]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b536:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b53a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b53c:	4b1a      	ldr	r3, [pc, #104]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b53e:	2204      	movs	r2, #4
 800b540:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b542:	4b19      	ldr	r3, [pc, #100]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b544:	2202      	movs	r2, #2
 800b546:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b548:	4b17      	ldr	r3, [pc, #92]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b54e:	4b16      	ldr	r3, [pc, #88]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b550:	2202      	movs	r2, #2
 800b552:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b554:	4b14      	ldr	r3, [pc, #80]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b556:	2200      	movs	r2, #0
 800b558:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b55a:	4b13      	ldr	r3, [pc, #76]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b560:	4b11      	ldr	r3, [pc, #68]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b562:	2200      	movs	r2, #0
 800b564:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b566:	4b10      	ldr	r3, [pc, #64]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b568:	2200      	movs	r2, #0
 800b56a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b56c:	4b0e      	ldr	r3, [pc, #56]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b56e:	2200      	movs	r2, #0
 800b570:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b572:	480d      	ldr	r0, [pc, #52]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b574:	f7f6 fb45 	bl	8001c02 <HAL_PCD_Init>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b57e:	f7f5 f979 	bl	8000874 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b582:	2180      	movs	r1, #128	; 0x80
 800b584:	4808      	ldr	r0, [pc, #32]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b586:	f7f7 fd9c 	bl	80030c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b58a:	2240      	movs	r2, #64	; 0x40
 800b58c:	2100      	movs	r1, #0
 800b58e:	4806      	ldr	r0, [pc, #24]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b590:	f7f7 fd50 	bl	8003034 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b594:	2280      	movs	r2, #128	; 0x80
 800b596:	2101      	movs	r1, #1
 800b598:	4803      	ldr	r0, [pc, #12]	; (800b5a8 <USBD_LL_Init+0x94>)
 800b59a:	f7f7 fd4b 	bl	8003034 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	2000a558 	.word	0x2000a558

0800b5ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7f6 fc3a 	bl	8001e3c <HAL_PCD_Start>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 f942 	bl	800b858 <USBD_Get_USB_Status>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b084      	sub	sp, #16
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	4608      	mov	r0, r1
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	70fb      	strb	r3, [r7, #3]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	70bb      	strb	r3, [r7, #2]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b60a:	78bb      	ldrb	r3, [r7, #2]
 800b60c:	883a      	ldrh	r2, [r7, #0]
 800b60e:	78f9      	ldrb	r1, [r7, #3]
 800b610:	f7f7 f90b 	bl	800282a <HAL_PCD_EP_Open>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b618:	7bfb      	ldrb	r3, [r7, #15]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f91c 	bl	800b858 <USBD_Get_USB_Status>
 800b620:	4603      	mov	r3, r0
 800b622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b624:	7bbb      	ldrb	r3, [r7, #14]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63a:	2300      	movs	r3, #0
 800b63c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b648:	78fa      	ldrb	r2, [r7, #3]
 800b64a:	4611      	mov	r1, r2
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7f7 f954 	bl	80028fa <HAL_PCD_EP_Close>
 800b652:	4603      	mov	r3, r0
 800b654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 f8fd 	bl	800b858 <USBD_Get_USB_Status>
 800b65e:	4603      	mov	r3, r0
 800b660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b662:	7bbb      	ldrb	r3, [r7, #14]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b67c:	2300      	movs	r3, #0
 800b67e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b686:	78fa      	ldrb	r2, [r7, #3]
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7f7 fa2c 	bl	8002ae8 <HAL_PCD_EP_SetStall>
 800b690:	4603      	mov	r3, r0
 800b692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b694:	7bfb      	ldrb	r3, [r7, #15]
 800b696:	4618      	mov	r0, r3
 800b698:	f000 f8de 	bl	800b858 <USBD_Get_USB_Status>
 800b69c:	4603      	mov	r3, r0
 800b69e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b084      	sub	sp, #16
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6c4:	78fa      	ldrb	r2, [r7, #3]
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7f7 fa71 	bl	8002bb0 <HAL_PCD_EP_ClrStall>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 f8bf 	bl	800b858 <USBD_Get_USB_Status>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b6fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b700:	2b00      	cmp	r3, #0
 800b702:	da0b      	bge.n	800b71c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b704:	78fb      	ldrb	r3, [r7, #3]
 800b706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b70a:	68f9      	ldr	r1, [r7, #12]
 800b70c:	4613      	mov	r3, r2
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	4413      	add	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	440b      	add	r3, r1
 800b716:	333e      	adds	r3, #62	; 0x3e
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	e00b      	b.n	800b734 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b71c:	78fb      	ldrb	r3, [r7, #3]
 800b71e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b722:	68f9      	ldr	r1, [r7, #12]
 800b724:	4613      	mov	r3, r2
 800b726:	00db      	lsls	r3, r3, #3
 800b728:	4413      	add	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	440b      	add	r3, r1
 800b72e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b732:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b734:	4618      	mov	r0, r3
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b75a:	78fa      	ldrb	r2, [r7, #3]
 800b75c:	4611      	mov	r1, r2
 800b75e:	4618      	mov	r0, r3
 800b760:	f7f7 f83e 	bl	80027e0 <HAL_PCD_SetAddress>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b768:	7bfb      	ldrb	r3, [r7, #15]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 f874 	bl	800b858 <USBD_Get_USB_Status>
 800b770:	4603      	mov	r3, r0
 800b772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b774:	7bbb      	ldrb	r3, [r7, #14]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b086      	sub	sp, #24
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	603b      	str	r3, [r7, #0]
 800b78a:	460b      	mov	r3, r1
 800b78c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b79c:	7af9      	ldrb	r1, [r7, #11]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	f7f7 f957 	bl	8002a54 <HAL_PCD_EP_Transmit>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 f853 	bl	800b858 <USBD_Get_USB_Status>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	607a      	str	r2, [r7, #4]
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7de:	7af9      	ldrb	r1, [r7, #11]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	f7f7 f8d3 	bl	800298e <HAL_PCD_EP_Receive>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 f832 	bl	800b858 <USBD_Get_USB_Status>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b082      	sub	sp, #8
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	460b      	mov	r3, r1
 800b80c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b814:	78fa      	ldrb	r2, [r7, #3]
 800b816:	4611      	mov	r1, r2
 800b818:	4618      	mov	r0, r3
 800b81a:	f7f7 f903 	bl	8002a24 <HAL_PCD_EP_GetRxCount>
 800b81e:	4603      	mov	r3, r0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b830:	4b03      	ldr	r3, [pc, #12]	; (800b840 <USBD_static_malloc+0x18>)
}
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	2000aa64 	.word	0x2000aa64

0800b844 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]

}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b866:	79fb      	ldrb	r3, [r7, #7]
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d817      	bhi.n	800b89c <USBD_Get_USB_Status+0x44>
 800b86c:	a201      	add	r2, pc, #4	; (adr r2, 800b874 <USBD_Get_USB_Status+0x1c>)
 800b86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b872:	bf00      	nop
 800b874:	0800b885 	.word	0x0800b885
 800b878:	0800b88b 	.word	0x0800b88b
 800b87c:	0800b891 	.word	0x0800b891
 800b880:	0800b897 	.word	0x0800b897
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b884:	2300      	movs	r3, #0
 800b886:	73fb      	strb	r3, [r7, #15]
    break;
 800b888:	e00b      	b.n	800b8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b88a:	2303      	movs	r3, #3
 800b88c:	73fb      	strb	r3, [r7, #15]
    break;
 800b88e:	e008      	b.n	800b8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b890:	2301      	movs	r3, #1
 800b892:	73fb      	strb	r3, [r7, #15]
    break;
 800b894:	e005      	b.n	800b8a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b896:	2303      	movs	r3, #3
 800b898:	73fb      	strb	r3, [r7, #15]
    break;
 800b89a:	e002      	b.n	800b8a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b89c:	2303      	movs	r3, #3
 800b89e:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a0:	bf00      	nop
  }
  return usb_status;
 800b8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <__libc_init_array>:
 800b8b0:	b570      	push	{r4, r5, r6, lr}
 800b8b2:	4d0d      	ldr	r5, [pc, #52]	; (800b8e8 <__libc_init_array+0x38>)
 800b8b4:	4c0d      	ldr	r4, [pc, #52]	; (800b8ec <__libc_init_array+0x3c>)
 800b8b6:	1b64      	subs	r4, r4, r5
 800b8b8:	10a4      	asrs	r4, r4, #2
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	42a6      	cmp	r6, r4
 800b8be:	d109      	bne.n	800b8d4 <__libc_init_array+0x24>
 800b8c0:	4d0b      	ldr	r5, [pc, #44]	; (800b8f0 <__libc_init_array+0x40>)
 800b8c2:	4c0c      	ldr	r4, [pc, #48]	; (800b8f4 <__libc_init_array+0x44>)
 800b8c4:	f000 f8f2 	bl	800baac <_init>
 800b8c8:	1b64      	subs	r4, r4, r5
 800b8ca:	10a4      	asrs	r4, r4, #2
 800b8cc:	2600      	movs	r6, #0
 800b8ce:	42a6      	cmp	r6, r4
 800b8d0:	d105      	bne.n	800b8de <__libc_init_array+0x2e>
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}
 800b8d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8d8:	4798      	blx	r3
 800b8da:	3601      	adds	r6, #1
 800b8dc:	e7ee      	b.n	800b8bc <__libc_init_array+0xc>
 800b8de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8e2:	4798      	blx	r3
 800b8e4:	3601      	adds	r6, #1
 800b8e6:	e7f2      	b.n	800b8ce <__libc_init_array+0x1e>
 800b8e8:	0800bc18 	.word	0x0800bc18
 800b8ec:	0800bc18 	.word	0x0800bc18
 800b8f0:	0800bc18 	.word	0x0800bc18
 800b8f4:	0800bc1c 	.word	0x0800bc1c

0800b8f8 <__retarget_lock_acquire_recursive>:
 800b8f8:	4770      	bx	lr

0800b8fa <__retarget_lock_release_recursive>:
 800b8fa:	4770      	bx	lr

0800b8fc <memcpy>:
 800b8fc:	440a      	add	r2, r1
 800b8fe:	4291      	cmp	r1, r2
 800b900:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b904:	d100      	bne.n	800b908 <memcpy+0xc>
 800b906:	4770      	bx	lr
 800b908:	b510      	push	{r4, lr}
 800b90a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b90e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b912:	4291      	cmp	r1, r2
 800b914:	d1f9      	bne.n	800b90a <memcpy+0xe>
 800b916:	bd10      	pop	{r4, pc}

0800b918 <memset>:
 800b918:	4402      	add	r2, r0
 800b91a:	4603      	mov	r3, r0
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d100      	bne.n	800b922 <memset+0xa>
 800b920:	4770      	bx	lr
 800b922:	f803 1b01 	strb.w	r1, [r3], #1
 800b926:	e7f9      	b.n	800b91c <memset+0x4>

0800b928 <cleanup_glue>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	460c      	mov	r4, r1
 800b92c:	6809      	ldr	r1, [r1, #0]
 800b92e:	4605      	mov	r5, r0
 800b930:	b109      	cbz	r1, 800b936 <cleanup_glue+0xe>
 800b932:	f7ff fff9 	bl	800b928 <cleanup_glue>
 800b936:	4621      	mov	r1, r4
 800b938:	4628      	mov	r0, r5
 800b93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b93e:	f000 b869 	b.w	800ba14 <_free_r>
	...

0800b944 <_reclaim_reent>:
 800b944:	4b2c      	ldr	r3, [pc, #176]	; (800b9f8 <_reclaim_reent+0xb4>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4283      	cmp	r3, r0
 800b94a:	b570      	push	{r4, r5, r6, lr}
 800b94c:	4604      	mov	r4, r0
 800b94e:	d051      	beq.n	800b9f4 <_reclaim_reent+0xb0>
 800b950:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b952:	b143      	cbz	r3, 800b966 <_reclaim_reent+0x22>
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d14a      	bne.n	800b9f0 <_reclaim_reent+0xac>
 800b95a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b95c:	6819      	ldr	r1, [r3, #0]
 800b95e:	b111      	cbz	r1, 800b966 <_reclaim_reent+0x22>
 800b960:	4620      	mov	r0, r4
 800b962:	f000 f857 	bl	800ba14 <_free_r>
 800b966:	6961      	ldr	r1, [r4, #20]
 800b968:	b111      	cbz	r1, 800b970 <_reclaim_reent+0x2c>
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 f852 	bl	800ba14 <_free_r>
 800b970:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b972:	b111      	cbz	r1, 800b97a <_reclaim_reent+0x36>
 800b974:	4620      	mov	r0, r4
 800b976:	f000 f84d 	bl	800ba14 <_free_r>
 800b97a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b97c:	b111      	cbz	r1, 800b984 <_reclaim_reent+0x40>
 800b97e:	4620      	mov	r0, r4
 800b980:	f000 f848 	bl	800ba14 <_free_r>
 800b984:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b986:	b111      	cbz	r1, 800b98e <_reclaim_reent+0x4a>
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 f843 	bl	800ba14 <_free_r>
 800b98e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b990:	b111      	cbz	r1, 800b998 <_reclaim_reent+0x54>
 800b992:	4620      	mov	r0, r4
 800b994:	f000 f83e 	bl	800ba14 <_free_r>
 800b998:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b99a:	b111      	cbz	r1, 800b9a2 <_reclaim_reent+0x5e>
 800b99c:	4620      	mov	r0, r4
 800b99e:	f000 f839 	bl	800ba14 <_free_r>
 800b9a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b9a4:	b111      	cbz	r1, 800b9ac <_reclaim_reent+0x68>
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f000 f834 	bl	800ba14 <_free_r>
 800b9ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9ae:	b111      	cbz	r1, 800b9b6 <_reclaim_reent+0x72>
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f000 f82f 	bl	800ba14 <_free_r>
 800b9b6:	69a3      	ldr	r3, [r4, #24]
 800b9b8:	b1e3      	cbz	r3, 800b9f4 <_reclaim_reent+0xb0>
 800b9ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b9bc:	4620      	mov	r0, r4
 800b9be:	4798      	blx	r3
 800b9c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b9c2:	b1b9      	cbz	r1, 800b9f4 <_reclaim_reent+0xb0>
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9ca:	f7ff bfad 	b.w	800b928 <cleanup_glue>
 800b9ce:	5949      	ldr	r1, [r1, r5]
 800b9d0:	b941      	cbnz	r1, 800b9e4 <_reclaim_reent+0xa0>
 800b9d2:	3504      	adds	r5, #4
 800b9d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9d6:	2d80      	cmp	r5, #128	; 0x80
 800b9d8:	68d9      	ldr	r1, [r3, #12]
 800b9da:	d1f8      	bne.n	800b9ce <_reclaim_reent+0x8a>
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f000 f819 	bl	800ba14 <_free_r>
 800b9e2:	e7ba      	b.n	800b95a <_reclaim_reent+0x16>
 800b9e4:	680e      	ldr	r6, [r1, #0]
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 f814 	bl	800ba14 <_free_r>
 800b9ec:	4631      	mov	r1, r6
 800b9ee:	e7ef      	b.n	800b9d0 <_reclaim_reent+0x8c>
 800b9f0:	2500      	movs	r5, #0
 800b9f2:	e7ef      	b.n	800b9d4 <_reclaim_reent+0x90>
 800b9f4:	bd70      	pop	{r4, r5, r6, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20000100 	.word	0x20000100

0800b9fc <__malloc_lock>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	; (800ba04 <__malloc_lock+0x8>)
 800b9fe:	f7ff bf7b 	b.w	800b8f8 <__retarget_lock_acquire_recursive>
 800ba02:	bf00      	nop
 800ba04:	2000ac84 	.word	0x2000ac84

0800ba08 <__malloc_unlock>:
 800ba08:	4801      	ldr	r0, [pc, #4]	; (800ba10 <__malloc_unlock+0x8>)
 800ba0a:	f7ff bf76 	b.w	800b8fa <__retarget_lock_release_recursive>
 800ba0e:	bf00      	nop
 800ba10:	2000ac84 	.word	0x2000ac84

0800ba14 <_free_r>:
 800ba14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba16:	2900      	cmp	r1, #0
 800ba18:	d044      	beq.n	800baa4 <_free_r+0x90>
 800ba1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba1e:	9001      	str	r0, [sp, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f1a1 0404 	sub.w	r4, r1, #4
 800ba26:	bfb8      	it	lt
 800ba28:	18e4      	addlt	r4, r4, r3
 800ba2a:	f7ff ffe7 	bl	800b9fc <__malloc_lock>
 800ba2e:	4a1e      	ldr	r2, [pc, #120]	; (800baa8 <_free_r+0x94>)
 800ba30:	9801      	ldr	r0, [sp, #4]
 800ba32:	6813      	ldr	r3, [r2, #0]
 800ba34:	b933      	cbnz	r3, 800ba44 <_free_r+0x30>
 800ba36:	6063      	str	r3, [r4, #4]
 800ba38:	6014      	str	r4, [r2, #0]
 800ba3a:	b003      	add	sp, #12
 800ba3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba40:	f7ff bfe2 	b.w	800ba08 <__malloc_unlock>
 800ba44:	42a3      	cmp	r3, r4
 800ba46:	d908      	bls.n	800ba5a <_free_r+0x46>
 800ba48:	6825      	ldr	r5, [r4, #0]
 800ba4a:	1961      	adds	r1, r4, r5
 800ba4c:	428b      	cmp	r3, r1
 800ba4e:	bf01      	itttt	eq
 800ba50:	6819      	ldreq	r1, [r3, #0]
 800ba52:	685b      	ldreq	r3, [r3, #4]
 800ba54:	1949      	addeq	r1, r1, r5
 800ba56:	6021      	streq	r1, [r4, #0]
 800ba58:	e7ed      	b.n	800ba36 <_free_r+0x22>
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	b10b      	cbz	r3, 800ba64 <_free_r+0x50>
 800ba60:	42a3      	cmp	r3, r4
 800ba62:	d9fa      	bls.n	800ba5a <_free_r+0x46>
 800ba64:	6811      	ldr	r1, [r2, #0]
 800ba66:	1855      	adds	r5, r2, r1
 800ba68:	42a5      	cmp	r5, r4
 800ba6a:	d10b      	bne.n	800ba84 <_free_r+0x70>
 800ba6c:	6824      	ldr	r4, [r4, #0]
 800ba6e:	4421      	add	r1, r4
 800ba70:	1854      	adds	r4, r2, r1
 800ba72:	42a3      	cmp	r3, r4
 800ba74:	6011      	str	r1, [r2, #0]
 800ba76:	d1e0      	bne.n	800ba3a <_free_r+0x26>
 800ba78:	681c      	ldr	r4, [r3, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	6053      	str	r3, [r2, #4]
 800ba7e:	4421      	add	r1, r4
 800ba80:	6011      	str	r1, [r2, #0]
 800ba82:	e7da      	b.n	800ba3a <_free_r+0x26>
 800ba84:	d902      	bls.n	800ba8c <_free_r+0x78>
 800ba86:	230c      	movs	r3, #12
 800ba88:	6003      	str	r3, [r0, #0]
 800ba8a:	e7d6      	b.n	800ba3a <_free_r+0x26>
 800ba8c:	6825      	ldr	r5, [r4, #0]
 800ba8e:	1961      	adds	r1, r4, r5
 800ba90:	428b      	cmp	r3, r1
 800ba92:	bf04      	itt	eq
 800ba94:	6819      	ldreq	r1, [r3, #0]
 800ba96:	685b      	ldreq	r3, [r3, #4]
 800ba98:	6063      	str	r3, [r4, #4]
 800ba9a:	bf04      	itt	eq
 800ba9c:	1949      	addeq	r1, r1, r5
 800ba9e:	6021      	streq	r1, [r4, #0]
 800baa0:	6054      	str	r4, [r2, #4]
 800baa2:	e7ca      	b.n	800ba3a <_free_r+0x26>
 800baa4:	b003      	add	sp, #12
 800baa6:	bd30      	pop	{r4, r5, pc}
 800baa8:	2000ac88 	.word	0x2000ac88

0800baac <_init>:
 800baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baae:	bf00      	nop
 800bab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab2:	bc08      	pop	{r3}
 800bab4:	469e      	mov	lr, r3
 800bab6:	4770      	bx	lr

0800bab8 <_fini>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr
