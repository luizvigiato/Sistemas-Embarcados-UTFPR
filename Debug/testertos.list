
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001214  08010894  08010894  00020894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011aa8  08011aa8  00030170  2**0
                  CONTENTS
  4 .ARM          00000008  08011aa8  08011aa8  00021aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ab0  08011ab0  00030170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ab0  08011ab0  00021ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ab4  08011ab4  00021ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08011ab8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b9dc  20000170  08011c28  00030170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bb4c  08011c28  0003bb4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255b3  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055e6  00000000  00000000  00055753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce0  00000000  00000000  0005ad40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  0005ca20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000096a3  00000000  00000000  0005e518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d48  00000000  00000000  00067bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9535  00000000  00000000  00089903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00132e38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000804c  00000000  00000000  00132ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002316  00000000  00000000  0013af44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801087c 	.word	0x0801087c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	0801087c 	.word	0x0801087c

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10a      	bne.n	8000ed8 <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ed4:	bf00      	nop
 8000ed6:	e7fe      	b.n	8000ed6 <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8000ed8:	2008      	movs	r0, #8
 8000eda:	f00c fccd 	bl	800d878 <pvPortMalloc>
 8000ede:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 8000ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eea:	f383 8811 	msr	BASEPRI, r3
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f3bf 8f4f 	dsb	sy
 8000ef6:	60bb      	str	r3, [r7, #8]
}
 8000ef8:	bf00      	nop
 8000efa:	e7fe      	b.n	8000efa <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d012      	beq.n	8000f28 <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 8000f02:	f00c fb97 	bl	800d634 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8000f20:	f00c fbb8 	bl	800d694 <vPortExitCritical>

		xReturn = pdPASS;
 8000f24:	2301      	movs	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000f28:	697b      	ldr	r3, [r7, #20]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008

08000f38 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d141      	bne.n	8000fd4 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000f50:	4b38      	ldr	r3, [pc, #224]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f52:	4a39      	ldr	r2, [pc, #228]	; (8001038 <FreeRTOS_CLIProcessCommand+0x100>)
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e037      	b.n	8000fc8 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8000f58:	4b36      	ldr	r3, [pc, #216]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8000f62:	69b8      	ldr	r0, [r7, #24]
 8000f64:	f7ff f9a6 	bl	80002b4 <strlen>
 8000f68:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	69b9      	ldr	r1, [r7, #24]
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f00e fe54 	bl	800fc1c <strncmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d121      	bne.n	8000fbe <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b20      	cmp	r3, #32
 8000f84:	d005      	beq.n	8000f92 <FreeRTOS_CLIProcessCommand+0x5a>
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d115      	bne.n	8000fbe <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db18      	blt.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f8d7 	bl	8001154 <prvGetNumberOfParameters>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d00c      	beq.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8000fbc:	e009      	b.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1c3      	bne.n	8000f58 <FreeRTOS_CLIProcessCommand+0x20>
 8000fd0:	e000      	b.n	8000fd4 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 8000fd2:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <FreeRTOS_CLIProcessCommand+0xbc>
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d108      	bne.n	8000ff4 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4915      	ldr	r1, [pc, #84]	; (800103c <FreeRTOS_CLIProcessCommand+0x104>)
 8000fe6:	68b8      	ldr	r0, [r7, #8]
 8000fe8:	f00e fe2c 	bl	800fc44 <strncpy>
		pxCommand = NULL;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e01a      	b.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	4798      	blx	r3
 800100c:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10a      	bne.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e006      	b.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <FreeRTOS_CLIProcessCommand+0x108>)
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f00e fe0f 	bl	800fc44 <strncpy>
		xReturn = pdFALSE;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 800102a:	69fb      	ldr	r3, [r7, #28]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000018c 	.word	0x2000018c
 8001038:	20000000 	.word	0x20000000
 800103c:	080108cc 	.word	0x080108cc
 8001040:	08010924 	.word	0x08010924

08001044 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 800105e:	e03b      	b.n	80010d8 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <FreeRTOS_CLIGetParameter+0x3a>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b20      	cmp	r3, #32
 8001074:	d1f4      	bne.n	8001060 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001076:	e002      	b.n	800107e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <FreeRTOS_CLIGetParameter+0x4a>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b20      	cmp	r3, #32
 800108c:	d0f4      	beq.n	8001078 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d025      	beq.n	80010e2 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d119      	bne.n	80010d8 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010a8:	e007      	b.n	80010ba <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <FreeRTOS_CLIGetParameter+0x86>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	d1ef      	bne.n	80010aa <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
				}

				break;
 80010d6:	e006      	b.n	80010e6 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3c2      	bcc.n	8001066 <FreeRTOS_CLIGetParameter+0x22>
 80010e0:	e002      	b.n	80010e8 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
 80010e2:	bf00      	nop
 80010e4:	e000      	b.n	80010e8 <FreeRTOS_CLIGetParameter+0xa4>
				break;
 80010e6:	bf00      	nop
		}
	}

	return pcReturn;
 80010e8:	693b      	ldr	r3, [r7, #16]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <prvHelpCommand+0x54>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <prvHelpCommand+0x54>)
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <prvHelpCommand+0x58>)
 8001110:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <prvHelpCommand+0x54>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4619      	mov	r1, r3
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f00e fd90 	bl	800fc44 <strncpy>
	pxCommand = pxCommand->pxNext;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <prvHelpCommand+0x54>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <prvHelpCommand+0x54>)
 800112c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <prvHelpCommand+0x54>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e001      	b.n	8001140 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001140:	697b      	ldr	r3, [r7, #20]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000190 	.word	0x20000190
 8001150:	20000000 	.word	0x20000000

08001154 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8001164:	e014      	b.n	8001190 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b20      	cmp	r3, #32
 800116c:	d10b      	bne.n	8001186 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d00a      	beq.n	800118a <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3301      	adds	r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8001180:	2301      	movs	r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	e001      	b.n	800118a <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e6      	bne.n	8001166 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <task_led>:
float mod[256];
float fase;

TaskHandle_t task_handle_RGB = NULL;

void task_led(void *param){
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	889b      	ldrh	r3, [r3, #4]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f002 fa44 	bl	800365e <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a f982 	bl	800b4e4 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 80011e0:	e7f1      	b.n	80011c6 <task_led+0xc>
 80011e2:	0000      	movs	r0, r0
 80011e4:	0000      	movs	r0, r0
	...

080011e8 <task_adc>:
	}
}

void task_adc(void *param){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 256);
 80011f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f4:	493e      	ldr	r1, [pc, #248]	; (80012f0 <task_adc+0x108>)
 80011f6:	483f      	ldr	r0, [pc, #252]	; (80012f4 <task_adc+0x10c>)
 80011f8:	f001 f864 	bl	80022c4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80011fc:	483e      	ldr	r0, [pc, #248]	; (80012f8 <task_adc+0x110>)
 80011fe:	f004 f945 	bl	800548c <HAL_TIM_Base_Start>
	while(1){
		int k = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 256; i++){
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	e02a      	b.n	8001262 <task_adc+0x7a>
			ReIm[k] = (float) adcBuffer[i] * 0.0007326007;
 800120c:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <task_adc+0x108>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff fa0a 	bl	8000638 <__aeabi_f2d>
 8001224:	a32e      	add	r3, pc, #184	; (adr r3, 80012e0 <task_adc+0xf8>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa5d 	bl	80006e8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc69 	bl	8000b0c <__aeabi_d2f>
 800123a:	4602      	mov	r2, r0
 800123c:	492f      	ldr	r1, [pc, #188]	; (80012fc <task_adc+0x114>)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	601a      	str	r2, [r3, #0]
			ReIm[k+1] = 0.0;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	4a2c      	ldr	r2, [pc, #176]	; (80012fc <task_adc+0x114>)
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
			k += 2;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3302      	adds	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 256; i++){
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	3301      	adds	r3, #1
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	ddd1      	ble.n	800120c <task_adc+0x24>
		}

		arm_cfft_f32(&arm_cfft_sR_f32_len256,ReIm,0,1);
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	4923      	ldr	r1, [pc, #140]	; (80012fc <task_adc+0x114>)
 800126e:	4824      	ldr	r0, [pc, #144]	; (8001300 <task_adc+0x118>)
 8001270:	f00d fec4 	bl	800effc <arm_cfft_f32>
		arm_cmplx_mag_f32(ReIm,mod,256);
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	4922      	ldr	r1, [pc, #136]	; (8001304 <task_adc+0x11c>)
 800127a:	4820      	ldr	r0, [pc, #128]	; (80012fc <task_adc+0x114>)
 800127c:	f00d ff38 	bl	800f0f0 <arm_cmplx_mag_f32>
		arm_scale_f32(mod, 0.0078125, mod, 128); /* vertor, por quem quero multiplicar, vetor final, quantos pontos */
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	4920      	ldr	r1, [pc, #128]	; (8001304 <task_adc+0x11c>)
 8001284:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001308 <task_adc+0x120>
 8001288:	481e      	ldr	r0, [pc, #120]	; (8001304 <task_adc+0x11c>)
 800128a:	f00e f819 	bl	800f2c0 <arm_scale_f32>

		volatile float fund_phase = atan2f(ReIm[3],ReIm[2])*180/M_PI;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <task_adc+0x114>)
 8001290:	edd3 7a03 	vldr	s15, [r3, #12]
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <task_adc+0x114>)
 8001296:	ed93 7a02 	vldr	s14, [r3, #8]
 800129a:	eef0 0a47 	vmov.f32	s1, s14
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	f00f f94a 	bl	801053a <atan2f>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800130c <task_adc+0x124>
 80012ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b2:	ee17 0a90 	vmov	r0, s15
 80012b6:	f7ff f9bf 	bl	8000638 <__aeabi_f2d>
 80012ba:	a30b      	add	r3, pc, #44	; (adr r3, 80012e8 <task_adc+0x100>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff fb3c 	bl	800093c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc1e 	bl	8000b0c <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]
		fase = fund_phase;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <task_adc+0x128>)
 80012d8:	6013      	str	r3, [r2, #0]
	while(1){
 80012da:	e792      	b.n	8001202 <task_adc+0x1a>
 80012dc:	f3af 8000 	nop.w
 80012e0:	06155aeb 	.word	0x06155aeb
 80012e4:	3f480180 	.word	0x3f480180
 80012e8:	54442d18 	.word	0x54442d18
 80012ec:	400921fb 	.word	0x400921fb
 80012f0:	200002e0 	.word	0x200002e0
 80012f4:	20000194 	.word	0x20000194
 80012f8:	2000023c 	.word	0x2000023c
 80012fc:	200004e0 	.word	0x200004e0
 8001300:	08010d34 	.word	0x08010d34
 8001304:	20000ce0 	.word	0x20000ce0
 8001308:	3c000000 	.word	0x3c000000
 800130c:	43340000 	.word	0x43340000
 8001310:	200010e0 	.word	0x200010e0

08001314 <task_RGB>:
	}
}

void task_RGB(void *param){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint8_t r,g,b;
	uint8_t ts;
	r = g = b = 1;
 800131c:	2301      	movs	r3, #1
 800131e:	737b      	strb	r3, [r7, #13]
 8001320:	7b7b      	ldrb	r3, [r7, #13]
 8001322:	73bb      	strb	r3, [r7, #14]
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	73fb      	strb	r3, [r7, #15]
	ts = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	733b      	strb	r3, [r7, #12]
	vTaskSuspend(NULL);
 800132c:	2000      	movs	r0, #0
 800132e:	f00a f973 	bl	800b618 <vTaskSuspend>
	while(1){
		//TIM3->CCR1 =
		if(ts == 0){//Crescendo RGB colorido
 8001332:	7b3b      	ldrb	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d129      	bne.n	800138c <task_RGB+0x78>
			if(r < MAX_RGB){
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	2bfd      	cmp	r3, #253	; 0xfd
 800133c:	d809      	bhi.n	8001352 <task_RGB+0x3e>
				TIM3->CCR1 = r * 257;
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	4613      	mov	r3, r2
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	441a      	add	r2, r3
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <task_RGB+0xd4>)
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
				r++;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	3301      	adds	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e045      	b.n	80013de <task_RGB+0xca>
			} else if(g < MAX_RGB){
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	2bfd      	cmp	r3, #253	; 0xfd
 8001356:	d809      	bhi.n	800136c <task_RGB+0x58>
				TIM3->CCR2 = g * 257;
 8001358:	7bba      	ldrb	r2, [r7, #14]
 800135a:	4613      	mov	r3, r2
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	441a      	add	r2, r3
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <task_RGB+0xd4>)
 8001362:	639a      	str	r2, [r3, #56]	; 0x38
				g++;
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	3301      	adds	r3, #1
 8001368:	73bb      	strb	r3, [r7, #14]
 800136a:	e038      	b.n	80013de <task_RGB+0xca>
			} else if(b < MAX_RGB){
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	2bfd      	cmp	r3, #253	; 0xfd
 8001370:	d809      	bhi.n	8001386 <task_RGB+0x72>
				TIM3->CCR3 = b * 257;
 8001372:	7b7a      	ldrb	r2, [r7, #13]
 8001374:	4613      	mov	r3, r2
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	441a      	add	r2, r3
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <task_RGB+0xd4>)
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c
				b++;
 800137e:	7b7b      	ldrb	r3, [r7, #13]
 8001380:	3301      	adds	r3, #1
 8001382:	737b      	strb	r3, [r7, #13]
 8001384:	e02b      	b.n	80013de <task_RGB+0xca>
			}else{
				ts = 1;
 8001386:	2301      	movs	r3, #1
 8001388:	733b      	strb	r3, [r7, #12]
 800138a:	e028      	b.n	80013de <task_RGB+0xca>
			}
		} else {
			if(r > 1){
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d909      	bls.n	80013a6 <task_RGB+0x92>
				TIM3->CCR1 = r * 257;
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	4613      	mov	r3, r2
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	441a      	add	r2, r3
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <task_RGB+0xd4>)
 800139c:	635a      	str	r2, [r3, #52]	; 0x34
				r--;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e01b      	b.n	80013de <task_RGB+0xca>
			} else if( g > 1){
 80013a6:	7bbb      	ldrb	r3, [r7, #14]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d909      	bls.n	80013c0 <task_RGB+0xac>
				TIM3->CCR2 = g * 257;
 80013ac:	7bba      	ldrb	r2, [r7, #14]
 80013ae:	4613      	mov	r3, r2
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	441a      	add	r2, r3
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <task_RGB+0xd4>)
 80013b6:	639a      	str	r2, [r3, #56]	; 0x38
				g--;
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	73bb      	strb	r3, [r7, #14]
 80013be:	e00e      	b.n	80013de <task_RGB+0xca>
			} else if( b > 0){
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <task_RGB+0xc6>
				TIM3->CCR3 = b * 257;
 80013c6:	7b7a      	ldrb	r2, [r7, #13]
 80013c8:	4613      	mov	r3, r2
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	441a      	add	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <task_RGB+0xd4>)
 80013d0:	63da      	str	r2, [r3, #60]	; 0x3c
				b--;
 80013d2:	7b7b      	ldrb	r3, [r7, #13]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	737b      	strb	r3, [r7, #13]
 80013d8:	e001      	b.n	80013de <task_RGB+0xca>
			} else {
				ts = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	733b      	strb	r3, [r7, #12]
			}
		}

		vTaskDelay(1);
 80013de:	2001      	movs	r0, #1
 80013e0:	f00a f880 	bl	800b4e4 <vTaskDelay>
		if(ts == 0){//Crescendo RGB colorido
 80013e4:	e7a5      	b.n	8001332 <task_RGB+0x1e>
 80013e6:	bf00      	nop
 80013e8:	40000400 	.word	0x40000400

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f2:	f000 fe8d 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f6:	f000 f877 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fa:	f000 fa33 	bl	8001864 <MX_GPIO_Init>
  MX_DMA_Init();
 80013fe:	f000 fa11 	bl	8001824 <MX_DMA_Init>
  MX_ADC1_Init();
 8001402:	f000 f8dd 	bl	80015c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001406:	f000 f92d 	bl	8001664 <MX_TIM2_Init>
  MX_TIM3_Init();
 800140a:	f000 f977 	bl	80016fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800140e:	2100      	movs	r1, #0
 8001410:	4827      	ldr	r0, [pc, #156]	; (80014b0 <main+0xc4>)
 8001412:	f004 f915 	bl	8005640 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001416:	2104      	movs	r1, #4
 8001418:	4825      	ldr	r0, [pc, #148]	; (80014b0 <main+0xc4>)
 800141a:	f004 f911 	bl	8005640 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800141e:	2108      	movs	r1, #8
 8001420:	4823      	ldr	r0, [pc, #140]	; (80014b0 <main+0xc4>)
 8001422:	f004 f90d 	bl	8005640 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001426:	f008 fac9 	bl	80099bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800142a:	4a22      	ldr	r2, [pc, #136]	; (80014b4 <main+0xc8>)
 800142c:	2100      	movs	r1, #0
 800142e:	4822      	ldr	r0, [pc, #136]	; (80014b8 <main+0xcc>)
 8001430:	f008 fb0e 	bl	8009a50 <osThreadNew>
 8001434:	4603      	mov	r3, r0
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <main+0xd0>)
 8001438:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <main+0xd4>)
 800143c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001440:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <main+0xd4>)
 8001444:	4a1f      	ldr	r2, [pc, #124]	; (80014c4 <main+0xd8>)
 8001446:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <main+0xd4>)
 800144a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144e:	809a      	strh	r2, [r3, #4]
  rgb.red = 200;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <main+0xdc>)
 8001452:	22c8      	movs	r2, #200	; 0xc8
 8001454:	705a      	strb	r2, [r3, #1]
  rgb.green = 200;
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <main+0xdc>)
 8001458:	22c8      	movs	r2, #200	; 0xc8
 800145a:	709a      	strb	r2, [r3, #2]
  rgb.blue = 200;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <main+0xdc>)
 800145e:	22c8      	movs	r2, #200	; 0xc8
 8001460:	70da      	strb	r2, [r3, #3]
  rgb.brilho = 200;
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <main+0xdc>)
 8001464:	22c8      	movs	r2, #200	; 0xc8
 8001466:	701a      	strb	r2, [r3, #0]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8001468:	2300      	movs	r3, #0
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	2301      	movs	r3, #1
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <main+0xd4>)
 8001472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001476:	4915      	ldr	r1, [pc, #84]	; (80014cc <main+0xe0>)
 8001478:	4815      	ldr	r0, [pc, #84]	; (80014d0 <main+0xe4>)
 800147a:	f009 fed8 	bl	800b22e <xTaskCreate>
  xTaskCreate(task_adc,"Tarefa ADC",256, NULL, 5, NULL);
 800147e:	2300      	movs	r3, #0
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	2305      	movs	r3, #5
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2300      	movs	r3, #0
 8001488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148c:	4911      	ldr	r1, [pc, #68]	; (80014d4 <main+0xe8>)
 800148e:	4812      	ldr	r0, [pc, #72]	; (80014d8 <main+0xec>)
 8001490:	f009 fecd 	bl	800b22e <xTaskCreate>
  xTaskCreate(task_RGB,"Tarefa RGB",256, NULL, 2, &task_handle_RGB);
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <main+0xf0>)
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	2302      	movs	r3, #2
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a2:	490f      	ldr	r1, [pc, #60]	; (80014e0 <main+0xf4>)
 80014a4:	480f      	ldr	r0, [pc, #60]	; (80014e4 <main+0xf8>)
 80014a6:	f009 fec2 	bl	800b22e <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014aa:	f008 faab 	bl	8009a04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <main+0xc2>
 80014b0:	20000284 	.word	0x20000284
 80014b4:	08010cb8 	.word	0x08010cb8
 80014b8:	08001d01 	.word	0x08001d01
 80014bc:	200002cc 	.word	0x200002cc
 80014c0:	200002d0 	.word	0x200002d0
 80014c4:	40020800 	.word	0x40020800
 80014c8:	200002dc 	.word	0x200002dc
 80014cc:	08010980 	.word	0x08010980
 80014d0:	080011bb 	.word	0x080011bb
 80014d4:	0801098c 	.word	0x0801098c
 80014d8:	080011e9 	.word	0x080011e9
 80014dc:	200010e4 	.word	0x200010e4
 80014e0:	08010998 	.word	0x08010998
 80014e4:	08001315 	.word	0x08001315

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b094      	sub	sp, #80	; 0x50
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	2230      	movs	r2, #48	; 0x30
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00e fa52 	bl	800f9a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <SystemClock_Config+0xd0>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <SystemClock_Config+0xd0>)
 8001516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <SystemClock_Config+0xd0>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	4b23      	ldr	r3, [pc, #140]	; (80015bc <SystemClock_Config+0xd4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <SystemClock_Config+0xd4>)
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <SystemClock_Config+0xd4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001552:	2302      	movs	r3, #2
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800155c:	2319      	movs	r3, #25
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001560:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001566:	2304      	movs	r3, #4
 8001568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800156a:	2307      	movs	r3, #7
 800156c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f107 0320 	add.w	r3, r7, #32
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fb0a 	bl	8004b8c <HAL_RCC_OscConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800157e:	f000 fbe3 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001582:	230f      	movs	r3, #15
 8001584:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001586:	2302      	movs	r3, #2
 8001588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fd6c 	bl	800507c <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015aa:	f000 fbcd 	bl	8001d48 <Error_Handler>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3750      	adds	r7, #80	; 0x50
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40007000 	.word	0x40007000

080015c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015c6:	463b      	mov	r3, r7
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_ADC1_Init+0x9c>)
 80015d4:	4a22      	ldr	r2, [pc, #136]	; (8001660 <MX_ADC1_Init+0xa0>)
 80015d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <MX_ADC1_Init+0x9c>)
 80015da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_ADC1_Init+0x9c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_ADC1_Init+0x9c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_ADC1_Init+0x9c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_ADC1_Init+0x9c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_ADC1_Init+0x9c>)
 80015fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_ADC1_Init+0x9c>)
 8001604:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_ADC1_Init+0x9c>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_ADC1_Init+0x9c>)
 8001612:	2201      	movs	r2, #1
 8001614:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_ADC1_Init+0x9c>)
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <MX_ADC1_Init+0x9c>)
 8001620:	2201      	movs	r2, #1
 8001622:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_ADC1_Init+0x9c>)
 8001626:	f000 fe09 	bl	800223c <HAL_ADC_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001630:	f000 fb8a 	bl	8001d48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_ADC1_Init+0x9c>)
 8001646:	f000 ff4b 	bl	80024e0 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001650:	f000 fb7a 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000194 	.word	0x20000194
 8001660:	40012000 	.word	0x40012000

08001664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_TIM2_Init+0x94>)
 8001682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_TIM2_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_TIM2_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1253;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_TIM2_Init+0x94>)
 8001696:	f240 42e5 	movw	r2, #1253	; 0x4e5
 800169a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_TIM2_Init+0x94>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016aa:	f003 fe9f 	bl	80053ec <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016b4:	f000 fb48 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016c6:	f004 f92d 	bl	8005924 <HAL_TIM_ConfigClockSource>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d0:	f000 fb3a 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016d4:	2320      	movs	r3, #32
 80016d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM2_Init+0x94>)
 80016e2:	f004 fcb3 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016ec:	f000 fb2c 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000023c 	.word	0x2000023c

080016fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <MX_TIM3_Init+0x120>)
 800172e:	4a3c      	ldr	r2, [pc, #240]	; (8001820 <MX_TIM3_Init+0x124>)
 8001730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <MX_TIM3_Init+0x120>)
 8001734:	2214      	movs	r2, #20
 8001736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b38      	ldr	r3, [pc, #224]	; (800181c <MX_TIM3_Init+0x120>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <MX_TIM3_Init+0x120>)
 8001740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001744:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001746:	4b35      	ldr	r3, [pc, #212]	; (800181c <MX_TIM3_Init+0x120>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <MX_TIM3_Init+0x120>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001754:	4831      	ldr	r0, [pc, #196]	; (800181c <MX_TIM3_Init+0x120>)
 8001756:	f003 fe49 	bl	80053ec <HAL_TIM_Base_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001760:	f000 faf2 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800176a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176e:	4619      	mov	r1, r3
 8001770:	482a      	ldr	r0, [pc, #168]	; (800181c <MX_TIM3_Init+0x120>)
 8001772:	f004 f8d7 	bl	8005924 <HAL_TIM_ConfigClockSource>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800177c:	f000 fae4 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001780:	4826      	ldr	r0, [pc, #152]	; (800181c <MX_TIM3_Init+0x120>)
 8001782:	f003 ff04 	bl	800558e <HAL_TIM_PWM_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800178c:	f000 fadc 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	4619      	mov	r1, r3
 800179e:	481f      	ldr	r0, [pc, #124]	; (800181c <MX_TIM3_Init+0x120>)
 80017a0:	f004 fc54 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017aa:	f000 facd 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ae:	2360      	movs	r3, #96	; 0x60
 80017b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 80017b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80017b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4815      	ldr	r0, [pc, #84]	; (800181c <MX_TIM3_Init+0x120>)
 80017c8:	f003 ffea 	bl	80057a0 <HAL_TIM_PWM_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80017d2:	f000 fab9 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.Pulse = 32700;
 80017d6:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80017da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2204      	movs	r2, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <MX_TIM3_Init+0x120>)
 80017e4:	f003 ffdc 	bl	80057a0 <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80017ee:	f000 faab 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 80017f2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2208      	movs	r2, #8
 80017fc:	4619      	mov	r1, r3
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <MX_TIM3_Init+0x120>)
 8001800:	f003 ffce 	bl	80057a0 <HAL_TIM_PWM_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 800180a:	f000 fa9d 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800180e:	4803      	ldr	r0, [pc, #12]	; (800181c <MX_TIM3_Init+0x120>)
 8001810:	f000 fb7a 	bl	8001f08 <HAL_TIM_MspPostInit>

}
 8001814:	bf00      	nop
 8001816:	3738      	adds	r7, #56	; 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000284 	.word	0x20000284
 8001820:	40000400 	.word	0x40000400

08001824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_DMA_Init+0x3c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <MX_DMA_Init+0x3c>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_DMA_Init+0x3c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2105      	movs	r1, #5
 800184a:	2038      	movs	r0, #56	; 0x38
 800184c:	f001 f9c3 	bl	8002bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001850:	2038      	movs	r0, #56	; 0x38
 8001852:	f001 f9dc 	bl	8002c0e <HAL_NVIC_EnableIRQ>

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b27      	ldr	r3, [pc, #156]	; (800191c <MX_GPIO_Init+0xb8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a26      	ldr	r2, [pc, #152]	; (800191c <MX_GPIO_Init+0xb8>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <MX_GPIO_Init+0xb8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <MX_GPIO_Init+0xb8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a1f      	ldr	r2, [pc, #124]	; (800191c <MX_GPIO_Init+0xb8>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <MX_GPIO_Init+0xb8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_GPIO_Init+0xb8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a18      	ldr	r2, [pc, #96]	; (800191c <MX_GPIO_Init+0xb8>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <MX_GPIO_Init+0xb8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_GPIO_Init+0xb8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a11      	ldr	r2, [pc, #68]	; (800191c <MX_GPIO_Init+0xb8>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_GPIO_Init+0xb8>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <MX_GPIO_Init+0xbc>)
 80018f2:	f001 fe9b 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_GPIO_Init+0xbc>)
 8001910:	f001 fd08 	bl	8003324 <HAL_GPIO_Init>

}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	; 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40020800 	.word	0x40020800

08001924 <prvTaskStatsCommand>:
//uint8_t buffer[128];
uint32_t len;

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout);

static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]


        /* For simplicity, this function assumes the output buffer is large enough
        to hold all the text generated by executing the vTaskList() API function,
        so the xWriteBufferLen parameter is not used. */
        char *head = "Name\t\t\t\tState  Priority  Stack  Number\n\r";
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <prvTaskStatsCommand+0x34>)
 8001932:	617b      	str	r3, [r7, #20]
        ( void ) xWriteBufferLen;

        /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
        generated by executing vTaskList() is written directly into the output
        buffer. */
        strcpy(pcWriteBuffer, head);
 8001934:	6979      	ldr	r1, [r7, #20]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f00e f968 	bl	800fc0c <strcpy>
        vTaskList( pcWriteBuffer + strlen(head));
 800193c:	6978      	ldr	r0, [r7, #20]
 800193e:	f7fe fcb9 	bl	80002b4 <strlen>
 8001942:	4602      	mov	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f00a fed5 	bl	800c6f8 <vTaskList>

        /* The entire table was written directly to the output buffer.  Execution
        of this command is complete, so return pdFALSE. */
        return pdFALSE;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	080109a4 	.word	0x080109a4

0800195c <prvTaskStatsTexto>:

static BaseType_t prvTaskStatsTexto( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 800195c:	b4b0      	push	{r4, r5, r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]

	strcpy(pcWriteBuffer,(char*)"Este e um texto teste\r\n");
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <prvTaskStatsTexto+0x30>)
 800196c:	461d      	mov	r5, r3
 800196e:	4614      	mov	r4, r2
 8001970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001972:	6028      	str	r0, [r5, #0]
 8001974:	6069      	str	r1, [r5, #4]
 8001976:	60aa      	str	r2, [r5, #8]
 8001978:	60eb      	str	r3, [r5, #12]
 800197a:	cc03      	ldmia	r4!, {r0, r1}
 800197c:	6128      	str	r0, [r5, #16]
 800197e:	6169      	str	r1, [r5, #20]
	return pdFALSE;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bcb0      	pop	{r4, r5, r7}
 800198a:	4770      	bx	lr
 800198c:	080109d0 	.word	0x080109d0

08001990 <prvTaskStatsRGB>:

static BaseType_t prvTaskStatsRGB( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	const char *pcParameterAux;;
	BaseType_t xParameter1StringLength;
	char comando1[7];
	int16_t brilho;
	int16_t red,green,blue;
	comando1[0] = '\0';
 800199c:	2300      	movs	r3, #0
 800199e:	753b      	strb	r3, [r7, #20]
	pcParameter1 = FreeRTOS_CLIGetParameter
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	461a      	mov	r2, r3
 80019a6:	2101      	movs	r1, #1
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fb4b 	bl	8001044 <FreeRTOS_CLIGetParameter>
 80019ae:	62f8      	str	r0, [r7, #44]	; 0x2c
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );

	strncpy(comando1,pcParameter1,xParameter1StringLength);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00e f942 	bl	800fc44 <strncpy>
	comando1[xParameter1StringLength] = '\0';
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	3330      	adds	r3, #48	; 0x30
 80019c4:	443b      	add	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	f803 2c1c 	strb.w	r2, [r3, #-28]
	if(strcmp(comando1,(const char *)"on") == (int)0){
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	499f      	ldr	r1, [pc, #636]	; (8001c50 <prvTaskStatsRGB+0x2c0>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fc64 	bl	80002a0 <strcmp>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10d      	bne.n	80019fa <prvTaskStatsRGB+0x6a>
//		Habilitar o led RGB
//		Basicamente iniciar o TIM3
		HAL_TIM_Base_Start(&htim3);
 80019de:	489d      	ldr	r0, [pc, #628]	; (8001c54 <prvTaskStatsRGB+0x2c4>)
 80019e0:	f003 fd54 	bl	800548c <HAL_TIM_Base_Start>
		strcpy(pcWriteBuffer,"Led Ligado \n\r");
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a9c      	ldr	r2, [pc, #624]	; (8001c58 <prvTaskStatsRGB+0x2c8>)
 80019e8:	461c      	mov	r4, r3
 80019ea:	4613      	mov	r3, r2
 80019ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019ee:	6020      	str	r0, [r4, #0]
 80019f0:	6061      	str	r1, [r4, #4]
 80019f2:	60a2      	str	r2, [r4, #8]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	81a3      	strh	r3, [r4, #12]
 80019f8:	e10a      	b.n	8001c10 <prvTaskStatsRGB+0x280>
	} else if(strcmp(comando1,(const char *)"off") == 0){
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4997      	ldr	r1, [pc, #604]	; (8001c5c <prvTaskStatsRGB+0x2cc>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fc4d 	bl	80002a0 <strcmp>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d116      	bne.n	8001a3a <prvTaskStatsRGB+0xaa>
//		Desabilitar o led RGB
//		Basicamente parar o TIM3
		HAL_TIM_Base_Stop(&htim3);
 8001a0c:	4891      	ldr	r0, [pc, #580]	; (8001c54 <prvTaskStatsRGB+0x2c4>)
 8001a0e:	f003 fd97 	bl	8005540 <HAL_TIM_Base_Stop>
		vTaskSuspend(task_handle_RGB);
 8001a12:	4b93      	ldr	r3, [pc, #588]	; (8001c60 <prvTaskStatsRGB+0x2d0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f009 fdfe 	bl	800b618 <vTaskSuspend>
		rgb.brilho=0;
 8001a1c:	4b91      	ldr	r3, [pc, #580]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
		strcpy(pcWriteBuffer,"Led Desligado \n\r");
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4a90      	ldr	r2, [pc, #576]	; (8001c68 <prvTaskStatsRGB+0x2d8>)
 8001a26:	461d      	mov	r5, r3
 8001a28:	4614      	mov	r4, r2
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	6028      	str	r0, [r5, #0]
 8001a2e:	6069      	str	r1, [r5, #4]
 8001a30:	60aa      	str	r2, [r5, #8]
 8001a32:	60eb      	str	r3, [r5, #12]
 8001a34:	7823      	ldrb	r3, [r4, #0]
 8001a36:	742b      	strb	r3, [r5, #16]
 8001a38:	e0ea      	b.n	8001c10 <prvTaskStatsRGB+0x280>
	} else if(strcmp(comando1,(const char *)"brilho") == 0){
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	498b      	ldr	r1, [pc, #556]	; (8001c6c <prvTaskStatsRGB+0x2dc>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fc2d 	bl	80002a0 <strcmp>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d13c      	bne.n	8001ac6 <prvTaskStatsRGB+0x136>
//		calculo do brilho do led RGB

		pcParameterAux = FreeRTOS_CLIGetParameter
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	461a      	mov	r2, r3
 8001a52:	2102      	movs	r1, #2
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff faf5 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001a5a:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          2,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00e f8ec 	bl	800fc44 <strncpy>
		brilho = atoi(comando1);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00d ff3d 	bl	800f8f0 <atoi>
 8001a76:	4603      	mov	r3, r0
 8001a78:	843b      	strh	r3, [r7, #32]
		if(brilho >= 0 && brilho < 256){
 8001a7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db15      	blt.n	8001aae <prvTaskStatsRGB+0x11e>
 8001a82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	dc11      	bgt.n	8001aae <prvTaskStatsRGB+0x11e>
			rgb.brilho = brilho;
 8001a8a:	8c3b      	ldrh	r3, [r7, #32]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b75      	ldr	r3, [pc, #468]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001a90:	701a      	strb	r2, [r3, #0]
			strcpy(pcWriteBuffer,"Brilho redefinido \n\r");
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4a76      	ldr	r2, [pc, #472]	; (8001c70 <prvTaskStatsRGB+0x2e0>)
 8001a96:	461d      	mov	r5, r3
 8001a98:	4614      	mov	r4, r2
 8001a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9c:	6028      	str	r0, [r5, #0]
 8001a9e:	6069      	str	r1, [r5, #4]
 8001aa0:	60aa      	str	r2, [r5, #8]
 8001aa2:	60eb      	str	r3, [r5, #12]
 8001aa4:	6820      	ldr	r0, [r4, #0]
 8001aa6:	6128      	str	r0, [r5, #16]
 8001aa8:	7923      	ldrb	r3, [r4, #4]
 8001aaa:	752b      	strb	r3, [r5, #20]
 8001aac:	e0b0      	b.n	8001c10 <prvTaskStatsRGB+0x280>
		} else {
			strcpy(pcWriteBuffer,"Valor invalido \n\r");
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4a70      	ldr	r2, [pc, #448]	; (8001c74 <prvTaskStatsRGB+0x2e4>)
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	6028      	str	r0, [r5, #0]
 8001aba:	6069      	str	r1, [r5, #4]
 8001abc:	60aa      	str	r2, [r5, #8]
 8001abe:	60eb      	str	r3, [r5, #12]
 8001ac0:	8823      	ldrh	r3, [r4, #0]
 8001ac2:	822b      	strh	r3, [r5, #16]
 8001ac4:	e0a4      	b.n	8001c10 <prvTaskStatsRGB+0x280>
		}

	} else if(strcmp(comando1,(const char *)"color") == 0){
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	496b      	ldr	r1, [pc, #428]	; (8001c78 <prvTaskStatsRGB+0x2e8>)
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fbe7 	bl	80002a0 <strcmp>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 8081 	bne.w	8001bdc <prvTaskStatsRGB+0x24c>
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff faae 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001ae8:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          2,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	461a      	mov	r2, r3
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00e f8a5 	bl	800fc44 <strncpy>
		red = atoi(comando1);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00d fef6 	bl	800f8f0 <atoi>
 8001b04:	4603      	mov	r3, r0
 8001b06:	84fb      	strh	r3, [r7, #38]	; 0x26
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2103      	movs	r1, #3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fa97 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001b16:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          3,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00e f88e 	bl	800fc44 <strncpy>
		green = atoi(comando1);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00d fedf 	bl	800f8f0 <atoi>
 8001b32:	4603      	mov	r3, r0
 8001b34:	84bb      	strh	r3, [r7, #36]	; 0x24
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fa80 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001b44:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          4,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00e f877 	bl	800fc44 <strncpy>
		blue = atoi(comando1);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00d fec8 	bl	800f8f0 <atoi>
 8001b60:	4603      	mov	r3, r0
 8001b62:	847b      	strh	r3, [r7, #34]	; 0x22
		if(blue >= 0 && blue < 256 && red >= 0 && red < 256 && blue >=0 && blue < 256){
 8001b64:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db2b      	blt.n	8001bc4 <prvTaskStatsRGB+0x234>
 8001b6c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b70:	2bff      	cmp	r3, #255	; 0xff
 8001b72:	dc27      	bgt.n	8001bc4 <prvTaskStatsRGB+0x234>
 8001b74:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db23      	blt.n	8001bc4 <prvTaskStatsRGB+0x234>
 8001b7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	dc1f      	bgt.n	8001bc4 <prvTaskStatsRGB+0x234>
 8001b84:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db1b      	blt.n	8001bc4 <prvTaskStatsRGB+0x234>
 8001b8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b90:	2bff      	cmp	r3, #255	; 0xff
 8001b92:	dc17      	bgt.n	8001bc4 <prvTaskStatsRGB+0x234>
			rgb.blue = blue;
 8001b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001b9a:	70da      	strb	r2, [r3, #3]
			rgb.red = red;
 8001b9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001ba2:	705a      	strb	r2, [r3, #1]
			rgb.green = green;
 8001ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001baa:	709a      	strb	r2, [r3, #2]
			strcpy(pcWriteBuffer,"Cor redefinido \n\r");
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a33      	ldr	r2, [pc, #204]	; (8001c7c <prvTaskStatsRGB+0x2ec>)
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb6:	6028      	str	r0, [r5, #0]
 8001bb8:	6069      	str	r1, [r5, #4]
 8001bba:	60aa      	str	r2, [r5, #8]
 8001bbc:	60eb      	str	r3, [r5, #12]
 8001bbe:	8823      	ldrh	r3, [r4, #0]
 8001bc0:	822b      	strh	r3, [r5, #16]
 8001bc2:	e025      	b.n	8001c10 <prvTaskStatsRGB+0x280>
		} else {
			strcpy(pcWriteBuffer,"Valor invalido \n\r");
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <prvTaskStatsRGB+0x2e4>)
 8001bc8:	461d      	mov	r5, r3
 8001bca:	4614      	mov	r4, r2
 8001bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bce:	6028      	str	r0, [r5, #0]
 8001bd0:	6069      	str	r1, [r5, #4]
 8001bd2:	60aa      	str	r2, [r5, #8]
 8001bd4:	60eb      	str	r3, [r5, #12]
 8001bd6:	8823      	ldrh	r3, [r4, #0]
 8001bd8:	822b      	strh	r3, [r5, #16]
 8001bda:	e019      	b.n	8001c10 <prvTaskStatsRGB+0x280>
		}
	} else if(strcmp(comando1,(const char *)"rgb") == 0){
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4927      	ldr	r1, [pc, #156]	; (8001c80 <prvTaskStatsRGB+0x2f0>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fb5c 	bl	80002a0 <strcmp>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d110      	bne.n	8001c10 <prvTaskStatsRGB+0x280>

		HAL_TIM_Base_Start(&htim3);
 8001bee:	4819      	ldr	r0, [pc, #100]	; (8001c54 <prvTaskStatsRGB+0x2c4>)
 8001bf0:	f003 fc4c 	bl	800548c <HAL_TIM_Base_Start>
		vTaskResume(task_handle_RGB);
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <prvTaskStatsRGB+0x2d0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f009 fdb5 	bl	800b768 <vTaskResume>
		rgb.blue = 0;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	70da      	strb	r2, [r3, #3]
		rgb.red = 0;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	705a      	strb	r2, [r3, #1]
		rgb.green = 0;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	709a      	strb	r2, [r3, #2]
	}
//	strcpy(pcWriteBuffer,valor);

	TIM3->CCR1 = rgb.brilho*rgb.red;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	fb03 f202 	mul.w	r2, r3, r2
 8001c1e:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <prvTaskStatsRGB+0x2f4>)
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = rgb.brilho*rgb.green;
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001c2a:	789b      	ldrb	r3, [r3, #2]
 8001c2c:	fb03 f202 	mul.w	r2, r3, r2
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <prvTaskStatsRGB+0x2f4>)
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = rgb.brilho*rgb.blue;
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <prvTaskStatsRGB+0x2d4>)
 8001c3c:	78db      	ldrb	r3, [r3, #3]
 8001c3e:	fb03 f202 	mul.w	r2, r3, r2
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <prvTaskStatsRGB+0x2f4>)
 8001c44:	63da      	str	r2, [r3, #60]	; 0x3c
	return pdFALSE;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3730      	adds	r7, #48	; 0x30
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c50:	080109e8 	.word	0x080109e8
 8001c54:	20000284 	.word	0x20000284
 8001c58:	080109ec 	.word	0x080109ec
 8001c5c:	080109fc 	.word	0x080109fc
 8001c60:	200010e4 	.word	0x200010e4
 8001c64:	200002dc 	.word	0x200002dc
 8001c68:	08010a00 	.word	0x08010a00
 8001c6c:	08010a14 	.word	0x08010a14
 8001c70:	08010a1c 	.word	0x08010a1c
 8001c74:	08010a34 	.word	0x08010a34
 8001c78:	08010a48 	.word	0x08010a48
 8001c7c:	08010a50 	.word	0x08010a50
 8001c80:	08010a64 	.word	0x08010a64
 8001c84:	40000400 	.word	0x40000400

08001c88 <prvTaskStatsHarmonica>:


static BaseType_t prvTaskStatsHarmonica( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	strcpy(pcWriteBuffer,(char*)"Este e Harmonica XXXXX\r\n");
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a18      	ldr	r2, [pc, #96]	; (8001cf8 <prvTaskStatsHarmonica+0x70>)
 8001c98:	461d      	mov	r5, r3
 8001c9a:	4614      	mov	r4, r2
 8001c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9e:	6028      	str	r0, [r5, #0]
 8001ca0:	6069      	str	r1, [r5, #4]
 8001ca2:	60aa      	str	r2, [r5, #8]
 8001ca4:	60eb      	str	r3, [r5, #12]
 8001ca6:	cc03      	ldmia	r4!, {r0, r1}
 8001ca8:	6128      	str	r0, [r5, #16]
 8001caa:	6169      	str	r1, [r5, #20]
 8001cac:	7823      	ldrb	r3, [r4, #0]
 8001cae:	762b      	strb	r3, [r5, #24]
	char valor[15];
	int positivo = (int) fase*100;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <prvTaskStatsHarmonica+0x74>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cba:	ee17 2a90 	vmov	r2, s15
 8001cbe:	2364      	movs	r3, #100	; 0x64
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
	itoa(positivo,valor,10);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	220a      	movs	r2, #10
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cd0:	f00d fe54 	bl	800f97c <itoa>
	strcpy(pcWriteBuffer + strlen(pcWriteBuffer),valor);
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7fe faed 	bl	80002b4 <strlen>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f107 0214 	add.w	r2, r7, #20
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f00d ff90 	bl	800fc0c <strcpy>
	return pdFALSE;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3728      	adds	r7, #40	; 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	08010a68 	.word	0x08010a68
 8001cfc:	200010e0 	.word	0x200010e0

08001d00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0a2      	sub	sp, #136	; 0x88
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001d08:	f00b ffa0 	bl	800dc4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8001d0c:	f00b ffce 	bl	800dcac <init_usb_rtos_obj>

//  static uint8_t pcOutputString[ MAX_OUTPUT_LENGTH ], pcInputString[ MAX_INPUT_LENGTH ];

  FreeRTOS_CLIRegisterCommand( &xTasksCommand );
 8001d10:	4809      	ldr	r0, [pc, #36]	; (8001d38 <StartDefaultTask+0x38>)
 8001d12:	f7ff f8cd 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksTexto );
 8001d16:	4809      	ldr	r0, [pc, #36]	; (8001d3c <StartDefaultTask+0x3c>)
 8001d18:	f7ff f8ca 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksRGB );
 8001d1c:	4808      	ldr	r0, [pc, #32]	; (8001d40 <StartDefaultTask+0x40>)
 8001d1e:	f7ff f8c7 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksHarmonica );
 8001d22:	4808      	ldr	r0, [pc, #32]	; (8001d44 <StartDefaultTask+0x44>)
 8001d24:	f7ff f8c4 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>

  char data[128];
  /* Infinite loop */
  for(;;)
  {
	  queue_print(data,1);
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f00c f80a 	bl	800dd48 <queue_print>
 8001d34:	e7f8      	b.n	8001d28 <StartDefaultTask+0x28>
 8001d36:	bf00      	nop
 8001d38:	08010cdc 	.word	0x08010cdc
 8001d3c:	08010cec 	.word	0x08010cec
 8001d40:	08010cfc 	.word	0x08010cfc
 8001d44:	08010d0c 	.word	0x08010d0c

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <Error_Handler+0x8>
	...

08001d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_MspInit+0x54>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_MspInit+0x54>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_MspInit+0x54>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_MspInit+0x54>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_MspInit+0x54>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	; 0x40
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_MspInit+0x54>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	210f      	movs	r1, #15
 8001d96:	f06f 0001 	mvn.w	r0, #1
 8001d9a:	f000 ff1c 	bl	8002bd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a2f      	ldr	r2, [pc, #188]	; (8001e88 <HAL_ADC_MspInit+0xdc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d157      	bne.n	8001e7e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a2d      	ldr	r2, [pc, #180]	; (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_ADC_MspInit+0xe0>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	481d      	ldr	r0, [pc, #116]	; (8001e90 <HAL_ADC_MspInit+0xe4>)
 8001e1a:	f001 fa83 	bl	8003324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_ADC_MspInit+0xec>)
 8001e22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e62:	480c      	ldr	r0, [pc, #48]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e64:	f000 feee 	bl	8002c44 <HAL_DMA_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e6e:	f7ff ff6b 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_ADC_MspInit+0xe8>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40012000 	.word	0x40012000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	200001dc 	.word	0x200001dc
 8001e98:	40026410 	.word	0x40026410

08001e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_TIM_Base_MspInit+0x64>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_TIM_Base_MspInit+0x64>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_TIM_Base_MspInit+0x64>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eca:	e012      	b.n	8001ef2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_TIM_Base_MspInit+0x68>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d10d      	bne.n	8001ef2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_TIM_Base_MspInit+0x64>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <HAL_TIM_Base_MspInit+0x64>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_TIM_Base_MspInit+0x64>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40000400 	.word	0x40000400

08001f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a21      	ldr	r2, [pc, #132]	; (8001fac <HAL_TIM_MspPostInit+0xa4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d13b      	bne.n	8001fa2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_TIM_MspPostInit+0xa8>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <HAL_TIM_MspPostInit+0xa8>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_TIM_MspPostInit+0xa8>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_TIM_MspPostInit+0xa8>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_TIM_MspPostInit+0xa8>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_TIM_MspPostInit+0xa8>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin;
 8001f62:	23c0      	movs	r3, #192	; 0xc0
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f72:	2302      	movs	r3, #2
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <HAL_TIM_MspPostInit+0xac>)
 8001f7e:	f001 f9d1 	bl	8003324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUE_Pin;
 8001f82:	2301      	movs	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f92:	2302      	movs	r3, #2
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0314 	add.w	r3, r7, #20
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <HAL_TIM_MspPostInit+0xb0>)
 8001f9e:	f001 f9c1 	bl	8003324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3728      	adds	r7, #40	; 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <HardFault_Handler+0x4>

08001fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <MemManage_Handler+0x4>

08001fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <BusFault_Handler+0x4>

08001fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <UsageFault_Handler+0x4>

08001fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fec:	f000 f8e2 	bl	80021b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ff0:	f00a f9e6 	bl	800c3c0 <xTaskGetSchedulerState>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d001      	beq.n	8001ffe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ffa:	f00b fbad 	bl	800d758 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <DMA2_Stream0_IRQHandler+0x10>)
 800200a:	f000 ff21 	bl	8002e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200001dc 	.word	0x200001dc

08002018 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <OTG_FS_IRQHandler+0x10>)
 800201e:	f001 fc88 	bl	8003932 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000b410 	.word	0x2000b410

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f00d fc4c 	bl	800f8f8 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20018000 	.word	0x20018000
 800208c:	00000400 	.word	0x00000400
 8002090:	200010e8 	.word	0x200010e8
 8002094:	2000bb50 	.word	0x2000bb50

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c0:	480d      	ldr	r0, [pc, #52]	; (80020f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020c2:	490e      	ldr	r1, [pc, #56]	; (80020fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020c4:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d8:	4c0b      	ldr	r4, [pc, #44]	; (8002108 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020e6:	f7ff ffd7 	bl	8002098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f00d fc0b 	bl	800f904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ee:	f7ff f97d 	bl	80013ec <main>
  bx  lr    
 80020f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8002100:	08011ab8 	.word	0x08011ab8
  ldr r2, =_sbss
 8002104:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8002108:	2000bb4c 	.word	0x2000bb4c

0800210c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_Init+0x40>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_Init+0x40>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_Init+0x40>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 fd41 	bl	8002bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	200f      	movs	r0, #15
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fe06 	bl	8001d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fd59 	bl	8002c2a <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002190:	f000 fd21 	bl	8002bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2000000c 	.word	0x2000000c
 80021ac:	20000014 	.word	0x20000014
 80021b0:	20000010 	.word	0x20000010

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000014 	.word	0x20000014
 80021d8:	200010ec 	.word	0x200010ec

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	200010ec 	.word	0x200010ec

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff ffee 	bl	80021dc <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffde 	bl	80021dc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000014 	.word	0x20000014

0800223c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e033      	b.n	80022ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fda6 	bl	8001dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002282:	f023 0302 	bic.w	r3, r3, #2
 8002286:	f043 0202 	orr.w	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fa48 	bl	8002724 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Start_DMA+0x1e>
 80022de:	2302      	movs	r3, #2
 80022e0:	e0ce      	b.n	8002480 <HAL_ADC_Start_DMA+0x1bc>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d018      	beq.n	800232a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002308:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <HAL_ADC_Start_DMA+0x1c4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5f      	ldr	r2, [pc, #380]	; (800248c <HAL_ADC_Start_DMA+0x1c8>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0c9a      	lsrs	r2, r3, #18
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800231c:	e002      	b.n	8002324 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	3b01      	subs	r3, #1
 8002322:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002338:	d107      	bne.n	800234a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002348:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	f040 8086 	bne.w	8002466 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002384:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002398:	d106      	bne.n	80023a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f023 0206 	bic.w	r2, r3, #6
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
 80023a6:	e002      	b.n	80023ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b6:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_ADC_Start_DMA+0x1cc>)
 80023b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	4a35      	ldr	r2, [pc, #212]	; (8002494 <HAL_ADC_Start_DMA+0x1d0>)
 80023c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	4a34      	ldr	r2, [pc, #208]	; (8002498 <HAL_ADC_Start_DMA+0x1d4>)
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	4a33      	ldr	r2, [pc, #204]	; (800249c <HAL_ADC_Start_DMA+0x1d8>)
 80023d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	334c      	adds	r3, #76	; 0x4c
 8002406:	4619      	mov	r1, r3
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f000 fcc8 	bl	8002da0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10f      	bne.n	800243c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d129      	bne.n	800247e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	e020      	b.n	800247e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_ADC_Start_DMA+0x1dc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11b      	bne.n	800247e <HAL_ADC_Start_DMA+0x1ba>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d114      	bne.n	800247e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	e00b      	b.n	800247e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000000c 	.word	0x2000000c
 800248c:	431bde83 	.word	0x431bde83
 8002490:	40012300 	.word	0x40012300
 8002494:	0800291d 	.word	0x0800291d
 8002498:	080029d7 	.word	0x080029d7
 800249c:	080029f3 	.word	0x080029f3
 80024a0:	40012000 	.word	0x40012000

080024a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e105      	b.n	8002708 <HAL_ADC_ConfigChannel+0x228>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b09      	cmp	r3, #9
 800250a:	d925      	bls.n	8002558 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68d9      	ldr	r1, [r3, #12]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	3b1e      	subs	r3, #30
 8002522:	2207      	movs	r2, #7
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43da      	mvns	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	400a      	ands	r2, r1
 8002530:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68d9      	ldr	r1, [r3, #12]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	4603      	mov	r3, r0
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4403      	add	r3, r0
 800254a:	3b1e      	subs	r3, #30
 800254c:	409a      	lsls	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	e022      	b.n	800259e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6919      	ldr	r1, [r3, #16]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	2207      	movs	r2, #7
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	400a      	ands	r2, r1
 800257a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6919      	ldr	r1, [r3, #16]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	4603      	mov	r3, r0
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4403      	add	r3, r0
 8002594:	409a      	lsls	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d824      	bhi.n	80025f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b05      	subs	r3, #5
 80025b8:	221f      	movs	r2, #31
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	400a      	ands	r2, r1
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b05      	subs	r3, #5
 80025e2:	fa00 f203 	lsl.w	r2, r0, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
 80025ee:	e04c      	b.n	800268a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b0c      	cmp	r3, #12
 80025f6:	d824      	bhi.n	8002642 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3b23      	subs	r3, #35	; 0x23
 800260a:	221f      	movs	r2, #31
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43da      	mvns	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	400a      	ands	r2, r1
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	4618      	mov	r0, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b23      	subs	r3, #35	; 0x23
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
 8002640:	e023      	b.n	800268a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b41      	subs	r3, #65	; 0x41
 8002654:	221f      	movs	r2, #31
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	400a      	ands	r2, r1
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b41      	subs	r3, #65	; 0x41
 800267e:	fa00 f203 	lsl.w	r2, r0, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_ADC_ConfigChannel+0x234>)
 800268c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a21      	ldr	r2, [pc, #132]	; (8002718 <HAL_ADC_ConfigChannel+0x238>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d109      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1cc>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b12      	cmp	r3, #18
 800269e:	d105      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_ADC_ConfigChannel+0x238>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d123      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x21e>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d003      	beq.n	80026c6 <HAL_ADC_ConfigChannel+0x1e6>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b11      	cmp	r3, #17
 80026c4:	d11b      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d111      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_ADC_ConfigChannel+0x23c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a10      	ldr	r2, [pc, #64]	; (8002720 <HAL_ADC_ConfigChannel+0x240>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	0c9a      	lsrs	r2, r3, #18
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026f0:	e002      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f9      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40012300 	.word	0x40012300
 8002718:	40012000 	.word	0x40012000
 800271c:	2000000c 	.word	0x2000000c
 8002720:	431bde83 	.word	0x431bde83

08002724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800272c:	4b79      	ldr	r3, [pc, #484]	; (8002914 <ADC_Init+0x1f0>)
 800272e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	431a      	orrs	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	021a      	lsls	r2, r3, #8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800277c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6899      	ldr	r1, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	4a58      	ldr	r2, [pc, #352]	; (8002918 <ADC_Init+0x1f4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6899      	ldr	r1, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	e00f      	b.n	8002822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0202 	bic.w	r2, r2, #2
 8002830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6899      	ldr	r1, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7e1b      	ldrb	r3, [r3, #24]
 800283c:	005a      	lsls	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01b      	beq.n	8002888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800285e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800286e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	3b01      	subs	r3, #1
 800287c:	035a      	lsls	r2, r3, #13
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	e007      	b.n	8002898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002896:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	051a      	lsls	r2, r3, #20
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6899      	ldr	r1, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028da:	025a      	lsls	r2, r3, #9
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6899      	ldr	r1, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	029a      	lsls	r2, r3, #10
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40012300 	.word	0x40012300
 8002918:	0f000001 	.word	0x0f000001

0800291c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002932:	2b00      	cmp	r3, #0
 8002934:	d13c      	bne.n	80029b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d12b      	bne.n	80029a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002954:	2b00      	cmp	r3, #0
 8002956:	d127      	bne.n	80029a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002970:	2b00      	cmp	r3, #0
 8002972:	d119      	bne.n	80029a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0220 	bic.w	r2, r2, #32
 8002982:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff fd7b 	bl	80024a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029ae:	e00e      	b.n	80029ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff fd85 	bl	80024cc <HAL_ADC_ErrorCallback>
}
 80029c2:	e004      	b.n	80029ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff fd67 	bl	80024b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff fd5a 	bl	80024cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	db0b      	blt.n	8002aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4907      	ldr	r1, [pc, #28]	; (8002abc <__NVIC_EnableIRQ+0x38>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000e100 	.word	0xe000e100

08002ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0a      	blt.n	8002aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	490c      	ldr	r1, [pc, #48]	; (8002b0c <__NVIC_SetPriority+0x4c>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	0112      	lsls	r2, r2, #4
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae8:	e00a      	b.n	8002b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4908      	ldr	r1, [pc, #32]	; (8002b10 <__NVIC_SetPriority+0x50>)
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3b04      	subs	r3, #4
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	440b      	add	r3, r1
 8002afe:	761a      	strb	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f1c3 0307 	rsb	r3, r3, #7
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	bf28      	it	cs
 8002b32:	2304      	movcs	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d902      	bls.n	8002b44 <NVIC_EncodePriority+0x30>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3b03      	subs	r3, #3
 8002b42:	e000      	b.n	8002b46 <NVIC_EncodePriority+0x32>
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	4313      	orrs	r3, r2
         );
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	; 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b8c:	d301      	bcc.n	8002b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00f      	b.n	8002bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <SysTick_Config+0x40>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba0:	f7ff ff8e 	bl	8002ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <SysTick_Config+0x40>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <SysTick_Config+0x40>)
 8002bac:	2207      	movs	r2, #7
 8002bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	e000e010 	.word	0xe000e010

08002bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff29 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be8:	f7ff ff3e 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff ff8e 	bl	8002b14 <NVIC_EncodePriority>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff5d 	bl	8002ac0 <__NVIC_SetPriority>
}
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff31 	bl	8002a84 <__NVIC_EnableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffa2 	bl	8002b7c <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff fac4 	bl	80021dc <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e099      	b.n	8002d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c80:	e00f      	b.n	8002ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c82:	f7ff faab 	bl	80021dc <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d908      	bls.n	8002ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e078      	b.n	8002d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e8      	bne.n	8002c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <HAL_DMA_Init+0x158>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d107      	bne.n	8002d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	4313      	orrs	r3, r2
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0307 	bic.w	r3, r3, #7
 8002d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d117      	bne.n	8002d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00e      	beq.n	8002d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa6f 	bl	800322c <DMA_CheckFifoParam>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2240      	movs	r2, #64	; 0x40
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d62:	2301      	movs	r3, #1
 8002d64:	e016      	b.n	8002d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa26 	bl	80031c0 <DMA_CalcBaseAndBitshift>
 8002d74:	4603      	mov	r3, r0
 8002d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	223f      	movs	r2, #63	; 0x3f
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	f010803f 	.word	0xf010803f

08002da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_DMA_Start_IT+0x26>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e040      	b.n	8002e48 <HAL_DMA_Start_IT+0xa8>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d12f      	bne.n	8002e3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f9b8 	bl	8003164 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	223f      	movs	r2, #63	; 0x3f
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0216 	orr.w	r2, r2, #22
 8002e0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0208 	orr.w	r2, r2, #8
 8002e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e005      	b.n	8002e46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
 8002e44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e5c:	4b8e      	ldr	r3, [pc, #568]	; (8003098 <HAL_DMA_IRQHandler+0x248>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a8e      	ldr	r2, [pc, #568]	; (800309c <HAL_DMA_IRQHandler+0x24c>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0a9b      	lsrs	r3, r3, #10
 8002e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	2208      	movs	r2, #8
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01a      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0204 	bic.w	r2, r2, #4
 8002ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	2201      	movs	r2, #1
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d012      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2204      	movs	r2, #4
 8002f16:	409a      	lsls	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f043 0204 	orr.w	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d043      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03c      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d018      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d108      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d024      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	e01f      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01b      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
 8002f90:	e016      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0208 	bic.w	r2, r2, #8
 8002fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 808f 	beq.w	80030f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8087 	beq.w	80030f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d136      	bne.n	8003068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0216 	bic.w	r2, r2, #22
 8003008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <HAL_DMA_IRQHandler+0x1da>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0208 	bic.w	r2, r2, #8
 8003038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	223f      	movs	r2, #63	; 0x3f
 8003040:	409a      	lsls	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	2b00      	cmp	r3, #0
 800305c:	d07e      	beq.n	800315c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
        }
        return;
 8003066:	e079      	b.n	800315c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10d      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	2b00      	cmp	r3, #0
 800308a:	d031      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
 8003094:	e02c      	b.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
 8003096:	bf00      	nop
 8003098:	2000000c 	.word	0x2000000c
 800309c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d023      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
 80030b0:	e01e      	b.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10f      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0210 	bic.w	r2, r2, #16
 80030ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d032      	beq.n	800315e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d022      	beq.n	800314a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2205      	movs	r2, #5
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	3301      	adds	r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	429a      	cmp	r2, r3
 8003126:	d307      	bcc.n	8003138 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f2      	bne.n	800311c <HAL_DMA_IRQHandler+0x2cc>
 8003136:	e000      	b.n	800313a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003138:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
 800315a:	e000      	b.n	800315e <HAL_DMA_IRQHandler+0x30e>
        return;
 800315c:	bf00      	nop
    }
  }
}
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003180:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d108      	bne.n	80031a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031a2:	e007      	b.n	80031b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	3b10      	subs	r3, #16
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <DMA_CalcBaseAndBitshift+0x64>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031da:	4a13      	ldr	r2, [pc, #76]	; (8003228 <DMA_CalcBaseAndBitshift+0x68>)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d909      	bls.n	8003202 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	1d1a      	adds	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003200:	e007      	b.n	8003212 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	aaaaaaab 	.word	0xaaaaaaab
 8003228:	08010d2c 	.word	0x08010d2c

0800322c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11f      	bne.n	8003286 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d856      	bhi.n	80032fa <DMA_CheckFifoParam+0xce>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <DMA_CheckFifoParam+0x28>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003265 	.word	0x08003265
 8003258:	08003277 	.word	0x08003277
 800325c:	08003265 	.word	0x08003265
 8003260:	080032fb 	.word	0x080032fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d046      	beq.n	80032fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003274:	e043      	b.n	80032fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800327e:	d140      	bne.n	8003302 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003284:	e03d      	b.n	8003302 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328e:	d121      	bne.n	80032d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d837      	bhi.n	8003306 <DMA_CheckFifoParam+0xda>
 8003296:	a201      	add	r2, pc, #4	; (adr r2, 800329c <DMA_CheckFifoParam+0x70>)
 8003298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032b3 	.word	0x080032b3
 80032a4:	080032ad 	.word	0x080032ad
 80032a8:	080032c5 	.word	0x080032c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      break;
 80032b0:	e030      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d025      	beq.n	800330a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032c2:	e022      	b.n	800330a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032cc:	d11f      	bne.n	800330e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032d2:	e01c      	b.n	800330e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d903      	bls.n	80032e2 <DMA_CheckFifoParam+0xb6>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d003      	beq.n	80032e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032e0:	e018      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
      break;
 80032e6:	e015      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      break;
 80032f8:	e00b      	b.n	8003312 <DMA_CheckFifoParam+0xe6>
      break;
 80032fa:	bf00      	nop
 80032fc:	e00a      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 80032fe:	bf00      	nop
 8003300:	e008      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 8003302:	bf00      	nop
 8003304:	e006      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 8003306:	bf00      	nop
 8003308:	e004      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 800330a:	bf00      	nop
 800330c:	e002      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;   
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <DMA_CheckFifoParam+0xe8>
      break;
 8003312:	bf00      	nop
    }
  } 
  
  return status; 
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop

08003324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e159      	b.n	80035f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003340:	2201      	movs	r2, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	f040 8148 	bne.w	80035ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d005      	beq.n	8003376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003372:	2b02      	cmp	r3, #2
 8003374:	d130      	bne.n	80033d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	2203      	movs	r2, #3
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 0201 	and.w	r2, r3, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d017      	beq.n	8003414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d123      	bne.n	8003468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	08da      	lsrs	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3208      	adds	r2, #8
 8003428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220f      	movs	r2, #15
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	08da      	lsrs	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3208      	adds	r2, #8
 8003462:	69b9      	ldr	r1, [r7, #24]
 8003464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2203      	movs	r2, #3
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0203 	and.w	r2, r3, #3
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80a2 	beq.w	80035ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b57      	ldr	r3, [pc, #348]	; (800360c <HAL_GPIO_Init+0x2e8>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4a56      	ldr	r2, [pc, #344]	; (800360c <HAL_GPIO_Init+0x2e8>)
 80034b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ba:	4b54      	ldr	r3, [pc, #336]	; (800360c <HAL_GPIO_Init+0x2e8>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c6:	4a52      	ldr	r2, [pc, #328]	; (8003610 <HAL_GPIO_Init+0x2ec>)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a49      	ldr	r2, [pc, #292]	; (8003614 <HAL_GPIO_Init+0x2f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d019      	beq.n	8003526 <HAL_GPIO_Init+0x202>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_GPIO_Init+0x2f4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_GPIO_Init+0x1fe>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a47      	ldr	r2, [pc, #284]	; (800361c <HAL_GPIO_Init+0x2f8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00d      	beq.n	800351e <HAL_GPIO_Init+0x1fa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a46      	ldr	r2, [pc, #280]	; (8003620 <HAL_GPIO_Init+0x2fc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <HAL_GPIO_Init+0x1f6>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a45      	ldr	r2, [pc, #276]	; (8003624 <HAL_GPIO_Init+0x300>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_GPIO_Init+0x1f2>
 8003512:	2304      	movs	r3, #4
 8003514:	e008      	b.n	8003528 <HAL_GPIO_Init+0x204>
 8003516:	2307      	movs	r3, #7
 8003518:	e006      	b.n	8003528 <HAL_GPIO_Init+0x204>
 800351a:	2303      	movs	r3, #3
 800351c:	e004      	b.n	8003528 <HAL_GPIO_Init+0x204>
 800351e:	2302      	movs	r3, #2
 8003520:	e002      	b.n	8003528 <HAL_GPIO_Init+0x204>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_GPIO_Init+0x204>
 8003526:	2300      	movs	r3, #0
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	f002 0203 	and.w	r2, r2, #3
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	4093      	lsls	r3, r2
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003538:	4935      	ldr	r1, [pc, #212]	; (8003610 <HAL_GPIO_Init+0x2ec>)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	3302      	adds	r3, #2
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_GPIO_Init+0x304>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800356a:	4a2f      	ldr	r2, [pc, #188]	; (8003628 <HAL_GPIO_Init+0x304>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003570:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <HAL_GPIO_Init+0x304>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003594:	4a24      	ldr	r2, [pc, #144]	; (8003628 <HAL_GPIO_Init+0x304>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800359a:	4b23      	ldr	r3, [pc, #140]	; (8003628 <HAL_GPIO_Init+0x304>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035be:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <HAL_GPIO_Init+0x304>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_GPIO_Init+0x304>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e8:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <HAL_GPIO_Init+0x304>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	f67f aea2 	bls.w	8003340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	40013800 	.word	0x40013800
 8003614:	40020000 	.word	0x40020000
 8003618:	40020400 	.word	0x40020400
 800361c:	40020800 	.word	0x40020800
 8003620:	40020c00 	.word	0x40020c00
 8003624:	40021000 	.word	0x40021000
 8003628:	40013c00 	.word	0x40013c00

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	619a      	str	r2, [r3, #24]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003670:	887a      	ldrh	r2, [r7, #2]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	041a      	lsls	r2, r3, #16
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43d9      	mvns	r1, r3
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	400b      	ands	r3, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	619a      	str	r2, [r3, #24]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003694:	b08f      	sub	sp, #60	; 0x3c
 8003696:	af0a      	add	r7, sp, #40	; 0x28
 8003698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e10f      	b.n	80038c4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f00a fe58 	bl	800e374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2203      	movs	r2, #3
 80036c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f002 fe35 	bl	8006352 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	603b      	str	r3, [r7, #0]
 80036ee:	687e      	ldr	r6, [r7, #4]
 80036f0:	466d      	mov	r5, sp
 80036f2:	f106 0410 	add.w	r4, r6, #16
 80036f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003702:	e885 0003 	stmia.w	r5, {r0, r1}
 8003706:	1d33      	adds	r3, r6, #4
 8003708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	f002 fd0c 	bl	8006128 <USB_CoreInit>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0d0      	b.n	80038c4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f002 fe23 	bl	8006374 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
 8003732:	e04a      	b.n	80037ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	333d      	adds	r3, #61	; 0x3d
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	333c      	adds	r3, #60	; 0x3c
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	b298      	uxth	r0, r3
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3344      	adds	r3, #68	; 0x44
 8003770:	4602      	mov	r2, r0
 8003772:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3340      	adds	r3, #64	; 0x40
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3348      	adds	r3, #72	; 0x48
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	334c      	adds	r3, #76	; 0x4c
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3354      	adds	r3, #84	; 0x54
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	3301      	adds	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3af      	bcc.n	8003734 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e044      	b.n	8003864 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	3301      	adds	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d3b5      	bcc.n	80037da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	687e      	ldr	r6, [r7, #4]
 8003876:	466d      	mov	r5, sp
 8003878:	f106 0410 	add.w	r4, r6, #16
 800387c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800387e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003884:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003888:	e885 0003 	stmia.w	r5, {r0, r1}
 800388c:	1d33      	adds	r3, r6, #4
 800388e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003890:	6838      	ldr	r0, [r7, #0]
 8003892:	f002 fdbb 	bl	800640c <USB_DevInit>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e00d      	b.n	80038c4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f003 ff0a 	bl	80076d6 <USB_DevDisconnect>

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_PCD_Start+0x1c>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e020      	b.n	800392a <HAL_PCD_Start+0x5e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d109      	bne.n	800390c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d005      	beq.n	800390c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f002 fd0d 	bl	8006330 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f003 feba 	bl	8007694 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003932:	b590      	push	{r4, r7, lr}
 8003934:	b08d      	sub	sp, #52	; 0x34
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f003 ff78 	bl	800783e <USB_GetMode>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	f040 848a 	bne.w	800426a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f003 fedc 	bl	8007718 <USB_ReadInterrupts>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8480 	beq.w	8004268 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fec9 	bl	8007718 <USB_ReadInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d107      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f002 0202 	and.w	r2, r2, #2
 800399e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 feb7 	bl	8007718 <USB_ReadInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d161      	bne.n	8003a78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0210 	bic.w	r2, r2, #16
 80039c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 020f 	and.w	r2, r3, #15
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	3304      	adds	r3, #4
 80039e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	0c5b      	lsrs	r3, r3, #17
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d124      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d035      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6a38      	ldr	r0, [r7, #32]
 8003a10:	f003 fcee 	bl	80073f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a20:	441a      	add	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a32:	441a      	add	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	621a      	str	r2, [r3, #32]
 8003a38:	e016      	b.n	8003a68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	0c5b      	lsrs	r3, r3, #17
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d110      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6a38      	ldr	r0, [r7, #32]
 8003a52:	f003 fccd 	bl	80073f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a62:	441a      	add	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0210 	orr.w	r2, r2, #16
 8003a76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 fe4b 	bl	8007718 <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a8c:	f040 80a7 	bne.w	8003bde <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f003 fe50 	bl	800773e <USB_ReadDevAllOutEpInterrupt>
 8003a9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003aa0:	e099      	b.n	8003bd6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 808e 	beq.w	8003bca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 fe74 	bl	80077a6 <USB_ReadDevOutEPInterrupt>
 8003abe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00c      	beq.n	8003ae4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2301      	movs	r3, #1
 8003ada:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fec2 	bl	8004868 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afa:	461a      	mov	r2, r3
 8003afc:	2308      	movs	r3, #8
 8003afe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 ff98 	bl	8004a38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2310      	movs	r3, #16
 8003b22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d030      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b80      	cmp	r3, #128	; 0x80
 8003b38:	d109      	bne.n	8003b4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	78db      	ldrb	r3, [r3, #3]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d108      	bne.n	8003b7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	4619      	mov	r1, r3
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f00a fd01 	bl	800e580 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2320      	movs	r3, #32
 8003baa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	3301      	adds	r3, #1
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f47f af62 	bne.w	8003aa2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f003 fd98 	bl	8007718 <USB_ReadInterrupts>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bf2:	f040 80db 	bne.w	8003dac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f003 fdb9 	bl	8007772 <USB_ReadDevAllInEpInterrupt>
 8003c00:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c06:	e0cd      	b.n	8003da4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80c2 	beq.w	8003d98 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f003 fddf 	bl	80077e2 <USB_ReadDevInEPInterrupt>
 8003c24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d057      	beq.n	8003ce0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	2201      	movs	r2, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69f9      	ldr	r1, [r7, #28]
 8003c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c50:	4013      	ands	r3, r2
 8003c52:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c60:	461a      	mov	r2, r3
 8003c62:	2301      	movs	r3, #1
 8003c64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d132      	bne.n	8003cd4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	334c      	adds	r3, #76	; 0x4c
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4403      	add	r3, r0
 8003c8e:	3348      	adds	r3, #72	; 0x48
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4419      	add	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4403      	add	r3, r0
 8003ca2:	334c      	adds	r3, #76	; 0x4c
 8003ca4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d113      	bne.n	8003cd4 <HAL_PCD_IRQHandler+0x3a2>
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3354      	adds	r3, #84	; 0x54
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2101      	movs	r1, #1
 8003cd0:	f003 fde6 	bl	80078a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f00a fbcb 	bl	800e476 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d12:	461a      	mov	r2, r3
 8003d14:	2310      	movs	r3, #16
 8003d16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2340      	movs	r3, #64	; 0x40
 8003d32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d023      	beq.n	8003d86 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d40:	6a38      	ldr	r0, [r7, #32]
 8003d42:	f002 fcc7 	bl	80066d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	3338      	adds	r3, #56	; 0x38
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	3304      	adds	r3, #4
 8003d58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	78db      	ldrb	r3, [r3, #3]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d108      	bne.n	8003d74 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2200      	movs	r2, #0
 8003d66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f00a fc18 	bl	800e5a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d80:	461a      	mov	r2, r3
 8003d82:	2302      	movs	r3, #2
 8003d84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fcdb 	bl	800474e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f47f af2e 	bne.w	8003c08 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f003 fcb1 	bl	8007718 <USB_ReadInterrupts>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc0:	d122      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d108      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003de8:	2100      	movs	r1, #0
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fec2 	bl	8004b74 <HAL_PCDEx_LPM_Callback>
 8003df0:	e002      	b.n	8003df8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f00a fbb6 	bl	800e564 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f003 fc83 	bl	8007718 <USB_ReadInterrupts>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1c:	d112      	bne.n	8003e44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d102      	bne.n	8003e34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f00a fb72 	bl	800e518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e42:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f003 fc65 	bl	8007718 <USB_ReadInterrupts>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e58:	f040 80b7 	bne.w	8003fca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2110      	movs	r1, #16
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 fc2c 	bl	80066d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e80:	e046      	b.n	8003f10 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ec8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ee8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d3b3      	bcc.n	8003e82 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f46:	f043 030b 	orr.w	r3, r3, #11
 8003f4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f5c:	f043 030b 	orr.w	r3, r3, #11
 8003f60:	6453      	str	r3, [r2, #68]	; 0x44
 8003f62:	e015      	b.n	8003f90 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f8a:	f043 030b 	orr.w	r3, r3, #11
 8003f8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fa2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f003 fc73 	bl	80078a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f003 fba2 	bl	8007718 <USB_ReadInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fde:	d124      	bne.n	800402a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f003 fc38 	bl	800785a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f002 fbed 	bl	80067ce <USB_GetDevSpeed>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681c      	ldr	r4, [r3, #0]
 8004000:	f001 f9e8 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 8004004:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	4620      	mov	r0, r4
 8004010:	f002 f8ec 	bl	80061ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f00a fa56 	bl	800e4c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004028:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f003 fb72 	bl	8007718 <USB_ReadInterrupts>
 8004034:	4603      	mov	r3, r0
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b08      	cmp	r3, #8
 800403c:	d10a      	bne.n	8004054 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f00a fa33 	bl	800e4aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f002 0208 	and.w	r2, r2, #8
 8004052:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f003 fb5d 	bl	8007718 <USB_ReadInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b80      	cmp	r3, #128	; 0x80
 8004066:	d122      	bne.n	80040ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004074:	2301      	movs	r3, #1
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	e014      	b.n	80040a4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	b2db      	uxtb	r3, r3
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fb27 	bl	80046ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	3301      	adds	r3, #1
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d3e5      	bcc.n	800407a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f003 fb30 	bl	8007718 <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c2:	d13b      	bne.n	800413c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040c4:	2301      	movs	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
 80040c8:	e02b      	b.n	8004122 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3340      	adds	r3, #64	; 0x40
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d115      	bne.n	800411c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da12      	bge.n	800411c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	333f      	adds	r3, #63	; 0x3f
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004112:	b2db      	uxtb	r3, r3
 8004114:	4619      	mov	r1, r3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fae8 	bl	80046ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	3301      	adds	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	429a      	cmp	r2, r3
 800412a:	d3ce      	bcc.n	80040ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800413a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f003 fae9 	bl	8007718 <USB_ReadInterrupts>
 8004146:	4603      	mov	r3, r0
 8004148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800414c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004150:	d155      	bne.n	80041fe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004152:	2301      	movs	r3, #1
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
 8004156:	e045      	b.n	80041e4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d12e      	bne.n	80041de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004180:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004182:	2b00      	cmp	r3, #0
 8004184:	da2b      	bge.n	80041de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004192:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004196:	429a      	cmp	r2, r3
 8004198:	d121      	bne.n	80041de <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041da:	6053      	str	r3, [r2, #4]
            break;
 80041dc:	e007      	b.n	80041ee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	3301      	adds	r3, #1
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d3b4      	bcc.n	8004158 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80041fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f003 fa88 	bl	8007718 <USB_ReadInterrupts>
 8004208:	4603      	mov	r3, r0
 800420a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004212:	d10a      	bne.n	800422a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f00a f9d7 	bl	800e5c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f003 fa72 	bl	8007718 <USB_ReadInterrupts>
 8004234:	4603      	mov	r3, r0
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b04      	cmp	r3, #4
 800423c:	d115      	bne.n	800426a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f00a f9c7 	bl	800e5e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	e000      	b.n	800426a <HAL_PCD_IRQHandler+0x938>
      return;
 8004268:	bf00      	nop
    }
  }
}
 800426a:	3734      	adds	r7, #52	; 0x34
 800426c:	46bd      	mov	sp, r7
 800426e:	bd90      	pop	{r4, r7, pc}

08004270 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_PCD_SetAddress+0x1a>
 8004286:	2302      	movs	r3, #2
 8004288:	e013      	b.n	80042b2 <HAL_PCD_SetAddress+0x42>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 f9d0 	bl	8007648 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	4608      	mov	r0, r1
 80042c4:	4611      	mov	r1, r2
 80042c6:	461a      	mov	r2, r3
 80042c8:	4603      	mov	r3, r0
 80042ca:	70fb      	strb	r3, [r7, #3]
 80042cc:	460b      	mov	r3, r1
 80042ce:	803b      	strh	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	da0f      	bge.n	8004300 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	f003 020f 	and.w	r2, r3, #15
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	3338      	adds	r3, #56	; 0x38
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	3304      	adds	r3, #4
 80042f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	705a      	strb	r2, [r3, #1]
 80042fe:	e00f      	b.n	8004320 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	f003 020f 	and.w	r2, r3, #15
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	3304      	adds	r3, #4
 8004318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	b2da      	uxtb	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800432c:	883a      	ldrh	r2, [r7, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	78ba      	ldrb	r2, [r7, #2]
 8004336:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800434a:	78bb      	ldrb	r3, [r7, #2]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d102      	bne.n	8004356 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_PCD_EP_Open+0xaa>
 8004360:	2302      	movs	r3, #2
 8004362:	e00e      	b.n	8004382 <HAL_PCD_EP_Open+0xc8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	4618      	mov	r0, r3
 8004374:	f002 fa50 	bl	8006818 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004380:	7afb      	ldrb	r3, [r7, #11]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439a:	2b00      	cmp	r3, #0
 800439c:	da0f      	bge.n	80043be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	f003 020f 	and.w	r2, r3, #15
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	3338      	adds	r3, #56	; 0x38
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	3304      	adds	r3, #4
 80043b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	705a      	strb	r2, [r3, #1]
 80043bc:	e00f      	b.n	80043de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	f003 020f 	and.w	r2, r3, #15
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_PCD_EP_Close+0x6e>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e00e      	b.n	8004416 <HAL_PCD_EP_Close+0x8c>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68f9      	ldr	r1, [r7, #12]
 8004406:	4618      	mov	r0, r3
 8004408:	f002 fa8e 	bl	8006928 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	460b      	mov	r3, r1
 800442c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	3304      	adds	r3, #4
 8004446:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2200      	movs	r2, #0
 8004458:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2200      	movs	r2, #0
 800445e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004460:	7afb      	ldrb	r3, [r7, #11]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	b2da      	uxtb	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d102      	bne.n	800447a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800447a:	7afb      	ldrb	r3, [r7, #11]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	6979      	ldr	r1, [r7, #20]
 8004492:	f002 fd6d 	bl	8006f70 <USB_EP0StartXfer>
 8004496:	e008      	b.n	80044aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	6979      	ldr	r1, [r7, #20]
 80044a6:	f002 fb1b 	bl	8006ae0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	f003 020f 	and.w	r2, r3, #15
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80044d6:	681b      	ldr	r3, [r3, #0]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	460b      	mov	r3, r1
 80044f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f4:	7afb      	ldrb	r3, [r7, #11]
 80044f6:	f003 020f 	and.w	r2, r3, #15
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	3338      	adds	r3, #56	; 0x38
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	3304      	adds	r3, #4
 800450a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2200      	movs	r2, #0
 800451c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2201      	movs	r2, #1
 8004522:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004524:	7afb      	ldrb	r3, [r7, #11]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	b2da      	uxtb	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d102      	bne.n	800453e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	f002 fd0b 	bl	8006f70 <USB_EP0StartXfer>
 800455a:	e008      	b.n	800456e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	f002 fab9 	bl	8006ae0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	f003 020f 	and.w	r2, r3, #15
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	d901      	bls.n	8004596 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e050      	b.n	8004638 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800459a:	2b00      	cmp	r3, #0
 800459c:	da0f      	bge.n	80045be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 020f 	and.w	r2, r3, #15
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	3338      	adds	r3, #56	; 0x38
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	3304      	adds	r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	705a      	strb	r2, [r3, #1]
 80045bc:	e00d      	b.n	80045da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4413      	add	r3, r2
 80045d0:	3304      	adds	r3, #4
 80045d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_PCD_EP_SetStall+0x82>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e01e      	b.n	8004638 <HAL_PCD_EP_SetStall+0xc0>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	4618      	mov	r0, r3
 800460a:	f002 ff49 	bl	80074a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	b2d9      	uxtb	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004628:	461a      	mov	r2, r3
 800462a:	f003 f939 	bl	80078a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	f003 020f 	and.w	r2, r3, #15
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d901      	bls.n	800465e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e042      	b.n	80046e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800465e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004662:	2b00      	cmp	r3, #0
 8004664:	da0f      	bge.n	8004686 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	f003 020f 	and.w	r2, r3, #15
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	3338      	adds	r3, #56	; 0x38
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	4413      	add	r3, r2
 800467a:	3304      	adds	r3, #4
 800467c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	705a      	strb	r2, [r3, #1]
 8004684:	e00f      	b.n	80046a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	f003 020f 	and.w	r2, r3, #15
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	4413      	add	r3, r2
 800469c:	3304      	adds	r3, #4
 800469e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_PCD_EP_ClrStall+0x86>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e00e      	b.n	80046e4 <HAL_PCD_EP_ClrStall+0xa4>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f002 ff51 	bl	800757c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da0c      	bge.n	800471a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	3338      	adds	r3, #56	; 0x38
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	3304      	adds	r3, #4
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e00c      	b.n	8004734 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	f003 020f 	and.w	r2, r3, #15
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	3304      	adds	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68f9      	ldr	r1, [r7, #12]
 800473a:	4618      	mov	r0, r3
 800473c:	f002 fd70 	bl	8007220 <USB_EPStopXfer>
 8004740:	4603      	mov	r3, r0
 8004742:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004744:	7afb      	ldrb	r3, [r7, #11]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b08a      	sub	sp, #40	; 0x28
 8004752:	af02      	add	r7, sp, #8
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	3338      	adds	r3, #56	; 0x38
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	3304      	adds	r3, #4
 8004774:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1a      	ldr	r2, [r3, #32]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	429a      	cmp	r2, r3
 8004780:	d901      	bls.n	8004786 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e06c      	b.n	8004860 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	429a      	cmp	r2, r3
 800479a:	d902      	bls.n	80047a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3303      	adds	r3, #3
 80047a6:	089b      	lsrs	r3, r3, #2
 80047a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047aa:	e02b      	b.n	8004804 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d902      	bls.n	80047c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	3303      	adds	r3, #3
 80047cc:	089b      	lsrs	r3, r3, #2
 80047ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6919      	ldr	r1, [r3, #16]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	4603      	mov	r3, r0
 80047e6:	6978      	ldr	r0, [r7, #20]
 80047e8:	f002 fdc4 	bl	8007374 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	441a      	add	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	441a      	add	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	b29b      	uxth	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	429a      	cmp	r2, r3
 8004818:	d809      	bhi.n	800482e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1a      	ldr	r2, [r3, #32]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004822:	429a      	cmp	r2, r3
 8004824:	d203      	bcs.n	800482e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1be      	bne.n	80047ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	429a      	cmp	r2, r3
 8004838:	d811      	bhi.n	800485e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	2201      	movs	r2, #1
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	43db      	mvns	r3, r3
 8004854:	6939      	ldr	r1, [r7, #16]
 8004856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485a:	4013      	ands	r3, r2
 800485c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	333c      	adds	r3, #60	; 0x3c
 8004880:	3304      	adds	r3, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d17b      	bne.n	8004996 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	4a61      	ldr	r2, [pc, #388]	; (8004a30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	f240 80b9 	bls.w	8004a24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80b3 	beq.w	8004a24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	461a      	mov	r2, r3
 80048cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d0:	6093      	str	r3, [r2, #8]
 80048d2:	e0a7      	b.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	461a      	mov	r2, r3
 80048ec:	2320      	movs	r3, #32
 80048ee:	6093      	str	r3, [r2, #8]
 80048f0:	e098      	b.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f040 8093 	bne.w	8004a24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	4a4b      	ldr	r2, [pc, #300]	; (8004a30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d90f      	bls.n	8004926 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	461a      	mov	r2, r3
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	6093      	str	r3, [r2, #8]
 8004924:	e07e      	b.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	3304      	adds	r3, #4
 800493a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	440b      	add	r3, r1
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004952:	1ad2      	subs	r2, r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d114      	bne.n	8004988 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004970:	461a      	mov	r2, r3
 8004972:	2101      	movs	r1, #1
 8004974:	f002 ff94 	bl	80078a0 <USB_EP0_OutStart>
 8004978:	e006      	b.n	8004988 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	441a      	add	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f009 fd56 	bl	800e440 <HAL_PCD_DataOutStageCallback>
 8004994:	e046      	b.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d124      	bne.n	80049e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	461a      	mov	r2, r3
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	6093      	str	r3, [r2, #8]
 80049bc:	e032      	b.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	461a      	mov	r2, r3
 80049d6:	2320      	movs	r3, #32
 80049d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	4619      	mov	r1, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f009 fd2d 	bl	800e440 <HAL_PCD_DataOutStageCallback>
 80049e6:	e01d      	b.n	8004a24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d114      	bne.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1b0>
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d108      	bne.n	8004a18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a10:	461a      	mov	r2, r3
 8004a12:	2100      	movs	r1, #0
 8004a14:	f002 ff44 	bl	80078a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f009 fd0e 	bl	800e440 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	4f54300a 	.word	0x4f54300a
 8004a34:	4f54310a 	.word	0x4f54310a

08004a38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	333c      	adds	r3, #60	; 0x3c
 8004a50:	3304      	adds	r3, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a15      	ldr	r2, [pc, #84]	; (8004ac0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d90e      	bls.n	8004a8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d009      	beq.n	8004a8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	461a      	mov	r2, r3
 8004a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f009 fcc5 	bl	800e41c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d90c      	bls.n	8004ab4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d108      	bne.n	8004ab4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004aac:	461a      	mov	r2, r3
 8004aae:	2101      	movs	r1, #1
 8004ab0:	f002 fef6 	bl	80078a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	4f54300a 	.word	0x4f54300a

08004ac4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d107      	bne.n	8004af2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ae2:	883b      	ldrh	r3, [r7, #0]
 8004ae4:	0419      	lsls	r1, r3, #16
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28
 8004af0:	e028      	b.n	8004b44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4413      	add	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	e00d      	b.n	8004b22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	3340      	adds	r3, #64	; 0x40
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4413      	add	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
 8004b22:	7bfa      	ldrb	r2, [r7, #15]
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3ec      	bcc.n	8004b06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b2c:	883b      	ldrh	r3, [r7, #0]
 8004b2e:	0418      	lsls	r0, r3, #16
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	4302      	orrs	r2, r0
 8004b3c:	3340      	adds	r3, #64	; 0x40
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	887a      	ldrh	r2, [r7, #2]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e267      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d075      	beq.n	8004c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004baa:	4b88      	ldr	r3, [pc, #544]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d00c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb6:	4b85      	ldr	r3, [pc, #532]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d112      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc2:	4b82      	ldr	r3, [pc, #520]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bce:	d10b      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	4b7e      	ldr	r3, [pc, #504]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d05b      	beq.n	8004c94 <HAL_RCC_OscConfig+0x108>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d157      	bne.n	8004c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e242      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_OscConfig+0x74>
 8004bf2:	4b76      	ldr	r3, [pc, #472]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a75      	ldr	r2, [pc, #468]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e01d      	b.n	8004c3c <HAL_RCC_OscConfig+0xb0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x98>
 8004c0a:	4b70      	ldr	r3, [pc, #448]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6f      	ldr	r2, [pc, #444]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	4b6d      	ldr	r3, [pc, #436]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a6c      	ldr	r2, [pc, #432]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e00b      	b.n	8004c3c <HAL_RCC_OscConfig+0xb0>
 8004c24:	4b69      	ldr	r3, [pc, #420]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a68      	ldr	r2, [pc, #416]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	4b66      	ldr	r3, [pc, #408]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a65      	ldr	r2, [pc, #404]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d013      	beq.n	8004c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fd faca 	bl	80021dc <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7fd fac6 	bl	80021dc <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e207      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	4b5b      	ldr	r3, [pc, #364]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0xc0>
 8004c6a:	e014      	b.n	8004c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fd fab6 	bl	80021dc <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c74:	f7fd fab2 	bl	80021dc <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b64      	cmp	r3, #100	; 0x64
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e1f3      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	4b51      	ldr	r3, [pc, #324]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0xe8>
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d063      	beq.n	8004d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ca2:	4b4a      	ldr	r3, [pc, #296]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cae:	4b47      	ldr	r3, [pc, #284]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d11c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cba:	4b44      	ldr	r3, [pc, #272]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d116      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc6:	4b41      	ldr	r3, [pc, #260]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_RCC_OscConfig+0x152>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e1c7      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cde:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4937      	ldr	r1, [pc, #220]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf2:	e03a      	b.n	8004d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d020      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cfc:	4b34      	ldr	r3, [pc, #208]	; (8004dd0 <HAL_RCC_OscConfig+0x244>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fd fa6b 	bl	80021dc <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d0a:	f7fd fa67 	bl	80021dc <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e1a8      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d28:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	4925      	ldr	r1, [pc, #148]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]
 8004d3c:	e015      	b.n	8004d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3e:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <HAL_RCC_OscConfig+0x244>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fd fa4a 	bl	80021dc <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d4c:	f7fd fa46 	bl	80021dc <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e187      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d036      	beq.n	8004de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d016      	beq.n	8004dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <HAL_RCC_OscConfig+0x248>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d84:	f7fd fa2a 	bl	80021dc <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d8c:	f7fd fa26 	bl	80021dc <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e167      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_RCC_OscConfig+0x240>)
 8004da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x200>
 8004daa:	e01b      	b.n	8004de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_OscConfig+0x248>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fd fa13 	bl	80021dc <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db8:	e00e      	b.n	8004dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dba:	f7fd fa0f 	bl	80021dc <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d907      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e150      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	42470000 	.word	0x42470000
 8004dd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	4b88      	ldr	r3, [pc, #544]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ea      	bne.n	8004dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8097 	beq.w	8004f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df6:	4b81      	ldr	r3, [pc, #516]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	4b7d      	ldr	r3, [pc, #500]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	4a7c      	ldr	r2, [pc, #496]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e10:	6413      	str	r3, [r2, #64]	; 0x40
 8004e12:	4b7a      	ldr	r3, [pc, #488]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e22:	4b77      	ldr	r3, [pc, #476]	; (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d118      	bne.n	8004e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2e:	4b74      	ldr	r3, [pc, #464]	; (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a73      	ldr	r2, [pc, #460]	; (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3a:	f7fd f9cf 	bl	80021dc <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e42:	f7fd f9cb 	bl	80021dc <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e10c      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e54:	4b6a      	ldr	r3, [pc, #424]	; (8005000 <HAL_RCC_OscConfig+0x474>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d106      	bne.n	8004e76 <HAL_RCC_OscConfig+0x2ea>
 8004e68:	4b64      	ldr	r3, [pc, #400]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	4a63      	ldr	r2, [pc, #396]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	6713      	str	r3, [r2, #112]	; 0x70
 8004e74:	e01c      	b.n	8004eb0 <HAL_RCC_OscConfig+0x324>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCC_OscConfig+0x30c>
 8004e7e:	4b5f      	ldr	r3, [pc, #380]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a5e      	ldr	r2, [pc, #376]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e84:	f043 0304 	orr.w	r3, r3, #4
 8004e88:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8a:	4b5c      	ldr	r3, [pc, #368]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	4a5b      	ldr	r2, [pc, #364]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6713      	str	r3, [r2, #112]	; 0x70
 8004e96:	e00b      	b.n	8004eb0 <HAL_RCC_OscConfig+0x324>
 8004e98:	4b58      	ldr	r3, [pc, #352]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	4a57      	ldr	r2, [pc, #348]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea4:	4b55      	ldr	r3, [pc, #340]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4a54      	ldr	r2, [pc, #336]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004eaa:	f023 0304 	bic.w	r3, r3, #4
 8004eae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d015      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fd f990 	bl	80021dc <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fd f98c 	bl	80021dc <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e0cb      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed6:	4b49      	ldr	r3, [pc, #292]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0ee      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x334>
 8004ee2:	e014      	b.n	8004f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee4:	f7fd f97a 	bl	80021dc <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f7fd f976 	bl	80021dc <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e0b5      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f02:	4b3e      	ldr	r3, [pc, #248]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1ee      	bne.n	8004eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d105      	bne.n	8004f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f14:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	4a38      	ldr	r2, [pc, #224]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a1 	beq.w	800506c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f2a:	4b34      	ldr	r3, [pc, #208]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d05c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d141      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <HAL_RCC_OscConfig+0x478>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fd f94a 	bl	80021dc <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fd f946 	bl	80021dc <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e087      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69da      	ldr	r2, [r3, #28]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	019b      	lsls	r3, r3, #6
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	3b01      	subs	r3, #1
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	491b      	ldr	r1, [pc, #108]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <HAL_RCC_OscConfig+0x478>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fd f91f 	bl	80021dc <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fd f91b 	bl	80021dc <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e05c      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x416>
 8004fc0:	e054      	b.n	800506c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <HAL_RCC_OscConfig+0x478>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fd f908 	bl	80021dc <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fd f904 	bl	80021dc <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e045      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe2:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <HAL_RCC_OscConfig+0x470>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x444>
 8004fee:	e03d      	b.n	800506c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e038      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40007000 	.word	0x40007000
 8005004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005008:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <HAL_RCC_OscConfig+0x4ec>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d028      	beq.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d121      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d11a      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005038:	4013      	ands	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800503e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005040:	4293      	cmp	r3, r2
 8005042:	d111      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	3b01      	subs	r3, #1
 8005052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800

0800507c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0cc      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005090:	4b68      	ldr	r3, [pc, #416]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d90c      	bls.n	80050b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509e:	4b65      	ldr	r3, [pc, #404]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a6:	4b63      	ldr	r3, [pc, #396]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d001      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0b8      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d020      	beq.n	8005106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d0:	4b59      	ldr	r3, [pc, #356]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a58      	ldr	r2, [pc, #352]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e8:	4b53      	ldr	r3, [pc, #332]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4a52      	ldr	r2, [pc, #328]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f4:	4b50      	ldr	r3, [pc, #320]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	494d      	ldr	r1, [pc, #308]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d044      	beq.n	800519c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	4b47      	ldr	r3, [pc, #284]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d119      	bne.n	800515a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e07f      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d003      	beq.n	800513a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005136:	2b03      	cmp	r3, #3
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513a:	4b3f      	ldr	r3, [pc, #252]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e06f      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514a:	4b3b      	ldr	r3, [pc, #236]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e067      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515a:	4b37      	ldr	r3, [pc, #220]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f023 0203 	bic.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4934      	ldr	r1, [pc, #208]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800516c:	f7fd f836 	bl	80021dc <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	e00a      	b.n	800518a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005174:	f7fd f832 	bl	80021dc <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e04f      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518a:	4b2b      	ldr	r3, [pc, #172]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 020c 	and.w	r2, r3, #12
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	429a      	cmp	r2, r3
 800519a:	d1eb      	bne.n	8005174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800519c:	4b25      	ldr	r3, [pc, #148]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d20c      	bcs.n	80051c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b22      	ldr	r3, [pc, #136]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b2:	4b20      	ldr	r3, [pc, #128]	; (8005234 <HAL_RCC_ClockConfig+0x1b8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d001      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e032      	b.n	800522a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4916      	ldr	r1, [pc, #88]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	490e      	ldr	r1, [pc, #56]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005202:	f000 f821 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8005206:	4602      	mov	r2, r0
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	490a      	ldr	r1, [pc, #40]	; (800523c <HAL_RCC_ClockConfig+0x1c0>)
 8005214:	5ccb      	ldrb	r3, [r1, r3]
 8005216:	fa22 f303 	lsr.w	r3, r2, r3
 800521a:	4a09      	ldr	r2, [pc, #36]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fc ff96 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40023c00 	.word	0x40023c00
 8005238:	40023800 	.word	0x40023800
 800523c:	08010d1c 	.word	0x08010d1c
 8005240:	2000000c 	.word	0x2000000c
 8005244:	20000010 	.word	0x20000010

08005248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800524c:	b090      	sub	sp, #64	; 0x40
 800524e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	637b      	str	r3, [r7, #52]	; 0x34
 8005254:	2300      	movs	r3, #0
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005258:	2300      	movs	r3, #0
 800525a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005260:	4b59      	ldr	r3, [pc, #356]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	d00d      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x40>
 800526c:	2b08      	cmp	r3, #8
 800526e:	f200 80a1 	bhi.w	80053b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x34>
 8005276:	2b04      	cmp	r3, #4
 8005278:	d003      	beq.n	8005282 <HAL_RCC_GetSysClockFreq+0x3a>
 800527a:	e09b      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800527c:	4b53      	ldr	r3, [pc, #332]	; (80053cc <HAL_RCC_GetSysClockFreq+0x184>)
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005280:	e09b      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005282:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005284:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005286:	e098      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005288:	4b4f      	ldr	r3, [pc, #316]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005290:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005292:	4b4d      	ldr	r3, [pc, #308]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d028      	beq.n	80052f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529e:	4b4a      	ldr	r3, [pc, #296]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	099b      	lsrs	r3, r3, #6
 80052a4:	2200      	movs	r2, #0
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	627a      	str	r2, [r7, #36]	; 0x24
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052b0:	2100      	movs	r1, #0
 80052b2:	4b47      	ldr	r3, [pc, #284]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80052b4:	fb03 f201 	mul.w	r2, r3, r1
 80052b8:	2300      	movs	r3, #0
 80052ba:	fb00 f303 	mul.w	r3, r0, r3
 80052be:	4413      	add	r3, r2
 80052c0:	4a43      	ldr	r2, [pc, #268]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80052c2:	fba0 1202 	umull	r1, r2, r0, r2
 80052c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c8:	460a      	mov	r2, r1
 80052ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80052cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ce:	4413      	add	r3, r2
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d4:	2200      	movs	r2, #0
 80052d6:	61bb      	str	r3, [r7, #24]
 80052d8:	61fa      	str	r2, [r7, #28]
 80052da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052e2:	f7fb fc63 	bl	8000bac <__aeabi_uldivmod>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4613      	mov	r3, r2
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ee:	e053      	b.n	8005398 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f0:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	099b      	lsrs	r3, r3, #6
 80052f6:	2200      	movs	r2, #0
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	617a      	str	r2, [r7, #20]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005302:	f04f 0b00 	mov.w	fp, #0
 8005306:	4652      	mov	r2, sl
 8005308:	465b      	mov	r3, fp
 800530a:	f04f 0000 	mov.w	r0, #0
 800530e:	f04f 0100 	mov.w	r1, #0
 8005312:	0159      	lsls	r1, r3, #5
 8005314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005318:	0150      	lsls	r0, r2, #5
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	ebb2 080a 	subs.w	r8, r2, sl
 8005322:	eb63 090b 	sbc.w	r9, r3, fp
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005332:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005336:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800533a:	ebb2 0408 	subs.w	r4, r2, r8
 800533e:	eb63 0509 	sbc.w	r5, r3, r9
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	00eb      	lsls	r3, r5, #3
 800534c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005350:	00e2      	lsls	r2, r4, #3
 8005352:	4614      	mov	r4, r2
 8005354:	461d      	mov	r5, r3
 8005356:	eb14 030a 	adds.w	r3, r4, sl
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	eb45 030b 	adc.w	r3, r5, fp
 8005360:	607b      	str	r3, [r7, #4]
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800536e:	4629      	mov	r1, r5
 8005370:	028b      	lsls	r3, r1, #10
 8005372:	4621      	mov	r1, r4
 8005374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005378:	4621      	mov	r1, r4
 800537a:	028a      	lsls	r2, r1, #10
 800537c:	4610      	mov	r0, r2
 800537e:	4619      	mov	r1, r3
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	2200      	movs	r2, #0
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	60fa      	str	r2, [r7, #12]
 8005388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800538c:	f7fb fc0e 	bl	8000bac <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4613      	mov	r3, r2
 8005396:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	3301      	adds	r3, #1
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80053a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053b2:	e002      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCC_GetSysClockFreq+0x184>)
 80053b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3740      	adds	r7, #64	; 0x40
 80053c0:	46bd      	mov	sp, r7
 80053c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	017d7840 	.word	0x017d7840

080053d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	2000000c 	.word	0x2000000c

080053ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e041      	b.n	8005482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fc fd42 	bl	8001e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f000 fb42 	bl	8005ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d001      	beq.n	80054a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e03c      	b.n	800551e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1e      	ldr	r2, [pc, #120]	; (800552c <HAL_TIM_Base_Start+0xa0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d018      	beq.n	80054e8 <HAL_TIM_Base_Start+0x5c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054be:	d013      	beq.n	80054e8 <HAL_TIM_Base_Start+0x5c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1a      	ldr	r2, [pc, #104]	; (8005530 <HAL_TIM_Base_Start+0xa4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00e      	beq.n	80054e8 <HAL_TIM_Base_Start+0x5c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a19      	ldr	r2, [pc, #100]	; (8005534 <HAL_TIM_Base_Start+0xa8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d009      	beq.n	80054e8 <HAL_TIM_Base_Start+0x5c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a17      	ldr	r2, [pc, #92]	; (8005538 <HAL_TIM_Base_Start+0xac>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_TIM_Base_Start+0x5c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a16      	ldr	r2, [pc, #88]	; (800553c <HAL_TIM_Base_Start+0xb0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d111      	bne.n	800550c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b06      	cmp	r3, #6
 80054f8:	d010      	beq.n	800551c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0201 	orr.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550a:	e007      	b.n	800551c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40014000 	.word	0x40014000

08005540 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6a1a      	ldr	r2, [r3, #32]
 800554e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005552:	4013      	ands	r3, r2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10f      	bne.n	8005578 <HAL_TIM_Base_Stop+0x38>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6a1a      	ldr	r2, [r3, #32]
 800555e:	f240 4344 	movw	r3, #1092	; 0x444
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d107      	bne.n	8005578 <HAL_TIM_Base_Stop+0x38>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0201 	bic.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e041      	b.n	8005624 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f839 	bl	800562c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f000 fa71 	bl	8005ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <HAL_TIM_PWM_Start+0x24>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	bf14      	ite	ne
 800565c:	2301      	movne	r3, #1
 800565e:	2300      	moveq	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	e022      	b.n	80056aa <HAL_TIM_PWM_Start+0x6a>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b04      	cmp	r3, #4
 8005668:	d109      	bne.n	800567e <HAL_TIM_PWM_Start+0x3e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	bf14      	ite	ne
 8005676:	2301      	movne	r3, #1
 8005678:	2300      	moveq	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	e015      	b.n	80056aa <HAL_TIM_PWM_Start+0x6a>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b08      	cmp	r3, #8
 8005682:	d109      	bne.n	8005698 <HAL_TIM_PWM_Start+0x58>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	e008      	b.n	80056aa <HAL_TIM_PWM_Start+0x6a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	bf14      	ite	ne
 80056a4:	2301      	movne	r3, #1
 80056a6:	2300      	moveq	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e068      	b.n	8005784 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <HAL_TIM_PWM_Start+0x82>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c0:	e013      	b.n	80056ea <HAL_TIM_PWM_Start+0xaa>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_PWM_Start+0x92>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056d0:	e00b      	b.n	80056ea <HAL_TIM_PWM_Start+0xaa>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_PWM_Start+0xa2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e0:	e003      	b.n	80056ea <HAL_TIM_PWM_Start+0xaa>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2201      	movs	r2, #1
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fc84 	bl	8006000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a23      	ldr	r2, [pc, #140]	; (800578c <HAL_TIM_PWM_Start+0x14c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d107      	bne.n	8005712 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1d      	ldr	r2, [pc, #116]	; (800578c <HAL_TIM_PWM_Start+0x14c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d018      	beq.n	800574e <HAL_TIM_PWM_Start+0x10e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d013      	beq.n	800574e <HAL_TIM_PWM_Start+0x10e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a19      	ldr	r2, [pc, #100]	; (8005790 <HAL_TIM_PWM_Start+0x150>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00e      	beq.n	800574e <HAL_TIM_PWM_Start+0x10e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a17      	ldr	r2, [pc, #92]	; (8005794 <HAL_TIM_PWM_Start+0x154>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_TIM_PWM_Start+0x10e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a16      	ldr	r2, [pc, #88]	; (8005798 <HAL_TIM_PWM_Start+0x158>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIM_PWM_Start+0x10e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a14      	ldr	r2, [pc, #80]	; (800579c <HAL_TIM_PWM_Start+0x15c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d111      	bne.n	8005772 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b06      	cmp	r3, #6
 800575e:	d010      	beq.n	8005782 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005770:	e007      	b.n	8005782 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40010000 	.word	0x40010000
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40000c00 	.word	0x40000c00
 800579c:	40014000 	.word	0x40014000

080057a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e0ae      	b.n	800591c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b0c      	cmp	r3, #12
 80057ca:	f200 809f 	bhi.w	800590c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057ce:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	08005809 	.word	0x08005809
 80057d8:	0800590d 	.word	0x0800590d
 80057dc:	0800590d 	.word	0x0800590d
 80057e0:	0800590d 	.word	0x0800590d
 80057e4:	08005849 	.word	0x08005849
 80057e8:	0800590d 	.word	0x0800590d
 80057ec:	0800590d 	.word	0x0800590d
 80057f0:	0800590d 	.word	0x0800590d
 80057f4:	0800588b 	.word	0x0800588b
 80057f8:	0800590d 	.word	0x0800590d
 80057fc:	0800590d 	.word	0x0800590d
 8005800:	0800590d 	.word	0x0800590d
 8005804:	080058cb 	.word	0x080058cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f9d0 	bl	8005bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0208 	orr.w	r2, r2, #8
 8005822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0204 	bic.w	r2, r2, #4
 8005832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6999      	ldr	r1, [r3, #24]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	619a      	str	r2, [r3, #24]
      break;
 8005846:	e064      	b.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fa16 	bl	8005c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6999      	ldr	r1, [r3, #24]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]
      break;
 8005888:	e043      	b.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fa61 	bl	8005d58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0208 	orr.w	r2, r2, #8
 80058a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0204 	bic.w	r2, r2, #4
 80058b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69d9      	ldr	r1, [r3, #28]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	61da      	str	r2, [r3, #28]
      break;
 80058c8:	e023      	b.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 faab 	bl	8005e2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69d9      	ldr	r1, [r3, #28]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	021a      	lsls	r2, r3, #8
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	61da      	str	r2, [r3, #28]
      break;
 800590a:	e002      	b.n	8005912 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	75fb      	strb	r3, [r7, #23]
      break;
 8005910:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800591a:	7dfb      	ldrb	r3, [r7, #23]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_TIM_ConfigClockSource+0x1c>
 800593c:	2302      	movs	r3, #2
 800593e:	e0b4      	b.n	8005aaa <HAL_TIM_ConfigClockSource+0x186>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800595e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005978:	d03e      	beq.n	80059f8 <HAL_TIM_ConfigClockSource+0xd4>
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597e:	f200 8087 	bhi.w	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 8005982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005986:	f000 8086 	beq.w	8005a96 <HAL_TIM_ConfigClockSource+0x172>
 800598a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598e:	d87f      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 8005990:	2b70      	cmp	r3, #112	; 0x70
 8005992:	d01a      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0xa6>
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d87b      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d050      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x11a>
 800599c:	2b60      	cmp	r3, #96	; 0x60
 800599e:	d877      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059a0:	2b50      	cmp	r3, #80	; 0x50
 80059a2:	d03c      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0xfa>
 80059a4:	2b50      	cmp	r3, #80	; 0x50
 80059a6:	d873      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d058      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x13a>
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d86f      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b30      	cmp	r3, #48	; 0x30
 80059b2:	d064      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x15a>
 80059b4:	2b30      	cmp	r3, #48	; 0x30
 80059b6:	d86b      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d060      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x15a>
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d867      	bhi.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d05c      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x15a>
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d05a      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x15a>
 80059c8:	e062      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6899      	ldr	r1, [r3, #8]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f000 faf1 	bl	8005fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	609a      	str	r2, [r3, #8]
      break;
 80059f6:	e04f      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6899      	ldr	r1, [r3, #8]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f000 fada 	bl	8005fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a1a:	609a      	str	r2, [r3, #8]
      break;
 8005a1c:	e03c      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 fa4e 	bl	8005ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2150      	movs	r1, #80	; 0x50
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 faa7 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005a3c:	e02c      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6859      	ldr	r1, [r3, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f000 fa6d 	bl	8005f2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2160      	movs	r1, #96	; 0x60
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fa97 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005a5c:	e01c      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6859      	ldr	r1, [r3, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f000 fa2e 	bl	8005ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2140      	movs	r1, #64	; 0x40
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fa87 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005a7c:	e00c      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f000 fa7e 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005a8e:	e003      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
      break;
 8005a94:	e000      	b.n	8005a98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a34      	ldr	r2, [pc, #208]	; (8005b98 <TIM_Base_SetConfig+0xe4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00f      	beq.n	8005aec <TIM_Base_SetConfig+0x38>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d00b      	beq.n	8005aec <TIM_Base_SetConfig+0x38>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a31      	ldr	r2, [pc, #196]	; (8005b9c <TIM_Base_SetConfig+0xe8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_Base_SetConfig+0x38>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a30      	ldr	r2, [pc, #192]	; (8005ba0 <TIM_Base_SetConfig+0xec>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_Base_SetConfig+0x38>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a2f      	ldr	r2, [pc, #188]	; (8005ba4 <TIM_Base_SetConfig+0xf0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d108      	bne.n	8005afe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a25      	ldr	r2, [pc, #148]	; (8005b98 <TIM_Base_SetConfig+0xe4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01b      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d017      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <TIM_Base_SetConfig+0xe8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <TIM_Base_SetConfig+0xec>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00f      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <TIM_Base_SetConfig+0xf0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	; (8005ba8 <TIM_Base_SetConfig+0xf4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d007      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <TIM_Base_SetConfig+0xf8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_Base_SetConfig+0x8a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <TIM_Base_SetConfig+0xfc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d108      	bne.n	8005b50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a08      	ldr	r2, [pc, #32]	; (8005b98 <TIM_Base_SetConfig+0xe4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d103      	bne.n	8005b84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	615a      	str	r2, [r3, #20]
}
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800
 8005ba4:	40000c00 	.word	0x40000c00
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800

08005bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f023 0201 	bic.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f023 0302 	bic.w	r3, r3, #2
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <TIM_OC1_SetConfig+0xc8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10c      	bne.n	8005c2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 0308 	bic.w	r3, r3, #8
 8005c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 0304 	bic.w	r3, r3, #4
 8005c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <TIM_OC1_SetConfig+0xc8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d111      	bne.n	8005c56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	621a      	str	r2, [r3, #32]
}
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40010000 	.word	0x40010000

08005c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0210 	bic.w	r2, r3, #16
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f023 0320 	bic.w	r3, r3, #32
 8005cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a1e      	ldr	r2, [pc, #120]	; (8005d54 <TIM_OC2_SetConfig+0xd4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d10d      	bne.n	8005cfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a15      	ldr	r2, [pc, #84]	; (8005d54 <TIM_OC2_SetConfig+0xd4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d113      	bne.n	8005d2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40010000 	.word	0x40010000

08005d58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1d      	ldr	r2, [pc, #116]	; (8005e28 <TIM_OC3_SetConfig+0xd0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d10d      	bne.n	8005dd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <TIM_OC3_SetConfig+0xd0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d113      	bne.n	8005e02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	621a      	str	r2, [r3, #32]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40010000 	.word	0x40010000

08005e2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	031b      	lsls	r3, r3, #12
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a10      	ldr	r2, [pc, #64]	; (8005ec8 <TIM_OC4_SetConfig+0x9c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d109      	bne.n	8005ea0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000

08005ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 030a 	bic.w	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b087      	sub	sp, #28
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f023 0210 	bic.w	r2, r3, #16
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f043 0307 	orr.w	r3, r3, #7
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	021a      	lsls	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	2201      	movs	r2, #1
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	43db      	mvns	r3, r3
 8006022:	401a      	ands	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	431a      	orrs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e050      	b.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b0:	d013      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a16      	ldr	r2, [pc, #88]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a15      	ldr	r2, [pc, #84]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a13      	ldr	r2, [pc, #76]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10c      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40014000 	.word	0x40014000

08006128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006128:	b084      	sub	sp, #16
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	f107 001c 	add.w	r0, r7, #28
 8006136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	2b01      	cmp	r3, #1
 800613e:	d122      	bne.n	8006186 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 fbee 	bl	800795c <USB_CoreReset>
 8006180:	4603      	mov	r3, r0
 8006182:	73fb      	strb	r3, [r7, #15]
 8006184:	e01a      	b.n	80061bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 fbe2 	bl	800795c <USB_CoreReset>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800619c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
 80061ae:	e005      	b.n	80061bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d10b      	bne.n	80061da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f043 0206 	orr.w	r2, r3, #6
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061da:	7bfb      	ldrb	r3, [r7, #15]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061e6:	b004      	add	sp, #16
 80061e8:	4770      	bx	lr
	...

080061ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d165      	bne.n	80062cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4a41      	ldr	r2, [pc, #260]	; (8006308 <USB_SetTurnaroundTime+0x11c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d906      	bls.n	8006216 <USB_SetTurnaroundTime+0x2a>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4a40      	ldr	r2, [pc, #256]	; (800630c <USB_SetTurnaroundTime+0x120>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d202      	bcs.n	8006216 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006210:	230f      	movs	r3, #15
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	e062      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4a3c      	ldr	r2, [pc, #240]	; (800630c <USB_SetTurnaroundTime+0x120>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d306      	bcc.n	800622c <USB_SetTurnaroundTime+0x40>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4a3b      	ldr	r2, [pc, #236]	; (8006310 <USB_SetTurnaroundTime+0x124>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d202      	bcs.n	800622c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006226:	230e      	movs	r3, #14
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e057      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4a38      	ldr	r2, [pc, #224]	; (8006310 <USB_SetTurnaroundTime+0x124>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d306      	bcc.n	8006242 <USB_SetTurnaroundTime+0x56>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4a37      	ldr	r2, [pc, #220]	; (8006314 <USB_SetTurnaroundTime+0x128>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d202      	bcs.n	8006242 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800623c:	230d      	movs	r3, #13
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e04c      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4a33      	ldr	r2, [pc, #204]	; (8006314 <USB_SetTurnaroundTime+0x128>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d306      	bcc.n	8006258 <USB_SetTurnaroundTime+0x6c>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4a32      	ldr	r2, [pc, #200]	; (8006318 <USB_SetTurnaroundTime+0x12c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d802      	bhi.n	8006258 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006252:	230c      	movs	r3, #12
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e041      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4a2f      	ldr	r2, [pc, #188]	; (8006318 <USB_SetTurnaroundTime+0x12c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d906      	bls.n	800626e <USB_SetTurnaroundTime+0x82>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4a2e      	ldr	r2, [pc, #184]	; (800631c <USB_SetTurnaroundTime+0x130>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d802      	bhi.n	800626e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006268:	230b      	movs	r3, #11
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e036      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a2a      	ldr	r2, [pc, #168]	; (800631c <USB_SetTurnaroundTime+0x130>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d906      	bls.n	8006284 <USB_SetTurnaroundTime+0x98>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4a29      	ldr	r2, [pc, #164]	; (8006320 <USB_SetTurnaroundTime+0x134>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d802      	bhi.n	8006284 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800627e:	230a      	movs	r3, #10
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	e02b      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a26      	ldr	r2, [pc, #152]	; (8006320 <USB_SetTurnaroundTime+0x134>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d906      	bls.n	800629a <USB_SetTurnaroundTime+0xae>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4a25      	ldr	r2, [pc, #148]	; (8006324 <USB_SetTurnaroundTime+0x138>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d202      	bcs.n	800629a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006294:	2309      	movs	r3, #9
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e020      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a21      	ldr	r2, [pc, #132]	; (8006324 <USB_SetTurnaroundTime+0x138>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d306      	bcc.n	80062b0 <USB_SetTurnaroundTime+0xc4>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a20      	ldr	r2, [pc, #128]	; (8006328 <USB_SetTurnaroundTime+0x13c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d802      	bhi.n	80062b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062aa:	2308      	movs	r3, #8
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e015      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a1d      	ldr	r2, [pc, #116]	; (8006328 <USB_SetTurnaroundTime+0x13c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d906      	bls.n	80062c6 <USB_SetTurnaroundTime+0xda>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4a1c      	ldr	r2, [pc, #112]	; (800632c <USB_SetTurnaroundTime+0x140>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d202      	bcs.n	80062c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062c0:	2307      	movs	r3, #7
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e00a      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062c6:	2306      	movs	r3, #6
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e007      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062d2:	2309      	movs	r3, #9
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	e001      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062d8:	2309      	movs	r3, #9
 80062da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	00d8acbf 	.word	0x00d8acbf
 800630c:	00e4e1c0 	.word	0x00e4e1c0
 8006310:	00f42400 	.word	0x00f42400
 8006314:	01067380 	.word	0x01067380
 8006318:	011a499f 	.word	0x011a499f
 800631c:	01312cff 	.word	0x01312cff
 8006320:	014ca43f 	.word	0x014ca43f
 8006324:	016e3600 	.word	0x016e3600
 8006328:	01a6ab1f 	.word	0x01a6ab1f
 800632c:	01e84800 	.word	0x01e84800

08006330 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f043 0201 	orr.w	r2, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f023 0201 	bic.w	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d115      	bne.n	80063c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063a2:	2001      	movs	r0, #1
 80063a4:	f7fb ff26 	bl	80021f4 <HAL_Delay>
      ms++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fa45 	bl	800783e <USB_GetMode>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d01e      	beq.n	80063f8 <USB_SetCurrentMode+0x84>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b31      	cmp	r3, #49	; 0x31
 80063be:	d9f0      	bls.n	80063a2 <USB_SetCurrentMode+0x2e>
 80063c0:	e01a      	b.n	80063f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d115      	bne.n	80063f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063d4:	2001      	movs	r0, #1
 80063d6:	f7fb ff0d 	bl	80021f4 <HAL_Delay>
      ms++;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fa2c 	bl	800783e <USB_GetMode>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <USB_SetCurrentMode+0x84>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b31      	cmp	r3, #49	; 0x31
 80063f0:	d9f0      	bls.n	80063d4 <USB_SetCurrentMode+0x60>
 80063f2:	e001      	b.n	80063f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e005      	b.n	8006404 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b32      	cmp	r3, #50	; 0x32
 80063fc:	d101      	bne.n	8006402 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800640c:	b084      	sub	sp, #16
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800641a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e009      	b.n	8006440 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3340      	adds	r3, #64	; 0x40
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	2200      	movs	r2, #0
 8006438:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3301      	adds	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b0e      	cmp	r3, #14
 8006444:	d9f2      	bls.n	800642c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d11c      	bne.n	8006486 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800645a:	f043 0302 	orr.w	r3, r3, #2
 800645e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
 8006484:	e00b      	b.n	800649e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064a4:	461a      	mov	r2, r3
 80064a6:	2300      	movs	r3, #0
 80064a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b0:	4619      	mov	r1, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b8:	461a      	mov	r2, r3
 80064ba:	680b      	ldr	r3, [r1, #0]
 80064bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d10c      	bne.n	80064de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d104      	bne.n	80064d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064ca:	2100      	movs	r1, #0
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f965 	bl	800679c <USB_SetDevSpeed>
 80064d2:	e008      	b.n	80064e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064d4:	2101      	movs	r1, #1
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f960 	bl	800679c <USB_SetDevSpeed>
 80064dc:	e003      	b.n	80064e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064de:	2103      	movs	r1, #3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f95b 	bl	800679c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064e6:	2110      	movs	r1, #16
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f8f3 	bl	80066d4 <USB_FlushTxFifo>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f91f 	bl	800673c <USB_FlushRxFifo>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650e:	461a      	mov	r2, r3
 8006510:	2300      	movs	r3, #0
 8006512:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006526:	461a      	mov	r2, r3
 8006528:	2300      	movs	r3, #0
 800652a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	e043      	b.n	80065ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006548:	d118      	bne.n	800657c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	461a      	mov	r2, r3
 800655e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	e013      	b.n	800658e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006572:	461a      	mov	r2, r3
 8006574:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	e008      	b.n	800658e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006588:	461a      	mov	r2, r3
 800658a:	2300      	movs	r3, #0
 800658c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659a:	461a      	mov	r2, r3
 800659c:	2300      	movs	r3, #0
 800659e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	461a      	mov	r2, r3
 80065ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	3301      	adds	r3, #1
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d3b7      	bcc.n	8006532 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	e043      	b.n	8006650 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065de:	d118      	bne.n	8006612 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10a      	bne.n	80065fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	461a      	mov	r2, r3
 80065f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	e013      	b.n	8006624 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	461a      	mov	r2, r3
 800660a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	e008      	b.n	8006624 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661e:	461a      	mov	r2, r3
 8006620:	2300      	movs	r3, #0
 8006622:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006630:	461a      	mov	r2, r3
 8006632:	2300      	movs	r3, #0
 8006634:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	461a      	mov	r2, r3
 8006644:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006648:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3301      	adds	r3, #1
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	429a      	cmp	r2, r3
 8006656:	d3b7      	bcc.n	80065c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800666a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006678:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f043 0210 	orr.w	r2, r3, #16
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <USB_DevInit+0x2c4>)
 8006692:	4313      	orrs	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f043 0208 	orr.w	r2, r3, #8
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d107      	bne.n	80066c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066b8:	f043 0304 	orr.w	r3, r3, #4
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066cc:	b004      	add	sp, #16
 80066ce:	4770      	bx	lr
 80066d0:	803c3800 	.word	0x803c3800

080066d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3301      	adds	r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a13      	ldr	r2, [pc, #76]	; (8006738 <USB_FlushTxFifo+0x64>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d901      	bls.n	80066f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e01b      	b.n	800672c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	daf2      	bge.n	80066e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	019b      	lsls	r3, r3, #6
 8006704:	f043 0220 	orr.w	r2, r3, #32
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3301      	adds	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4a08      	ldr	r2, [pc, #32]	; (8006738 <USB_FlushTxFifo+0x64>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e006      	b.n	800672c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b20      	cmp	r3, #32
 8006728:	d0f0      	beq.n	800670c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	00030d40 	.word	0x00030d40

0800673c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a11      	ldr	r2, [pc, #68]	; (8006798 <USB_FlushRxFifo+0x5c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e018      	b.n	800678c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	daf2      	bge.n	8006748 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2210      	movs	r2, #16
 800676a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4a08      	ldr	r2, [pc, #32]	; (8006798 <USB_FlushRxFifo+0x5c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e006      	b.n	800678c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b10      	cmp	r3, #16
 8006788:	d0f0      	beq.n	800676c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	00030d40 	.word	0x00030d40

0800679c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	68f9      	ldr	r1, [r7, #12]
 80067b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067bc:	4313      	orrs	r3, r2
 80067be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b087      	sub	sp, #28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0306 	and.w	r3, r3, #6
 80067e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
 80067f2:	e00a      	b.n	800680a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d002      	beq.n	8006800 <USB_GetDevSpeed+0x32>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b06      	cmp	r3, #6
 80067fe:	d102      	bne.n	8006806 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006800:	2302      	movs	r3, #2
 8006802:	75fb      	strb	r3, [r7, #23]
 8006804:	e001      	b.n	800680a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006806:	230f      	movs	r3, #15
 8006808:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d13a      	bne.n	80068aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	2101      	movs	r1, #1
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	b29b      	uxth	r3, r3
 800684c:	68f9      	ldr	r1, [r7, #12]
 800684e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006852:	4313      	orrs	r3, r2
 8006854:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d155      	bne.n	8006918 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	791b      	ldrb	r3, [r3, #4]
 8006886:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006888:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	059b      	lsls	r3, r3, #22
 800688e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006890:	4313      	orrs	r3, r2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e036      	b.n	8006918 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b0:	69da      	ldr	r2, [r3, #28]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	2101      	movs	r1, #1
 80068bc:	fa01 f303 	lsl.w	r3, r1, r3
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c8:	4313      	orrs	r3, r2
 80068ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11a      	bne.n	8006918 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	791b      	ldrb	r3, [r3, #4]
 80068fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068fe:	430b      	orrs	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006916:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d161      	bne.n	8006a08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800695a:	d11f      	bne.n	800699c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800697a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800699a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	2101      	movs	r1, #1
 80069ae:	fa01 f303 	lsl.w	r3, r1, r3
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	43db      	mvns	r3, r3
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069bc:	4013      	ands	r3, r2
 80069be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	2101      	movs	r1, #1
 80069d2:	fa01 f303 	lsl.w	r3, r1, r3
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	43db      	mvns	r3, r3
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e0:	4013      	ands	r3, r2
 80069e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	0159      	lsls	r1, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	440b      	add	r3, r1
 80069fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fe:	4619      	mov	r1, r3
 8006a00:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <USB_DeactivateEndpoint+0x1b0>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	600b      	str	r3, [r1, #0]
 8006a06:	e060      	b.n	8006aca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1e:	d11f      	bne.n	8006a60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	2101      	movs	r1, #1
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a80:	4013      	ands	r3, r2
 8006a82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	2101      	movs	r1, #1
 8006a96:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9a:	041b      	lsls	r3, r3, #16
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	0159      	lsls	r1, r3, #5
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	440b      	add	r3, r1
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <USB_DeactivateEndpoint+0x1b4>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	ec337800 	.word	0xec337800
 8006adc:	eff37800 	.word	0xeff37800

08006ae0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08a      	sub	sp, #40	; 0x28
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	f040 815c 	bne.w	8006dba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d132      	bne.n	8006b70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b68:	0cdb      	lsrs	r3, r3, #19
 8006b6a:	04db      	lsls	r3, r3, #19
 8006b6c:	6113      	str	r3, [r2, #16]
 8006b6e:	e074      	b.n	8006c5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8a:	0cdb      	lsrs	r3, r3, #19
 8006b8c:	04db      	lsls	r3, r3, #19
 8006b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006baa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	6999      	ldr	r1, [r3, #24]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	440b      	add	r3, r1
 8006bcc:	1e59      	subs	r1, r3, #1
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bd6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bd8:	4b9d      	ldr	r3, [pc, #628]	; (8006e50 <USB_EPStartXfer+0x370>)
 8006bda:	400b      	ands	r3, r1
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	0148      	lsls	r0, r1, #5
 8006be0:	69f9      	ldr	r1, [r7, #28]
 8006be2:	4401      	add	r1, r0
 8006be4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006be8:	4313      	orrs	r3, r2
 8006bea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c02:	69b9      	ldr	r1, [r7, #24]
 8006c04:	0148      	lsls	r0, r1, #5
 8006c06:	69f9      	ldr	r1, [r7, #28]
 8006c08:	4401      	add	r1, r0
 8006c0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	791b      	ldrb	r3, [r3, #4]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d11f      	bne.n	8006c5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d14b      	bne.n	8006cf8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d009      	beq.n	8006c7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	461a      	mov	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	791b      	ldrb	r3, [r3, #4]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d128      	bne.n	8006cd6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d110      	bne.n	8006cb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	e00f      	b.n	8006cd6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	e133      	b.n	8006f60 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	791b      	ldrb	r3, [r3, #4]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d015      	beq.n	8006d4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 811b 	beq.w	8006f60 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d40:	69f9      	ldr	r1, [r7, #28]
 8006d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d46:	4313      	orrs	r3, r2
 8006d48:	634b      	str	r3, [r1, #52]	; 0x34
 8006d4a:	e109      	b.n	8006f60 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d110      	bne.n	8006d7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	e00f      	b.n	8006d9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6919      	ldr	r1, [r3, #16]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	b298      	uxth	r0, r3
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	4603      	mov	r3, r0
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 fade 	bl	8007374 <USB_WritePacket>
 8006db8:	e0d2      	b.n	8006f60 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd4:	0cdb      	lsrs	r3, r3, #19
 8006dd6:	04db      	lsls	r3, r3, #19
 8006dd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006df8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d126      	bne.n	8006e54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1c:	69b9      	ldr	r1, [r7, #24]
 8006e1e:	0148      	lsls	r0, r1, #5
 8006e20:	69f9      	ldr	r1, [r7, #28]
 8006e22:	4401      	add	r1, r0
 8006e24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e4a:	6113      	str	r3, [r2, #16]
 8006e4c:	e03a      	b.n	8006ec4 <USB_EPStartXfer+0x3e4>
 8006e4e:	bf00      	nop
 8006e50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	699a      	ldr	r2, [r3, #24]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e68:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	8afa      	ldrh	r2, [r7, #22]
 8006e70:	fb03 f202 	mul.w	r2, r3, r2
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	691a      	ldr	r2, [r3, #16]
 8006e86:	8afb      	ldrh	r3, [r7, #22]
 8006e88:	04d9      	lsls	r1, r3, #19
 8006e8a:	4b38      	ldr	r3, [pc, #224]	; (8006f6c <USB_EPStartXfer+0x48c>)
 8006e8c:	400b      	ands	r3, r1
 8006e8e:	69b9      	ldr	r1, [r7, #24]
 8006e90:	0148      	lsls	r0, r1, #5
 8006e92:	69f9      	ldr	r1, [r7, #28]
 8006e94:	4401      	add	r1, r0
 8006e96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb4:	69b9      	ldr	r1, [r7, #24]
 8006eb6:	0148      	lsls	r0, r1, #5
 8006eb8:	69f9      	ldr	r1, [r7, #28]
 8006eba:	4401      	add	r1, r0
 8006ebc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d10d      	bne.n	8006ee6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	6919      	ldr	r1, [r3, #16]
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee2:	460a      	mov	r2, r1
 8006ee4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	791b      	ldrb	r3, [r3, #4]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d128      	bne.n	8006f40 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d110      	bne.n	8006f20 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	e00f      	b.n	8006f40 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3720      	adds	r7, #32
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	1ff80000 	.word	0x1ff80000

08006f70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	f040 80ce 	bne.w	800712e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d132      	bne.n	8007000 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	0151      	lsls	r1, r2, #5
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	440a      	add	r2, r1
 8006fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff8:	0cdb      	lsrs	r3, r3, #19
 8006ffa:	04db      	lsls	r3, r3, #19
 8006ffc:	6113      	str	r3, [r2, #16]
 8006ffe:	e04e      	b.n	800709e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	0151      	lsls	r1, r2, #5
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	440a      	add	r2, r1
 8007016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701a:	0cdb      	lsrs	r3, r3, #19
 800701c:	04db      	lsls	r3, r3, #19
 800701e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	0151      	lsls	r1, r2, #5
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	440a      	add	r2, r1
 8007036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800703e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007042:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	429a      	cmp	r2, r3
 800704e:	d903      	bls.n	8007058 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800708e:	6939      	ldr	r1, [r7, #16]
 8007090:	0148      	lsls	r0, r1, #5
 8007092:	6979      	ldr	r1, [r7, #20]
 8007094:	4401      	add	r1, r0
 8007096:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800709a:	4313      	orrs	r3, r2
 800709c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d11e      	bne.n	80070e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d009      	beq.n	80070c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b8:	461a      	mov	r2, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	e097      	b.n	8007212 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007100:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 8083 	beq.w	8007212 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	2101      	movs	r1, #1
 800711e:	fa01 f303 	lsl.w	r3, r1, r3
 8007122:	6979      	ldr	r1, [r7, #20]
 8007124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007128:	4313      	orrs	r3, r2
 800712a:	634b      	str	r3, [r1, #52]	; 0x34
 800712c:	e071      	b.n	8007212 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	0151      	lsls	r1, r2, #5
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	440a      	add	r2, r1
 8007144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007148:	0cdb      	lsrs	r3, r3, #19
 800714a:	04db      	lsls	r3, r3, #19
 800714c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	440a      	add	r2, r1
 8007164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007168:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800716c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007170:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c0:	6939      	ldr	r1, [r7, #16]
 80071c2:	0148      	lsls	r0, r1, #5
 80071c4:	6979      	ldr	r1, [r7, #20]
 80071c6:	4401      	add	r1, r0
 80071c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071cc:	4313      	orrs	r3, r2
 80071ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d10d      	bne.n	80071f2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6919      	ldr	r1, [r3, #16]
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	460a      	mov	r2, r1
 80071f0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007210:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d14a      	bne.n	80072d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007256:	f040 8086 	bne.w	8007366 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	7812      	ldrb	r2, [r2, #0]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	440a      	add	r2, r1
 8007274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007278:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800727c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	7812      	ldrb	r2, [r2, #0]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d902      	bls.n	80072b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
          break;
 80072b6:	e056      	b.n	8007366 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d0:	d0e7      	beq.n	80072a2 <USB_EPStopXfer+0x82>
 80072d2:	e048      	b.n	8007366 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ec:	d13b      	bne.n	8007366 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	7812      	ldrb	r2, [r2, #0]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007310:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	7812      	ldrb	r2, [r2, #0]
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	440a      	add	r2, r1
 800732c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007334:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3301      	adds	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007342:	4293      	cmp	r3, r2
 8007344:	d902      	bls.n	800734c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
          break;
 800734a:	e00c      	b.n	8007366 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007364:	d0e7      	beq.n	8007336 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
}
 8007368:	4618      	mov	r0, r3
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007374:	b480      	push	{r7}
 8007376:	b089      	sub	sp, #36	; 0x24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	4611      	mov	r1, r2
 8007380:	461a      	mov	r2, r3
 8007382:	460b      	mov	r3, r1
 8007384:	71fb      	strb	r3, [r7, #7]
 8007386:	4613      	mov	r3, r2
 8007388:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007392:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007396:	2b00      	cmp	r3, #0
 8007398:	d123      	bne.n	80073e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800739a:	88bb      	ldrh	r3, [r7, #4]
 800739c:	3303      	adds	r3, #3
 800739e:	089b      	lsrs	r3, r3, #2
 80073a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073a2:	2300      	movs	r3, #0
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e018      	b.n	80073da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	031a      	lsls	r2, r3, #12
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b4:	461a      	mov	r2, r3
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	3301      	adds	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	3301      	adds	r3, #1
 80073c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	3301      	adds	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	3301      	adds	r3, #1
 80073d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	3301      	adds	r3, #1
 80073d8:	61bb      	str	r3, [r7, #24]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d3e2      	bcc.n	80073a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3724      	adds	r7, #36	; 0x24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b08b      	sub	sp, #44	; 0x2c
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	089b      	lsrs	r3, r3, #2
 800740a:	b29b      	uxth	r3, r3
 800740c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007416:	2300      	movs	r3, #0
 8007418:	623b      	str	r3, [r7, #32]
 800741a:	e014      	b.n	8007446 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	601a      	str	r2, [r3, #0]
    pDest++;
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	3301      	adds	r3, #1
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	3301      	adds	r3, #1
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	3301      	adds	r3, #1
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	3301      	adds	r3, #1
 800743e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	3301      	adds	r3, #1
 8007444:	623b      	str	r3, [r7, #32]
 8007446:	6a3a      	ldr	r2, [r7, #32]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	429a      	cmp	r2, r3
 800744c:	d3e6      	bcc.n	800741c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800744e:	8bfb      	ldrh	r3, [r7, #30]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01e      	beq.n	8007492 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745e:	461a      	mov	r2, r3
 8007460:	f107 0310 	add.w	r3, r7, #16
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
 8007474:	b2da      	uxtb	r2, r3
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	701a      	strb	r2, [r3, #0]
      i++;
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	3301      	adds	r3, #1
 800747e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	3301      	adds	r3, #1
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007486:	8bfb      	ldrh	r3, [r7, #30]
 8007488:	3b01      	subs	r3, #1
 800748a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800748c:	8bfb      	ldrh	r3, [r7, #30]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1ea      	bne.n	8007468 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007494:	4618      	mov	r0, r3
 8007496:	372c      	adds	r7, #44	; 0x2c
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	785b      	ldrb	r3, [r3, #1]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d12c      	bne.n	8007516 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	db12      	blt.n	80074f4 <USB_EPSetStall+0x54>
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00f      	beq.n	80074f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	440a      	add	r2, r1
 800750a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007512:	6013      	str	r3, [r2, #0]
 8007514:	e02b      	b.n	800756e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	db12      	blt.n	800754e <USB_EPSetStall+0xae>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00f      	beq.n	800754e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	440a      	add	r2, r1
 8007544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007548:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800754c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	0151      	lsls	r1, r2, #5
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	440a      	add	r2, r1
 8007564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800756c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d128      	bne.n	80075ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	0151      	lsls	r1, r2, #5
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	440a      	add	r2, r1
 80075ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	791b      	ldrb	r3, [r3, #4]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d003      	beq.n	80075c8 <USB_EPClearStall+0x4c>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	791b      	ldrb	r3, [r3, #4]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d138      	bne.n	800763a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	e027      	b.n	800763a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	0151      	lsls	r1, r2, #5
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	440a      	add	r2, r1
 8007600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007604:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007608:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	791b      	ldrb	r3, [r3, #4]
 800760e:	2b03      	cmp	r3, #3
 8007610:	d003      	beq.n	800761a <USB_EPClearStall+0x9e>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	791b      	ldrb	r3, [r3, #4]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d10f      	bne.n	800763a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007638:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	460b      	mov	r3, r1
 8007652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007666:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800766a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800767c:	68f9      	ldr	r1, [r7, #12]
 800767e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007682:	4313      	orrs	r3, r2
 8007684:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c2:	f023 0302 	bic.w	r3, r3, #2
 80076c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b085      	sub	sp, #20
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076f0:	f023 0303 	bic.w	r3, r3, #3
 80076f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007704:	f043 0302 	orr.w	r3, r3, #2
 8007708:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007730:	68fb      	ldr	r3, [r7, #12]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4013      	ands	r3, r2
 8007760:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	0c1b      	lsrs	r3, r3, #16
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007772:	b480      	push	{r7}
 8007774:	b085      	sub	sp, #20
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	4013      	ands	r3, r2
 8007794:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	b29b      	uxth	r3, r3
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	4013      	ands	r3, r2
 80077d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077d4:	68bb      	ldr	r3, [r7, #8]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b087      	sub	sp, #28
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007804:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	f003 030f 	and.w	r3, r3, #15
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	fa22 f303 	lsr.w	r3, r2, r3
 8007812:	01db      	lsls	r3, r3, #7
 8007814:	b2db      	uxtb	r3, r3
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	4013      	ands	r3, r2
 800782e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007830:	68bb      	ldr	r3, [r7, #8]
}
 8007832:	4618      	mov	r0, r3
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f003 0301 	and.w	r3, r3, #1
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800785a:	b480      	push	{r7}
 800785c:	b085      	sub	sp, #20
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007874:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007878:	f023 0307 	bic.w	r3, r3, #7
 800787c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	460b      	mov	r3, r1
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	333c      	adds	r3, #60	; 0x3c
 80078b6:	3304      	adds	r3, #4
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	4a26      	ldr	r2, [pc, #152]	; (8007958 <USB_EP0_OutStart+0xb8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d90a      	bls.n	80078da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d4:	d101      	bne.n	80078da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e037      	b.n	800794a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e0:	461a      	mov	r2, r3
 80078e2:	2300      	movs	r3, #0
 80078e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007908:	f043 0318 	orr.w	r3, r3, #24
 800790c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007920:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007922:	7afb      	ldrb	r3, [r7, #11]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d10f      	bne.n	8007948 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007942:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007946:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	4f54300a 	.word	0x4f54300a

0800795c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4a13      	ldr	r2, [pc, #76]	; (80079c0 <USB_CoreReset+0x64>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d901      	bls.n	800797a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e01b      	b.n	80079b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	daf2      	bge.n	8007968 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f043 0201 	orr.w	r2, r3, #1
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3301      	adds	r3, #1
 8007996:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <USB_CoreReset+0x64>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d901      	bls.n	80079a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e006      	b.n	80079b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d0f0      	beq.n	8007992 <USB_CoreReset+0x36>

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	00030d40 	.word	0x00030d40

080079c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80079d4:	f006 ff9e 	bl	800e914 <USBD_static_malloc>
 80079d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32b0      	adds	r2, #176	; 0xb0
 80079ea:	2100      	movs	r1, #0
 80079ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80079f0:	2302      	movs	r3, #2
 80079f2:	e0d4      	b.n	8007b9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80079f4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80079f8:	2100      	movs	r1, #0
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f007 ffd0 	bl	800f9a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	32b0      	adds	r2, #176	; 0xb0
 8007a0a:	68f9      	ldr	r1, [r7, #12]
 8007a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	32b0      	adds	r2, #176	; 0xb0
 8007a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7c1b      	ldrb	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d138      	bne.n	8007a9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a2c:	4b5e      	ldr	r3, [pc, #376]	; (8007ba8 <USBD_CDC_Init+0x1e4>)
 8007a2e:	7819      	ldrb	r1, [r3, #0]
 8007a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a34:	2202      	movs	r2, #2
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f006 fe49 	bl	800e6ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a3c:	4b5a      	ldr	r3, [pc, #360]	; (8007ba8 <USBD_CDC_Init+0x1e4>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 020f 	and.w	r2, r3, #15
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	3324      	adds	r3, #36	; 0x24
 8007a52:	2201      	movs	r2, #1
 8007a54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a56:	4b55      	ldr	r3, [pc, #340]	; (8007bac <USBD_CDC_Init+0x1e8>)
 8007a58:	7819      	ldrb	r1, [r3, #0]
 8007a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a5e:	2202      	movs	r2, #2
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f006 fe34 	bl	800e6ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a66:	4b51      	ldr	r3, [pc, #324]	; (8007bac <USBD_CDC_Init+0x1e8>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f003 020f 	and.w	r2, r3, #15
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a7e:	2201      	movs	r2, #1
 8007a80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a82:	4b4b      	ldr	r3, [pc, #300]	; (8007bb0 <USBD_CDC_Init+0x1ec>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f003 020f 	and.w	r2, r3, #15
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	3326      	adds	r3, #38	; 0x26
 8007a98:	2210      	movs	r2, #16
 8007a9a:	801a      	strh	r2, [r3, #0]
 8007a9c:	e035      	b.n	8007b0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a9e:	4b42      	ldr	r3, [pc, #264]	; (8007ba8 <USBD_CDC_Init+0x1e4>)
 8007aa0:	7819      	ldrb	r1, [r3, #0]
 8007aa2:	2340      	movs	r3, #64	; 0x40
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f006 fe11 	bl	800e6ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007aac:	4b3e      	ldr	r3, [pc, #248]	; (8007ba8 <USBD_CDC_Init+0x1e4>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	f003 020f 	and.w	r2, r3, #15
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	3324      	adds	r3, #36	; 0x24
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ac6:	4b39      	ldr	r3, [pc, #228]	; (8007bac <USBD_CDC_Init+0x1e8>)
 8007ac8:	7819      	ldrb	r1, [r3, #0]
 8007aca:	2340      	movs	r3, #64	; 0x40
 8007acc:	2202      	movs	r2, #2
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f006 fdfd 	bl	800e6ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ad4:	4b35      	ldr	r3, [pc, #212]	; (8007bac <USBD_CDC_Init+0x1e8>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007aec:	2201      	movs	r2, #1
 8007aee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007af0:	4b2f      	ldr	r3, [pc, #188]	; (8007bb0 <USBD_CDC_Init+0x1ec>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	f003 020f 	and.w	r2, r3, #15
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	440b      	add	r3, r1
 8007b04:	3326      	adds	r3, #38	; 0x26
 8007b06:	2210      	movs	r2, #16
 8007b08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b0a:	4b29      	ldr	r3, [pc, #164]	; (8007bb0 <USBD_CDC_Init+0x1ec>)
 8007b0c:	7819      	ldrb	r1, [r3, #0]
 8007b0e:	2308      	movs	r3, #8
 8007b10:	2203      	movs	r2, #3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f006 fddb 	bl	800e6ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b18:	4b25      	ldr	r3, [pc, #148]	; (8007bb0 <USBD_CDC_Init+0x1ec>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	f003 020f 	and.w	r2, r3, #15
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3324      	adds	r3, #36	; 0x24
 8007b2e:	2201      	movs	r2, #1
 8007b30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	33b0      	adds	r3, #176	; 0xb0
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e018      	b.n	8007b9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7c1b      	ldrb	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b74:	4b0d      	ldr	r3, [pc, #52]	; (8007bac <USBD_CDC_Init+0x1e8>)
 8007b76:	7819      	ldrb	r1, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f006 fe92 	bl	800e8ac <USBD_LL_PrepareReceive>
 8007b88:	e008      	b.n	8007b9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b8a:	4b08      	ldr	r3, [pc, #32]	; (8007bac <USBD_CDC_Init+0x1e8>)
 8007b8c:	7819      	ldrb	r1, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b94:	2340      	movs	r3, #64	; 0x40
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f006 fe88 	bl	800e8ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	2000009f 	.word	0x2000009f
 8007bac:	200000a0 	.word	0x200000a0
 8007bb0:	200000a1 	.word	0x200000a1

08007bb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007bc0:	4b3a      	ldr	r3, [pc, #232]	; (8007cac <USBD_CDC_DeInit+0xf8>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f006 fda7 	bl	800e71a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007bcc:	4b37      	ldr	r3, [pc, #220]	; (8007cac <USBD_CDC_DeInit+0xf8>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f003 020f 	and.w	r2, r3, #15
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	3324      	adds	r3, #36	; 0x24
 8007be2:	2200      	movs	r2, #0
 8007be4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007be6:	4b32      	ldr	r3, [pc, #200]	; (8007cb0 <USBD_CDC_DeInit+0xfc>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f006 fd94 	bl	800e71a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007bf2:	4b2f      	ldr	r3, [pc, #188]	; (8007cb0 <USBD_CDC_DeInit+0xfc>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	f003 020f 	and.w	r2, r3, #15
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c0e:	4b29      	ldr	r3, [pc, #164]	; (8007cb4 <USBD_CDC_DeInit+0x100>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f006 fd80 	bl	800e71a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c1a:	4b26      	ldr	r3, [pc, #152]	; (8007cb4 <USBD_CDC_DeInit+0x100>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	f003 020f 	and.w	r2, r3, #15
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	3324      	adds	r3, #36	; 0x24
 8007c30:	2200      	movs	r2, #0
 8007c32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c34:	4b1f      	ldr	r3, [pc, #124]	; (8007cb4 <USBD_CDC_DeInit+0x100>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	f003 020f 	and.w	r2, r3, #15
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	3326      	adds	r3, #38	; 0x26
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	32b0      	adds	r2, #176	; 0xb0
 8007c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01f      	beq.n	8007ca0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	33b0      	adds	r3, #176	; 0xb0
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	32b0      	adds	r2, #176	; 0xb0
 8007c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f006 fe54 	bl	800e930 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	32b0      	adds	r2, #176	; 0xb0
 8007c92:	2100      	movs	r1, #0
 8007c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	2000009f 	.word	0x2000009f
 8007cb0:	200000a0 	.word	0x200000a0
 8007cb4:	200000a1 	.word	0x200000a1

08007cb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	32b0      	adds	r2, #176	; 0xb0
 8007ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e0bf      	b.n	8007e68 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d050      	beq.n	8007d96 <USBD_CDC_Setup+0xde>
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	f040 80af 	bne.w	8007e58 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	88db      	ldrh	r3, [r3, #6]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d03a      	beq.n	8007d78 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b25b      	sxtb	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	da1b      	bge.n	8007d44 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	33b0      	adds	r3, #176	; 0xb0
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	88d2      	ldrh	r2, [r2, #6]
 8007d28:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	88db      	ldrh	r3, [r3, #6]
 8007d2e:	2b07      	cmp	r3, #7
 8007d30:	bf28      	it	cs
 8007d32:	2307      	movcs	r3, #7
 8007d34:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	89fa      	ldrh	r2, [r7, #14]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 fd89 	bl	8009854 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d42:	e090      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	785a      	ldrb	r2, [r3, #1]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	88db      	ldrh	r3, [r3, #6]
 8007d52:	2b3f      	cmp	r3, #63	; 0x3f
 8007d54:	d803      	bhi.n	8007d5e <USBD_CDC_Setup+0xa6>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	88db      	ldrh	r3, [r3, #6]
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	e000      	b.n	8007d60 <USBD_CDC_Setup+0xa8>
 8007d5e:	2240      	movs	r2, #64	; 0x40
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d66:	6939      	ldr	r1, [r7, #16]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fd9b 	bl	80098ac <USBD_CtlPrepareRx>
      break;
 8007d76:	e076      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	33b0      	adds	r3, #176	; 0xb0
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	7850      	ldrb	r0, [r2, #1]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	4798      	blx	r3
      break;
 8007d94:	e067      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	2b0b      	cmp	r3, #11
 8007d9c:	d851      	bhi.n	8007e42 <USBD_CDC_Setup+0x18a>
 8007d9e:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <USBD_CDC_Setup+0xec>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007dd5 	.word	0x08007dd5
 8007da8:	08007e51 	.word	0x08007e51
 8007dac:	08007e43 	.word	0x08007e43
 8007db0:	08007e43 	.word	0x08007e43
 8007db4:	08007e43 	.word	0x08007e43
 8007db8:	08007e43 	.word	0x08007e43
 8007dbc:	08007e43 	.word	0x08007e43
 8007dc0:	08007e43 	.word	0x08007e43
 8007dc4:	08007e43 	.word	0x08007e43
 8007dc8:	08007e43 	.word	0x08007e43
 8007dcc:	08007dff 	.word	0x08007dff
 8007dd0:	08007e29 	.word	0x08007e29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d107      	bne.n	8007df0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007de0:	f107 030a 	add.w	r3, r7, #10
 8007de4:	2202      	movs	r2, #2
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f001 fd33 	bl	8009854 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dee:	e032      	b.n	8007e56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fcbd 	bl	8009772 <USBD_CtlError>
            ret = USBD_FAIL;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	75fb      	strb	r3, [r7, #23]
          break;
 8007dfc:	e02b      	b.n	8007e56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d107      	bne.n	8007e1a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e0a:	f107 030d 	add.w	r3, r7, #13
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 fd1e 	bl	8009854 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e18:	e01d      	b.n	8007e56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 fca8 	bl	8009772 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	75fb      	strb	r3, [r7, #23]
          break;
 8007e26:	e016      	b.n	8007e56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d00f      	beq.n	8007e54 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 fc9b 	bl	8009772 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e40:	e008      	b.n	8007e54 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 fc94 	bl	8009772 <USBD_CtlError>
          ret = USBD_FAIL;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e4e:	e002      	b.n	8007e56 <USBD_CDC_Setup+0x19e>
          break;
 8007e50:	bf00      	nop
 8007e52:	e008      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>
          break;
 8007e54:	bf00      	nop
      }
      break;
 8007e56:	e006      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fc89 	bl	8009772 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	75fb      	strb	r3, [r7, #23]
      break;
 8007e64:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	32b0      	adds	r2, #176	; 0xb0
 8007e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e065      	b.n	8007f66 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	32b0      	adds	r2, #176	; 0xb0
 8007ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	f003 020f 	and.w	r2, r3, #15
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	3318      	adds	r3, #24
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02f      	beq.n	8007f24 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	f003 020f 	and.w	r2, r3, #15
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	440b      	add	r3, r1
 8007ed6:	3318      	adds	r3, #24
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	f003 010f 	and.w	r1, r3, #15
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	440b      	add	r3, r1
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4403      	add	r3, r0
 8007eec:	3348      	adds	r3, #72	; 0x48
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ef4:	fb01 f303 	mul.w	r3, r1, r3
 8007ef8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d112      	bne.n	8007f24 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	440b      	add	r3, r1
 8007f10:	3318      	adds	r3, #24
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f16:	78f9      	ldrb	r1, [r7, #3]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f006 fca4 	bl	800e86a <USBD_LL_Transmit>
 8007f22:	e01f      	b.n	8007f64 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	33b0      	adds	r3, #176	; 0xb0
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d010      	beq.n	8007f64 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	33b0      	adds	r3, #176	; 0xb0
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	32b0      	adds	r2, #176	; 0xb0
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	32b0      	adds	r2, #176	; 0xb0
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e01a      	b.n	8007fd6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f006 fca2 	bl	800e8ee <USBD_LL_GetRxDataSize>
 8007faa:	4602      	mov	r2, r0
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	33b0      	adds	r3, #176	; 0xb0
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32b0      	adds	r2, #176	; 0xb0
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e025      	b.n	800804c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	33b0      	adds	r3, #176	; 0xb0
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01a      	beq.n	800804a <USBD_CDC_EP0_RxReady+0x6c>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800801a:	2bff      	cmp	r3, #255	; 0xff
 800801c:	d015      	beq.n	800804a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	33b0      	adds	r3, #176	; 0xb0
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008036:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800803e:	b292      	uxth	r2, r2
 8008040:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	22ff      	movs	r2, #255	; 0xff
 8008046:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800805c:	2182      	movs	r1, #130	; 0x82
 800805e:	4818      	ldr	r0, [pc, #96]	; (80080c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008060:	f000 fd4f 	bl	8008b02 <USBD_GetEpDesc>
 8008064:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008066:	2101      	movs	r1, #1
 8008068:	4815      	ldr	r0, [pc, #84]	; (80080c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800806a:	f000 fd4a 	bl	8008b02 <USBD_GetEpDesc>
 800806e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008070:	2181      	movs	r1, #129	; 0x81
 8008072:	4813      	ldr	r0, [pc, #76]	; (80080c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008074:	f000 fd45 	bl	8008b02 <USBD_GetEpDesc>
 8008078:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2210      	movs	r2, #16
 8008084:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d006      	beq.n	800809a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2200      	movs	r2, #0
 8008090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008094:	711a      	strb	r2, [r3, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d006      	beq.n	80080ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080a8:	711a      	strb	r2, [r3, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2243      	movs	r2, #67	; 0x43
 80080b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080b4:	4b02      	ldr	r3, [pc, #8]	; (80080c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	2000005c 	.word	0x2000005c

080080c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080cc:	2182      	movs	r1, #130	; 0x82
 80080ce:	4818      	ldr	r0, [pc, #96]	; (8008130 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080d0:	f000 fd17 	bl	8008b02 <USBD_GetEpDesc>
 80080d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080d6:	2101      	movs	r1, #1
 80080d8:	4815      	ldr	r0, [pc, #84]	; (8008130 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080da:	f000 fd12 	bl	8008b02 <USBD_GetEpDesc>
 80080de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080e0:	2181      	movs	r1, #129	; 0x81
 80080e2:	4813      	ldr	r0, [pc, #76]	; (8008130 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080e4:	f000 fd0d 	bl	8008b02 <USBD_GetEpDesc>
 80080e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2210      	movs	r2, #16
 80080f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d006      	beq.n	800810a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2200      	movs	r2, #0
 8008100:	711a      	strb	r2, [r3, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f042 0202 	orr.w	r2, r2, #2
 8008108:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d006      	beq.n	800811e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	711a      	strb	r2, [r3, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f042 0202 	orr.w	r2, r2, #2
 800811c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2243      	movs	r2, #67	; 0x43
 8008122:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008124:	4b02      	ldr	r3, [pc, #8]	; (8008130 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	2000005c 	.word	0x2000005c

08008134 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800813c:	2182      	movs	r1, #130	; 0x82
 800813e:	4818      	ldr	r0, [pc, #96]	; (80081a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008140:	f000 fcdf 	bl	8008b02 <USBD_GetEpDesc>
 8008144:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008146:	2101      	movs	r1, #1
 8008148:	4815      	ldr	r0, [pc, #84]	; (80081a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800814a:	f000 fcda 	bl	8008b02 <USBD_GetEpDesc>
 800814e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008150:	2181      	movs	r1, #129	; 0x81
 8008152:	4813      	ldr	r0, [pc, #76]	; (80081a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008154:	f000 fcd5 	bl	8008b02 <USBD_GetEpDesc>
 8008158:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2210      	movs	r2, #16
 8008164:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d006      	beq.n	800817a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	2200      	movs	r2, #0
 8008170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008174:	711a      	strb	r2, [r3, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008188:	711a      	strb	r2, [r3, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2243      	movs	r2, #67	; 0x43
 8008192:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008194:	4b02      	ldr	r3, [pc, #8]	; (80081a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	2000005c 	.word	0x2000005c

080081a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	220a      	movs	r2, #10
 80081b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081b2:	4b03      	ldr	r3, [pc, #12]	; (80081c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20000018 	.word	0x20000018

080081c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e009      	b.n	80081ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	33b0      	adds	r3, #176	; 0xb0
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	32b0      	adds	r2, #176	; 0xb0
 800820e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008212:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800821a:	2303      	movs	r3, #3
 800821c:	e008      	b.n	8008230 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	32b0      	adds	r2, #176	; 0xb0
 8008250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008254:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800825c:	2303      	movs	r3, #3
 800825e:	e004      	b.n	800826a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
	...

08008278 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	32b0      	adds	r2, #176	; 0xb0
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	32b0      	adds	r2, #176	; 0xb0
 800829e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e025      	b.n	80082f6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d11f      	bne.n	80082f4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80082bc:	4b10      	ldr	r3, [pc, #64]	; (8008300 <USBD_CDC_TransmitPacket+0x88>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4403      	add	r3, r0
 80082d6:	3318      	adds	r3, #24
 80082d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80082da:	4b09      	ldr	r3, [pc, #36]	; (8008300 <USBD_CDC_TransmitPacket+0x88>)
 80082dc:	7819      	ldrb	r1, [r3, #0]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f006 fabd 	bl	800e86a <USBD_LL_Transmit>

    ret = USBD_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	2000009f 	.word	0x2000009f

08008304 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32b0      	adds	r2, #176	; 0xb0
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	32b0      	adds	r2, #176	; 0xb0
 8008326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800832e:	2303      	movs	r3, #3
 8008330:	e018      	b.n	8008364 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7c1b      	ldrb	r3, [r3, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800833a:	4b0c      	ldr	r3, [pc, #48]	; (800836c <USBD_CDC_ReceivePacket+0x68>)
 800833c:	7819      	ldrb	r1, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f006 faaf 	bl	800e8ac <USBD_LL_PrepareReceive>
 800834e:	e008      	b.n	8008362 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008350:	4b06      	ldr	r3, [pc, #24]	; (800836c <USBD_CDC_ReceivePacket+0x68>)
 8008352:	7819      	ldrb	r1, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800835a:	2340      	movs	r3, #64	; 0x40
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f006 faa5 	bl	800e8ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	200000a0 	.word	0x200000a0

08008370 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	e01f      	b.n	80083c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	79fa      	ldrb	r2, [r7, #7]
 80083ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f006 f91f 	bl	800e600 <USBD_LL_Init>
 80083c2:	4603      	mov	r3, r0
 80083c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e025      	b.n	8008434 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	32ae      	adds	r2, #174	; 0xae
 80083fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00f      	beq.n	8008424 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	32ae      	adds	r2, #174	; 0xae
 800840e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	f107 020e 	add.w	r2, r7, #14
 8008418:	4610      	mov	r0, r2
 800841a:	4798      	blx	r3
 800841c:	4602      	mov	r2, r0
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f006 f927 	bl	800e698 <USBD_LL_Start>
 800844a:	4603      	mov	r3, r0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800845c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d009      	beq.n	8008498 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	78fa      	ldrb	r2, [r7, #3]
 800848e:	4611      	mov	r1, r2
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	4798      	blx	r3
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	460b      	mov	r3, r1
 80084ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	78fa      	ldrb	r2, [r7, #3]
 80084bc:	4611      	mov	r1, r2
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80084c8:	2303      	movs	r3, #3
 80084ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 f908 	bl	80096fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084fc:	461a      	mov	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	2b02      	cmp	r3, #2
 8008510:	d01a      	beq.n	8008548 <USBD_LL_SetupStage+0x72>
 8008512:	2b02      	cmp	r3, #2
 8008514:	d822      	bhi.n	800855c <USBD_LL_SetupStage+0x86>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <USBD_LL_SetupStage+0x4a>
 800851a:	2b01      	cmp	r3, #1
 800851c:	d00a      	beq.n	8008534 <USBD_LL_SetupStage+0x5e>
 800851e:	e01d      	b.n	800855c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fb5f 	bl	8008bec <USBD_StdDevReq>
 800852e:	4603      	mov	r3, r0
 8008530:	73fb      	strb	r3, [r7, #15]
      break;
 8008532:	e020      	b.n	8008576 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fbc7 	bl	8008cd0 <USBD_StdItfReq>
 8008542:	4603      	mov	r3, r0
 8008544:	73fb      	strb	r3, [r7, #15]
      break;
 8008546:	e016      	b.n	8008576 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fc29 	bl	8008da8 <USBD_StdEPReq>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
      break;
 800855a:	e00c      	b.n	8008576 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008562:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008566:	b2db      	uxtb	r3, r3
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f006 f8f4 	bl	800e758 <USBD_LL_StallEP>
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]
      break;
 8008574:	bf00      	nop
  }

  return ret;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	460b      	mov	r3, r1
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008592:	7afb      	ldrb	r3, [r7, #11]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d16e      	bne.n	8008676 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800859e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	f040 8098 	bne.w	80086dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d913      	bls.n	80085e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	1ad2      	subs	r2, r2, r3
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	4293      	cmp	r3, r2
 80085d0:	bf28      	it	cs
 80085d2:	4613      	movcs	r3, r2
 80085d4:	461a      	mov	r2, r3
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f001 f984 	bl	80098e6 <USBD_CtlContinueRx>
 80085de:	e07d      	b.n	80086dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d014      	beq.n	8008618 <USBD_LL_DataOutStage+0x98>
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d81d      	bhi.n	800862e <USBD_LL_DataOutStage+0xae>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <USBD_LL_DataOutStage+0x7c>
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d003      	beq.n	8008602 <USBD_LL_DataOutStage+0x82>
 80085fa:	e018      	b.n	800862e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	75bb      	strb	r3, [r7, #22]
            break;
 8008600:	e018      	b.n	8008634 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008608:	b2db      	uxtb	r3, r3
 800860a:	4619      	mov	r1, r3
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 fa5e 	bl	8008ace <USBD_CoreFindIF>
 8008612:	4603      	mov	r3, r0
 8008614:	75bb      	strb	r3, [r7, #22]
            break;
 8008616:	e00d      	b.n	8008634 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 fa60 	bl	8008ae8 <USBD_CoreFindEP>
 8008628:	4603      	mov	r3, r0
 800862a:	75bb      	strb	r3, [r7, #22]
            break;
 800862c:	e002      	b.n	8008634 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	75bb      	strb	r3, [r7, #22]
            break;
 8008632:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008634:	7dbb      	ldrb	r3, [r7, #22]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d119      	bne.n	800866e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b03      	cmp	r3, #3
 8008644:	d113      	bne.n	800866e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008646:	7dba      	ldrb	r2, [r7, #22]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	32ae      	adds	r2, #174	; 0xae
 800864c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00b      	beq.n	800866e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008656:	7dba      	ldrb	r2, [r7, #22]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800865e:	7dba      	ldrb	r2, [r7, #22]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	32ae      	adds	r2, #174	; 0xae
 8008664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f001 f94a 	bl	8009908 <USBD_CtlSendStatus>
 8008674:	e032      	b.n	80086dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867c:	b2db      	uxtb	r3, r3
 800867e:	4619      	mov	r1, r3
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 fa31 	bl	8008ae8 <USBD_CoreFindEP>
 8008686:	4603      	mov	r3, r0
 8008688:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800868a:	7dbb      	ldrb	r3, [r7, #22]
 800868c:	2bff      	cmp	r3, #255	; 0xff
 800868e:	d025      	beq.n	80086dc <USBD_LL_DataOutStage+0x15c>
 8008690:	7dbb      	ldrb	r3, [r7, #22]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d122      	bne.n	80086dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d117      	bne.n	80086d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80086a2:	7dba      	ldrb	r2, [r7, #22]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	32ae      	adds	r2, #174	; 0xae
 80086a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00f      	beq.n	80086d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80086b2:	7dba      	ldrb	r2, [r7, #22]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80086ba:	7dba      	ldrb	r2, [r7, #22]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	32ae      	adds	r2, #174	; 0xae
 80086c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	7afa      	ldrb	r2, [r7, #11]
 80086c8:	4611      	mov	r1, r2
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	4798      	blx	r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	e000      	b.n	80086de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b086      	sub	sp, #24
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	460b      	mov	r3, r1
 80086f0:	607a      	str	r2, [r7, #4]
 80086f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d16f      	bne.n	80087da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3314      	adds	r3, #20
 80086fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008706:	2b02      	cmp	r3, #2
 8008708:	d15a      	bne.n	80087c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	689a      	ldr	r2, [r3, #8]
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	429a      	cmp	r2, r3
 8008714:	d914      	bls.n	8008740 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	1ad2      	subs	r2, r2, r3
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	461a      	mov	r2, r3
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f001 f8ac 	bl	800988a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008732:	2300      	movs	r3, #0
 8008734:	2200      	movs	r2, #0
 8008736:	2100      	movs	r1, #0
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f006 f8b7 	bl	800e8ac <USBD_LL_PrepareReceive>
 800873e:	e03f      	b.n	80087c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	429a      	cmp	r2, r3
 800874a:	d11c      	bne.n	8008786 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008754:	429a      	cmp	r2, r3
 8008756:	d316      	bcc.n	8008786 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008762:	429a      	cmp	r2, r3
 8008764:	d20f      	bcs.n	8008786 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008766:	2200      	movs	r2, #0
 8008768:	2100      	movs	r1, #0
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f001 f88d 	bl	800988a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008778:	2300      	movs	r3, #0
 800877a:	2200      	movs	r2, #0
 800877c:	2100      	movs	r1, #0
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f006 f894 	bl	800e8ac <USBD_LL_PrepareReceive>
 8008784:	e01c      	b.n	80087c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b03      	cmp	r3, #3
 8008790:	d10f      	bne.n	80087b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087b2:	2180      	movs	r1, #128	; 0x80
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f005 ffcf 	bl	800e758 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f001 f8b7 	bl	800992e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d03a      	beq.n	8008840 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f7ff fe42 	bl	8008454 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80087d8:	e032      	b.n	8008840 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	4619      	mov	r1, r3
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f97f 	bl	8008ae8 <USBD_CoreFindEP>
 80087ea:	4603      	mov	r3, r0
 80087ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	2bff      	cmp	r3, #255	; 0xff
 80087f2:	d025      	beq.n	8008840 <USBD_LL_DataInStage+0x15a>
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d122      	bne.n	8008840 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b03      	cmp	r3, #3
 8008804:	d11c      	bne.n	8008840 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008806:	7dfa      	ldrb	r2, [r7, #23]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	32ae      	adds	r2, #174	; 0xae
 800880c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d014      	beq.n	8008840 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008816:	7dfa      	ldrb	r2, [r7, #23]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800881e:	7dfa      	ldrb	r2, [r7, #23]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	32ae      	adds	r2, #174	; 0xae
 8008824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	7afa      	ldrb	r2, [r7, #11]
 800882c:	4611      	mov	r1, r2
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	4798      	blx	r3
 8008832:	4603      	mov	r3, r0
 8008834:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008836:	7dbb      	ldrb	r3, [r7, #22]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800883c:	7dbb      	ldrb	r3, [r7, #22]
 800883e:	e000      	b.n	8008842 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008882:	2b00      	cmp	r3, #0
 8008884:	d014      	beq.n	80088b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00e      	beq.n	80088b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6852      	ldr	r2, [r2, #4]
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	4611      	mov	r1, r2
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80088ac:	2303      	movs	r3, #3
 80088ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088b0:	2340      	movs	r3, #64	; 0x40
 80088b2:	2200      	movs	r2, #0
 80088b4:	2100      	movs	r1, #0
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f005 ff09 	bl	800e6ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2240      	movs	r2, #64	; 0x40
 80088c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088cc:	2340      	movs	r3, #64	; 0x40
 80088ce:	2200      	movs	r2, #0
 80088d0:	2180      	movs	r1, #128	; 0x80
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f005 fefb 	bl	800e6ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2240      	movs	r2, #64	; 0x40
 80088e2:	621a      	str	r2, [r3, #32]

  return ret;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891c:	b2da      	uxtb	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2204      	movs	r2, #4
 8008928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800893a:	b480      	push	{r7}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b04      	cmp	r3, #4
 800894c:	d106      	bne.n	800895c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008954:	b2da      	uxtb	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b03      	cmp	r3, #3
 800897c:	d110      	bne.n	80089a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	460b      	mov	r3, r1
 80089b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	32ae      	adds	r2, #174	; 0xae
 80089c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e01c      	b.n	8008a06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d115      	bne.n	8008a04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	32ae      	adds	r2, #174	; 0xae
 80089e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00b      	beq.n	8008a04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	32ae      	adds	r2, #174	; 0xae
 80089f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	78fa      	ldrb	r2, [r7, #3]
 80089fe:	4611      	mov	r1, r2
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	32ae      	adds	r2, #174	; 0xae
 8008a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e01c      	b.n	8008a6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d115      	bne.n	8008a68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	32ae      	adds	r2, #174	; 0xae
 8008a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	32ae      	adds	r2, #174	; 0xae
 8008a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	78fa      	ldrb	r2, [r7, #3]
 8008a62:	4611      	mov	r1, r2
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00e      	beq.n	8008ac4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6852      	ldr	r2, [r2, #4]
 8008ab2:	b2d2      	uxtb	r2, r2
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ada:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008af4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b086      	sub	sp, #24
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	885b      	ldrh	r3, [r3, #2]
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d920      	bls.n	8008b6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008b32:	e013      	b.n	8008b5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008b34:	f107 030a 	add.w	r3, r7, #10
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f000 f81b 	bl	8008b76 <USBD_GetNextDesc>
 8008b40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	785b      	ldrb	r3, [r3, #1]
 8008b46:	2b05      	cmp	r3, #5
 8008b48:	d108      	bne.n	8008b5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	789b      	ldrb	r3, [r3, #2]
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d008      	beq.n	8008b6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	885b      	ldrh	r3, [r3, #2]
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	897b      	ldrh	r3, [r7, #10]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d8e5      	bhi.n	8008b34 <USBD_GetEpDesc+0x32>
 8008b68:	e000      	b.n	8008b6c <USBD_GetEpDesc+0x6a>
          break;
 8008b6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b6c:	693b      	ldr	r3, [r7, #16]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	881a      	ldrh	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	4413      	add	r3, r2
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008bce:	8a3b      	ldrh	r3, [r7, #16]
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	b21a      	sxth	r2, r3
 8008bd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	b21b      	sxth	r3, r3
 8008bdc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008bde:	89fb      	ldrh	r3, [r7, #14]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c02:	2b40      	cmp	r3, #64	; 0x40
 8008c04:	d005      	beq.n	8008c12 <USBD_StdDevReq+0x26>
 8008c06:	2b40      	cmp	r3, #64	; 0x40
 8008c08:	d857      	bhi.n	8008cba <USBD_StdDevReq+0xce>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00f      	beq.n	8008c2e <USBD_StdDevReq+0x42>
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d153      	bne.n	8008cba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	32ae      	adds	r2, #174	; 0xae
 8008c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	4798      	blx	r3
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c2c:	e04a      	b.n	8008cc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b09      	cmp	r3, #9
 8008c34:	d83b      	bhi.n	8008cae <USBD_StdDevReq+0xc2>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <USBD_StdDevReq+0x50>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c91 	.word	0x08008c91
 8008c40:	08008ca5 	.word	0x08008ca5
 8008c44:	08008caf 	.word	0x08008caf
 8008c48:	08008c9b 	.word	0x08008c9b
 8008c4c:	08008caf 	.word	0x08008caf
 8008c50:	08008c6f 	.word	0x08008c6f
 8008c54:	08008c65 	.word	0x08008c65
 8008c58:	08008caf 	.word	0x08008caf
 8008c5c:	08008c87 	.word	0x08008c87
 8008c60:	08008c79 	.word	0x08008c79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fa3c 	bl	80090e4 <USBD_GetDescriptor>
          break;
 8008c6c:	e024      	b.n	8008cb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fba1 	bl	80093b8 <USBD_SetAddress>
          break;
 8008c76:	e01f      	b.n	8008cb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fbe0 	bl	8009440 <USBD_SetConfig>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73fb      	strb	r3, [r7, #15]
          break;
 8008c84:	e018      	b.n	8008cb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fc83 	bl	8009594 <USBD_GetConfig>
          break;
 8008c8e:	e013      	b.n	8008cb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fcb4 	bl	8009600 <USBD_GetStatus>
          break;
 8008c98:	e00e      	b.n	8008cb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fce3 	bl	8009668 <USBD_SetFeature>
          break;
 8008ca2:	e009      	b.n	8008cb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fd07 	bl	80096ba <USBD_ClrFeature>
          break;
 8008cac:	e004      	b.n	8008cb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fd5e 	bl	8009772 <USBD_CtlError>
          break;
 8008cb6:	bf00      	nop
      }
      break;
 8008cb8:	e004      	b.n	8008cc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fd58 	bl	8009772 <USBD_CtlError>
      break;
 8008cc2:	bf00      	nop
  }

  return ret;
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop

08008cd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ce6:	2b40      	cmp	r3, #64	; 0x40
 8008ce8:	d005      	beq.n	8008cf6 <USBD_StdItfReq+0x26>
 8008cea:	2b40      	cmp	r3, #64	; 0x40
 8008cec:	d852      	bhi.n	8008d94 <USBD_StdItfReq+0xc4>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <USBD_StdItfReq+0x26>
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	d14e      	bne.n	8008d94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d840      	bhi.n	8008d86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	889b      	ldrh	r3, [r3, #4]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d836      	bhi.n	8008d7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	889b      	ldrh	r3, [r3, #4]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff fed9 	bl	8008ace <USBD_CoreFindIF>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2bff      	cmp	r3, #255	; 0xff
 8008d24:	d01d      	beq.n	8008d62 <USBD_StdItfReq+0x92>
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d11a      	bne.n	8008d62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008d2c:	7bba      	ldrb	r2, [r7, #14]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	32ae      	adds	r2, #174	; 0xae
 8008d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00f      	beq.n	8008d5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d3c:	7bba      	ldrb	r2, [r7, #14]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d44:	7bba      	ldrb	r2, [r7, #14]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	32ae      	adds	r2, #174	; 0xae
 8008d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	4798      	blx	r3
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d5a:	e004      	b.n	8008d66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d60:	e001      	b.n	8008d66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d62:	2303      	movs	r3, #3
 8008d64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	88db      	ldrh	r3, [r3, #6]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d110      	bne.n	8008d90 <USBD_StdItfReq+0xc0>
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10d      	bne.n	8008d90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fdc7 	bl	8009908 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d7a:	e009      	b.n	8008d90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fcf7 	bl	8009772 <USBD_CtlError>
          break;
 8008d84:	e004      	b.n	8008d90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fcf2 	bl	8009772 <USBD_CtlError>
          break;
 8008d8e:	e000      	b.n	8008d92 <USBD_StdItfReq+0xc2>
          break;
 8008d90:	bf00      	nop
      }
      break;
 8008d92:	e004      	b.n	8008d9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fceb 	bl	8009772 <USBD_CtlError>
      break;
 8008d9c:	bf00      	nop
  }

  return ret;
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	889b      	ldrh	r3, [r3, #4]
 8008dba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dc4:	2b40      	cmp	r3, #64	; 0x40
 8008dc6:	d007      	beq.n	8008dd8 <USBD_StdEPReq+0x30>
 8008dc8:	2b40      	cmp	r3, #64	; 0x40
 8008dca:	f200 817f 	bhi.w	80090cc <USBD_StdEPReq+0x324>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d02a      	beq.n	8008e28 <USBD_StdEPReq+0x80>
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	f040 817a 	bne.w	80090cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff fe83 	bl	8008ae8 <USBD_CoreFindEP>
 8008de2:	4603      	mov	r3, r0
 8008de4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008de6:	7b7b      	ldrb	r3, [r7, #13]
 8008de8:	2bff      	cmp	r3, #255	; 0xff
 8008dea:	f000 8174 	beq.w	80090d6 <USBD_StdEPReq+0x32e>
 8008dee:	7b7b      	ldrb	r3, [r7, #13]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f040 8170 	bne.w	80090d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008df6:	7b7a      	ldrb	r2, [r7, #13]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008dfe:	7b7a      	ldrb	r2, [r7, #13]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	32ae      	adds	r2, #174	; 0xae
 8008e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 8163 	beq.w	80090d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e10:	7b7a      	ldrb	r2, [r7, #13]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	32ae      	adds	r2, #174	; 0xae
 8008e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	4798      	blx	r3
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e26:	e156      	b.n	80090d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d008      	beq.n	8008e42 <USBD_StdEPReq+0x9a>
 8008e30:	2b03      	cmp	r3, #3
 8008e32:	f300 8145 	bgt.w	80090c0 <USBD_StdEPReq+0x318>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 809b 	beq.w	8008f72 <USBD_StdEPReq+0x1ca>
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d03c      	beq.n	8008eba <USBD_StdEPReq+0x112>
 8008e40:	e13e      	b.n	80090c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d002      	beq.n	8008e54 <USBD_StdEPReq+0xac>
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d016      	beq.n	8008e80 <USBD_StdEPReq+0xd8>
 8008e52:	e02c      	b.n	8008eae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00d      	beq.n	8008e76 <USBD_StdEPReq+0xce>
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	2b80      	cmp	r3, #128	; 0x80
 8008e5e:	d00a      	beq.n	8008e76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f005 fc77 	bl	800e758 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e6a:	2180      	movs	r1, #128	; 0x80
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f005 fc73 	bl	800e758 <USBD_LL_StallEP>
 8008e72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e74:	e020      	b.n	8008eb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fc7a 	bl	8009772 <USBD_CtlError>
              break;
 8008e7e:	e01b      	b.n	8008eb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	885b      	ldrh	r3, [r3, #2]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10e      	bne.n	8008ea6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <USBD_StdEPReq+0xfe>
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b80      	cmp	r3, #128	; 0x80
 8008e92:	d008      	beq.n	8008ea6 <USBD_StdEPReq+0xfe>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	88db      	ldrh	r3, [r3, #6]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f005 fc59 	bl	800e758 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fd2e 	bl	8009908 <USBD_CtlSendStatus>

              break;
 8008eac:	e004      	b.n	8008eb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fc5e 	bl	8009772 <USBD_CtlError>
              break;
 8008eb6:	bf00      	nop
          }
          break;
 8008eb8:	e107      	b.n	80090ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d002      	beq.n	8008ecc <USBD_StdEPReq+0x124>
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d016      	beq.n	8008ef8 <USBD_StdEPReq+0x150>
 8008eca:	e04b      	b.n	8008f64 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00d      	beq.n	8008eee <USBD_StdEPReq+0x146>
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b80      	cmp	r3, #128	; 0x80
 8008ed6:	d00a      	beq.n	8008eee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f005 fc3b 	bl	800e758 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ee2:	2180      	movs	r1, #128	; 0x80
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f005 fc37 	bl	800e758 <USBD_LL_StallEP>
 8008eea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008eec:	e040      	b.n	8008f70 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fc3e 	bl	8009772 <USBD_CtlError>
              break;
 8008ef6:	e03b      	b.n	8008f70 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	885b      	ldrh	r3, [r3, #2]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d136      	bne.n	8008f6e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d004      	beq.n	8008f14 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f005 fc41 	bl	800e796 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fcf7 	bl	8009908 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff fde2 	bl	8008ae8 <USBD_CoreFindEP>
 8008f24:	4603      	mov	r3, r0
 8008f26:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f28:	7b7b      	ldrb	r3, [r7, #13]
 8008f2a:	2bff      	cmp	r3, #255	; 0xff
 8008f2c:	d01f      	beq.n	8008f6e <USBD_StdEPReq+0x1c6>
 8008f2e:	7b7b      	ldrb	r3, [r7, #13]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d11c      	bne.n	8008f6e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008f34:	7b7a      	ldrb	r2, [r7, #13]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f3c:	7b7a      	ldrb	r2, [r7, #13]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	32ae      	adds	r2, #174	; 0xae
 8008f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d010      	beq.n	8008f6e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f4c:	7b7a      	ldrb	r2, [r7, #13]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	32ae      	adds	r2, #174	; 0xae
 8008f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	4798      	blx	r3
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f62:	e004      	b.n	8008f6e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fc03 	bl	8009772 <USBD_CtlError>
              break;
 8008f6c:	e000      	b.n	8008f70 <USBD_StdEPReq+0x1c8>
              break;
 8008f6e:	bf00      	nop
          }
          break;
 8008f70:	e0ab      	b.n	80090ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d002      	beq.n	8008f84 <USBD_StdEPReq+0x1dc>
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d032      	beq.n	8008fe8 <USBD_StdEPReq+0x240>
 8008f82:	e097      	b.n	80090b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d007      	beq.n	8008f9a <USBD_StdEPReq+0x1f2>
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	2b80      	cmp	r3, #128	; 0x80
 8008f8e:	d004      	beq.n	8008f9a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fbed 	bl	8009772 <USBD_CtlError>
                break;
 8008f98:	e091      	b.n	80090be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	da0b      	bge.n	8008fba <USBD_StdEPReq+0x212>
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fa8:	4613      	mov	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	3310      	adds	r3, #16
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	e00b      	b.n	8008fd2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	4413      	add	r3, r2
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc37 	bl	8009854 <USBD_CtlSendData>
              break;
 8008fe6:	e06a      	b.n	80090be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	da11      	bge.n	8009014 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	f003 020f 	and.w	r2, r3, #15
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	440b      	add	r3, r1
 8009002:	3324      	adds	r3, #36	; 0x24
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d117      	bne.n	800903a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fbb0 	bl	8009772 <USBD_CtlError>
                  break;
 8009012:	e054      	b.n	80090be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	f003 020f 	and.w	r2, r3, #15
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	440b      	add	r3, r1
 8009026:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d104      	bne.n	800903a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb9d 	bl	8009772 <USBD_CtlError>
                  break;
 8009038:	e041      	b.n	80090be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800903a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800903e:	2b00      	cmp	r3, #0
 8009040:	da0b      	bge.n	800905a <USBD_StdEPReq+0x2b2>
 8009042:	7bbb      	ldrb	r3, [r7, #14]
 8009044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009048:	4613      	mov	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	3310      	adds	r3, #16
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	4413      	add	r3, r2
 8009056:	3304      	adds	r3, #4
 8009058:	e00b      	b.n	8009072 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009060:	4613      	mov	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	4413      	add	r3, r2
 8009070:	3304      	adds	r3, #4
 8009072:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <USBD_StdEPReq+0x2d8>
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b80      	cmp	r3, #128	; 0x80
 800907e:	d103      	bne.n	8009088 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	e00e      	b.n	80090a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f005 fba1 	bl	800e7d4 <USBD_LL_IsStallEP>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d003      	beq.n	80090a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2201      	movs	r2, #1
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	e002      	b.n	80090a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2202      	movs	r2, #2
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fbd1 	bl	8009854 <USBD_CtlSendData>
              break;
 80090b2:	e004      	b.n	80090be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fb5b 	bl	8009772 <USBD_CtlError>
              break;
 80090bc:	bf00      	nop
          }
          break;
 80090be:	e004      	b.n	80090ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fb55 	bl	8009772 <USBD_CtlError>
          break;
 80090c8:	bf00      	nop
      }
      break;
 80090ca:	e005      	b.n	80090d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fb4f 	bl	8009772 <USBD_CtlError>
      break;
 80090d4:	e000      	b.n	80090d8 <USBD_StdEPReq+0x330>
      break;
 80090d6:	bf00      	nop
  }

  return ret;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	885b      	ldrh	r3, [r3, #2]
 80090fe:	0a1b      	lsrs	r3, r3, #8
 8009100:	b29b      	uxth	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	2b06      	cmp	r3, #6
 8009106:	f200 8128 	bhi.w	800935a <USBD_GetDescriptor+0x276>
 800910a:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <USBD_GetDescriptor+0x2c>)
 800910c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009110:	0800912d 	.word	0x0800912d
 8009114:	08009145 	.word	0x08009145
 8009118:	08009185 	.word	0x08009185
 800911c:	0800935b 	.word	0x0800935b
 8009120:	0800935b 	.word	0x0800935b
 8009124:	080092fb 	.word	0x080092fb
 8009128:	08009327 	.word	0x08009327
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	7c12      	ldrb	r2, [r2, #16]
 8009138:	f107 0108 	add.w	r1, r7, #8
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
 8009140:	60f8      	str	r0, [r7, #12]
      break;
 8009142:	e112      	b.n	800936a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	7c1b      	ldrb	r3, [r3, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10d      	bne.n	8009168 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009154:	f107 0208 	add.w	r2, r7, #8
 8009158:	4610      	mov	r0, r2
 800915a:	4798      	blx	r3
 800915c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	2202      	movs	r2, #2
 8009164:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009166:	e100      	b.n	800936a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	f107 0208 	add.w	r2, r7, #8
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
 8009178:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	2202      	movs	r2, #2
 8009180:	701a      	strb	r2, [r3, #0]
      break;
 8009182:	e0f2      	b.n	800936a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	885b      	ldrh	r3, [r3, #2]
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b05      	cmp	r3, #5
 800918c:	f200 80ac 	bhi.w	80092e8 <USBD_GetDescriptor+0x204>
 8009190:	a201      	add	r2, pc, #4	; (adr r2, 8009198 <USBD_GetDescriptor+0xb4>)
 8009192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009196:	bf00      	nop
 8009198:	080091b1 	.word	0x080091b1
 800919c:	080091e5 	.word	0x080091e5
 80091a0:	08009219 	.word	0x08009219
 80091a4:	0800924d 	.word	0x0800924d
 80091a8:	08009281 	.word	0x08009281
 80091ac:	080092b5 	.word	0x080092b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	7c12      	ldrb	r2, [r2, #16]
 80091c8:	f107 0108 	add.w	r1, r7, #8
 80091cc:	4610      	mov	r0, r2
 80091ce:	4798      	blx	r3
 80091d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091d2:	e091      	b.n	80092f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 facb 	bl	8009772 <USBD_CtlError>
            err++;
 80091dc:	7afb      	ldrb	r3, [r7, #11]
 80091de:	3301      	adds	r3, #1
 80091e0:	72fb      	strb	r3, [r7, #11]
          break;
 80091e2:	e089      	b.n	80092f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	7c12      	ldrb	r2, [r2, #16]
 80091fc:	f107 0108 	add.w	r1, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009206:	e077      	b.n	80092f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fab1 	bl	8009772 <USBD_CtlError>
            err++;
 8009210:	7afb      	ldrb	r3, [r7, #11]
 8009212:	3301      	adds	r3, #1
 8009214:	72fb      	strb	r3, [r7, #11]
          break;
 8009216:	e06f      	b.n	80092f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	7c12      	ldrb	r2, [r2, #16]
 8009230:	f107 0108 	add.w	r1, r7, #8
 8009234:	4610      	mov	r0, r2
 8009236:	4798      	blx	r3
 8009238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800923a:	e05d      	b.n	80092f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fa97 	bl	8009772 <USBD_CtlError>
            err++;
 8009244:	7afb      	ldrb	r3, [r7, #11]
 8009246:	3301      	adds	r3, #1
 8009248:	72fb      	strb	r3, [r7, #11]
          break;
 800924a:	e055      	b.n	80092f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00b      	beq.n	8009270 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	7c12      	ldrb	r2, [r2, #16]
 8009264:	f107 0108 	add.w	r1, r7, #8
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
 800926c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800926e:	e043      	b.n	80092f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fa7d 	bl	8009772 <USBD_CtlError>
            err++;
 8009278:	7afb      	ldrb	r3, [r7, #11]
 800927a:	3301      	adds	r3, #1
 800927c:	72fb      	strb	r3, [r7, #11]
          break;
 800927e:	e03b      	b.n	80092f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	695b      	ldr	r3, [r3, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00b      	beq.n	80092a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	7c12      	ldrb	r2, [r2, #16]
 8009298:	f107 0108 	add.w	r1, r7, #8
 800929c:	4610      	mov	r0, r2
 800929e:	4798      	blx	r3
 80092a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092a2:	e029      	b.n	80092f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fa63 	bl	8009772 <USBD_CtlError>
            err++;
 80092ac:	7afb      	ldrb	r3, [r7, #11]
 80092ae:	3301      	adds	r3, #1
 80092b0:	72fb      	strb	r3, [r7, #11]
          break;
 80092b2:	e021      	b.n	80092f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00b      	beq.n	80092d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	7c12      	ldrb	r2, [r2, #16]
 80092cc:	f107 0108 	add.w	r1, r7, #8
 80092d0:	4610      	mov	r0, r2
 80092d2:	4798      	blx	r3
 80092d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092d6:	e00f      	b.n	80092f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fa49 	bl	8009772 <USBD_CtlError>
            err++;
 80092e0:	7afb      	ldrb	r3, [r7, #11]
 80092e2:	3301      	adds	r3, #1
 80092e4:	72fb      	strb	r3, [r7, #11]
          break;
 80092e6:	e007      	b.n	80092f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fa41 	bl	8009772 <USBD_CtlError>
          err++;
 80092f0:	7afb      	ldrb	r3, [r7, #11]
 80092f2:	3301      	adds	r3, #1
 80092f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80092f6:	bf00      	nop
      }
      break;
 80092f8:	e037      	b.n	800936a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	7c1b      	ldrb	r3, [r3, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d109      	bne.n	8009316 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930a:	f107 0208 	add.w	r2, r7, #8
 800930e:	4610      	mov	r0, r2
 8009310:	4798      	blx	r3
 8009312:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009314:	e029      	b.n	800936a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fa2a 	bl	8009772 <USBD_CtlError>
        err++;
 800931e:	7afb      	ldrb	r3, [r7, #11]
 8009320:	3301      	adds	r3, #1
 8009322:	72fb      	strb	r3, [r7, #11]
      break;
 8009324:	e021      	b.n	800936a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	7c1b      	ldrb	r3, [r3, #16]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10d      	bne.n	800934a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009336:	f107 0208 	add.w	r2, r7, #8
 800933a:	4610      	mov	r0, r2
 800933c:	4798      	blx	r3
 800933e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	3301      	adds	r3, #1
 8009344:	2207      	movs	r2, #7
 8009346:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009348:	e00f      	b.n	800936a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fa10 	bl	8009772 <USBD_CtlError>
        err++;
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	3301      	adds	r3, #1
 8009356:	72fb      	strb	r3, [r7, #11]
      break;
 8009358:	e007      	b.n	800936a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fa08 	bl	8009772 <USBD_CtlError>
      err++;
 8009362:	7afb      	ldrb	r3, [r7, #11]
 8009364:	3301      	adds	r3, #1
 8009366:	72fb      	strb	r3, [r7, #11]
      break;
 8009368:	bf00      	nop
  }

  if (err != 0U)
 800936a:	7afb      	ldrb	r3, [r7, #11]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d11e      	bne.n	80093ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	88db      	ldrh	r3, [r3, #6]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d016      	beq.n	80093a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009378:	893b      	ldrh	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00e      	beq.n	800939c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	88da      	ldrh	r2, [r3, #6]
 8009382:	893b      	ldrh	r3, [r7, #8]
 8009384:	4293      	cmp	r3, r2
 8009386:	bf28      	it	cs
 8009388:	4613      	movcs	r3, r2
 800938a:	b29b      	uxth	r3, r3
 800938c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800938e:	893b      	ldrh	r3, [r7, #8]
 8009390:	461a      	mov	r2, r3
 8009392:	68f9      	ldr	r1, [r7, #12]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fa5d 	bl	8009854 <USBD_CtlSendData>
 800939a:	e009      	b.n	80093b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f9e7 	bl	8009772 <USBD_CtlError>
 80093a4:	e004      	b.n	80093b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 faae 	bl	8009908 <USBD_CtlSendStatus>
 80093ac:	e000      	b.n	80093b0 <USBD_GetDescriptor+0x2cc>
    return;
 80093ae:	bf00      	nop
  }
}
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop

080093b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	889b      	ldrh	r3, [r3, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d131      	bne.n	800942e <USBD_SetAddress+0x76>
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	88db      	ldrh	r3, [r3, #6]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d12d      	bne.n	800942e <USBD_SetAddress+0x76>
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	885b      	ldrh	r3, [r3, #2]
 80093d6:	2b7f      	cmp	r3, #127	; 0x7f
 80093d8:	d829      	bhi.n	800942e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	885b      	ldrh	r3, [r3, #2]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d104      	bne.n	80093fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f9bc 	bl	8009772 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093fa:	e01d      	b.n	8009438 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7bfa      	ldrb	r2, [r7, #15]
 8009400:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f005 fa0f 	bl	800e82c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa7a 	bl	8009908 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2202      	movs	r2, #2
 800941e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009422:	e009      	b.n	8009438 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800942c:	e004      	b.n	8009438 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f99e 	bl	8009772 <USBD_CtlError>
  }
}
 8009436:	bf00      	nop
 8009438:	bf00      	nop
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	885b      	ldrh	r3, [r3, #2]
 8009452:	b2da      	uxtb	r2, r3
 8009454:	4b4e      	ldr	r3, [pc, #312]	; (8009590 <USBD_SetConfig+0x150>)
 8009456:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009458:	4b4d      	ldr	r3, [pc, #308]	; (8009590 <USBD_SetConfig+0x150>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d905      	bls.n	800946c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f985 	bl	8009772 <USBD_CtlError>
    return USBD_FAIL;
 8009468:	2303      	movs	r3, #3
 800946a:	e08c      	b.n	8009586 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b02      	cmp	r3, #2
 8009476:	d002      	beq.n	800947e <USBD_SetConfig+0x3e>
 8009478:	2b03      	cmp	r3, #3
 800947a:	d029      	beq.n	80094d0 <USBD_SetConfig+0x90>
 800947c:	e075      	b.n	800956a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800947e:	4b44      	ldr	r3, [pc, #272]	; (8009590 <USBD_SetConfig+0x150>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d020      	beq.n	80094c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009486:	4b42      	ldr	r3, [pc, #264]	; (8009590 <USBD_SetConfig+0x150>)
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009490:	4b3f      	ldr	r3, [pc, #252]	; (8009590 <USBD_SetConfig+0x150>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	4619      	mov	r1, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7fe ffe7 	bl	800846a <USBD_SetClassConfig>
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d008      	beq.n	80094b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f962 	bl	8009772 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2202      	movs	r2, #2
 80094b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094b6:	e065      	b.n	8009584 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fa25 	bl	8009908 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2203      	movs	r2, #3
 80094c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80094c6:	e05d      	b.n	8009584 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fa1d 	bl	8009908 <USBD_CtlSendStatus>
      break;
 80094ce:	e059      	b.n	8009584 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80094d0:	4b2f      	ldr	r3, [pc, #188]	; (8009590 <USBD_SetConfig+0x150>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d112      	bne.n	80094fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2202      	movs	r2, #2
 80094dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80094e0:	4b2b      	ldr	r3, [pc, #172]	; (8009590 <USBD_SetConfig+0x150>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094ea:	4b29      	ldr	r3, [pc, #164]	; (8009590 <USBD_SetConfig+0x150>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7fe ffd6 	bl	80084a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa06 	bl	8009908 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094fc:	e042      	b.n	8009584 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80094fe:	4b24      	ldr	r3, [pc, #144]	; (8009590 <USBD_SetConfig+0x150>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	429a      	cmp	r2, r3
 800950a:	d02a      	beq.n	8009562 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	b2db      	uxtb	r3, r3
 8009512:	4619      	mov	r1, r3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7fe ffc4 	bl	80084a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800951a:	4b1d      	ldr	r3, [pc, #116]	; (8009590 <USBD_SetConfig+0x150>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009524:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <USBD_SetConfig+0x150>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7fe ff9d 	bl	800846a <USBD_SetClassConfig>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00f      	beq.n	800955a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f918 	bl	8009772 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7fe ffa9 	bl	80084a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009558:	e014      	b.n	8009584 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f9d4 	bl	8009908 <USBD_CtlSendStatus>
      break;
 8009560:	e010      	b.n	8009584 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f9d0 	bl	8009908 <USBD_CtlSendStatus>
      break;
 8009568:	e00c      	b.n	8009584 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f900 	bl	8009772 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009572:	4b07      	ldr	r3, [pc, #28]	; (8009590 <USBD_SetConfig+0x150>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7fe ff92 	bl	80084a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800957e:	2303      	movs	r3, #3
 8009580:	73fb      	strb	r3, [r7, #15]
      break;
 8009582:	bf00      	nop
  }

  return ret;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200010f0 	.word	0x200010f0

08009594 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	88db      	ldrh	r3, [r3, #6]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d004      	beq.n	80095b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f8e2 	bl	8009772 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095ae:	e023      	b.n	80095f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	dc02      	bgt.n	80095c2 <USBD_GetConfig+0x2e>
 80095bc:	2b00      	cmp	r3, #0
 80095be:	dc03      	bgt.n	80095c8 <USBD_GetConfig+0x34>
 80095c0:	e015      	b.n	80095ee <USBD_GetConfig+0x5a>
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d00b      	beq.n	80095de <USBD_GetConfig+0x4a>
 80095c6:	e012      	b.n	80095ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3308      	adds	r3, #8
 80095d2:	2201      	movs	r2, #1
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f93c 	bl	8009854 <USBD_CtlSendData>
        break;
 80095dc:	e00c      	b.n	80095f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3304      	adds	r3, #4
 80095e2:	2201      	movs	r2, #1
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f934 	bl	8009854 <USBD_CtlSendData>
        break;
 80095ec:	e004      	b.n	80095f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f8be 	bl	8009772 <USBD_CtlError>
        break;
 80095f6:	bf00      	nop
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009610:	b2db      	uxtb	r3, r3
 8009612:	3b01      	subs	r3, #1
 8009614:	2b02      	cmp	r3, #2
 8009616:	d81e      	bhi.n	8009656 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	88db      	ldrh	r3, [r3, #6]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d004      	beq.n	800962a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f8a5 	bl	8009772 <USBD_CtlError>
        break;
 8009628:	e01a      	b.n	8009660 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009636:	2b00      	cmp	r3, #0
 8009638:	d005      	beq.n	8009646 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	f043 0202 	orr.w	r2, r3, #2
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	330c      	adds	r3, #12
 800964a:	2202      	movs	r2, #2
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f900 	bl	8009854 <USBD_CtlSendData>
      break;
 8009654:	e004      	b.n	8009660 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f88a 	bl	8009772 <USBD_CtlError>
      break;
 800965e:	bf00      	nop
  }
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	885b      	ldrh	r3, [r3, #2]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d107      	bne.n	800968a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f940 	bl	8009908 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009688:	e013      	b.n	80096b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	885b      	ldrh	r3, [r3, #2]
 800968e:	2b02      	cmp	r3, #2
 8009690:	d10b      	bne.n	80096aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	889b      	ldrh	r3, [r3, #4]
 8009696:	0a1b      	lsrs	r3, r3, #8
 8009698:	b29b      	uxth	r3, r3
 800969a:	b2da      	uxtb	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f930 	bl	8009908 <USBD_CtlSendStatus>
}
 80096a8:	e003      	b.n	80096b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f860 	bl	8009772 <USBD_CtlError>
}
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	3b01      	subs	r3, #1
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d80b      	bhi.n	80096ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	885b      	ldrh	r3, [r3, #2]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d10c      	bne.n	80096f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f910 	bl	8009908 <USBD_CtlSendStatus>
      }
      break;
 80096e8:	e004      	b.n	80096f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f840 	bl	8009772 <USBD_CtlError>
      break;
 80096f2:	e000      	b.n	80096f6 <USBD_ClrFeature+0x3c>
      break;
 80096f4:	bf00      	nop
  }
}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	3301      	adds	r3, #1
 8009718:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	781a      	ldrb	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3301      	adds	r3, #1
 8009726:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7ff fa41 	bl	8008bb0 <SWAPBYTE>
 800972e:	4603      	mov	r3, r0
 8009730:	461a      	mov	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3301      	adds	r3, #1
 800973a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff fa34 	bl	8008bb0 <SWAPBYTE>
 8009748:	4603      	mov	r3, r0
 800974a:	461a      	mov	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3301      	adds	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3301      	adds	r3, #1
 800975a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7ff fa27 	bl	8008bb0 <SWAPBYTE>
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	80da      	strh	r2, [r3, #6]
}
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800977c:	2180      	movs	r1, #128	; 0x80
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f004 ffea 	bl	800e758 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009784:	2100      	movs	r1, #0
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f004 ffe6 	bl	800e758 <USBD_LL_StallEP>
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d036      	beq.n	8009818 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80097ae:	6938      	ldr	r0, [r7, #16]
 80097b0:	f000 f836 	bl	8009820 <USBD_GetLen>
 80097b4:	4603      	mov	r3, r0
 80097b6:	3301      	adds	r3, #1
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	4413      	add	r3, r2
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	3301      	adds	r3, #1
 80097d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	4413      	add	r3, r2
 80097da:	2203      	movs	r2, #3
 80097dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
 80097e0:	3301      	adds	r3, #1
 80097e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80097e4:	e013      	b.n	800980e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	4413      	add	r3, r2
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	3301      	adds	r3, #1
 80097f6:	613b      	str	r3, [r7, #16]
    idx++;
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	3301      	adds	r3, #1
 80097fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	4413      	add	r3, r2
 8009804:	2200      	movs	r2, #0
 8009806:	701a      	strb	r2, [r3, #0]
    idx++;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	3301      	adds	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e7      	bne.n	80097e6 <USBD_GetString+0x52>
 8009816:	e000      	b.n	800981a <USBD_GetString+0x86>
    return;
 8009818:	bf00      	nop
  }
}
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009830:	e005      	b.n	800983e <USBD_GetLen+0x1e>
  {
    len++;
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	3301      	adds	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	3301      	adds	r3, #1
 800983c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1f5      	bne.n	8009832 <USBD_GetLen+0x12>
  }

  return len;
 8009846:	7bfb      	ldrb	r3, [r7, #15]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2202      	movs	r2, #2
 8009864:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	2100      	movs	r1, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f004 fff5 	bl	800e86a <USBD_LL_Transmit>

  return USBD_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	2100      	movs	r1, #0
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f004 ffe4 	bl	800e86a <USBD_LL_Transmit>

  return USBD_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2203      	movs	r2, #3
 80098bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	2100      	movs	r1, #0
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f004 ffe8 	bl	800e8ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	2100      	movs	r1, #0
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f004 ffd7 	bl	800e8ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2204      	movs	r2, #4
 8009914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009918:	2300      	movs	r3, #0
 800991a:	2200      	movs	r2, #0
 800991c:	2100      	movs	r1, #0
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f004 ffa3 	bl	800e86a <USBD_LL_Transmit>

  return USBD_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2205      	movs	r2, #5
 800993a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800993e:	2300      	movs	r3, #0
 8009940:	2200      	movs	r2, #0
 8009942:	2100      	movs	r1, #0
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f004 ffb1 	bl	800e8ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <__NVIC_SetPriority>:
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	6039      	str	r1, [r7, #0]
 800995e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009964:	2b00      	cmp	r3, #0
 8009966:	db0a      	blt.n	800997e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	b2da      	uxtb	r2, r3
 800996c:	490c      	ldr	r1, [pc, #48]	; (80099a0 <__NVIC_SetPriority+0x4c>)
 800996e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009972:	0112      	lsls	r2, r2, #4
 8009974:	b2d2      	uxtb	r2, r2
 8009976:	440b      	add	r3, r1
 8009978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800997c:	e00a      	b.n	8009994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	4908      	ldr	r1, [pc, #32]	; (80099a4 <__NVIC_SetPriority+0x50>)
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	f003 030f 	and.w	r3, r3, #15
 800998a:	3b04      	subs	r3, #4
 800998c:	0112      	lsls	r2, r2, #4
 800998e:	b2d2      	uxtb	r2, r2
 8009990:	440b      	add	r3, r1
 8009992:	761a      	strb	r2, [r3, #24]
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	e000e100 	.word	0xe000e100
 80099a4:	e000ed00 	.word	0xe000ed00

080099a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80099ac:	2100      	movs	r1, #0
 80099ae:	f06f 0004 	mvn.w	r0, #4
 80099b2:	f7ff ffcf 	bl	8009954 <__NVIC_SetPriority>
#endif
}
 80099b6:	bf00      	nop
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099c2:	f3ef 8305 	mrs	r3, IPSR
 80099c6:	603b      	str	r3, [r7, #0]
  return(result);
 80099c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80099ce:	f06f 0305 	mvn.w	r3, #5
 80099d2:	607b      	str	r3, [r7, #4]
 80099d4:	e00c      	b.n	80099f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80099d6:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <osKernelInitialize+0x44>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d105      	bne.n	80099ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80099de:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <osKernelInitialize+0x44>)
 80099e0:	2201      	movs	r2, #1
 80099e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	607b      	str	r3, [r7, #4]
 80099e8:	e002      	b.n	80099f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099f0:	687b      	ldr	r3, [r7, #4]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	200010f4 	.word	0x200010f4

08009a04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a0a:	f3ef 8305 	mrs	r3, IPSR
 8009a0e:	603b      	str	r3, [r7, #0]
  return(result);
 8009a10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009a16:	f06f 0305 	mvn.w	r3, #5
 8009a1a:	607b      	str	r3, [r7, #4]
 8009a1c:	e010      	b.n	8009a40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009a1e:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <osKernelStart+0x48>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d109      	bne.n	8009a3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009a26:	f7ff ffbf 	bl	80099a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009a2a:	4b08      	ldr	r3, [pc, #32]	; (8009a4c <osKernelStart+0x48>)
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009a30:	f001 fef8 	bl	800b824 <vTaskStartScheduler>
      stat = osOK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	607b      	str	r3, [r7, #4]
 8009a38:	e002      	b.n	8009a40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a40:	687b      	ldr	r3, [r7, #4]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	200010f4 	.word	0x200010f4

08009a50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08e      	sub	sp, #56	; 0x38
 8009a54:	af04      	add	r7, sp, #16
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a60:	f3ef 8305 	mrs	r3, IPSR
 8009a64:	617b      	str	r3, [r7, #20]
  return(result);
 8009a66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d17e      	bne.n	8009b6a <osThreadNew+0x11a>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d07b      	beq.n	8009b6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a72:	2380      	movs	r3, #128	; 0x80
 8009a74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a76:	2318      	movs	r3, #24
 8009a78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d045      	beq.n	8009b16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <osThreadNew+0x48>
        name = attr->name;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d008      	beq.n	8009abe <osThreadNew+0x6e>
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	2b38      	cmp	r3, #56	; 0x38
 8009ab0:	d805      	bhi.n	8009abe <osThreadNew+0x6e>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <osThreadNew+0x72>
        return (NULL);
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e054      	b.n	8009b6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	089b      	lsrs	r3, r3, #2
 8009ad0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00e      	beq.n	8009af8 <osThreadNew+0xa8>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	2bcb      	cmp	r3, #203	; 0xcb
 8009ae0:	d90a      	bls.n	8009af8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d006      	beq.n	8009af8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d002      	beq.n	8009af8 <osThreadNew+0xa8>
        mem = 1;
 8009af2:	2301      	movs	r3, #1
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	e010      	b.n	8009b1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10c      	bne.n	8009b1a <osThreadNew+0xca>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d108      	bne.n	8009b1a <osThreadNew+0xca>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d104      	bne.n	8009b1a <osThreadNew+0xca>
          mem = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61bb      	str	r3, [r7, #24]
 8009b14:	e001      	b.n	8009b1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d110      	bne.n	8009b42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b28:	9202      	str	r2, [sp, #8]
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	6a3a      	ldr	r2, [r7, #32]
 8009b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f001 fb1c 	bl	800b174 <xTaskCreateStatic>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	e013      	b.n	8009b6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d110      	bne.n	8009b6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	f107 0310 	add.w	r3, r7, #16
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f001 fb67 	bl	800b22e <xTaskCreate>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d001      	beq.n	8009b6a <osThreadNew+0x11a>
            hTask = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b6a:	693b      	ldr	r3, [r7, #16]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3728      	adds	r7, #40	; 0x28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4a07      	ldr	r2, [pc, #28]	; (8009ba0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	4a06      	ldr	r2, [pc, #24]	; (8009ba4 <vApplicationGetIdleTaskMemory+0x30>)
 8009b8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2280      	movs	r2, #128	; 0x80
 8009b90:	601a      	str	r2, [r3, #0]
}
 8009b92:	bf00      	nop
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	200010f8 	.word	0x200010f8
 8009ba4:	200011c4 	.word	0x200011c4

08009ba8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4a07      	ldr	r2, [pc, #28]	; (8009bd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009bb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	4a06      	ldr	r2, [pc, #24]	; (8009bd8 <vApplicationGetTimerTaskMemory+0x30>)
 8009bbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bc6:	601a      	str	r2, [r3, #0]
}
 8009bc8:	bf00      	nop
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	200013c4 	.word	0x200013c4
 8009bd8:	20001490 	.word	0x20001490

08009bdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f103 0208 	add.w	r2, r3, #8
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f103 0208 	add.w	r2, r3, #8
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f103 0208 	add.w	r2, r3, #8
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c36:	b480      	push	{r7}
 8009c38:	b085      	sub	sp, #20
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	689a      	ldr	r2, [r3, #8]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	601a      	str	r2, [r3, #0]
}
 8009c72:	bf00      	nop
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b085      	sub	sp, #20
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c94:	d103      	bne.n	8009c9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	e00c      	b.n	8009cb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	e002      	b.n	8009cac <vListInsert+0x2e>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d2f6      	bcs.n	8009ca6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	6892      	ldr	r2, [r2, #8]
 8009d06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	6852      	ldr	r2, [r2, #4]
 8009d10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d103      	bne.n	8009d24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	1e5a      	subs	r2, r3, #1
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <xQueueGenericReset+0x2a>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	60bb      	str	r3, [r7, #8]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d6e:	f003 fc61 	bl	800d634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7a:	68f9      	ldr	r1, [r7, #12]
 8009d7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d7e:	fb01 f303 	mul.w	r3, r1, r3
 8009d82:	441a      	add	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	68f9      	ldr	r1, [r7, #12]
 8009da2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009da4:	fb01 f303 	mul.w	r3, r1, r3
 8009da8:	441a      	add	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	22ff      	movs	r2, #255	; 0xff
 8009db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	22ff      	movs	r2, #255	; 0xff
 8009dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d114      	bne.n	8009dee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01a      	beq.n	8009e02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3310      	adds	r3, #16
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f002 f84f 	bl	800be74 <xTaskRemoveFromEventList>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d012      	beq.n	8009e02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ddc:	4b0c      	ldr	r3, [pc, #48]	; (8009e10 <xQueueGenericReset+0xcc>)
 8009dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	e009      	b.n	8009e02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3310      	adds	r3, #16
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff fef2 	bl	8009bdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3324      	adds	r3, #36	; 0x24
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff feed 	bl	8009bdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e02:	f003 fc47 	bl	800d694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e06:	2301      	movs	r3, #1
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	e000ed04 	.word	0xe000ed04

08009e14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08e      	sub	sp, #56	; 0x38
 8009e18:	af02      	add	r7, sp, #8
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <xQueueGenericCreateStatic+0x52>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <xQueueGenericCreateStatic+0x56>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e000      	b.n	8009e6c <xQueueGenericCreateStatic+0x58>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	623b      	str	r3, [r7, #32]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <xQueueGenericCreateStatic+0x7e>
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <xQueueGenericCreateStatic+0x82>
 8009e92:	2301      	movs	r3, #1
 8009e94:	e000      	b.n	8009e98 <xQueueGenericCreateStatic+0x84>
 8009e96:	2300      	movs	r3, #0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10a      	bne.n	8009eb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	61fb      	str	r3, [r7, #28]
}
 8009eae:	bf00      	nop
 8009eb0:	e7fe      	b.n	8009eb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009eb2:	2350      	movs	r3, #80	; 0x50
 8009eb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b50      	cmp	r3, #80	; 0x50
 8009eba:	d00a      	beq.n	8009ed2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	61bb      	str	r3, [r7, #24]
}
 8009ece:	bf00      	nop
 8009ed0:	e7fe      	b.n	8009ed0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ed2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00d      	beq.n	8009efa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ee6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	68b9      	ldr	r1, [r7, #8]
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 f83f 	bl	8009f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3730      	adds	r7, #48	; 0x30
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08a      	sub	sp, #40	; 0x28
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10a      	bne.n	8009f2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	613b      	str	r3, [r7, #16]
}
 8009f2a:	bf00      	nop
 8009f2c:	e7fe      	b.n	8009f2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	fb02 f303 	mul.w	r3, r2, r3
 8009f36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	3350      	adds	r3, #80	; 0x50
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f003 fc9b 	bl	800d878 <pvPortMalloc>
 8009f42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d011      	beq.n	8009f6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	3350      	adds	r3, #80	; 0x50
 8009f52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f5c:	79fa      	ldrb	r2, [r7, #7]
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	4613      	mov	r3, r2
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	68b9      	ldr	r1, [r7, #8]
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 f805 	bl	8009f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3720      	adds	r7, #32
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
 8009f84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d103      	bne.n	8009f94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	e002      	b.n	8009f9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	69b8      	ldr	r0, [r7, #24]
 8009faa:	f7ff fecb 	bl	8009d44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	78fa      	ldrb	r2, [r7, #3]
 8009fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08e      	sub	sp, #56	; 0x38
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <xQueueGenericSend+0x32>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d103      	bne.n	800a000 <xQueueGenericSend+0x40>
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <xQueueGenericSend+0x44>
 800a000:	2301      	movs	r3, #1
 800a002:	e000      	b.n	800a006 <xQueueGenericSend+0x46>
 800a004:	2300      	movs	r3, #0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10a      	bne.n	800a020 <xQueueGenericSend+0x60>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a01c:	bf00      	nop
 800a01e:	e7fe      	b.n	800a01e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b02      	cmp	r3, #2
 800a024:	d103      	bne.n	800a02e <xQueueGenericSend+0x6e>
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d101      	bne.n	800a032 <xQueueGenericSend+0x72>
 800a02e:	2301      	movs	r3, #1
 800a030:	e000      	b.n	800a034 <xQueueGenericSend+0x74>
 800a032:	2300      	movs	r3, #0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10a      	bne.n	800a04e <xQueueGenericSend+0x8e>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	623b      	str	r3, [r7, #32]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a04e:	f002 f9b7 	bl	800c3c0 <xTaskGetSchedulerState>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <xQueueGenericSend+0x9e>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <xQueueGenericSend+0xa2>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <xQueueGenericSend+0xa4>
 800a062:	2300      	movs	r3, #0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <xQueueGenericSend+0xbe>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	61fb      	str	r3, [r7, #28]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a07e:	f003 fad9 	bl	800d634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d302      	bcc.n	800a094 <xQueueGenericSend+0xd4>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d129      	bne.n	800a0e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	68b9      	ldr	r1, [r7, #8]
 800a098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a09a:	f000 fbbb 	bl	800a814 <prvCopyDataToQueue>
 800a09e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d010      	beq.n	800a0ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	3324      	adds	r3, #36	; 0x24
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f001 fee1 	bl	800be74 <xTaskRemoveFromEventList>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d013      	beq.n	800a0e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0b8:	4b3f      	ldr	r3, [pc, #252]	; (800a1b8 <xQueueGenericSend+0x1f8>)
 800a0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	e00a      	b.n	800a0e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d007      	beq.n	800a0e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0d0:	4b39      	ldr	r3, [pc, #228]	; (800a1b8 <xQueueGenericSend+0x1f8>)
 800a0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d6:	601a      	str	r2, [r3, #0]
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0e0:	f003 fad8 	bl	800d694 <vPortExitCritical>
				return pdPASS;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e063      	b.n	800a1b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d103      	bne.n	800a0f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0ee:	f003 fad1 	bl	800d694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e05c      	b.n	800a1b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d106      	bne.n	800a10a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0fc:	f107 0314 	add.w	r3, r7, #20
 800a100:	4618      	mov	r0, r3
 800a102:	f001 ff1b 	bl	800bf3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a106:	2301      	movs	r3, #1
 800a108:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a10a:	f003 fac3 	bl	800d694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a10e:	f001 fbf9 	bl	800b904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a112:	f003 fa8f 	bl	800d634 <vPortEnterCritical>
 800a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a11c:	b25b      	sxtb	r3, r3
 800a11e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a122:	d103      	bne.n	800a12c <xQueueGenericSend+0x16c>
 800a124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a132:	b25b      	sxtb	r3, r3
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a138:	d103      	bne.n	800a142 <xQueueGenericSend+0x182>
 800a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a142:	f003 faa7 	bl	800d694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a146:	1d3a      	adds	r2, r7, #4
 800a148:	f107 0314 	add.w	r3, r7, #20
 800a14c:	4611      	mov	r1, r2
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 ff0a 	bl	800bf68 <xTaskCheckForTimeOut>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d124      	bne.n	800a1a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a15a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a15c:	f000 fc52 	bl	800aa04 <prvIsQueueFull>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d018      	beq.n	800a198 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a168:	3310      	adds	r3, #16
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	4611      	mov	r1, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f001 fe30 	bl	800bdd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a176:	f000 fbdd 	bl	800a934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a17a:	f001 fbd1 	bl	800b920 <xTaskResumeAll>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	f47f af7c 	bne.w	800a07e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a186:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <xQueueGenericSend+0x1f8>)
 800a188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	e772      	b.n	800a07e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a19a:	f000 fbcb 	bl	800a934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a19e:	f001 fbbf 	bl	800b920 <xTaskResumeAll>
 800a1a2:	e76c      	b.n	800a07e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a6:	f000 fbc5 	bl	800a934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1aa:	f001 fbb9 	bl	800b920 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3738      	adds	r7, #56	; 0x38
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	e000ed04 	.word	0xe000ed04

0800a1bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b090      	sub	sp, #64	; 0x40
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1e6:	bf00      	nop
 800a1e8:	e7fe      	b.n	800a1e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d103      	bne.n	800a1f8 <xQueueGenericSendFromISR+0x3c>
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <xQueueGenericSendFromISR+0x40>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <xQueueGenericSendFromISR+0x42>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d103      	bne.n	800a226 <xQueueGenericSendFromISR+0x6a>
 800a21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a222:	2b01      	cmp	r3, #1
 800a224:	d101      	bne.n	800a22a <xQueueGenericSendFromISR+0x6e>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <xQueueGenericSendFromISR+0x70>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	623b      	str	r3, [r7, #32]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a246:	f003 fad7 	bl	800d7f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a24a:	f3ef 8211 	mrs	r2, BASEPRI
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	61fa      	str	r2, [r7, #28]
 800a260:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a262:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a264:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26e:	429a      	cmp	r2, r3
 800a270:	d302      	bcc.n	800a278 <xQueueGenericSendFromISR+0xbc>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b02      	cmp	r3, #2
 800a276:	d12f      	bne.n	800a2d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a286:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a28e:	f000 fac1 	bl	800a814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a292:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a29a:	d112      	bne.n	800a2c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d016      	beq.n	800a2d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a6:	3324      	adds	r3, #36	; 0x24
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f001 fde3 	bl	800be74 <xTaskRemoveFromEventList>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00e      	beq.n	800a2d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00b      	beq.n	800a2d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	e007      	b.n	800a2d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	b25a      	sxtb	r2, r3
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a2d6:	e001      	b.n	800a2dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3740      	adds	r7, #64	; 0x40
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b08e      	sub	sp, #56	; 0x38
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	623b      	str	r3, [r7, #32]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00a      	beq.n	800a33a <xQueueGiveFromISR+0x48>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	61fb      	str	r3, [r7, #28]
}
 800a336:	bf00      	nop
 800a338:	e7fe      	b.n	800a338 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d103      	bne.n	800a34a <xQueueGiveFromISR+0x58>
 800a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <xQueueGiveFromISR+0x5c>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <xQueueGiveFromISR+0x5e>
 800a34e:	2300      	movs	r3, #0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10a      	bne.n	800a36a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	61bb      	str	r3, [r7, #24]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a36a:	f003 fa45 	bl	800d7f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a36e:	f3ef 8211 	mrs	r2, BASEPRI
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	617a      	str	r2, [r7, #20]
 800a384:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a386:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a396:	429a      	cmp	r2, r3
 800a398:	d22b      	bcs.n	800a3f2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3b4:	d112      	bne.n	800a3dc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d016      	beq.n	800a3ec <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	3324      	adds	r3, #36	; 0x24
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f001 fd56 	bl	800be74 <xTaskRemoveFromEventList>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00e      	beq.n	800a3ec <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	e007      	b.n	800a3ec <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	b25a      	sxtb	r2, r3
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a3f0:	e001      	b.n	800a3f6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f383 8811 	msr	BASEPRI, r3
}
 800a400:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a404:	4618      	mov	r0, r3
 800a406:	3738      	adds	r7, #56	; 0x38
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08c      	sub	sp, #48	; 0x30
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a418:	2300      	movs	r3, #0
 800a41a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10a      	bne.n	800a43c <xQueueReceive+0x30>
	__asm volatile
 800a426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	623b      	str	r3, [r7, #32]
}
 800a438:	bf00      	nop
 800a43a:	e7fe      	b.n	800a43a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d103      	bne.n	800a44a <xQueueReceive+0x3e>
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <xQueueReceive+0x42>
 800a44a:	2301      	movs	r3, #1
 800a44c:	e000      	b.n	800a450 <xQueueReceive+0x44>
 800a44e:	2300      	movs	r3, #0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <xQueueReceive+0x5e>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	61fb      	str	r3, [r7, #28]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a46a:	f001 ffa9 	bl	800c3c0 <xTaskGetSchedulerState>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d102      	bne.n	800a47a <xQueueReceive+0x6e>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <xQueueReceive+0x72>
 800a47a:	2301      	movs	r3, #1
 800a47c:	e000      	b.n	800a480 <xQueueReceive+0x74>
 800a47e:	2300      	movs	r3, #0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <xQueueReceive+0x8e>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	61bb      	str	r3, [r7, #24]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a49a:	f003 f8cb 	bl	800d634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d01f      	beq.n	800a4ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4aa:	68b9      	ldr	r1, [r7, #8]
 800a4ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4ae:	f000 fa1b 	bl	800a8e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	1e5a      	subs	r2, r3, #1
 800a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00f      	beq.n	800a4e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	3310      	adds	r3, #16
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 fcd4 	bl	800be74 <xTaskRemoveFromEventList>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d007      	beq.n	800a4e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4d2:	4b3d      	ldr	r3, [pc, #244]	; (800a5c8 <xQueueReceive+0x1bc>)
 800a4d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4e2:	f003 f8d7 	bl	800d694 <vPortExitCritical>
				return pdPASS;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e069      	b.n	800a5be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d103      	bne.n	800a4f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4f0:	f003 f8d0 	bl	800d694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e062      	b.n	800a5be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d106      	bne.n	800a50c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4fe:	f107 0310 	add.w	r3, r7, #16
 800a502:	4618      	mov	r0, r3
 800a504:	f001 fd1a 	bl	800bf3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a50c:	f003 f8c2 	bl	800d694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a510:	f001 f9f8 	bl	800b904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a514:	f003 f88e 	bl	800d634 <vPortEnterCritical>
 800a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a51e:	b25b      	sxtb	r3, r3
 800a520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a524:	d103      	bne.n	800a52e <xQueueReceive+0x122>
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a534:	b25b      	sxtb	r3, r3
 800a536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a53a:	d103      	bne.n	800a544 <xQueueReceive+0x138>
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a544:	f003 f8a6 	bl	800d694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a548:	1d3a      	adds	r2, r7, #4
 800a54a:	f107 0310 	add.w	r3, r7, #16
 800a54e:	4611      	mov	r1, r2
 800a550:	4618      	mov	r0, r3
 800a552:	f001 fd09 	bl	800bf68 <xTaskCheckForTimeOut>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d123      	bne.n	800a5a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a55e:	f000 fa3b 	bl	800a9d8 <prvIsQueueEmpty>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d017      	beq.n	800a598 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	3324      	adds	r3, #36	; 0x24
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	4611      	mov	r1, r2
 800a570:	4618      	mov	r0, r3
 800a572:	f001 fc2f 	bl	800bdd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a578:	f000 f9dc 	bl	800a934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a57c:	f001 f9d0 	bl	800b920 <xTaskResumeAll>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d189      	bne.n	800a49a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a586:	4b10      	ldr	r3, [pc, #64]	; (800a5c8 <xQueueReceive+0x1bc>)
 800a588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	e780      	b.n	800a49a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a59a:	f000 f9cb 	bl	800a934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a59e:	f001 f9bf 	bl	800b920 <xTaskResumeAll>
 800a5a2:	e77a      	b.n	800a49a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a6:	f000 f9c5 	bl	800a934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5aa:	f001 f9b9 	bl	800b920 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b0:	f000 fa12 	bl	800a9d8 <prvIsQueueEmpty>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f43f af6f 	beq.w	800a49a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3730      	adds	r7, #48	; 0x30
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08e      	sub	sp, #56	; 0x38
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10a      	bne.n	800a5fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	623b      	str	r3, [r7, #32]
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	61fb      	str	r3, [r7, #28]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a61c:	f001 fed0 	bl	800c3c0 <xTaskGetSchedulerState>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d102      	bne.n	800a62c <xQueueSemaphoreTake+0x60>
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <xQueueSemaphoreTake+0x64>
 800a62c:	2301      	movs	r3, #1
 800a62e:	e000      	b.n	800a632 <xQueueSemaphoreTake+0x66>
 800a630:	2300      	movs	r3, #0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	61bb      	str	r3, [r7, #24]
}
 800a648:	bf00      	nop
 800a64a:	e7fe      	b.n	800a64a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a64c:	f002 fff2 	bl	800d634 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a654:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d024      	beq.n	800a6a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	1e5a      	subs	r2, r3, #1
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d104      	bne.n	800a676 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a66c:	f002 f8da 	bl	800c824 <pvTaskIncrementMutexHeldCount>
 800a670:	4602      	mov	r2, r0
 800a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a674:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00f      	beq.n	800a69e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a680:	3310      	adds	r3, #16
 800a682:	4618      	mov	r0, r3
 800a684:	f001 fbf6 	bl	800be74 <xTaskRemoveFromEventList>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d007      	beq.n	800a69e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a68e:	4b54      	ldr	r3, [pc, #336]	; (800a7e0 <xQueueSemaphoreTake+0x214>)
 800a690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a694:	601a      	str	r2, [r3, #0]
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a69e:	f002 fff9 	bl	800d694 <vPortExitCritical>
				return pdPASS;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e097      	b.n	800a7d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d111      	bne.n	800a6d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00a      	beq.n	800a6c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	617b      	str	r3, [r7, #20]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a6c8:	f002 ffe4 	bl	800d694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	e082      	b.n	800a7d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d6:	f107 030c 	add.w	r3, r7, #12
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 fc2e 	bl	800bf3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e4:	f002 ffd6 	bl	800d694 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6e8:	f001 f90c 	bl	800b904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ec:	f002 ffa2 	bl	800d634 <vPortEnterCritical>
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f6:	b25b      	sxtb	r3, r3
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6fc:	d103      	bne.n	800a706 <xQueueSemaphoreTake+0x13a>
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a70c:	b25b      	sxtb	r3, r3
 800a70e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a712:	d103      	bne.n	800a71c <xQueueSemaphoreTake+0x150>
 800a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a71c:	f002 ffba 	bl	800d694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a720:	463a      	mov	r2, r7
 800a722:	f107 030c 	add.w	r3, r7, #12
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f001 fc1d 	bl	800bf68 <xTaskCheckForTimeOut>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d132      	bne.n	800a79a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a736:	f000 f94f 	bl	800a9d8 <prvIsQueueEmpty>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d026      	beq.n	800a78e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d109      	bne.n	800a75c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a748:	f002 ff74 	bl	800d634 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	4618      	mov	r0, r3
 800a752:	f001 fe53 	bl	800c3fc <xTaskPriorityInherit>
 800a756:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a758:	f002 ff9c 	bl	800d694 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75e:	3324      	adds	r3, #36	; 0x24
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	4611      	mov	r1, r2
 800a764:	4618      	mov	r0, r3
 800a766:	f001 fb35 	bl	800bdd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a76a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a76c:	f000 f8e2 	bl	800a934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a770:	f001 f8d6 	bl	800b920 <xTaskResumeAll>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	f47f af68 	bne.w	800a64c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a77c:	4b18      	ldr	r3, [pc, #96]	; (800a7e0 <xQueueSemaphoreTake+0x214>)
 800a77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	e75e      	b.n	800a64c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a78e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a790:	f000 f8d0 	bl	800a934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a794:	f001 f8c4 	bl	800b920 <xTaskResumeAll>
 800a798:	e758      	b.n	800a64c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a79c:	f000 f8ca 	bl	800a934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7a0:	f001 f8be 	bl	800b920 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7a6:	f000 f917 	bl	800a9d8 <prvIsQueueEmpty>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f43f af4d 	beq.w	800a64c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00d      	beq.n	800a7d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a7b8:	f002 ff3c 	bl	800d634 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a7bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7be:	f000 f811 	bl	800a7e4 <prvGetDisinheritPriorityAfterTimeout>
 800a7c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f001 feec 	bl	800c5a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a7d0:	f002 ff60 	bl	800d694 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3738      	adds	r7, #56	; 0x38
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	e000ed04 	.word	0xe000ed04

0800a7e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d006      	beq.n	800a802 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a7fe:	60fb      	str	r3, [r7, #12]
 800a800:	e001      	b.n	800a806 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a802:	2300      	movs	r3, #0
 800a804:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a806:	68fb      	ldr	r3, [r7, #12]
	}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10d      	bne.n	800a84e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d14d      	bne.n	800a8d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f001 fe44 	bl	800c4cc <xTaskPriorityDisinherit>
 800a844:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	609a      	str	r2, [r3, #8]
 800a84c:	e043      	b.n	800a8d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d119      	bne.n	800a888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6858      	ldr	r0, [r3, #4]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85c:	461a      	mov	r2, r3
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	f005 f890 	bl	800f984 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86c:	441a      	add	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d32b      	bcc.n	800a8d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	605a      	str	r2, [r3, #4]
 800a886:	e026      	b.n	800a8d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	68d8      	ldr	r0, [r3, #12]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a890:	461a      	mov	r2, r3
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	f005 f876 	bl	800f984 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	68da      	ldr	r2, [r3, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a0:	425b      	negs	r3, r3
 800a8a2:	441a      	add	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68da      	ldr	r2, [r3, #12]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d207      	bcs.n	800a8c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8bc:	425b      	negs	r3, r3
 800a8be:	441a      	add	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d105      	bne.n	800a8d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a8de:	697b      	ldr	r3, [r7, #20]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d018      	beq.n	800a92c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	441a      	add	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	68da      	ldr	r2, [r3, #12]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	429a      	cmp	r2, r3
 800a912:	d303      	bcc.n	800a91c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68d9      	ldr	r1, [r3, #12]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	461a      	mov	r2, r3
 800a926:	6838      	ldr	r0, [r7, #0]
 800a928:	f005 f82c 	bl	800f984 <memcpy>
	}
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a93c:	f002 fe7a 	bl	800d634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a948:	e011      	b.n	800a96e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d012      	beq.n	800a978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3324      	adds	r3, #36	; 0x24
 800a956:	4618      	mov	r0, r3
 800a958:	f001 fa8c 	bl	800be74 <xTaskRemoveFromEventList>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a962:	f001 fb63 	bl	800c02c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	3b01      	subs	r3, #1
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dce9      	bgt.n	800a94a <prvUnlockQueue+0x16>
 800a976:	e000      	b.n	800a97a <prvUnlockQueue+0x46>
					break;
 800a978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	22ff      	movs	r2, #255	; 0xff
 800a97e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a982:	f002 fe87 	bl	800d694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a986:	f002 fe55 	bl	800d634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a992:	e011      	b.n	800a9b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d012      	beq.n	800a9c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3310      	adds	r3, #16
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f001 fa67 	bl	800be74 <xTaskRemoveFromEventList>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9ac:	f001 fb3e 	bl	800c02c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dce9      	bgt.n	800a994 <prvUnlockQueue+0x60>
 800a9c0:	e000      	b.n	800a9c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	22ff      	movs	r2, #255	; 0xff
 800a9c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a9cc:	f002 fe62 	bl	800d694 <vPortExitCritical>
}
 800a9d0:	bf00      	nop
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9e0:	f002 fe28 	bl	800d634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d102      	bne.n	800a9f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e001      	b.n	800a9f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9f6:	f002 fe4d 	bl	800d694 <vPortExitCritical>

	return xReturn;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa0c:	f002 fe12 	bl	800d634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d102      	bne.n	800aa22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	60fb      	str	r3, [r7, #12]
 800aa20:	e001      	b.n	800aa26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa26:	f002 fe35 	bl	800d694 <vPortExitCritical>

	return xReturn;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	e014      	b.n	800aa6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa44:	4a0f      	ldr	r2, [pc, #60]	; (800aa84 <vQueueAddToRegistry+0x50>)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10b      	bne.n	800aa68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa50:	490c      	ldr	r1, [pc, #48]	; (800aa84 <vQueueAddToRegistry+0x50>)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa5a:	4a0a      	ldr	r2, [pc, #40]	; (800aa84 <vQueueAddToRegistry+0x50>)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	4413      	add	r3, r2
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa66:	e006      	b.n	800aa76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b07      	cmp	r3, #7
 800aa72:	d9e7      	bls.n	800aa44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	20001890 	.word	0x20001890

0800aa88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa98:	f002 fdcc 	bl	800d634 <vPortEnterCritical>
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaa2:	b25b      	sxtb	r3, r3
 800aaa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaa8:	d103      	bne.n	800aab2 <vQueueWaitForMessageRestricted+0x2a>
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aab8:	b25b      	sxtb	r3, r3
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aabe:	d103      	bne.n	800aac8 <vQueueWaitForMessageRestricted+0x40>
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aac8:	f002 fde4 	bl	800d694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d106      	bne.n	800aae2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	3324      	adds	r3, #36	; 0x24
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	4618      	mov	r0, r3
 800aade:	f001 f99d 	bl	800be1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aae2:	6978      	ldr	r0, [r7, #20]
 800aae4:	f7ff ff26 	bl	800a934 <prvUnlockQueue>
	}
 800aae8:	bf00      	nop
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08c      	sub	sp, #48	; 0x30
 800aaf4:	af02      	add	r7, sp, #8
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d110      	bne.n	800ab24 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800ab02:	2301      	movs	r3, #1
 800ab04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b04      	cmp	r3, #4
 800ab0c:	d81b      	bhi.n	800ab46 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	61fb      	str	r3, [r7, #28]
}
 800ab20:	bf00      	nop
 800ab22:	e7fe      	b.n	800ab22 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800ab24:	2300      	movs	r3, #0
 800ab26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	61bb      	str	r3, [r7, #24]
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d90a      	bls.n	800ab64 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	617b      	str	r3, [r7, #20]
}
 800ab60:	bf00      	nop
 800ab62:	e7fe      	b.n	800ab62 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	3301      	adds	r3, #1
 800ab72:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	3324      	adds	r3, #36	; 0x24
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f002 fe7d 	bl	800d878 <pvPortMalloc>
 800ab7e:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00a      	beq.n	800ab9c <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ab8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	6a38      	ldr	r0, [r7, #32]
 800ab98:	f000 fab9 	bl	800b10e <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800ab9c:	6a3b      	ldr	r3, [r7, #32]
	}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3728      	adds	r7, #40	; 0x28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800aba6:	b480      	push	{r7}
 800aba8:	b087      	sub	sp, #28
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	60fb      	str	r3, [r7, #12]
}
 800abca:	bf00      	nop
 800abcc:	e7fe      	b.n	800abcc <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	689a      	ldr	r2, [r3, #8]
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4413      	add	r3, r2
 800abd8:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d304      	bcc.n	800abfe <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800abfe:	697b      	ldr	r3, [r7, #20]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	371c      	adds	r7, #28
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b090      	sub	sp, #64	; 0x40
 800ac10:	af02      	add	r7, sp, #8
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <xStreamBufferSendFromISR+0x32>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	623b      	str	r3, [r7, #32]
}
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10a      	bne.n	800ac5a <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 800ac44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	61fb      	str	r3, [r7, #28]
}
 800ac56:	bf00      	nop
 800ac58:	e7fe      	b.n	800ac58 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	7f1b      	ldrb	r3, [r3, #28]
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d002      	beq.n	800ac6c <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800ac66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac68:	3304      	adds	r3, #4
 800ac6a:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800ac6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac6e:	f7ff ff9a 	bl	800aba6 <xStreamBufferSpacesAvailable>
 800ac72:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800ac74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	68b9      	ldr	r1, [r7, #8]
 800ac7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac80:	f000 f835 	bl	800acee <prvWriteMessageToBuffer>
 800ac84:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800ac86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d02b      	beq.n	800ace4 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800ac8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac8e:	f000 fa1e 	bl	800b0ce <prvBytesInBuffer>
 800ac92:	4602      	mov	r2, r0
 800ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d323      	bcc.n	800ace4 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 800ac9c:	f3ef 8211 	mrs	r2, BASEPRI
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	61ba      	str	r2, [r7, #24]
 800acb2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800acb4:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <xStreamBufferSendFromISR+0xcc>
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	6918      	ldr	r0, [r3, #16]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	2300      	movs	r3, #0
 800acca:	2200      	movs	r2, #0
 800accc:	2100      	movs	r1, #0
 800acce:	f001 fedb 	bl	800ca88 <xTaskGenericNotifyFromISR>
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	2200      	movs	r2, #0
 800acd6:	611a      	str	r2, [r3, #16]
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	613b      	str	r3, [r7, #16]
	__asm volatile
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	f383 8811 	msr	BASEPRI, r3
}
 800ace2:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3738      	adds	r7, #56	; 0x38
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b086      	sub	sp, #24
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	60f8      	str	r0, [r7, #12]
 800acf6:	60b9      	str	r1, [r7, #8]
 800acf8:	607a      	str	r2, [r7, #4]
 800acfa:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d102      	bne.n	800ad08 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
 800ad06:	e01d      	b.n	800ad44 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	7f1b      	ldrb	r3, [r3, #28]
 800ad0c:	f003 0301 	and.w	r3, r3, #1
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d108      	bne.n	800ad26 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	bf28      	it	cs
 800ad20:	4613      	movcs	r3, r2
 800ad22:	607b      	str	r3, [r7, #4]
 800ad24:	e00e      	b.n	800ad44 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d308      	bcc.n	800ad40 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800ad32:	1d3b      	adds	r3, r7, #4
 800ad34:	2204      	movs	r2, #4
 800ad36:	4619      	mov	r1, r3
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 f8dc 	bl	800aef6 <prvWriteBytesToBuffer>
 800ad3e:	e001      	b.n	800ad44 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d007      	beq.n	800ad5a <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	68b9      	ldr	r1, [r7, #8]
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f000 f8d0 	bl	800aef6 <prvWriteBytesToBuffer>
 800ad56:	6138      	str	r0, [r7, #16]
 800ad58:	e001      	b.n	800ad5e <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800ad5e:	693b      	ldr	r3, [r7, #16]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3718      	adds	r7, #24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08e      	sub	sp, #56	; 0x38
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10a      	bne.n	800ad9a <xStreamBufferReceive+0x32>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	61fb      	str	r3, [r7, #28]
}
 800ad96:	bf00      	nop
 800ad98:	e7fe      	b.n	800ad98 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <xStreamBufferReceive+0x4e>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	61bb      	str	r3, [r7, #24]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	7f1b      	ldrb	r3, [r3, #28]
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d002      	beq.n	800adc8 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800adc2:	2304      	movs	r3, #4
 800adc4:	627b      	str	r3, [r7, #36]	; 0x24
 800adc6:	e001      	b.n	800adcc <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d034      	beq.n	800ae3c <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800add2:	f002 fc2f 	bl	800d634 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800add6:	6a38      	ldr	r0, [r7, #32]
 800add8:	f000 f979 	bl	800b0ce <prvBytesInBuffer>
 800addc:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800adde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d816      	bhi.n	800ae14 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800ade6:	2000      	movs	r0, #0
 800ade8:	f001 ff32 	bl	800cc50 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00a      	beq.n	800ae0a <xStreamBufferReceive+0xa2>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	617b      	str	r3, [r7, #20]
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800ae0a:	f001 fac9 	bl	800c3a0 <xTaskGetCurrentTaskHandle>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ae14:	f002 fc3e 	bl	800d694 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800ae18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d811      	bhi.n	800ae44 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	2200      	movs	r2, #0
 800ae24:	2100      	movs	r1, #0
 800ae26:	2000      	movs	r0, #0
 800ae28:	f001 fd10 	bl	800c84c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800ae32:	6a38      	ldr	r0, [r7, #32]
 800ae34:	f000 f94b 	bl	800b0ce <prvBytesInBuffer>
 800ae38:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae3a:	e003      	b.n	800ae44 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800ae3c:	6a38      	ldr	r0, [r7, #32]
 800ae3e:	f000 f946 	bl	800b0ce <prvBytesInBuffer>
 800ae42:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800ae44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d91d      	bls.n	800ae88 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	68b9      	ldr	r1, [r7, #8]
 800ae56:	6a38      	ldr	r0, [r7, #32]
 800ae58:	f000 f81b 	bl	800ae92 <prvReadMessageFromBuffer>
 800ae5c:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d011      	beq.n	800ae88 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800ae64:	f000 fd4e 	bl	800b904 <vTaskSuspendAll>
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	695b      	ldr	r3, [r3, #20]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d009      	beq.n	800ae84 <xStreamBufferReceive+0x11c>
 800ae70:	6a3b      	ldr	r3, [r7, #32]
 800ae72:	6958      	ldr	r0, [r3, #20]
 800ae74:	2300      	movs	r3, #0
 800ae76:	2200      	movs	r2, #0
 800ae78:	2100      	movs	r1, #0
 800ae7a:	f001 fd47 	bl	800c90c <xTaskGenericNotify>
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	2200      	movs	r2, #0
 800ae82:	615a      	str	r2, [r3, #20]
 800ae84:	f000 fd4c 	bl	800b920 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800ae88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3730      	adds	r7, #48	; 0x30
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b088      	sub	sp, #32
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	60f8      	str	r0, [r7, #12]
 800ae9a:	60b9      	str	r1, [r7, #8]
 800ae9c:	607a      	str	r2, [r7, #4]
 800ae9e:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d019      	beq.n	800aeda <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800aeac:	f107 0110 	add.w	r1, r7, #16
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 f890 	bl	800afda <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d907      	bls.n	800aede <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	69ba      	ldr	r2, [r7, #24]
 800aed2:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	61fb      	str	r3, [r7, #28]
 800aed8:	e001      	b.n	800aede <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	69fa      	ldr	r2, [r7, #28]
 800aee2:	68b9      	ldr	r1, [r7, #8]
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 f878 	bl	800afda <prvReadBytesFromBuffer>
 800aeea:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800aeec:	697b      	ldr	r3, [r7, #20]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3720      	adds	r7, #32
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b08a      	sub	sp, #40	; 0x28
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	60f8      	str	r0, [r7, #12]
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	61fb      	str	r3, [r7, #28]
}
 800af1a:	bf00      	nop
 800af1c:	e7fe      	b.n	800af1c <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	689a      	ldr	r2, [r3, #8]
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	4293      	cmp	r3, r2
 800af30:	bf28      	it	cs
 800af32:	4613      	movcs	r3, r2
 800af34:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800af36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	441a      	add	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	429a      	cmp	r2, r3
 800af42:	d90a      	bls.n	800af5a <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	61bb      	str	r3, [r7, #24]
}
 800af56:	bf00      	nop
 800af58:	e7fe      	b.n	800af58 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af60:	4413      	add	r3, r2
 800af62:	6a3a      	ldr	r2, [r7, #32]
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	4618      	mov	r0, r3
 800af68:	f004 fd0c 	bl	800f984 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	429a      	cmp	r2, r3
 800af72:	d91c      	bls.n	800afae <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	1ad2      	subs	r2, r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d90a      	bls.n	800af98 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	617b      	str	r3, [r7, #20]
}
 800af94:	bf00      	nop
 800af96:	e7fe      	b.n	800af96 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6998      	ldr	r0, [r3, #24]
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	18d1      	adds	r1, r2, r3
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	461a      	mov	r2, r3
 800afaa:	f004 fceb 	bl	800f984 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800afae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4413      	add	r3, r2
 800afb4:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d304      	bcc.n	800afca <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afce:	605a      	str	r2, [r3, #4]

	return xCount;
 800afd0:	687b      	ldr	r3, [r7, #4]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3728      	adds	r7, #40	; 0x28
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b08a      	sub	sp, #40	; 0x28
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	4293      	cmp	r3, r2
 800afee:	bf28      	it	cs
 800aff0:	4613      	movcs	r3, r2
 800aff2:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d064      	beq.n	800b0c4 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	689a      	ldr	r2, [r3, #8]
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	6a3a      	ldr	r2, [r7, #32]
 800b00a:	4293      	cmp	r3, r2
 800b00c:	bf28      	it	cs
 800b00e:	4613      	movcs	r3, r2
 800b010:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	429a      	cmp	r2, r3
 800b018:	d90a      	bls.n	800b030 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	61bb      	str	r3, [r7, #24]
}
 800b02c:	bf00      	nop
 800b02e:	e7fe      	b.n	800b02e <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800b030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	441a      	add	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d90a      	bls.n	800b054 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	617b      	str	r3, [r7, #20]
}
 800b050:	bf00      	nop
 800b052:	e7fe      	b.n	800b052 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	699a      	ldr	r2, [r3, #24]
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	4413      	add	r3, r2
 800b05c:	69fa      	ldr	r2, [r7, #28]
 800b05e:	4619      	mov	r1, r3
 800b060:	68b8      	ldr	r0, [r7, #8]
 800b062:	f004 fc8f 	bl	800f984 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800b066:	6a3a      	ldr	r2, [r7, #32]
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d919      	bls.n	800b0a2 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800b06e:	6a3a      	ldr	r2, [r7, #32]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	429a      	cmp	r2, r3
 800b074:	d90a      	bls.n	800b08c <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	613b      	str	r3, [r7, #16]
}
 800b088:	bf00      	nop
 800b08a:	e7fe      	b.n	800b08a <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	18d0      	adds	r0, r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6999      	ldr	r1, [r3, #24]
 800b096:	6a3a      	ldr	r2, [r7, #32]
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	461a      	mov	r2, r3
 800b09e:	f004 fc71 	bl	800f984 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800b0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d304      	bcc.n	800b0be <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c2:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3728      	adds	r7, #40	; 0x28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b085      	sub	sp, #20
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689a      	ldr	r2, [r3, #8]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	4413      	add	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d304      	bcc.n	800b100 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	68fa      	ldr	r2, [r7, #12]
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b100:	68fb      	ldr	r3, [r7, #12]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b086      	sub	sp, #24
 800b112:	af00      	add	r7, sp, #0
 800b114:	60f8      	str	r0, [r7, #12]
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	607a      	str	r2, [r7, #4]
 800b11a:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800b11c:	2355      	movs	r3, #85	; 0x55
 800b11e:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	6979      	ldr	r1, [r7, #20]
 800b124:	68b8      	ldr	r0, [r7, #8]
 800b126:	f004 fc3b 	bl	800f9a0 <memset>
 800b12a:	4602      	mov	r2, r0
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00a      	beq.n	800b148 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800b132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	613b      	str	r3, [r7, #16]
}
 800b144:	bf00      	nop
 800b146:	e7fe      	b.n	800b146 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800b148:	2224      	movs	r2, #36	; 0x24
 800b14a:	2100      	movs	r1, #0
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f004 fc27 	bl	800f9a0 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	683a      	ldr	r2, [r7, #0]
 800b162:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b16a:	771a      	strb	r2, [r3, #28]
}
 800b16c:	bf00      	nop
 800b16e:	3718      	adds	r7, #24
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08e      	sub	sp, #56	; 0x38
 800b178:	af04      	add	r7, sp, #16
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10a      	bne.n	800b19e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	623b      	str	r3, [r7, #32]
}
 800b19a:	bf00      	nop
 800b19c:	e7fe      	b.n	800b19c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10a      	bne.n	800b1ba <xTaskCreateStatic+0x46>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	61fb      	str	r3, [r7, #28]
}
 800b1b6:	bf00      	nop
 800b1b8:	e7fe      	b.n	800b1b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1ba:	23cc      	movs	r3, #204	; 0xcc
 800b1bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	2bcc      	cmp	r3, #204	; 0xcc
 800b1c2:	d00a      	beq.n	800b1da <xTaskCreateStatic+0x66>
	__asm volatile
 800b1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	61bb      	str	r3, [r7, #24]
}
 800b1d6:	bf00      	nop
 800b1d8:	e7fe      	b.n	800b1d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01e      	beq.n	800b220 <xTaskCreateStatic+0xac>
 800b1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d01b      	beq.n	800b220 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9303      	str	r3, [sp, #12]
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	9302      	str	r3, [sp, #8]
 800b202:	f107 0314 	add.w	r3, r7, #20
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	68b9      	ldr	r1, [r7, #8]
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f000 f850 	bl	800b2b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b21a:	f000 f8f3 	bl	800b404 <prvAddNewTaskToReadyList>
 800b21e:	e001      	b.n	800b224 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b220:	2300      	movs	r3, #0
 800b222:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b224:	697b      	ldr	r3, [r7, #20]
	}
 800b226:	4618      	mov	r0, r3
 800b228:	3728      	adds	r7, #40	; 0x28
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b08c      	sub	sp, #48	; 0x30
 800b232:	af04      	add	r7, sp, #16
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	60b9      	str	r1, [r7, #8]
 800b238:	603b      	str	r3, [r7, #0]
 800b23a:	4613      	mov	r3, r2
 800b23c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b23e:	88fb      	ldrh	r3, [r7, #6]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4618      	mov	r0, r3
 800b244:	f002 fb18 	bl	800d878 <pvPortMalloc>
 800b248:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00e      	beq.n	800b26e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b250:	20cc      	movs	r0, #204	; 0xcc
 800b252:	f002 fb11 	bl	800d878 <pvPortMalloc>
 800b256:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	631a      	str	r2, [r3, #48]	; 0x30
 800b264:	e005      	b.n	800b272 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b266:	6978      	ldr	r0, [r7, #20]
 800b268:	f002 fbd2 	bl	800da10 <vPortFree>
 800b26c:	e001      	b.n	800b272 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d017      	beq.n	800b2a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b280:	88fa      	ldrh	r2, [r7, #6]
 800b282:	2300      	movs	r3, #0
 800b284:	9303      	str	r3, [sp, #12]
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	9302      	str	r3, [sp, #8]
 800b28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	68b9      	ldr	r1, [r7, #8]
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f000 f80e 	bl	800b2b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b29c:	69f8      	ldr	r0, [r7, #28]
 800b29e:	f000 f8b1 	bl	800b404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	61bb      	str	r3, [r7, #24]
 800b2a6:	e002      	b.n	800b2ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2ae:	69bb      	ldr	r3, [r7, #24]
	}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
 800b2c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	21a5      	movs	r1, #165	; 0xa5
 800b2d2:	f004 fb65 	bl	800f9a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	f023 0307 	bic.w	r3, r3, #7
 800b2ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	f003 0307 	and.w	r3, r3, #7
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00a      	beq.n	800b310 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	617b      	str	r3, [r7, #20]
}
 800b30c:	bf00      	nop
 800b30e:	e7fe      	b.n	800b30e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d01f      	beq.n	800b356 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b316:	2300      	movs	r3, #0
 800b318:	61fb      	str	r3, [r7, #28]
 800b31a:	e012      	b.n	800b342 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	4413      	add	r3, r2
 800b322:	7819      	ldrb	r1, [r3, #0]
 800b324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	4413      	add	r3, r2
 800b32a:	3334      	adds	r3, #52	; 0x34
 800b32c:	460a      	mov	r2, r1
 800b32e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	4413      	add	r3, r2
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d006      	beq.n	800b34a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	3301      	adds	r3, #1
 800b340:	61fb      	str	r3, [r7, #28]
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	2b1f      	cmp	r3, #31
 800b346:	d9e9      	bls.n	800b31c <prvInitialiseNewTask+0x64>
 800b348:	e000      	b.n	800b34c <prvInitialiseNewTask+0x94>
			{
				break;
 800b34a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	2200      	movs	r2, #0
 800b350:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800b354:	e003      	b.n	800b35e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	2b37      	cmp	r3, #55	; 0x37
 800b362:	d901      	bls.n	800b368 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b364:	2337      	movs	r3, #55	; 0x37
 800b366:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b36c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b372:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	2200      	movs	r2, #0
 800b378:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	3304      	adds	r3, #4
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fe fc4c 	bl	8009c1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	3318      	adds	r3, #24
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe fc47 	bl	8009c1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b392:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b396:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b6:	3364      	adds	r3, #100	; 0x64
 800b3b8:	2260      	movs	r2, #96	; 0x60
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f004 faef 	bl	800f9a0 <memset>
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	4a0c      	ldr	r2, [pc, #48]	; (800b3f8 <prvInitialiseNewTask+0x140>)
 800b3c6:	669a      	str	r2, [r3, #104]	; 0x68
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ca:	4a0c      	ldr	r2, [pc, #48]	; (800b3fc <prvInitialiseNewTask+0x144>)
 800b3cc:	66da      	str	r2, [r3, #108]	; 0x6c
 800b3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d0:	4a0b      	ldr	r2, [pc, #44]	; (800b400 <prvInitialiseNewTask+0x148>)
 800b3d2:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3d4:	683a      	ldr	r2, [r7, #0]
 800b3d6:	68f9      	ldr	r1, [r7, #12]
 800b3d8:	69b8      	ldr	r0, [r7, #24]
 800b3da:	f002 f801 	bl	800d3e0 <pxPortInitialiseStack>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3f0:	bf00      	nop
 800b3f2:	3720      	adds	r7, #32
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	080118d4 	.word	0x080118d4
 800b3fc:	080118f4 	.word	0x080118f4
 800b400:	080118b4 	.word	0x080118b4

0800b404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b40c:	f002 f912 	bl	800d634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b410:	4b2d      	ldr	r3, [pc, #180]	; (800b4c8 <prvAddNewTaskToReadyList+0xc4>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3301      	adds	r3, #1
 800b416:	4a2c      	ldr	r2, [pc, #176]	; (800b4c8 <prvAddNewTaskToReadyList+0xc4>)
 800b418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b41a:	4b2c      	ldr	r3, [pc, #176]	; (800b4cc <prvAddNewTaskToReadyList+0xc8>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d109      	bne.n	800b436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b422:	4a2a      	ldr	r2, [pc, #168]	; (800b4cc <prvAddNewTaskToReadyList+0xc8>)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b428:	4b27      	ldr	r3, [pc, #156]	; (800b4c8 <prvAddNewTaskToReadyList+0xc4>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d110      	bne.n	800b452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b430:	f000 fe20 	bl	800c074 <prvInitialiseTaskLists>
 800b434:	e00d      	b.n	800b452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b436:	4b26      	ldr	r3, [pc, #152]	; (800b4d0 <prvAddNewTaskToReadyList+0xcc>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d109      	bne.n	800b452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b43e:	4b23      	ldr	r3, [pc, #140]	; (800b4cc <prvAddNewTaskToReadyList+0xc8>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b448:	429a      	cmp	r2, r3
 800b44a:	d802      	bhi.n	800b452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b44c:	4a1f      	ldr	r2, [pc, #124]	; (800b4cc <prvAddNewTaskToReadyList+0xc8>)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b452:	4b20      	ldr	r3, [pc, #128]	; (800b4d4 <prvAddNewTaskToReadyList+0xd0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3301      	adds	r3, #1
 800b458:	4a1e      	ldr	r2, [pc, #120]	; (800b4d4 <prvAddNewTaskToReadyList+0xd0>)
 800b45a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b45c:	4b1d      	ldr	r3, [pc, #116]	; (800b4d4 <prvAddNewTaskToReadyList+0xd0>)
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b468:	4b1b      	ldr	r3, [pc, #108]	; (800b4d8 <prvAddNewTaskToReadyList+0xd4>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d903      	bls.n	800b478 <prvAddNewTaskToReadyList+0x74>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	4a18      	ldr	r2, [pc, #96]	; (800b4d8 <prvAddNewTaskToReadyList+0xd4>)
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4a15      	ldr	r2, [pc, #84]	; (800b4dc <prvAddNewTaskToReadyList+0xd8>)
 800b486:	441a      	add	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3304      	adds	r3, #4
 800b48c:	4619      	mov	r1, r3
 800b48e:	4610      	mov	r0, r2
 800b490:	f7fe fbd1 	bl	8009c36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b494:	f002 f8fe 	bl	800d694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b498:	4b0d      	ldr	r3, [pc, #52]	; (800b4d0 <prvAddNewTaskToReadyList+0xcc>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00e      	beq.n	800b4be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b4a0:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <prvAddNewTaskToReadyList+0xc8>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d207      	bcs.n	800b4be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4ae:	4b0c      	ldr	r3, [pc, #48]	; (800b4e0 <prvAddNewTaskToReadyList+0xdc>)
 800b4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b4:	601a      	str	r2, [r3, #0]
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20001da4 	.word	0x20001da4
 800b4cc:	200018d0 	.word	0x200018d0
 800b4d0:	20001db0 	.word	0x20001db0
 800b4d4:	20001dc0 	.word	0x20001dc0
 800b4d8:	20001dac 	.word	0x20001dac
 800b4dc:	200018d4 	.word	0x200018d4
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d017      	beq.n	800b526 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4f6:	4b13      	ldr	r3, [pc, #76]	; (800b544 <vTaskDelay+0x60>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00a      	beq.n	800b514 <vTaskDelay+0x30>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60bb      	str	r3, [r7, #8]
}
 800b510:	bf00      	nop
 800b512:	e7fe      	b.n	800b512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b514:	f000 f9f6 	bl	800b904 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b518:	2100      	movs	r1, #0
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f001 fbbe 	bl	800cc9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b520:	f000 f9fe 	bl	800b920 <xTaskResumeAll>
 800b524:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d107      	bne.n	800b53c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b52c:	4b06      	ldr	r3, [pc, #24]	; (800b548 <vTaskDelay+0x64>)
 800b52e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b53c:	bf00      	nop
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20001dcc 	.word	0x20001dcc
 800b548:	e000ed04 	.word	0xe000ed04

0800b54c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b088      	sub	sp, #32
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <eTaskGetState+0x28>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	60bb      	str	r3, [r7, #8]
}
 800b570:	bf00      	nop
 800b572:	e7fe      	b.n	800b572 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800b574:	4b23      	ldr	r3, [pc, #140]	; (800b604 <eTaskGetState+0xb8>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d102      	bne.n	800b584 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800b57e:	2300      	movs	r3, #0
 800b580:	77fb      	strb	r3, [r7, #31]
 800b582:	e03a      	b.n	800b5fa <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800b584:	f002 f856 	bl	800d634 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800b58e:	4b1e      	ldr	r3, [pc, #120]	; (800b608 <eTaskGetState+0xbc>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b594:	4b1d      	ldr	r3, [pc, #116]	; (800b60c <eTaskGetState+0xc0>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800b59a:	f002 f87b 	bl	800d694 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d003      	beq.n	800b5ae <eTaskGetState+0x62>
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d102      	bne.n	800b5b4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	77fb      	strb	r3, [r7, #31]
 800b5b2:	e022      	b.n	800b5fa <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	4a16      	ldr	r2, [pc, #88]	; (800b610 <eTaskGetState+0xc4>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d112      	bne.n	800b5e2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d102      	bne.n	800b5d6 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	77fb      	strb	r3, [r7, #31]
 800b5d4:	e011      	b.n	800b5fa <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	77fb      	strb	r3, [r7, #31]
 800b5da:	e00e      	b.n	800b5fa <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800b5dc:	2302      	movs	r3, #2
 800b5de:	77fb      	strb	r3, [r7, #31]
 800b5e0:	e00b      	b.n	800b5fa <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	4a0b      	ldr	r2, [pc, #44]	; (800b614 <eTaskGetState+0xc8>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d002      	beq.n	800b5f0 <eTaskGetState+0xa4>
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	77fb      	strb	r3, [r7, #31]
 800b5f4:	e001      	b.n	800b5fa <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800b5fa:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3720      	adds	r7, #32
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	200018d0 	.word	0x200018d0
 800b608:	20001d5c 	.word	0x20001d5c
 800b60c:	20001d60 	.word	0x20001d60
 800b610:	20001d90 	.word	0x20001d90
 800b614:	20001d78 	.word	0x20001d78

0800b618 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b620:	f002 f808 	bl	800d634 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d102      	bne.n	800b630 <vTaskSuspend+0x18>
 800b62a:	4b30      	ldr	r3, [pc, #192]	; (800b6ec <vTaskSuspend+0xd4>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	e000      	b.n	800b632 <vTaskSuspend+0x1a>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3304      	adds	r3, #4
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fe fb59 	bl	8009cf0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b642:	2b00      	cmp	r3, #0
 800b644:	d004      	beq.n	800b650 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3318      	adds	r3, #24
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe fb50 	bl	8009cf0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3304      	adds	r3, #4
 800b654:	4619      	mov	r1, r3
 800b656:	4826      	ldr	r0, [pc, #152]	; (800b6f0 <vTaskSuspend+0xd8>)
 800b658:	f7fe faed 	bl	8009c36 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b01      	cmp	r3, #1
 800b666:	d103      	bne.n	800b670 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b670:	f002 f810 	bl	800d694 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b674:	4b1f      	ldr	r3, [pc, #124]	; (800b6f4 <vTaskSuspend+0xdc>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d005      	beq.n	800b688 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b67c:	f001 ffda 	bl	800d634 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b680:	f000 fe6e 	bl	800c360 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b684:	f002 f806 	bl	800d694 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b688:	4b18      	ldr	r3, [pc, #96]	; (800b6ec <vTaskSuspend+0xd4>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d127      	bne.n	800b6e2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b692:	4b18      	ldr	r3, [pc, #96]	; (800b6f4 <vTaskSuspend+0xdc>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d017      	beq.n	800b6ca <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b69a:	4b17      	ldr	r3, [pc, #92]	; (800b6f8 <vTaskSuspend+0xe0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00a      	beq.n	800b6b8 <vTaskSuspend+0xa0>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	60bb      	str	r3, [r7, #8]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b6b8:	4b10      	ldr	r3, [pc, #64]	; (800b6fc <vTaskSuspend+0xe4>)
 800b6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6c8:	e00b      	b.n	800b6e2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b6ca:	4b09      	ldr	r3, [pc, #36]	; (800b6f0 <vTaskSuspend+0xd8>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	4b0c      	ldr	r3, [pc, #48]	; (800b700 <vTaskSuspend+0xe8>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d103      	bne.n	800b6de <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b6d6:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <vTaskSuspend+0xd4>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]
	}
 800b6dc:	e001      	b.n	800b6e2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b6de:	f000 fb15 	bl	800bd0c <vTaskSwitchContext>
	}
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	200018d0 	.word	0x200018d0
 800b6f0:	20001d90 	.word	0x20001d90
 800b6f4:	20001db0 	.word	0x20001db0
 800b6f8:	20001dcc 	.word	0x20001dcc
 800b6fc:	e000ed04 	.word	0xe000ed04
 800b700:	20001da4 	.word	0x20001da4

0800b704 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b70c:	2300      	movs	r3, #0
 800b70e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10a      	bne.n	800b730 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	60fb      	str	r3, [r7, #12]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	4a0a      	ldr	r2, [pc, #40]	; (800b760 <prvTaskIsTaskSuspended+0x5c>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d10a      	bne.n	800b750 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73e:	4a09      	ldr	r2, [pc, #36]	; (800b764 <prvTaskIsTaskSuspended+0x60>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d005      	beq.n	800b750 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b74c:	2301      	movs	r3, #1
 800b74e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b750:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b752:	4618      	mov	r0, r3
 800b754:	371c      	adds	r7, #28
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	20001d90 	.word	0x20001d90
 800b764:	20001d64 	.word	0x20001d64

0800b768 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <vTaskResume+0x28>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	60bb      	str	r3, [r7, #8]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b790:	4b20      	ldr	r3, [pc, #128]	; (800b814 <vTaskResume+0xac>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	429a      	cmp	r2, r3
 800b798:	d038      	beq.n	800b80c <vTaskResume+0xa4>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d035      	beq.n	800b80c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800b7a0:	f001 ff48 	bl	800d634 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f7ff ffad 	bl	800b704 <prvTaskIsTaskSuspended>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d02b      	beq.n	800b808 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fe fa9b 	bl	8009cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7be:	4b16      	ldr	r3, [pc, #88]	; (800b818 <vTaskResume+0xb0>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d903      	bls.n	800b7ce <vTaskResume+0x66>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ca:	4a13      	ldr	r2, [pc, #76]	; (800b818 <vTaskResume+0xb0>)
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4a10      	ldr	r2, [pc, #64]	; (800b81c <vTaskResume+0xb4>)
 800b7dc:	441a      	add	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	f7fe fa26 	bl	8009c36 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <vTaskResume+0xac>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d307      	bcc.n	800b808 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b7f8:	4b09      	ldr	r3, [pc, #36]	; (800b820 <vTaskResume+0xb8>)
 800b7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b808:	f001 ff44 	bl	800d694 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b80c:	bf00      	nop
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	200018d0 	.word	0x200018d0
 800b818:	20001dac 	.word	0x20001dac
 800b81c:	200018d4 	.word	0x200018d4
 800b820:	e000ed04 	.word	0xe000ed04

0800b824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08a      	sub	sp, #40	; 0x28
 800b828:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b82e:	2300      	movs	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b832:	463a      	mov	r2, r7
 800b834:	1d39      	adds	r1, r7, #4
 800b836:	f107 0308 	add.w	r3, r7, #8
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe f99a 	bl	8009b74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	9202      	str	r2, [sp, #8]
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	2300      	movs	r3, #0
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	2300      	movs	r3, #0
 800b850:	460a      	mov	r2, r1
 800b852:	4924      	ldr	r1, [pc, #144]	; (800b8e4 <vTaskStartScheduler+0xc0>)
 800b854:	4824      	ldr	r0, [pc, #144]	; (800b8e8 <vTaskStartScheduler+0xc4>)
 800b856:	f7ff fc8d 	bl	800b174 <xTaskCreateStatic>
 800b85a:	4603      	mov	r3, r0
 800b85c:	4a23      	ldr	r2, [pc, #140]	; (800b8ec <vTaskStartScheduler+0xc8>)
 800b85e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b860:	4b22      	ldr	r3, [pc, #136]	; (800b8ec <vTaskStartScheduler+0xc8>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b868:	2301      	movs	r3, #1
 800b86a:	617b      	str	r3, [r7, #20]
 800b86c:	e001      	b.n	800b872 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d102      	bne.n	800b87e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b878:	f001 fa64 	bl	800cd44 <xTimerCreateTimerTask>
 800b87c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d11b      	bne.n	800b8bc <vTaskStartScheduler+0x98>
	__asm volatile
 800b884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b888:	f383 8811 	msr	BASEPRI, r3
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	613b      	str	r3, [r7, #16]
}
 800b896:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b898:	4b15      	ldr	r3, [pc, #84]	; (800b8f0 <vTaskStartScheduler+0xcc>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3364      	adds	r3, #100	; 0x64
 800b89e:	4a15      	ldr	r2, [pc, #84]	; (800b8f4 <vTaskStartScheduler+0xd0>)
 800b8a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8a2:	4b15      	ldr	r3, [pc, #84]	; (800b8f8 <vTaskStartScheduler+0xd4>)
 800b8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8aa:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <vTaskStartScheduler+0xd8>)
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8b0:	4b13      	ldr	r3, [pc, #76]	; (800b900 <vTaskStartScheduler+0xdc>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8b6:	f001 fe1b 	bl	800d4f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8ba:	e00e      	b.n	800b8da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8c2:	d10a      	bne.n	800b8da <vTaskStartScheduler+0xb6>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	60fb      	str	r3, [r7, #12]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <vTaskStartScheduler+0xb4>
}
 800b8da:	bf00      	nop
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	08010c04 	.word	0x08010c04
 800b8e8:	0800c045 	.word	0x0800c045
 800b8ec:	20001dc8 	.word	0x20001dc8
 800b8f0:	200018d0 	.word	0x200018d0
 800b8f4:	2000010c 	.word	0x2000010c
 800b8f8:	20001dc4 	.word	0x20001dc4
 800b8fc:	20001db0 	.word	0x20001db0
 800b900:	20001da8 	.word	0x20001da8

0800b904 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b904:	b480      	push	{r7}
 800b906:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b908:	4b04      	ldr	r3, [pc, #16]	; (800b91c <vTaskSuspendAll+0x18>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3301      	adds	r3, #1
 800b90e:	4a03      	ldr	r2, [pc, #12]	; (800b91c <vTaskSuspendAll+0x18>)
 800b910:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b912:	bf00      	nop
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	20001dcc 	.word	0x20001dcc

0800b920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b926:	2300      	movs	r3, #0
 800b928:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b92e:	4b42      	ldr	r3, [pc, #264]	; (800ba38 <xTaskResumeAll+0x118>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d10a      	bne.n	800b94c <xTaskResumeAll+0x2c>
	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	603b      	str	r3, [r7, #0]
}
 800b948:	bf00      	nop
 800b94a:	e7fe      	b.n	800b94a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b94c:	f001 fe72 	bl	800d634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b950:	4b39      	ldr	r3, [pc, #228]	; (800ba38 <xTaskResumeAll+0x118>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	3b01      	subs	r3, #1
 800b956:	4a38      	ldr	r2, [pc, #224]	; (800ba38 <xTaskResumeAll+0x118>)
 800b958:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b95a:	4b37      	ldr	r3, [pc, #220]	; (800ba38 <xTaskResumeAll+0x118>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d162      	bne.n	800ba28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b962:	4b36      	ldr	r3, [pc, #216]	; (800ba3c <xTaskResumeAll+0x11c>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d05e      	beq.n	800ba28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b96a:	e02f      	b.n	800b9cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b96c:	4b34      	ldr	r3, [pc, #208]	; (800ba40 <xTaskResumeAll+0x120>)
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3318      	adds	r3, #24
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe f9b9 	bl	8009cf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	3304      	adds	r3, #4
 800b982:	4618      	mov	r0, r3
 800b984:	f7fe f9b4 	bl	8009cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98c:	4b2d      	ldr	r3, [pc, #180]	; (800ba44 <xTaskResumeAll+0x124>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d903      	bls.n	800b99c <xTaskResumeAll+0x7c>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b998:	4a2a      	ldr	r2, [pc, #168]	; (800ba44 <xTaskResumeAll+0x124>)
 800b99a:	6013      	str	r3, [r2, #0]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	4a27      	ldr	r2, [pc, #156]	; (800ba48 <xTaskResumeAll+0x128>)
 800b9aa:	441a      	add	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	f7fe f93f 	bl	8009c36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9bc:	4b23      	ldr	r3, [pc, #140]	; (800ba4c <xTaskResumeAll+0x12c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d302      	bcc.n	800b9cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b9c6:	4b22      	ldr	r3, [pc, #136]	; (800ba50 <xTaskResumeAll+0x130>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9cc:	4b1c      	ldr	r3, [pc, #112]	; (800ba40 <xTaskResumeAll+0x120>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1cb      	bne.n	800b96c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9da:	f000 fcc1 	bl	800c360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b9de:	4b1d      	ldr	r3, [pc, #116]	; (800ba54 <xTaskResumeAll+0x134>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d010      	beq.n	800ba0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9ea:	f000 f8d5 	bl	800bb98 <xTaskIncrementTick>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b9f4:	4b16      	ldr	r3, [pc, #88]	; (800ba50 <xTaskResumeAll+0x130>)
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1f1      	bne.n	800b9ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ba06:	4b13      	ldr	r3, [pc, #76]	; (800ba54 <xTaskResumeAll+0x134>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba0c:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <xTaskResumeAll+0x130>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d009      	beq.n	800ba28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba14:	2301      	movs	r3, #1
 800ba16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba18:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <xTaskResumeAll+0x138>)
 800ba1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba1e:	601a      	str	r2, [r3, #0]
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba28:	f001 fe34 	bl	800d694 <vPortExitCritical>

	return xAlreadyYielded;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	20001dcc 	.word	0x20001dcc
 800ba3c:	20001da4 	.word	0x20001da4
 800ba40:	20001d64 	.word	0x20001d64
 800ba44:	20001dac 	.word	0x20001dac
 800ba48:	200018d4 	.word	0x200018d4
 800ba4c:	200018d0 	.word	0x200018d0
 800ba50:	20001db8 	.word	0x20001db8
 800ba54:	20001db4 	.word	0x20001db4
 800ba58:	e000ed04 	.word	0xe000ed04

0800ba5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba62:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <xTaskGetTickCount+0x1c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba68:	687b      	ldr	r3, [r7, #4]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	20001da8 	.word	0x20001da8

0800ba7c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	617b      	str	r3, [r7, #20]
 800ba8c:	2338      	movs	r3, #56	; 0x38
 800ba8e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800ba90:	f7ff ff38 	bl	800b904 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ba94:	4b3a      	ldr	r3, [pc, #232]	; (800bb80 <uxTaskGetSystemState+0x104>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d368      	bcc.n	800bb70 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	4613      	mov	r3, r2
 800baa8:	00db      	lsls	r3, r3, #3
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	461a      	mov	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	1898      	adds	r0, r3, r2
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	4613      	mov	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4a31      	ldr	r2, [pc, #196]	; (800bb84 <uxTaskGetSystemState+0x108>)
 800bac0:	4413      	add	r3, r2
 800bac2:	2201      	movs	r2, #1
 800bac4:	4619      	mov	r1, r3
 800bac6:	f000 fba9 	bl	800c21c <prvListTasksWithinSingleList>
 800baca:	4602      	mov	r2, r0
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	4413      	add	r3, r2
 800bad0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e2      	bne.n	800ba9e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	4613      	mov	r3, r2
 800badc:	00db      	lsls	r3, r3, #3
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	461a      	mov	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	4413      	add	r3, r2
 800bae8:	4a27      	ldr	r2, [pc, #156]	; (800bb88 <uxTaskGetSystemState+0x10c>)
 800baea:	6811      	ldr	r1, [r2, #0]
 800baec:	2202      	movs	r2, #2
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 fb94 	bl	800c21c <prvListTasksWithinSingleList>
 800baf4:	4602      	mov	r2, r0
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	4413      	add	r3, r2
 800bafa:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	4613      	mov	r3, r2
 800bb00:	00db      	lsls	r3, r3, #3
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	461a      	mov	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	4a1f      	ldr	r2, [pc, #124]	; (800bb8c <uxTaskGetSystemState+0x110>)
 800bb0e:	6811      	ldr	r1, [r2, #0]
 800bb10:	2202      	movs	r2, #2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 fb82 	bl	800c21c <prvListTasksWithinSingleList>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	4613      	mov	r3, r2
 800bb24:	00db      	lsls	r3, r3, #3
 800bb26:	4413      	add	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	4413      	add	r3, r2
 800bb30:	2204      	movs	r2, #4
 800bb32:	4917      	ldr	r1, [pc, #92]	; (800bb90 <uxTaskGetSystemState+0x114>)
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 fb71 	bl	800c21c <prvListTasksWithinSingleList>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	4413      	add	r3, r2
 800bb40:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	4613      	mov	r3, r2
 800bb46:	00db      	lsls	r3, r3, #3
 800bb48:	4413      	add	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	2203      	movs	r2, #3
 800bb54:	490f      	ldr	r1, [pc, #60]	; (800bb94 <uxTaskGetSystemState+0x118>)
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 fb60 	bl	800c21c <prvListTasksWithinSingleList>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	4413      	add	r3, r2
 800bb62:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800bb70:	f7ff fed6 	bl	800b920 <xTaskResumeAll>

		return uxTask;
 800bb74:	697b      	ldr	r3, [r7, #20]
	}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20001da4 	.word	0x20001da4
 800bb84:	200018d4 	.word	0x200018d4
 800bb88:	20001d5c 	.word	0x20001d5c
 800bb8c:	20001d60 	.word	0x20001d60
 800bb90:	20001d78 	.word	0x20001d78
 800bb94:	20001d90 	.word	0x20001d90

0800bb98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bba2:	4b4f      	ldr	r3, [pc, #316]	; (800bce0 <xTaskIncrementTick+0x148>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f040 808f 	bne.w	800bcca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbac:	4b4d      	ldr	r3, [pc, #308]	; (800bce4 <xTaskIncrementTick+0x14c>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbb4:	4a4b      	ldr	r2, [pc, #300]	; (800bce4 <xTaskIncrementTick+0x14c>)
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d120      	bne.n	800bc02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbc0:	4b49      	ldr	r3, [pc, #292]	; (800bce8 <xTaskIncrementTick+0x150>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00a      	beq.n	800bbe0 <xTaskIncrementTick+0x48>
	__asm volatile
 800bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	603b      	str	r3, [r7, #0]
}
 800bbdc:	bf00      	nop
 800bbde:	e7fe      	b.n	800bbde <xTaskIncrementTick+0x46>
 800bbe0:	4b41      	ldr	r3, [pc, #260]	; (800bce8 <xTaskIncrementTick+0x150>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	60fb      	str	r3, [r7, #12]
 800bbe6:	4b41      	ldr	r3, [pc, #260]	; (800bcec <xTaskIncrementTick+0x154>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a3f      	ldr	r2, [pc, #252]	; (800bce8 <xTaskIncrementTick+0x150>)
 800bbec:	6013      	str	r3, [r2, #0]
 800bbee:	4a3f      	ldr	r2, [pc, #252]	; (800bcec <xTaskIncrementTick+0x154>)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6013      	str	r3, [r2, #0]
 800bbf4:	4b3e      	ldr	r3, [pc, #248]	; (800bcf0 <xTaskIncrementTick+0x158>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	4a3d      	ldr	r2, [pc, #244]	; (800bcf0 <xTaskIncrementTick+0x158>)
 800bbfc:	6013      	str	r3, [r2, #0]
 800bbfe:	f000 fbaf 	bl	800c360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc02:	4b3c      	ldr	r3, [pc, #240]	; (800bcf4 <xTaskIncrementTick+0x15c>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d349      	bcc.n	800bca0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc0c:	4b36      	ldr	r3, [pc, #216]	; (800bce8 <xTaskIncrementTick+0x150>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d104      	bne.n	800bc20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc16:	4b37      	ldr	r3, [pc, #220]	; (800bcf4 <xTaskIncrementTick+0x15c>)
 800bc18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc1c:	601a      	str	r2, [r3, #0]
					break;
 800bc1e:	e03f      	b.n	800bca0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc20:	4b31      	ldr	r3, [pc, #196]	; (800bce8 <xTaskIncrementTick+0x150>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d203      	bcs.n	800bc40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc38:	4a2e      	ldr	r2, [pc, #184]	; (800bcf4 <xTaskIncrementTick+0x15c>)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc3e:	e02f      	b.n	800bca0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	3304      	adds	r3, #4
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7fe f853 	bl	8009cf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d004      	beq.n	800bc5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	3318      	adds	r3, #24
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe f84a 	bl	8009cf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc60:	4b25      	ldr	r3, [pc, #148]	; (800bcf8 <xTaskIncrementTick+0x160>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d903      	bls.n	800bc70 <xTaskIncrementTick+0xd8>
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6c:	4a22      	ldr	r2, [pc, #136]	; (800bcf8 <xTaskIncrementTick+0x160>)
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc74:	4613      	mov	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4a1f      	ldr	r2, [pc, #124]	; (800bcfc <xTaskIncrementTick+0x164>)
 800bc7e:	441a      	add	r2, r3
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	3304      	adds	r3, #4
 800bc84:	4619      	mov	r1, r3
 800bc86:	4610      	mov	r0, r2
 800bc88:	f7fd ffd5 	bl	8009c36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc90:	4b1b      	ldr	r3, [pc, #108]	; (800bd00 <xTaskIncrementTick+0x168>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d3b8      	bcc.n	800bc0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc9e:	e7b5      	b.n	800bc0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bca0:	4b17      	ldr	r3, [pc, #92]	; (800bd00 <xTaskIncrementTick+0x168>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca6:	4915      	ldr	r1, [pc, #84]	; (800bcfc <xTaskIncrementTick+0x164>)
 800bca8:	4613      	mov	r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4413      	add	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	440b      	add	r3, r1
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d901      	bls.n	800bcbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bcbc:	4b11      	ldr	r3, [pc, #68]	; (800bd04 <xTaskIncrementTick+0x16c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d007      	beq.n	800bcd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	e004      	b.n	800bcd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bcca:	4b0f      	ldr	r3, [pc, #60]	; (800bd08 <xTaskIncrementTick+0x170>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	4a0d      	ldr	r2, [pc, #52]	; (800bd08 <xTaskIncrementTick+0x170>)
 800bcd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcd4:	697b      	ldr	r3, [r7, #20]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20001dcc 	.word	0x20001dcc
 800bce4:	20001da8 	.word	0x20001da8
 800bce8:	20001d5c 	.word	0x20001d5c
 800bcec:	20001d60 	.word	0x20001d60
 800bcf0:	20001dbc 	.word	0x20001dbc
 800bcf4:	20001dc4 	.word	0x20001dc4
 800bcf8:	20001dac 	.word	0x20001dac
 800bcfc:	200018d4 	.word	0x200018d4
 800bd00:	200018d0 	.word	0x200018d0
 800bd04:	20001db8 	.word	0x20001db8
 800bd08:	20001db4 	.word	0x20001db4

0800bd0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd12:	4b2a      	ldr	r3, [pc, #168]	; (800bdbc <vTaskSwitchContext+0xb0>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd1a:	4b29      	ldr	r3, [pc, #164]	; (800bdc0 <vTaskSwitchContext+0xb4>)
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd20:	e046      	b.n	800bdb0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bd22:	4b27      	ldr	r3, [pc, #156]	; (800bdc0 <vTaskSwitchContext+0xb4>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd28:	4b26      	ldr	r3, [pc, #152]	; (800bdc4 <vTaskSwitchContext+0xb8>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	60fb      	str	r3, [r7, #12]
 800bd2e:	e010      	b.n	800bd52 <vTaskSwitchContext+0x46>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10a      	bne.n	800bd4c <vTaskSwitchContext+0x40>
	__asm volatile
 800bd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	607b      	str	r3, [r7, #4]
}
 800bd48:	bf00      	nop
 800bd4a:	e7fe      	b.n	800bd4a <vTaskSwitchContext+0x3e>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	491d      	ldr	r1, [pc, #116]	; (800bdc8 <vTaskSwitchContext+0xbc>)
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4613      	mov	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	440b      	add	r3, r1
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0e4      	beq.n	800bd30 <vTaskSwitchContext+0x24>
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4a15      	ldr	r2, [pc, #84]	; (800bdc8 <vTaskSwitchContext+0xbc>)
 800bd72:	4413      	add	r3, r2
 800bd74:	60bb      	str	r3, [r7, #8]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	605a      	str	r2, [r3, #4]
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	3308      	adds	r3, #8
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d104      	bne.n	800bd96 <vTaskSwitchContext+0x8a>
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	605a      	str	r2, [r3, #4]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	4a0b      	ldr	r2, [pc, #44]	; (800bdcc <vTaskSwitchContext+0xc0>)
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	4a08      	ldr	r2, [pc, #32]	; (800bdc4 <vTaskSwitchContext+0xb8>)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bda6:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <vTaskSwitchContext+0xc0>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3364      	adds	r3, #100	; 0x64
 800bdac:	4a08      	ldr	r2, [pc, #32]	; (800bdd0 <vTaskSwitchContext+0xc4>)
 800bdae:	6013      	str	r3, [r2, #0]
}
 800bdb0:	bf00      	nop
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20001dcc 	.word	0x20001dcc
 800bdc0:	20001db8 	.word	0x20001db8
 800bdc4:	20001dac 	.word	0x20001dac
 800bdc8:	200018d4 	.word	0x200018d4
 800bdcc:	200018d0 	.word	0x200018d0
 800bdd0:	2000010c 	.word	0x2000010c

0800bdd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10a      	bne.n	800bdfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	60fb      	str	r3, [r7, #12]
}
 800bdf6:	bf00      	nop
 800bdf8:	e7fe      	b.n	800bdf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdfa:	4b07      	ldr	r3, [pc, #28]	; (800be18 <vTaskPlaceOnEventList+0x44>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	3318      	adds	r3, #24
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7fd ff3b 	bl	8009c7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be08:	2101      	movs	r1, #1
 800be0a:	6838      	ldr	r0, [r7, #0]
 800be0c:	f000 ff46 	bl	800cc9c <prvAddCurrentTaskToDelayedList>
}
 800be10:	bf00      	nop
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	200018d0 	.word	0x200018d0

0800be1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	617b      	str	r3, [r7, #20]
}
 800be40:	bf00      	nop
 800be42:	e7fe      	b.n	800be42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be44:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <vTaskPlaceOnEventListRestricted+0x54>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	3318      	adds	r3, #24
 800be4a:	4619      	mov	r1, r3
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f7fd fef2 	bl	8009c36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	68b8      	ldr	r0, [r7, #8]
 800be62:	f000 ff1b 	bl	800cc9c <prvAddCurrentTaskToDelayedList>
	}
 800be66:	bf00      	nop
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	200018d0 	.word	0x200018d0

0800be74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10a      	bne.n	800bea0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	60fb      	str	r3, [r7, #12]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	3318      	adds	r3, #24
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fd ff23 	bl	8009cf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beaa:	4b1e      	ldr	r3, [pc, #120]	; (800bf24 <xTaskRemoveFromEventList+0xb0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d11d      	bne.n	800beee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	3304      	adds	r3, #4
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fd ff1a 	bl	8009cf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec0:	4b19      	ldr	r3, [pc, #100]	; (800bf28 <xTaskRemoveFromEventList+0xb4>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d903      	bls.n	800bed0 <xTaskRemoveFromEventList+0x5c>
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	4a16      	ldr	r2, [pc, #88]	; (800bf28 <xTaskRemoveFromEventList+0xb4>)
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <xTaskRemoveFromEventList+0xb8>)
 800bede:	441a      	add	r2, r3
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	3304      	adds	r3, #4
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7fd fea5 	bl	8009c36 <vListInsertEnd>
 800beec:	e005      	b.n	800befa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	3318      	adds	r3, #24
 800bef2:	4619      	mov	r1, r3
 800bef4:	480e      	ldr	r0, [pc, #56]	; (800bf30 <xTaskRemoveFromEventList+0xbc>)
 800bef6:	f7fd fe9e 	bl	8009c36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befe:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <xTaskRemoveFromEventList+0xc0>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d905      	bls.n	800bf14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <xTaskRemoveFromEventList+0xc4>)
 800bf0e:	2201      	movs	r2, #1
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	e001      	b.n	800bf18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf18:	697b      	ldr	r3, [r7, #20]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	20001dcc 	.word	0x20001dcc
 800bf28:	20001dac 	.word	0x20001dac
 800bf2c:	200018d4 	.word	0x200018d4
 800bf30:	20001d64 	.word	0x20001d64
 800bf34:	200018d0 	.word	0x200018d0
 800bf38:	20001db8 	.word	0x20001db8

0800bf3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf44:	4b06      	ldr	r3, [pc, #24]	; (800bf60 <vTaskInternalSetTimeOutState+0x24>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf4c:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <vTaskInternalSetTimeOutState+0x28>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	605a      	str	r2, [r3, #4]
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	20001dbc 	.word	0x20001dbc
 800bf64:	20001da8 	.word	0x20001da8

0800bf68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10a      	bne.n	800bf8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	613b      	str	r3, [r7, #16]
}
 800bf8a:	bf00      	nop
 800bf8c:	e7fe      	b.n	800bf8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	60fb      	str	r3, [r7, #12]
}
 800bfa6:	bf00      	nop
 800bfa8:	e7fe      	b.n	800bfa8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bfaa:	f001 fb43 	bl	800d634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bfae:	4b1d      	ldr	r3, [pc, #116]	; (800c024 <xTaskCheckForTimeOut+0xbc>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfc6:	d102      	bne.n	800bfce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	61fb      	str	r3, [r7, #28]
 800bfcc:	e023      	b.n	800c016 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4b15      	ldr	r3, [pc, #84]	; (800c028 <xTaskCheckForTimeOut+0xc0>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d007      	beq.n	800bfea <xTaskCheckForTimeOut+0x82>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	69ba      	ldr	r2, [r7, #24]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d302      	bcc.n	800bfea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	61fb      	str	r3, [r7, #28]
 800bfe8:	e015      	b.n	800c016 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d20b      	bcs.n	800c00c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	1ad2      	subs	r2, r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7ff ff9b 	bl	800bf3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c006:	2300      	movs	r3, #0
 800c008:	61fb      	str	r3, [r7, #28]
 800c00a:	e004      	b.n	800c016 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2200      	movs	r2, #0
 800c010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c012:	2301      	movs	r3, #1
 800c014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c016:	f001 fb3d 	bl	800d694 <vPortExitCritical>

	return xReturn;
 800c01a:	69fb      	ldr	r3, [r7, #28]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	20001da8 	.word	0x20001da8
 800c028:	20001dbc 	.word	0x20001dbc

0800c02c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c02c:	b480      	push	{r7}
 800c02e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c030:	4b03      	ldr	r3, [pc, #12]	; (800c040 <vTaskMissedYield+0x14>)
 800c032:	2201      	movs	r2, #1
 800c034:	601a      	str	r2, [r3, #0]
}
 800c036:	bf00      	nop
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	20001db8 	.word	0x20001db8

0800c044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c04c:	f000 f852 	bl	800c0f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c050:	4b06      	ldr	r3, [pc, #24]	; (800c06c <prvIdleTask+0x28>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b01      	cmp	r3, #1
 800c056:	d9f9      	bls.n	800c04c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c058:	4b05      	ldr	r3, [pc, #20]	; (800c070 <prvIdleTask+0x2c>)
 800c05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c05e:	601a      	str	r2, [r3, #0]
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c068:	e7f0      	b.n	800c04c <prvIdleTask+0x8>
 800c06a:	bf00      	nop
 800c06c:	200018d4 	.word	0x200018d4
 800c070:	e000ed04 	.word	0xe000ed04

0800c074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c07a:	2300      	movs	r3, #0
 800c07c:	607b      	str	r3, [r7, #4]
 800c07e:	e00c      	b.n	800c09a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4a12      	ldr	r2, [pc, #72]	; (800c0d4 <prvInitialiseTaskLists+0x60>)
 800c08c:	4413      	add	r3, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fd fda4 	bl	8009bdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	3301      	adds	r3, #1
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b37      	cmp	r3, #55	; 0x37
 800c09e:	d9ef      	bls.n	800c080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0a0:	480d      	ldr	r0, [pc, #52]	; (800c0d8 <prvInitialiseTaskLists+0x64>)
 800c0a2:	f7fd fd9b 	bl	8009bdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0a6:	480d      	ldr	r0, [pc, #52]	; (800c0dc <prvInitialiseTaskLists+0x68>)
 800c0a8:	f7fd fd98 	bl	8009bdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c0ac:	480c      	ldr	r0, [pc, #48]	; (800c0e0 <prvInitialiseTaskLists+0x6c>)
 800c0ae:	f7fd fd95 	bl	8009bdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c0b2:	480c      	ldr	r0, [pc, #48]	; (800c0e4 <prvInitialiseTaskLists+0x70>)
 800c0b4:	f7fd fd92 	bl	8009bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c0b8:	480b      	ldr	r0, [pc, #44]	; (800c0e8 <prvInitialiseTaskLists+0x74>)
 800c0ba:	f7fd fd8f 	bl	8009bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c0be:	4b0b      	ldr	r3, [pc, #44]	; (800c0ec <prvInitialiseTaskLists+0x78>)
 800c0c0:	4a05      	ldr	r2, [pc, #20]	; (800c0d8 <prvInitialiseTaskLists+0x64>)
 800c0c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c0c4:	4b0a      	ldr	r3, [pc, #40]	; (800c0f0 <prvInitialiseTaskLists+0x7c>)
 800c0c6:	4a05      	ldr	r2, [pc, #20]	; (800c0dc <prvInitialiseTaskLists+0x68>)
 800c0c8:	601a      	str	r2, [r3, #0]
}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	200018d4 	.word	0x200018d4
 800c0d8:	20001d34 	.word	0x20001d34
 800c0dc:	20001d48 	.word	0x20001d48
 800c0e0:	20001d64 	.word	0x20001d64
 800c0e4:	20001d78 	.word	0x20001d78
 800c0e8:	20001d90 	.word	0x20001d90
 800c0ec:	20001d5c 	.word	0x20001d5c
 800c0f0:	20001d60 	.word	0x20001d60

0800c0f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0fa:	e019      	b.n	800c130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0fc:	f001 fa9a 	bl	800d634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c100:	4b10      	ldr	r3, [pc, #64]	; (800c144 <prvCheckTasksWaitingTermination+0x50>)
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	3304      	adds	r3, #4
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fd fdef 	bl	8009cf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c112:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <prvCheckTasksWaitingTermination+0x54>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3b01      	subs	r3, #1
 800c118:	4a0b      	ldr	r2, [pc, #44]	; (800c148 <prvCheckTasksWaitingTermination+0x54>)
 800c11a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c11c:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <prvCheckTasksWaitingTermination+0x58>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3b01      	subs	r3, #1
 800c122:	4a0a      	ldr	r2, [pc, #40]	; (800c14c <prvCheckTasksWaitingTermination+0x58>)
 800c124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c126:	f001 fab5 	bl	800d694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f8e4 	bl	800c2f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c130:	4b06      	ldr	r3, [pc, #24]	; (800c14c <prvCheckTasksWaitingTermination+0x58>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e1      	bne.n	800c0fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	20001d78 	.word	0x20001d78
 800c148:	20001da4 	.word	0x20001da4
 800c14c:	20001d8c 	.word	0x20001d8c

0800c150 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <vTaskGetInfo+0x1a>
 800c164:	4b2c      	ldr	r3, [pc, #176]	; (800c218 <vTaskGetInfo+0xc8>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	e000      	b.n	800c16c <vTaskGetInfo+0x1c>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800c1a4:	78fb      	ldrb	r3, [r7, #3]
 800c1a6:	2b05      	cmp	r3, #5
 800c1a8:	d01a      	beq.n	800c1e0 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800c1aa:	4b1b      	ldr	r3, [pc, #108]	; (800c218 <vTaskGetInfo+0xc8>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d103      	bne.n	800c1bc <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	731a      	strb	r2, [r3, #12]
 800c1ba:	e018      	b.n	800c1ee <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	78fa      	ldrb	r2, [r7, #3]
 800c1c0:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800c1c2:	78fb      	ldrb	r3, [r7, #3]
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d112      	bne.n	800c1ee <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800c1c8:	f7ff fb9c 	bl	800b904 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800c1da:	f7ff fba1 	bl	800b920 <xTaskResumeAll>
 800c1de:	e006      	b.n	800c1ee <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800c1e0:	6978      	ldr	r0, [r7, #20]
 800c1e2:	f7ff f9b3 	bl	800b54c <eTaskGetState>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d009      	beq.n	800c208 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f000 f861 	bl	800c2c0 <prvTaskCheckFreeStackSpace>
 800c1fe:	4603      	mov	r3, r0
 800c200:	461a      	mov	r2, r3
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800c206:	e002      	b.n	800c20e <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2200      	movs	r2, #0
 800c20c:	841a      	strh	r2, [r3, #32]
	}
 800c20e:	bf00      	nop
 800c210:	3718      	adds	r7, #24
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	200018d0 	.word	0x200018d0

0800c21c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08a      	sub	sp, #40	; 0x28
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	4613      	mov	r3, r2
 800c228:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d03f      	beq.n	800c2b6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	623b      	str	r3, [r7, #32]
 800c23a:	6a3b      	ldr	r3, [r7, #32]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	605a      	str	r2, [r3, #4]
 800c244:	6a3b      	ldr	r3, [r7, #32]
 800c246:	685a      	ldr	r2, [r3, #4]
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	3308      	adds	r3, #8
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d104      	bne.n	800c25a <prvListTasksWithinSingleList+0x3e>
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	685a      	ldr	r2, [r3, #4]
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	605a      	str	r2, [r3, #4]
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	61bb      	str	r3, [r7, #24]
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	605a      	str	r2, [r3, #4]
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	3308      	adds	r3, #8
 800c278:	429a      	cmp	r2, r3
 800c27a:	d104      	bne.n	800c286 <prvListTasksWithinSingleList+0x6a>
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	605a      	str	r2, [r3, #4]
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800c28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c290:	4613      	mov	r3, r2
 800c292:	00db      	lsls	r3, r3, #3
 800c294:	4413      	add	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	461a      	mov	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	1899      	adds	r1, r3, r2
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	6978      	ldr	r0, [r7, #20]
 800c2a4:	f7ff ff54 	bl	800c150 <vTaskGetInfo>
				uxTask++;
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d1d5      	bne.n	800c262 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3728      	adds	r7, #40	; 0x28
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c2cc:	e005      	b.n	800c2da <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2ba5      	cmp	r3, #165	; 0xa5
 800c2e0:	d0f5      	beq.n	800c2ce <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	089b      	lsrs	r3, r3, #2
 800c2e6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	b29b      	uxth	r3, r3
	}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3364      	adds	r3, #100	; 0x64
 800c304:	4618      	mov	r0, r3
 800c306:	f003 fbf5 	bl	800faf4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c310:	2b00      	cmp	r3, #0
 800c312:	d108      	bne.n	800c326 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c318:	4618      	mov	r0, r3
 800c31a:	f001 fb79 	bl	800da10 <vPortFree>
				vPortFree( pxTCB );
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f001 fb76 	bl	800da10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c324:	e018      	b.n	800c358 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d103      	bne.n	800c338 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 fb6d 	bl	800da10 <vPortFree>
	}
 800c336:	e00f      	b.n	800c358 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d00a      	beq.n	800c358 <prvDeleteTCB+0x60>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	60fb      	str	r3, [r7, #12]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <prvDeleteTCB+0x5e>
	}
 800c358:	bf00      	nop
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c366:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <prvResetNextTaskUnblockTime+0x38>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d104      	bne.n	800c37a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c370:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <prvResetNextTaskUnblockTime+0x3c>)
 800c372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c378:	e008      	b.n	800c38c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c37a:	4b07      	ldr	r3, [pc, #28]	; (800c398 <prvResetNextTaskUnblockTime+0x38>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	4a04      	ldr	r2, [pc, #16]	; (800c39c <prvResetNextTaskUnblockTime+0x3c>)
 800c38a:	6013      	str	r3, [r2, #0]
}
 800c38c:	bf00      	nop
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	20001d5c 	.word	0x20001d5c
 800c39c:	20001dc4 	.word	0x20001dc4

0800c3a0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <xTaskGetCurrentTaskHandle+0x1c>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c3ac:	687b      	ldr	r3, [r7, #4]
	}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	200018d0 	.word	0x200018d0

0800c3c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3c6:	4b0b      	ldr	r3, [pc, #44]	; (800c3f4 <xTaskGetSchedulerState+0x34>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d102      	bne.n	800c3d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	607b      	str	r3, [r7, #4]
 800c3d2:	e008      	b.n	800c3e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3d4:	4b08      	ldr	r3, [pc, #32]	; (800c3f8 <xTaskGetSchedulerState+0x38>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d102      	bne.n	800c3e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3dc:	2302      	movs	r3, #2
 800c3de:	607b      	str	r3, [r7, #4]
 800c3e0:	e001      	b.n	800c3e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3e6:	687b      	ldr	r3, [r7, #4]
	}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	20001db0 	.word	0x20001db0
 800c3f8:	20001dcc 	.word	0x20001dcc

0800c3fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c408:	2300      	movs	r3, #0
 800c40a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d051      	beq.n	800c4b6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c416:	4b2a      	ldr	r3, [pc, #168]	; (800c4c0 <xTaskPriorityInherit+0xc4>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d241      	bcs.n	800c4a4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	699b      	ldr	r3, [r3, #24]
 800c424:	2b00      	cmp	r3, #0
 800c426:	db06      	blt.n	800c436 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c428:	4b25      	ldr	r3, [pc, #148]	; (800c4c0 <xTaskPriorityInherit+0xc4>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	6959      	ldr	r1, [r3, #20]
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43e:	4613      	mov	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4413      	add	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4a1f      	ldr	r2, [pc, #124]	; (800c4c4 <xTaskPriorityInherit+0xc8>)
 800c448:	4413      	add	r3, r2
 800c44a:	4299      	cmp	r1, r3
 800c44c:	d122      	bne.n	800c494 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	3304      	adds	r3, #4
 800c452:	4618      	mov	r0, r3
 800c454:	f7fd fc4c 	bl	8009cf0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c458:	4b19      	ldr	r3, [pc, #100]	; (800c4c0 <xTaskPriorityInherit+0xc4>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c466:	4b18      	ldr	r3, [pc, #96]	; (800c4c8 <xTaskPriorityInherit+0xcc>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d903      	bls.n	800c476 <xTaskPriorityInherit+0x7a>
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c472:	4a15      	ldr	r2, [pc, #84]	; (800c4c8 <xTaskPriorityInherit+0xcc>)
 800c474:	6013      	str	r3, [r2, #0]
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47a:	4613      	mov	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4413      	add	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4a10      	ldr	r2, [pc, #64]	; (800c4c4 <xTaskPriorityInherit+0xc8>)
 800c484:	441a      	add	r2, r3
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	3304      	adds	r3, #4
 800c48a:	4619      	mov	r1, r3
 800c48c:	4610      	mov	r0, r2
 800c48e:	f7fd fbd2 	bl	8009c36 <vListInsertEnd>
 800c492:	e004      	b.n	800c49e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c494:	4b0a      	ldr	r3, [pc, #40]	; (800c4c0 <xTaskPriorityInherit+0xc4>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	e008      	b.n	800c4b6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c4a8:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <xTaskPriorityInherit+0xc4>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d201      	bcs.n	800c4b6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
	}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	200018d0 	.word	0x200018d0
 800c4c4:	200018d4 	.word	0x200018d4
 800c4c8:	20001dac 	.word	0x20001dac

0800c4cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d056      	beq.n	800c590 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c4e2:	4b2e      	ldr	r3, [pc, #184]	; (800c59c <xTaskPriorityDisinherit+0xd0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d00a      	beq.n	800c502 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	60fb      	str	r3, [r7, #12]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10a      	bne.n	800c520 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	60bb      	str	r3, [r7, #8]
}
 800c51c:	bf00      	nop
 800c51e:	e7fe      	b.n	800c51e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c524:	1e5a      	subs	r2, r3, #1
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c532:	429a      	cmp	r2, r3
 800c534:	d02c      	beq.n	800c590 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d128      	bne.n	800c590 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	3304      	adds	r3, #4
 800c542:	4618      	mov	r0, r3
 800c544:	f7fd fbd4 	bl	8009cf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c554:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c560:	4b0f      	ldr	r3, [pc, #60]	; (800c5a0 <xTaskPriorityDisinherit+0xd4>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	429a      	cmp	r2, r3
 800c566:	d903      	bls.n	800c570 <xTaskPriorityDisinherit+0xa4>
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56c:	4a0c      	ldr	r2, [pc, #48]	; (800c5a0 <xTaskPriorityDisinherit+0xd4>)
 800c56e:	6013      	str	r3, [r2, #0]
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c574:	4613      	mov	r3, r2
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	4413      	add	r3, r2
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4a09      	ldr	r2, [pc, #36]	; (800c5a4 <xTaskPriorityDisinherit+0xd8>)
 800c57e:	441a      	add	r2, r3
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	3304      	adds	r3, #4
 800c584:	4619      	mov	r1, r3
 800c586:	4610      	mov	r0, r2
 800c588:	f7fd fb55 	bl	8009c36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c58c:	2301      	movs	r3, #1
 800c58e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c590:	697b      	ldr	r3, [r7, #20]
	}
 800c592:	4618      	mov	r0, r3
 800c594:	3718      	adds	r7, #24
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	200018d0 	.word	0x200018d0
 800c5a0:	20001dac 	.word	0x20001dac
 800c5a4:	200018d4 	.word	0x200018d4

0800c5a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b088      	sub	sp, #32
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d06a      	beq.n	800c696 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10a      	bne.n	800c5de <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5cc:	f383 8811 	msr	BASEPRI, r3
 800c5d0:	f3bf 8f6f 	isb	sy
 800c5d4:	f3bf 8f4f 	dsb	sy
 800c5d8:	60fb      	str	r3, [r7, #12]
}
 800c5da:	bf00      	nop
 800c5dc:	e7fe      	b.n	800c5dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d902      	bls.n	800c5ee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	61fb      	str	r3, [r7, #28]
 800c5ec:	e002      	b.n	800c5f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f8:	69fa      	ldr	r2, [r7, #28]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d04b      	beq.n	800c696 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	429a      	cmp	r2, r3
 800c606:	d146      	bne.n	800c696 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c608:	4b25      	ldr	r3, [pc, #148]	; (800c6a0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	69ba      	ldr	r2, [r7, #24]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d10a      	bne.n	800c628 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	60bb      	str	r3, [r7, #8]
}
 800c624:	bf00      	nop
 800c626:	e7fe      	b.n	800c626 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	69fa      	ldr	r2, [r7, #28]
 800c632:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	db04      	blt.n	800c646 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	6959      	ldr	r1, [r3, #20]
 800c64a:	693a      	ldr	r2, [r7, #16]
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4a13      	ldr	r2, [pc, #76]	; (800c6a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c656:	4413      	add	r3, r2
 800c658:	4299      	cmp	r1, r3
 800c65a:	d11c      	bne.n	800c696 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	3304      	adds	r3, #4
 800c660:	4618      	mov	r0, r3
 800c662:	f7fd fb45 	bl	8009cf0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66a:	4b0f      	ldr	r3, [pc, #60]	; (800c6a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d903      	bls.n	800c67a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c676:	4a0c      	ldr	r2, [pc, #48]	; (800c6a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c678:	6013      	str	r3, [r2, #0]
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4a07      	ldr	r2, [pc, #28]	; (800c6a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c688:	441a      	add	r2, r3
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	3304      	adds	r3, #4
 800c68e:	4619      	mov	r1, r3
 800c690:	4610      	mov	r0, r2
 800c692:	f7fd fad0 	bl	8009c36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c696:	bf00      	nop
 800c698:	3720      	adds	r7, #32
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	200018d0 	.word	0x200018d0
 800c6a4:	200018d4 	.word	0x200018d4
 800c6a8:	20001dac 	.word	0x20001dac

0800c6ac <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f003 faa7 	bl	800fc0c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7f3 fdf8 	bl	80002b4 <strlen>
 800c6c4:	60f8      	str	r0, [r7, #12]
 800c6c6:	e007      	b.n	800c6d8 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	2220      	movs	r2, #32
 800c6d0:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b1e      	cmp	r3, #30
 800c6dc:	d9f4      	bls.n	800c6c8 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	4413      	add	r3, r2
	}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
	...

0800c6f8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800c6f8:	b590      	push	{r4, r7, lr}
 800c6fa:	b089      	sub	sp, #36	; 0x24
 800c6fc:	af02      	add	r7, sp, #8
 800c6fe:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c706:	4b45      	ldr	r3, [pc, #276]	; (800c81c <vTaskList+0x124>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c70c:	4b43      	ldr	r3, [pc, #268]	; (800c81c <vTaskList+0x124>)
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	4613      	mov	r3, r2
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	4413      	add	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4618      	mov	r0, r3
 800c71a:	f001 f8ad 	bl	800d878 <pvPortMalloc>
 800c71e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d076      	beq.n	800c814 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800c726:	2200      	movs	r2, #0
 800c728:	68f9      	ldr	r1, [r7, #12]
 800c72a:	68b8      	ldr	r0, [r7, #8]
 800c72c:	f7ff f9a6 	bl	800ba7c <uxTaskGetSystemState>
 800c730:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800c732:	2300      	movs	r3, #0
 800c734:	617b      	str	r3, [r7, #20]
 800c736:	e066      	b.n	800c806 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	4613      	mov	r3, r2
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	4413      	add	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	461a      	mov	r2, r3
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	4413      	add	r3, r2
 800c748:	7b1b      	ldrb	r3, [r3, #12]
 800c74a:	2b04      	cmp	r3, #4
 800c74c:	d81b      	bhi.n	800c786 <vTaskList+0x8e>
 800c74e:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <vTaskList+0x5c>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c769 	.word	0x0800c769
 800c758:	0800c76f 	.word	0x0800c76f
 800c75c:	0800c775 	.word	0x0800c775
 800c760:	0800c77b 	.word	0x0800c77b
 800c764:	0800c781 	.word	0x0800c781
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800c768:	2358      	movs	r3, #88	; 0x58
 800c76a:	74fb      	strb	r3, [r7, #19]
										break;
 800c76c:	e00e      	b.n	800c78c <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800c76e:	2352      	movs	r3, #82	; 0x52
 800c770:	74fb      	strb	r3, [r7, #19]
										break;
 800c772:	e00b      	b.n	800c78c <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800c774:	2342      	movs	r3, #66	; 0x42
 800c776:	74fb      	strb	r3, [r7, #19]
										break;
 800c778:	e008      	b.n	800c78c <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800c77a:	2353      	movs	r3, #83	; 0x53
 800c77c:	74fb      	strb	r3, [r7, #19]
										break;
 800c77e:	e005      	b.n	800c78c <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800c780:	2344      	movs	r3, #68	; 0x44
 800c782:	74fb      	strb	r3, [r7, #19]
										break;
 800c784:	e002      	b.n	800c78c <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800c786:	2300      	movs	r3, #0
 800c788:	74fb      	strb	r3, [r7, #19]
										break;
 800c78a:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	4613      	mov	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	4413      	add	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	461a      	mov	r2, r3
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	4413      	add	r3, r2
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff ff83 	bl	800c6ac <prvWriteNameToBuffer>
 800c7a6:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c7a8:	7cf9      	ldrb	r1, [r7, #19]
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	4413      	add	r3, r2
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	6918      	ldr	r0, [r3, #16]
 800c7bc:	697a      	ldr	r2, [r7, #20]
 800c7be:	4613      	mov	r3, r2
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	4413      	add	r3, r2
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	8c1b      	ldrh	r3, [r3, #32]
 800c7ce:	461c      	mov	r4, r3
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	00db      	lsls	r3, r3, #3
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	461a      	mov	r2, r3
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	4413      	add	r3, r2
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	9400      	str	r4, [sp, #0]
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	460a      	mov	r2, r1
 800c7ea:	490d      	ldr	r1, [pc, #52]	; (800c820 <vTaskList+0x128>)
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f003 f9ed 	bl	800fbcc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7f3 fd5e 	bl	80002b4 <strlen>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	3301      	adds	r3, #1
 800c804:	617b      	str	r3, [r7, #20]
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d394      	bcc.n	800c738 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800c80e:	68b8      	ldr	r0, [r7, #8]
 800c810:	f001 f8fe 	bl	800da10 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c814:	bf00      	nop
 800c816:	371c      	adds	r7, #28
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd90      	pop	{r4, r7, pc}
 800c81c:	20001da4 	.word	0x20001da4
 800c820:	08010c0c 	.word	0x08010c0c

0800c824 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c824:	b480      	push	{r7}
 800c826:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c828:	4b07      	ldr	r3, [pc, #28]	; (800c848 <pvTaskIncrementMutexHeldCount+0x24>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d004      	beq.n	800c83a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <pvTaskIncrementMutexHeldCount+0x24>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c836:	3201      	adds	r2, #1
 800c838:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800c83a:	4b03      	ldr	r3, [pc, #12]	; (800c848 <pvTaskIncrementMutexHeldCount+0x24>)
 800c83c:	681b      	ldr	r3, [r3, #0]
	}
 800c83e:	4618      	mov	r0, r3
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr
 800c848:	200018d0 	.word	0x200018d0

0800c84c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
 800c858:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c85a:	f000 feeb 	bl	800d634 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c85e:	4b29      	ldr	r3, [pc, #164]	; (800c904 <xTaskNotifyWait+0xb8>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d01c      	beq.n	800c8a6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c86c:	4b25      	ldr	r3, [pc, #148]	; (800c904 <xTaskNotifyWait+0xb8>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	43d2      	mvns	r2, r2
 800c878:	400a      	ands	r2, r1
 800c87a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c87e:	4b21      	ldr	r3, [pc, #132]	; (800c904 <xTaskNotifyWait+0xb8>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00b      	beq.n	800c8a6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c88e:	2101      	movs	r1, #1
 800c890:	6838      	ldr	r0, [r7, #0]
 800c892:	f000 fa03 	bl	800cc9c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c896:	4b1c      	ldr	r3, [pc, #112]	; (800c908 <xTaskNotifyWait+0xbc>)
 800c898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c8a6:	f000 fef5 	bl	800d694 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c8aa:	f000 fec3 	bl	800d634 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d005      	beq.n	800c8c0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c8b4:	4b13      	ldr	r3, [pc, #76]	; (800c904 <xTaskNotifyWait+0xb8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c8c0:	4b10      	ldr	r3, [pc, #64]	; (800c904 <xTaskNotifyWait+0xb8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d002      	beq.n	800c8d4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	617b      	str	r3, [r7, #20]
 800c8d2:	e00a      	b.n	800c8ea <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c8d4:	4b0b      	ldr	r3, [pc, #44]	; (800c904 <xTaskNotifyWait+0xb8>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	43d2      	mvns	r2, r2
 800c8e0:	400a      	ands	r2, r1
 800c8e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8ea:	4b06      	ldr	r3, [pc, #24]	; (800c904 <xTaskNotifyWait+0xb8>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 800c8f4:	f000 fece 	bl	800d694 <vPortExitCritical>

		return xReturn;
 800c8f8:	697b      	ldr	r3, [r7, #20]
	}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	200018d0 	.word	0x200018d0
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08a      	sub	sp, #40	; 0x28
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	603b      	str	r3, [r7, #0]
 800c918:	4613      	mov	r3, r2
 800c91a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c91c:	2301      	movs	r3, #1
 800c91e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d10a      	bne.n	800c93c <xTaskGenericNotify+0x30>
	__asm volatile
 800c926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92a:	f383 8811 	msr	BASEPRI, r3
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	f3bf 8f4f 	dsb	sy
 800c936:	61bb      	str	r3, [r7, #24]
}
 800c938:	bf00      	nop
 800c93a:	e7fe      	b.n	800c93a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c940:	f000 fe78 	bl	800d634 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d004      	beq.n	800c954 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c94a:	6a3b      	ldr	r3, [r7, #32]
 800c94c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c95a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c95c:	6a3b      	ldr	r3, [r7, #32]
 800c95e:	2202      	movs	r2, #2
 800c960:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800c964:	79fb      	ldrb	r3, [r7, #7]
 800c966:	2b04      	cmp	r3, #4
 800c968:	d82d      	bhi.n	800c9c6 <xTaskGenericNotify+0xba>
 800c96a:	a201      	add	r2, pc, #4	; (adr r2, 800c970 <xTaskGenericNotify+0x64>)
 800c96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c970:	0800c9e9 	.word	0x0800c9e9
 800c974:	0800c985 	.word	0x0800c985
 800c978:	0800c997 	.word	0x0800c997
 800c97c:	0800c9a7 	.word	0x0800c9a7
 800c980:	0800c9b1 	.word	0x0800c9b1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	431a      	orrs	r2, r3
 800c98e:	6a3b      	ldr	r3, [r7, #32]
 800c990:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800c994:	e02b      	b.n	800c9ee <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c996:	6a3b      	ldr	r3, [r7, #32]
 800c998:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c99c:	1c5a      	adds	r2, r3, #1
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800c9a4:	e023      	b.n	800c9ee <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c9a6:	6a3b      	ldr	r3, [r7, #32]
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800c9ae:	e01e      	b.n	800c9ee <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c9b0:	7ffb      	ldrb	r3, [r7, #31]
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d004      	beq.n	800c9c0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c9be:	e016      	b.n	800c9ee <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c9c4:	e013      	b.n	800c9ee <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c9c6:	6a3b      	ldr	r3, [r7, #32]
 800c9c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9d0:	d00c      	beq.n	800c9ec <xTaskGenericNotify+0xe0>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	617b      	str	r3, [r7, #20]
}
 800c9e4:	bf00      	nop
 800c9e6:	e7fe      	b.n	800c9e6 <xTaskGenericNotify+0xda>
					break;
 800c9e8:	bf00      	nop
 800c9ea:	e000      	b.n	800c9ee <xTaskGenericNotify+0xe2>

					break;
 800c9ec:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c9ee:	7ffb      	ldrb	r3, [r7, #31]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d13a      	bne.n	800ca6a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fd f979 	bl	8009cf0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c9fe:	6a3b      	ldr	r3, [r7, #32]
 800ca00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca02:	4b1d      	ldr	r3, [pc, #116]	; (800ca78 <xTaskGenericNotify+0x16c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d903      	bls.n	800ca12 <xTaskGenericNotify+0x106>
 800ca0a:	6a3b      	ldr	r3, [r7, #32]
 800ca0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0e:	4a1a      	ldr	r2, [pc, #104]	; (800ca78 <xTaskGenericNotify+0x16c>)
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca16:	4613      	mov	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4a17      	ldr	r2, [pc, #92]	; (800ca7c <xTaskGenericNotify+0x170>)
 800ca20:	441a      	add	r2, r3
 800ca22:	6a3b      	ldr	r3, [r7, #32]
 800ca24:	3304      	adds	r3, #4
 800ca26:	4619      	mov	r1, r3
 800ca28:	4610      	mov	r0, r2
 800ca2a:	f7fd f904 	bl	8009c36 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ca2e:	6a3b      	ldr	r3, [r7, #32]
 800ca30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00a      	beq.n	800ca4c <xTaskGenericNotify+0x140>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	613b      	str	r3, [r7, #16]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca50:	4b0b      	ldr	r3, [pc, #44]	; (800ca80 <xTaskGenericNotify+0x174>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d907      	bls.n	800ca6a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ca5a:	4b0a      	ldr	r3, [pc, #40]	; (800ca84 <xTaskGenericNotify+0x178>)
 800ca5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca60:	601a      	str	r2, [r3, #0]
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ca6a:	f000 fe13 	bl	800d694 <vPortExitCritical>

		return xReturn;
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3728      	adds	r7, #40	; 0x28
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20001dac 	.word	0x20001dac
 800ca7c:	200018d4 	.word	0x200018d4
 800ca80:	200018d0 	.word	0x200018d0
 800ca84:	e000ed04 	.word	0xe000ed04

0800ca88 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08e      	sub	sp, #56	; 0x38
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	603b      	str	r3, [r7, #0]
 800ca94:	4613      	mov	r3, r2
 800ca96:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10a      	bne.n	800cab8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cab4:	bf00      	nop
 800cab6:	e7fe      	b.n	800cab6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cab8:	f000 fe9e 	bl	800d7f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cac0:	f3ef 8211 	mrs	r2, BASEPRI
 800cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	623a      	str	r2, [r7, #32]
 800cad6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cad8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cada:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d004      	beq.n	800caec <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800caec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caee:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800caf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	2202      	movs	r2, #2
 800cafa:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800cafe:	79fb      	ldrb	r3, [r7, #7]
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d82f      	bhi.n	800cb64 <xTaskGenericNotifyFromISR+0xdc>
 800cb04:	a201      	add	r2, pc, #4	; (adr r2, 800cb0c <xTaskGenericNotifyFromISR+0x84>)
 800cb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0a:	bf00      	nop
 800cb0c:	0800cb87 	.word	0x0800cb87
 800cb10:	0800cb21 	.word	0x0800cb21
 800cb14:	0800cb33 	.word	0x0800cb33
 800cb18:	0800cb43 	.word	0x0800cb43
 800cb1c:	0800cb4d 	.word	0x0800cb4d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	431a      	orrs	r2, r3
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800cb30:	e02c      	b.n	800cb8c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cb38:	1c5a      	adds	r2, r3, #1
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800cb40:	e024      	b.n	800cb8c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800cb4a:	e01f      	b.n	800cb8c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cb4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d004      	beq.n	800cb5e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cb5c:	e016      	b.n	800cb8c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800cb62:	e013      	b.n	800cb8c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb6e:	d00c      	beq.n	800cb8a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	61bb      	str	r3, [r7, #24]
}
 800cb82:	bf00      	nop
 800cb84:	e7fe      	b.n	800cb84 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800cb86:	bf00      	nop
 800cb88:	e000      	b.n	800cb8c <xTaskGenericNotifyFromISR+0x104>
					break;
 800cb8a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cb8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d146      	bne.n	800cc22 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00a      	beq.n	800cbb2 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	617b      	str	r3, [r7, #20]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbb2:	4b21      	ldr	r3, [pc, #132]	; (800cc38 <xTaskGenericNotifyFromISR+0x1b0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d11d      	bne.n	800cbf6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fd f896 	bl	8009cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc8:	4b1c      	ldr	r3, [pc, #112]	; (800cc3c <xTaskGenericNotifyFromISR+0x1b4>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d903      	bls.n	800cbd8 <xTaskGenericNotifyFromISR+0x150>
 800cbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd4:	4a19      	ldr	r2, [pc, #100]	; (800cc3c <xTaskGenericNotifyFromISR+0x1b4>)
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbdc:	4613      	mov	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4a16      	ldr	r2, [pc, #88]	; (800cc40 <xTaskGenericNotifyFromISR+0x1b8>)
 800cbe6:	441a      	add	r2, r3
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	3304      	adds	r3, #4
 800cbec:	4619      	mov	r1, r3
 800cbee:	4610      	mov	r0, r2
 800cbf0:	f7fd f821 	bl	8009c36 <vListInsertEnd>
 800cbf4:	e005      	b.n	800cc02 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	3318      	adds	r3, #24
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	4811      	ldr	r0, [pc, #68]	; (800cc44 <xTaskGenericNotifyFromISR+0x1bc>)
 800cbfe:	f7fd f81a 	bl	8009c36 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc06:	4b10      	ldr	r3, [pc, #64]	; (800cc48 <xTaskGenericNotifyFromISR+0x1c0>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d908      	bls.n	800cc22 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc18:	2201      	movs	r2, #1
 800cc1a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <xTaskGenericNotifyFromISR+0x1c4>)
 800cc1e:	2201      	movs	r2, #1
 800cc20:	601a      	str	r2, [r3, #0]
 800cc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc24:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	f383 8811 	msr	BASEPRI, r3
}
 800cc2c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cc2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3738      	adds	r7, #56	; 0x38
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	20001dcc 	.word	0x20001dcc
 800cc3c:	20001dac 	.word	0x20001dac
 800cc40:	200018d4 	.word	0x200018d4
 800cc44:	20001d64 	.word	0x20001d64
 800cc48:	200018d0 	.word	0x200018d0
 800cc4c:	20001db8 	.word	0x20001db8

0800cc50 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d102      	bne.n	800cc64 <xTaskNotifyStateClear+0x14>
 800cc5e:	4b0e      	ldr	r3, [pc, #56]	; (800cc98 <xTaskNotifyStateClear+0x48>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	e000      	b.n	800cc66 <xTaskNotifyStateClear+0x16>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800cc68:	f000 fce4 	bl	800d634 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d106      	bne.n	800cc86 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 800cc80:	2301      	movs	r3, #1
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	e001      	b.n	800cc8a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800cc8a:	f000 fd03 	bl	800d694 <vPortExitCritical>

		return xReturn;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
	}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	200018d0 	.word	0x200018d0

0800cc9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cca6:	4b21      	ldr	r3, [pc, #132]	; (800cd2c <prvAddCurrentTaskToDelayedList+0x90>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccac:	4b20      	ldr	r3, [pc, #128]	; (800cd30 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3304      	adds	r3, #4
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fd f81c 	bl	8009cf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccbe:	d10a      	bne.n	800ccd6 <prvAddCurrentTaskToDelayedList+0x3a>
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d007      	beq.n	800ccd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccc6:	4b1a      	ldr	r3, [pc, #104]	; (800cd30 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3304      	adds	r3, #4
 800cccc:	4619      	mov	r1, r3
 800ccce:	4819      	ldr	r0, [pc, #100]	; (800cd34 <prvAddCurrentTaskToDelayedList+0x98>)
 800ccd0:	f7fc ffb1 	bl	8009c36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ccd4:	e026      	b.n	800cd24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4413      	add	r3, r2
 800ccdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ccde:	4b14      	ldr	r3, [pc, #80]	; (800cd30 <prvAddCurrentTaskToDelayedList+0x94>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d209      	bcs.n	800cd02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccee:	4b12      	ldr	r3, [pc, #72]	; (800cd38 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	4b0f      	ldr	r3, [pc, #60]	; (800cd30 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	3304      	adds	r3, #4
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	f7fc ffbf 	bl	8009c7e <vListInsert>
}
 800cd00:	e010      	b.n	800cd24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd02:	4b0e      	ldr	r3, [pc, #56]	; (800cd3c <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	4b0a      	ldr	r3, [pc, #40]	; (800cd30 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3304      	adds	r3, #4
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	4610      	mov	r0, r2
 800cd10:	f7fc ffb5 	bl	8009c7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd14:	4b0a      	ldr	r3, [pc, #40]	; (800cd40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d202      	bcs.n	800cd24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cd1e:	4a08      	ldr	r2, [pc, #32]	; (800cd40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	6013      	str	r3, [r2, #0]
}
 800cd24:	bf00      	nop
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	20001da8 	.word	0x20001da8
 800cd30:	200018d0 	.word	0x200018d0
 800cd34:	20001d90 	.word	0x20001d90
 800cd38:	20001d60 	.word	0x20001d60
 800cd3c:	20001d5c 	.word	0x20001d5c
 800cd40:	20001dc4 	.word	0x20001dc4

0800cd44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b08a      	sub	sp, #40	; 0x28
 800cd48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd4e:	f000 fb07 	bl	800d360 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd52:	4b1c      	ldr	r3, [pc, #112]	; (800cdc4 <xTimerCreateTimerTask+0x80>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d021      	beq.n	800cd9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd62:	1d3a      	adds	r2, r7, #4
 800cd64:	f107 0108 	add.w	r1, r7, #8
 800cd68:	f107 030c 	add.w	r3, r7, #12
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7fc ff1b 	bl	8009ba8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd72:	6879      	ldr	r1, [r7, #4]
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	9202      	str	r2, [sp, #8]
 800cd7a:	9301      	str	r3, [sp, #4]
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	2300      	movs	r3, #0
 800cd82:	460a      	mov	r2, r1
 800cd84:	4910      	ldr	r1, [pc, #64]	; (800cdc8 <xTimerCreateTimerTask+0x84>)
 800cd86:	4811      	ldr	r0, [pc, #68]	; (800cdcc <xTimerCreateTimerTask+0x88>)
 800cd88:	f7fe f9f4 	bl	800b174 <xTaskCreateStatic>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	4a10      	ldr	r2, [pc, #64]	; (800cdd0 <xTimerCreateTimerTask+0x8c>)
 800cd90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd92:	4b0f      	ldr	r3, [pc, #60]	; (800cdd0 <xTimerCreateTimerTask+0x8c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10a      	bne.n	800cdba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	613b      	str	r3, [r7, #16]
}
 800cdb6:	bf00      	nop
 800cdb8:	e7fe      	b.n	800cdb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cdba:	697b      	ldr	r3, [r7, #20]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	20001e00 	.word	0x20001e00
 800cdc8:	08010c1c 	.word	0x08010c1c
 800cdcc:	0800cf09 	.word	0x0800cf09
 800cdd0:	20001e04 	.word	0x20001e04

0800cdd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b08a      	sub	sp, #40	; 0x28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10a      	bne.n	800ce02 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	623b      	str	r3, [r7, #32]
}
 800cdfe:	bf00      	nop
 800ce00:	e7fe      	b.n	800ce00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce02:	4b1a      	ldr	r3, [pc, #104]	; (800ce6c <xTimerGenericCommand+0x98>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d02a      	beq.n	800ce60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2b05      	cmp	r3, #5
 800ce1a:	dc18      	bgt.n	800ce4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce1c:	f7ff fad0 	bl	800c3c0 <xTaskGetSchedulerState>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d109      	bne.n	800ce3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce26:	4b11      	ldr	r3, [pc, #68]	; (800ce6c <xTimerGenericCommand+0x98>)
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	f107 0110 	add.w	r1, r7, #16
 800ce2e:	2300      	movs	r3, #0
 800ce30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce32:	f7fd f8c5 	bl	8009fc0 <xQueueGenericSend>
 800ce36:	6278      	str	r0, [r7, #36]	; 0x24
 800ce38:	e012      	b.n	800ce60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce3a:	4b0c      	ldr	r3, [pc, #48]	; (800ce6c <xTimerGenericCommand+0x98>)
 800ce3c:	6818      	ldr	r0, [r3, #0]
 800ce3e:	f107 0110 	add.w	r1, r7, #16
 800ce42:	2300      	movs	r3, #0
 800ce44:	2200      	movs	r2, #0
 800ce46:	f7fd f8bb 	bl	8009fc0 <xQueueGenericSend>
 800ce4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ce4c:	e008      	b.n	800ce60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce4e:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <xTimerGenericCommand+0x98>)
 800ce50:	6818      	ldr	r0, [r3, #0]
 800ce52:	f107 0110 	add.w	r1, r7, #16
 800ce56:	2300      	movs	r3, #0
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	f7fd f9af 	bl	800a1bc <xQueueGenericSendFromISR>
 800ce5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3728      	adds	r7, #40	; 0x28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	20001e00 	.word	0x20001e00

0800ce70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce7a:	4b22      	ldr	r3, [pc, #136]	; (800cf04 <prvProcessExpiredTimer+0x94>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	3304      	adds	r3, #4
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fc ff31 	bl	8009cf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d022      	beq.n	800cee2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	699a      	ldr	r2, [r3, #24]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	18d1      	adds	r1, r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	6978      	ldr	r0, [r7, #20]
 800ceaa:	f000 f8d1 	bl	800d050 <prvInsertTimerInActiveList>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d01f      	beq.n	800cef4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	2300      	movs	r3, #0
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	2100      	movs	r1, #0
 800cebe:	6978      	ldr	r0, [r7, #20]
 800cec0:	f7ff ff88 	bl	800cdd4 <xTimerGenericCommand>
 800cec4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d113      	bne.n	800cef4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	60fb      	str	r3, [r7, #12]
}
 800cede:	bf00      	nop
 800cee0:	e7fe      	b.n	800cee0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cee8:	f023 0301 	bic.w	r3, r3, #1
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	6a1b      	ldr	r3, [r3, #32]
 800cef8:	6978      	ldr	r0, [r7, #20]
 800cefa:	4798      	blx	r3
}
 800cefc:	bf00      	nop
 800cefe:	3718      	adds	r7, #24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	20001df8 	.word	0x20001df8

0800cf08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf10:	f107 0308 	add.w	r3, r7, #8
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 f857 	bl	800cfc8 <prvGetNextExpireTime>
 800cf1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4619      	mov	r1, r3
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f000 f803 	bl	800cf2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf26:	f000 f8d5 	bl	800d0d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf2a:	e7f1      	b.n	800cf10 <prvTimerTask+0x8>

0800cf2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf36:	f7fe fce5 	bl	800b904 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf3a:	f107 0308 	add.w	r3, r7, #8
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 f866 	bl	800d010 <prvSampleTimeNow>
 800cf44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d130      	bne.n	800cfae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10a      	bne.n	800cf68 <prvProcessTimerOrBlockTask+0x3c>
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d806      	bhi.n	800cf68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf5a:	f7fe fce1 	bl	800b920 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf5e:	68f9      	ldr	r1, [r7, #12]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff ff85 	bl	800ce70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf66:	e024      	b.n	800cfb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d008      	beq.n	800cf80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf6e:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <prvProcessTimerOrBlockTask+0x90>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d101      	bne.n	800cf7c <prvProcessTimerOrBlockTask+0x50>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e000      	b.n	800cf7e <prvProcessTimerOrBlockTask+0x52>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf80:	4b0f      	ldr	r3, [pc, #60]	; (800cfc0 <prvProcessTimerOrBlockTask+0x94>)
 800cf82:	6818      	ldr	r0, [r3, #0]
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	f7fd fd7b 	bl	800aa88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf92:	f7fe fcc5 	bl	800b920 <xTaskResumeAll>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10a      	bne.n	800cfb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf9c:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <prvProcessTimerOrBlockTask+0x98>)
 800cf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	f3bf 8f6f 	isb	sy
}
 800cfac:	e001      	b.n	800cfb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cfae:	f7fe fcb7 	bl	800b920 <xTaskResumeAll>
}
 800cfb2:	bf00      	nop
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	20001dfc 	.word	0x20001dfc
 800cfc0:	20001e00 	.word	0x20001e00
 800cfc4:	e000ed04 	.word	0xe000ed04

0800cfc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfd0:	4b0e      	ldr	r3, [pc, #56]	; (800d00c <prvGetNextExpireTime+0x44>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d101      	bne.n	800cfde <prvGetNextExpireTime+0x16>
 800cfda:	2201      	movs	r2, #1
 800cfdc:	e000      	b.n	800cfe0 <prvGetNextExpireTime+0x18>
 800cfde:	2200      	movs	r2, #0
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d105      	bne.n	800cff8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfec:	4b07      	ldr	r3, [pc, #28]	; (800d00c <prvGetNextExpireTime+0x44>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	60fb      	str	r3, [r7, #12]
 800cff6:	e001      	b.n	800cffc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cff8:	2300      	movs	r3, #0
 800cffa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cffc:	68fb      	ldr	r3, [r7, #12]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	20001df8 	.word	0x20001df8

0800d010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d018:	f7fe fd20 	bl	800ba5c <xTaskGetTickCount>
 800d01c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d01e:	4b0b      	ldr	r3, [pc, #44]	; (800d04c <prvSampleTimeNow+0x3c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	429a      	cmp	r2, r3
 800d026:	d205      	bcs.n	800d034 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d028:	f000 f936 	bl	800d298 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	e002      	b.n	800d03a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d03a:	4a04      	ldr	r2, [pc, #16]	; (800d04c <prvSampleTimeNow+0x3c>)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d040:	68fb      	ldr	r3, [r7, #12]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	20001e08 	.word	0x20001e08

0800d050 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
 800d05c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d05e:	2300      	movs	r3, #0
 800d060:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	429a      	cmp	r2, r3
 800d074:	d812      	bhi.n	800d09c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	1ad2      	subs	r2, r2, r3
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	699b      	ldr	r3, [r3, #24]
 800d080:	429a      	cmp	r2, r3
 800d082:	d302      	bcc.n	800d08a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d084:	2301      	movs	r3, #1
 800d086:	617b      	str	r3, [r7, #20]
 800d088:	e01b      	b.n	800d0c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d08a:	4b10      	ldr	r3, [pc, #64]	; (800d0cc <prvInsertTimerInActiveList+0x7c>)
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3304      	adds	r3, #4
 800d092:	4619      	mov	r1, r3
 800d094:	4610      	mov	r0, r2
 800d096:	f7fc fdf2 	bl	8009c7e <vListInsert>
 800d09a:	e012      	b.n	800d0c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d206      	bcs.n	800d0b2 <prvInsertTimerInActiveList+0x62>
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d302      	bcc.n	800d0b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	617b      	str	r3, [r7, #20]
 800d0b0:	e007      	b.n	800d0c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0b2:	4b07      	ldr	r3, [pc, #28]	; (800d0d0 <prvInsertTimerInActiveList+0x80>)
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	4610      	mov	r0, r2
 800d0be:	f7fc fdde 	bl	8009c7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0c2:	697b      	ldr	r3, [r7, #20]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3718      	adds	r7, #24
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	20001dfc 	.word	0x20001dfc
 800d0d0:	20001df8 	.word	0x20001df8

0800d0d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08e      	sub	sp, #56	; 0x38
 800d0d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0da:	e0ca      	b.n	800d272 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	da18      	bge.n	800d114 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d0e2:	1d3b      	adds	r3, r7, #4
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10a      	bne.n	800d104 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	61fb      	str	r3, [r7, #28]
}
 800d100:	bf00      	nop
 800d102:	e7fe      	b.n	800d102 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d10a:	6850      	ldr	r0, [r2, #4]
 800d10c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d10e:	6892      	ldr	r2, [r2, #8]
 800d110:	4611      	mov	r1, r2
 800d112:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	f2c0 80aa 	blt.w	800d270 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d004      	beq.n	800d132 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12a:	3304      	adds	r3, #4
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7fc fddf 	bl	8009cf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d132:	463b      	mov	r3, r7
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff ff6b 	bl	800d010 <prvSampleTimeNow>
 800d13a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b09      	cmp	r3, #9
 800d140:	f200 8097 	bhi.w	800d272 <prvProcessReceivedCommands+0x19e>
 800d144:	a201      	add	r2, pc, #4	; (adr r2, 800d14c <prvProcessReceivedCommands+0x78>)
 800d146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d14a:	bf00      	nop
 800d14c:	0800d175 	.word	0x0800d175
 800d150:	0800d175 	.word	0x0800d175
 800d154:	0800d175 	.word	0x0800d175
 800d158:	0800d1e9 	.word	0x0800d1e9
 800d15c:	0800d1fd 	.word	0x0800d1fd
 800d160:	0800d247 	.word	0x0800d247
 800d164:	0800d175 	.word	0x0800d175
 800d168:	0800d175 	.word	0x0800d175
 800d16c:	0800d1e9 	.word	0x0800d1e9
 800d170:	0800d1fd 	.word	0x0800d1fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d17a:	f043 0301 	orr.w	r3, r3, #1
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18a:	699b      	ldr	r3, [r3, #24]
 800d18c:	18d1      	adds	r1, r2, r3
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d194:	f7ff ff5c 	bl	800d050 <prvInsertTimerInActiveList>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d069      	beq.n	800d272 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1ac:	f003 0304 	and.w	r3, r3, #4
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d05e      	beq.n	800d272 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	699b      	ldr	r3, [r3, #24]
 800d1ba:	441a      	add	r2, r3
 800d1bc:	2300      	movs	r3, #0
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c6:	f7ff fe05 	bl	800cdd4 <xTimerGenericCommand>
 800d1ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d14f      	bne.n	800d272 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d6:	f383 8811 	msr	BASEPRI, r3
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	61bb      	str	r3, [r7, #24]
}
 800d1e4:	bf00      	nop
 800d1e6:	e7fe      	b.n	800d1e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1ee:	f023 0301 	bic.w	r3, r3, #1
 800d1f2:	b2da      	uxtb	r2, r3
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d1fa:	e03a      	b.n	800d272 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d202:	f043 0301 	orr.w	r3, r3, #1
 800d206:	b2da      	uxtb	r2, r3
 800d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10a      	bne.n	800d232 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	617b      	str	r3, [r7, #20]
}
 800d22e:	bf00      	nop
 800d230:	e7fe      	b.n	800d230 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d234:	699a      	ldr	r2, [r3, #24]
 800d236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d238:	18d1      	adds	r1, r2, r3
 800d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d23e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d240:	f7ff ff06 	bl	800d050 <prvInsertTimerInActiveList>
					break;
 800d244:	e015      	b.n	800d272 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d24c:	f003 0302 	and.w	r3, r3, #2
 800d250:	2b00      	cmp	r3, #0
 800d252:	d103      	bne.n	800d25c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d256:	f000 fbdb 	bl	800da10 <vPortFree>
 800d25a:	e00a      	b.n	800d272 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d262:	f023 0301 	bic.w	r3, r3, #1
 800d266:	b2da      	uxtb	r2, r3
 800d268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d26e:	e000      	b.n	800d272 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d270:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d272:	4b08      	ldr	r3, [pc, #32]	; (800d294 <prvProcessReceivedCommands+0x1c0>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	1d39      	adds	r1, r7, #4
 800d278:	2200      	movs	r2, #0
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fd f8c6 	bl	800a40c <xQueueReceive>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	f47f af2a 	bne.w	800d0dc <prvProcessReceivedCommands+0x8>
	}
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	3730      	adds	r7, #48	; 0x30
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	20001e00 	.word	0x20001e00

0800d298 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b088      	sub	sp, #32
 800d29c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d29e:	e048      	b.n	800d332 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2a0:	4b2d      	ldr	r3, [pc, #180]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2aa:	4b2b      	ldr	r3, [pc, #172]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fc fd19 	bl	8009cf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2cc:	f003 0304 	and.w	r3, r3, #4
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d02e      	beq.n	800d332 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	4413      	add	r3, r2
 800d2dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d90e      	bls.n	800d304 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2f2:	4b19      	ldr	r3, [pc, #100]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	f7fc fcbe 	bl	8009c7e <vListInsert>
 800d302:	e016      	b.n	800d332 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d304:	2300      	movs	r3, #0
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	2300      	movs	r3, #0
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	2100      	movs	r1, #0
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f7ff fd60 	bl	800cdd4 <xTimerGenericCommand>
 800d314:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10a      	bne.n	800d332 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	603b      	str	r3, [r7, #0]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d332:	4b09      	ldr	r3, [pc, #36]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d1b1      	bne.n	800d2a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d33c:	4b06      	ldr	r3, [pc, #24]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d342:	4b06      	ldr	r3, [pc, #24]	; (800d35c <prvSwitchTimerLists+0xc4>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a04      	ldr	r2, [pc, #16]	; (800d358 <prvSwitchTimerLists+0xc0>)
 800d348:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d34a:	4a04      	ldr	r2, [pc, #16]	; (800d35c <prvSwitchTimerLists+0xc4>)
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	6013      	str	r3, [r2, #0]
}
 800d350:	bf00      	nop
 800d352:	3718      	adds	r7, #24
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	20001df8 	.word	0x20001df8
 800d35c:	20001dfc 	.word	0x20001dfc

0800d360 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d366:	f000 f965 	bl	800d634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d36a:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d120      	bne.n	800d3b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d372:	4814      	ldr	r0, [pc, #80]	; (800d3c4 <prvCheckForValidListAndQueue+0x64>)
 800d374:	f7fc fc32 	bl	8009bdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d378:	4813      	ldr	r0, [pc, #76]	; (800d3c8 <prvCheckForValidListAndQueue+0x68>)
 800d37a:	f7fc fc2f 	bl	8009bdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d37e:	4b13      	ldr	r3, [pc, #76]	; (800d3cc <prvCheckForValidListAndQueue+0x6c>)
 800d380:	4a10      	ldr	r2, [pc, #64]	; (800d3c4 <prvCheckForValidListAndQueue+0x64>)
 800d382:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d384:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <prvCheckForValidListAndQueue+0x70>)
 800d386:	4a10      	ldr	r2, [pc, #64]	; (800d3c8 <prvCheckForValidListAndQueue+0x68>)
 800d388:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d38a:	2300      	movs	r3, #0
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	4b11      	ldr	r3, [pc, #68]	; (800d3d4 <prvCheckForValidListAndQueue+0x74>)
 800d390:	4a11      	ldr	r2, [pc, #68]	; (800d3d8 <prvCheckForValidListAndQueue+0x78>)
 800d392:	2110      	movs	r1, #16
 800d394:	200a      	movs	r0, #10
 800d396:	f7fc fd3d 	bl	8009e14 <xQueueGenericCreateStatic>
 800d39a:	4603      	mov	r3, r0
 800d39c:	4a08      	ldr	r2, [pc, #32]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d39e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d3a0:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d005      	beq.n	800d3b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d3a8:	4b05      	ldr	r3, [pc, #20]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	490b      	ldr	r1, [pc, #44]	; (800d3dc <prvCheckForValidListAndQueue+0x7c>)
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fd fb40 	bl	800aa34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3b4:	f000 f96e 	bl	800d694 <vPortExitCritical>
}
 800d3b8:	bf00      	nop
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	20001e00 	.word	0x20001e00
 800d3c4:	20001dd0 	.word	0x20001dd0
 800d3c8:	20001de4 	.word	0x20001de4
 800d3cc:	20001df8 	.word	0x20001df8
 800d3d0:	20001dfc 	.word	0x20001dfc
 800d3d4:	20001eac 	.word	0x20001eac
 800d3d8:	20001e0c 	.word	0x20001e0c
 800d3dc:	08010c24 	.word	0x08010c24

0800d3e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	3b04      	subs	r3, #4
 800d3f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d3f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3b04      	subs	r3, #4
 800d3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	f023 0201 	bic.w	r2, r3, #1
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	3b04      	subs	r3, #4
 800d40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d410:	4a0c      	ldr	r2, [pc, #48]	; (800d444 <pxPortInitialiseStack+0x64>)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	3b14      	subs	r3, #20
 800d41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	3b04      	subs	r3, #4
 800d426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f06f 0202 	mvn.w	r2, #2
 800d42e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	3b20      	subs	r3, #32
 800d434:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d436:	68fb      	ldr	r3, [r7, #12]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr
 800d444:	0800d449 	.word	0x0800d449

0800d448 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d448:	b480      	push	{r7}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d452:	4b12      	ldr	r3, [pc, #72]	; (800d49c <prvTaskExitError+0x54>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d45a:	d00a      	beq.n	800d472 <prvTaskExitError+0x2a>
	__asm volatile
 800d45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	60fb      	str	r3, [r7, #12]
}
 800d46e:	bf00      	nop
 800d470:	e7fe      	b.n	800d470 <prvTaskExitError+0x28>
	__asm volatile
 800d472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d476:	f383 8811 	msr	BASEPRI, r3
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	60bb      	str	r3, [r7, #8]
}
 800d484:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d486:	bf00      	nop
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d0fc      	beq.n	800d488 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d48e:	bf00      	nop
 800d490:	bf00      	nop
 800d492:	3714      	adds	r7, #20
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	200000a4 	.word	0x200000a4

0800d4a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4a0:	4b07      	ldr	r3, [pc, #28]	; (800d4c0 <pxCurrentTCBConst2>)
 800d4a2:	6819      	ldr	r1, [r3, #0]
 800d4a4:	6808      	ldr	r0, [r1, #0]
 800d4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4aa:	f380 8809 	msr	PSP, r0
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f04f 0000 	mov.w	r0, #0
 800d4b6:	f380 8811 	msr	BASEPRI, r0
 800d4ba:	4770      	bx	lr
 800d4bc:	f3af 8000 	nop.w

0800d4c0 <pxCurrentTCBConst2>:
 800d4c0:	200018d0 	.word	0x200018d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4c4:	bf00      	nop
 800d4c6:	bf00      	nop

0800d4c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4c8:	4808      	ldr	r0, [pc, #32]	; (800d4ec <prvPortStartFirstTask+0x24>)
 800d4ca:	6800      	ldr	r0, [r0, #0]
 800d4cc:	6800      	ldr	r0, [r0, #0]
 800d4ce:	f380 8808 	msr	MSP, r0
 800d4d2:	f04f 0000 	mov.w	r0, #0
 800d4d6:	f380 8814 	msr	CONTROL, r0
 800d4da:	b662      	cpsie	i
 800d4dc:	b661      	cpsie	f
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	df00      	svc	0
 800d4e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d4ea:	bf00      	nop
 800d4ec:	e000ed08 	.word	0xe000ed08

0800d4f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d4f6:	4b46      	ldr	r3, [pc, #280]	; (800d610 <xPortStartScheduler+0x120>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4a46      	ldr	r2, [pc, #280]	; (800d614 <xPortStartScheduler+0x124>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d10a      	bne.n	800d516 <xPortStartScheduler+0x26>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	613b      	str	r3, [r7, #16]
}
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d516:	4b3e      	ldr	r3, [pc, #248]	; (800d610 <xPortStartScheduler+0x120>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a3f      	ldr	r2, [pc, #252]	; (800d618 <xPortStartScheduler+0x128>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d10a      	bne.n	800d536 <xPortStartScheduler+0x46>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	60fb      	str	r3, [r7, #12]
}
 800d532:	bf00      	nop
 800d534:	e7fe      	b.n	800d534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d536:	4b39      	ldr	r3, [pc, #228]	; (800d61c <xPortStartScheduler+0x12c>)
 800d538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	22ff      	movs	r2, #255	; 0xff
 800d546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d550:	78fb      	ldrb	r3, [r7, #3]
 800d552:	b2db      	uxtb	r3, r3
 800d554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	4b31      	ldr	r3, [pc, #196]	; (800d620 <xPortStartScheduler+0x130>)
 800d55c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d55e:	4b31      	ldr	r3, [pc, #196]	; (800d624 <xPortStartScheduler+0x134>)
 800d560:	2207      	movs	r2, #7
 800d562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d564:	e009      	b.n	800d57a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d566:	4b2f      	ldr	r3, [pc, #188]	; (800d624 <xPortStartScheduler+0x134>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	3b01      	subs	r3, #1
 800d56c:	4a2d      	ldr	r2, [pc, #180]	; (800d624 <xPortStartScheduler+0x134>)
 800d56e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d570:	78fb      	ldrb	r3, [r7, #3]
 800d572:	b2db      	uxtb	r3, r3
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	b2db      	uxtb	r3, r3
 800d578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d57a:	78fb      	ldrb	r3, [r7, #3]
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d582:	2b80      	cmp	r3, #128	; 0x80
 800d584:	d0ef      	beq.n	800d566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d586:	4b27      	ldr	r3, [pc, #156]	; (800d624 <xPortStartScheduler+0x134>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f1c3 0307 	rsb	r3, r3, #7
 800d58e:	2b04      	cmp	r3, #4
 800d590:	d00a      	beq.n	800d5a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d596:	f383 8811 	msr	BASEPRI, r3
 800d59a:	f3bf 8f6f 	isb	sy
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	60bb      	str	r3, [r7, #8]
}
 800d5a4:	bf00      	nop
 800d5a6:	e7fe      	b.n	800d5a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d5a8:	4b1e      	ldr	r3, [pc, #120]	; (800d624 <xPortStartScheduler+0x134>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	021b      	lsls	r3, r3, #8
 800d5ae:	4a1d      	ldr	r2, [pc, #116]	; (800d624 <xPortStartScheduler+0x134>)
 800d5b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5b2:	4b1c      	ldr	r3, [pc, #112]	; (800d624 <xPortStartScheduler+0x134>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5ba:	4a1a      	ldr	r2, [pc, #104]	; (800d624 <xPortStartScheduler+0x134>)
 800d5bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	b2da      	uxtb	r2, r3
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5c6:	4b18      	ldr	r3, [pc, #96]	; (800d628 <xPortStartScheduler+0x138>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a17      	ldr	r2, [pc, #92]	; (800d628 <xPortStartScheduler+0x138>)
 800d5cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d5d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5d2:	4b15      	ldr	r3, [pc, #84]	; (800d628 <xPortStartScheduler+0x138>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a14      	ldr	r2, [pc, #80]	; (800d628 <xPortStartScheduler+0x138>)
 800d5d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d5dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d5de:	f000 f8dd 	bl	800d79c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d5e2:	4b12      	ldr	r3, [pc, #72]	; (800d62c <xPortStartScheduler+0x13c>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d5e8:	f000 f8fc 	bl	800d7e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d5ec:	4b10      	ldr	r3, [pc, #64]	; (800d630 <xPortStartScheduler+0x140>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a0f      	ldr	r2, [pc, #60]	; (800d630 <xPortStartScheduler+0x140>)
 800d5f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d5f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5f8:	f7ff ff66 	bl	800d4c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d5fc:	f7fe fb86 	bl	800bd0c <vTaskSwitchContext>
	prvTaskExitError();
 800d600:	f7ff ff22 	bl	800d448 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d604:	2300      	movs	r3, #0
}
 800d606:	4618      	mov	r0, r3
 800d608:	3718      	adds	r7, #24
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	e000ed00 	.word	0xe000ed00
 800d614:	410fc271 	.word	0x410fc271
 800d618:	410fc270 	.word	0x410fc270
 800d61c:	e000e400 	.word	0xe000e400
 800d620:	20001efc 	.word	0x20001efc
 800d624:	20001f00 	.word	0x20001f00
 800d628:	e000ed20 	.word	0xe000ed20
 800d62c:	200000a4 	.word	0x200000a4
 800d630:	e000ef34 	.word	0xe000ef34

0800d634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
	__asm volatile
 800d63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63e:	f383 8811 	msr	BASEPRI, r3
 800d642:	f3bf 8f6f 	isb	sy
 800d646:	f3bf 8f4f 	dsb	sy
 800d64a:	607b      	str	r3, [r7, #4]
}
 800d64c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d64e:	4b0f      	ldr	r3, [pc, #60]	; (800d68c <vPortEnterCritical+0x58>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	3301      	adds	r3, #1
 800d654:	4a0d      	ldr	r2, [pc, #52]	; (800d68c <vPortEnterCritical+0x58>)
 800d656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d658:	4b0c      	ldr	r3, [pc, #48]	; (800d68c <vPortEnterCritical+0x58>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d10f      	bne.n	800d680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d660:	4b0b      	ldr	r3, [pc, #44]	; (800d690 <vPortEnterCritical+0x5c>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	b2db      	uxtb	r3, r3
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00a      	beq.n	800d680 <vPortEnterCritical+0x4c>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	603b      	str	r3, [r7, #0]
}
 800d67c:	bf00      	nop
 800d67e:	e7fe      	b.n	800d67e <vPortEnterCritical+0x4a>
	}
}
 800d680:	bf00      	nop
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	200000a4 	.word	0x200000a4
 800d690:	e000ed04 	.word	0xe000ed04

0800d694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d69a:	4b12      	ldr	r3, [pc, #72]	; (800d6e4 <vPortExitCritical+0x50>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d10a      	bne.n	800d6b8 <vPortExitCritical+0x24>
	__asm volatile
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	607b      	str	r3, [r7, #4]
}
 800d6b4:	bf00      	nop
 800d6b6:	e7fe      	b.n	800d6b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d6b8:	4b0a      	ldr	r3, [pc, #40]	; (800d6e4 <vPortExitCritical+0x50>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	4a09      	ldr	r2, [pc, #36]	; (800d6e4 <vPortExitCritical+0x50>)
 800d6c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6c2:	4b08      	ldr	r3, [pc, #32]	; (800d6e4 <vPortExitCritical+0x50>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d105      	bne.n	800d6d6 <vPortExitCritical+0x42>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	f383 8811 	msr	BASEPRI, r3
}
 800d6d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d6d6:	bf00      	nop
 800d6d8:	370c      	adds	r7, #12
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	200000a4 	.word	0x200000a4
	...

0800d6f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6f0:	f3ef 8009 	mrs	r0, PSP
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	4b15      	ldr	r3, [pc, #84]	; (800d750 <pxCurrentTCBConst>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	f01e 0f10 	tst.w	lr, #16
 800d700:	bf08      	it	eq
 800d702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70a:	6010      	str	r0, [r2, #0]
 800d70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d710:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d714:	f380 8811 	msr	BASEPRI, r0
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f7fe faf4 	bl	800bd0c <vTaskSwitchContext>
 800d724:	f04f 0000 	mov.w	r0, #0
 800d728:	f380 8811 	msr	BASEPRI, r0
 800d72c:	bc09      	pop	{r0, r3}
 800d72e:	6819      	ldr	r1, [r3, #0]
 800d730:	6808      	ldr	r0, [r1, #0]
 800d732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d736:	f01e 0f10 	tst.w	lr, #16
 800d73a:	bf08      	it	eq
 800d73c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d740:	f380 8809 	msr	PSP, r0
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	f3af 8000 	nop.w

0800d750 <pxCurrentTCBConst>:
 800d750:	200018d0 	.word	0x200018d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d754:	bf00      	nop
 800d756:	bf00      	nop

0800d758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	607b      	str	r3, [r7, #4]
}
 800d770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d772:	f7fe fa11 	bl	800bb98 <xTaskIncrementTick>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d003      	beq.n	800d784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d77c:	4b06      	ldr	r3, [pc, #24]	; (800d798 <xPortSysTickHandler+0x40>)
 800d77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d782:	601a      	str	r2, [r3, #0]
 800d784:	2300      	movs	r3, #0
 800d786:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	f383 8811 	msr	BASEPRI, r3
}
 800d78e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	e000ed04 	.word	0xe000ed04

0800d79c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d79c:	b480      	push	{r7}
 800d79e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d7a0:	4b0b      	ldr	r3, [pc, #44]	; (800d7d0 <vPortSetupTimerInterrupt+0x34>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d7a6:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <vPortSetupTimerInterrupt+0x38>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	; (800d7d8 <vPortSetupTimerInterrupt+0x3c>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a0a      	ldr	r2, [pc, #40]	; (800d7dc <vPortSetupTimerInterrupt+0x40>)
 800d7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7b6:	099b      	lsrs	r3, r3, #6
 800d7b8:	4a09      	ldr	r2, [pc, #36]	; (800d7e0 <vPortSetupTimerInterrupt+0x44>)
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7be:	4b04      	ldr	r3, [pc, #16]	; (800d7d0 <vPortSetupTimerInterrupt+0x34>)
 800d7c0:	2207      	movs	r2, #7
 800d7c2:	601a      	str	r2, [r3, #0]
}
 800d7c4:	bf00      	nop
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	e000e010 	.word	0xe000e010
 800d7d4:	e000e018 	.word	0xe000e018
 800d7d8:	2000000c 	.word	0x2000000c
 800d7dc:	10624dd3 	.word	0x10624dd3
 800d7e0:	e000e014 	.word	0xe000e014

0800d7e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d7e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d7f4 <vPortEnableVFP+0x10>
 800d7e8:	6801      	ldr	r1, [r0, #0]
 800d7ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d7ee:	6001      	str	r1, [r0, #0]
 800d7f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d7f2:	bf00      	nop
 800d7f4:	e000ed88 	.word	0xe000ed88

0800d7f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d7fe:	f3ef 8305 	mrs	r3, IPSR
 800d802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b0f      	cmp	r3, #15
 800d808:	d914      	bls.n	800d834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d80a:	4a17      	ldr	r2, [pc, #92]	; (800d868 <vPortValidateInterruptPriority+0x70>)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	4413      	add	r3, r2
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d814:	4b15      	ldr	r3, [pc, #84]	; (800d86c <vPortValidateInterruptPriority+0x74>)
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	7afa      	ldrb	r2, [r7, #11]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d20a      	bcs.n	800d834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	607b      	str	r3, [r7, #4]
}
 800d830:	bf00      	nop
 800d832:	e7fe      	b.n	800d832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d834:	4b0e      	ldr	r3, [pc, #56]	; (800d870 <vPortValidateInterruptPriority+0x78>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d83c:	4b0d      	ldr	r3, [pc, #52]	; (800d874 <vPortValidateInterruptPriority+0x7c>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	429a      	cmp	r2, r3
 800d842:	d90a      	bls.n	800d85a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	603b      	str	r3, [r7, #0]
}
 800d856:	bf00      	nop
 800d858:	e7fe      	b.n	800d858 <vPortValidateInterruptPriority+0x60>
	}
 800d85a:	bf00      	nop
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	e000e3f0 	.word	0xe000e3f0
 800d86c:	20001efc 	.word	0x20001efc
 800d870:	e000ed0c 	.word	0xe000ed0c
 800d874:	20001f00 	.word	0x20001f00

0800d878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b08a      	sub	sp, #40	; 0x28
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d880:	2300      	movs	r3, #0
 800d882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d884:	f7fe f83e 	bl	800b904 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d888:	4b5b      	ldr	r3, [pc, #364]	; (800d9f8 <pvPortMalloc+0x180>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d101      	bne.n	800d894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d890:	f000 f920 	bl	800dad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d894:	4b59      	ldr	r3, [pc, #356]	; (800d9fc <pvPortMalloc+0x184>)
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4013      	ands	r3, r2
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f040 8093 	bne.w	800d9c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d01d      	beq.n	800d8e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d8a8:	2208      	movs	r2, #8
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f003 0307 	and.w	r3, r3, #7
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d014      	beq.n	800d8e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f023 0307 	bic.w	r3, r3, #7
 800d8c0:	3308      	adds	r3, #8
 800d8c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f003 0307 	and.w	r3, r3, #7
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00a      	beq.n	800d8e4 <pvPortMalloc+0x6c>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	617b      	str	r3, [r7, #20]
}
 800d8e0:	bf00      	nop
 800d8e2:	e7fe      	b.n	800d8e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d06e      	beq.n	800d9c8 <pvPortMalloc+0x150>
 800d8ea:	4b45      	ldr	r3, [pc, #276]	; (800da00 <pvPortMalloc+0x188>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d869      	bhi.n	800d9c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d8f4:	4b43      	ldr	r3, [pc, #268]	; (800da04 <pvPortMalloc+0x18c>)
 800d8f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d8f8:	4b42      	ldr	r3, [pc, #264]	; (800da04 <pvPortMalloc+0x18c>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8fe:	e004      	b.n	800d90a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	429a      	cmp	r2, r3
 800d912:	d903      	bls.n	800d91c <pvPortMalloc+0xa4>
 800d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1f1      	bne.n	800d900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d91c:	4b36      	ldr	r3, [pc, #216]	; (800d9f8 <pvPortMalloc+0x180>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d922:	429a      	cmp	r2, r3
 800d924:	d050      	beq.n	800d9c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d926:	6a3b      	ldr	r3, [r7, #32]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2208      	movs	r2, #8
 800d92c:	4413      	add	r3, r2
 800d92e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	6a3b      	ldr	r3, [r7, #32]
 800d936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	685a      	ldr	r2, [r3, #4]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	1ad2      	subs	r2, r2, r3
 800d940:	2308      	movs	r3, #8
 800d942:	005b      	lsls	r3, r3, #1
 800d944:	429a      	cmp	r2, r3
 800d946:	d91f      	bls.n	800d988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4413      	add	r3, r2
 800d94e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	f003 0307 	and.w	r3, r3, #7
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00a      	beq.n	800d970 <pvPortMalloc+0xf8>
	__asm volatile
 800d95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95e:	f383 8811 	msr	BASEPRI, r3
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	f3bf 8f4f 	dsb	sy
 800d96a:	613b      	str	r3, [r7, #16]
}
 800d96c:	bf00      	nop
 800d96e:	e7fe      	b.n	800d96e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d972:	685a      	ldr	r2, [r3, #4]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	1ad2      	subs	r2, r2, r3
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d982:	69b8      	ldr	r0, [r7, #24]
 800d984:	f000 f908 	bl	800db98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d988:	4b1d      	ldr	r3, [pc, #116]	; (800da00 <pvPortMalloc+0x188>)
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	4a1b      	ldr	r2, [pc, #108]	; (800da00 <pvPortMalloc+0x188>)
 800d994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d996:	4b1a      	ldr	r3, [pc, #104]	; (800da00 <pvPortMalloc+0x188>)
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	4b1b      	ldr	r3, [pc, #108]	; (800da08 <pvPortMalloc+0x190>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d203      	bcs.n	800d9aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9a2:	4b17      	ldr	r3, [pc, #92]	; (800da00 <pvPortMalloc+0x188>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a18      	ldr	r2, [pc, #96]	; (800da08 <pvPortMalloc+0x190>)
 800d9a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	4b13      	ldr	r3, [pc, #76]	; (800d9fc <pvPortMalloc+0x184>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	431a      	orrs	r2, r3
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d9be:	4b13      	ldr	r3, [pc, #76]	; (800da0c <pvPortMalloc+0x194>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	4a11      	ldr	r2, [pc, #68]	; (800da0c <pvPortMalloc+0x194>)
 800d9c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d9c8:	f7fd ffaa 	bl	800b920 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	f003 0307 	and.w	r3, r3, #7
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00a      	beq.n	800d9ec <pvPortMalloc+0x174>
	__asm volatile
 800d9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9da:	f383 8811 	msr	BASEPRI, r3
 800d9de:	f3bf 8f6f 	isb	sy
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	60fb      	str	r3, [r7, #12]
}
 800d9e8:	bf00      	nop
 800d9ea:	e7fe      	b.n	800d9ea <pvPortMalloc+0x172>
	return pvReturn;
 800d9ec:	69fb      	ldr	r3, [r7, #28]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3728      	adds	r7, #40	; 0x28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20009f0c 	.word	0x20009f0c
 800d9fc:	20009f20 	.word	0x20009f20
 800da00:	20009f10 	.word	0x20009f10
 800da04:	20009f04 	.word	0x20009f04
 800da08:	20009f14 	.word	0x20009f14
 800da0c:	20009f18 	.word	0x20009f18

0800da10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d04d      	beq.n	800dabe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da22:	2308      	movs	r3, #8
 800da24:	425b      	negs	r3, r3
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	4413      	add	r3, r2
 800da2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	685a      	ldr	r2, [r3, #4]
 800da34:	4b24      	ldr	r3, [pc, #144]	; (800dac8 <vPortFree+0xb8>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4013      	ands	r3, r2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10a      	bne.n	800da54 <vPortFree+0x44>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	60fb      	str	r3, [r7, #12]
}
 800da50:	bf00      	nop
 800da52:	e7fe      	b.n	800da52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00a      	beq.n	800da72 <vPortFree+0x62>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	60bb      	str	r3, [r7, #8]
}
 800da6e:	bf00      	nop
 800da70:	e7fe      	b.n	800da70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	685a      	ldr	r2, [r3, #4]
 800da76:	4b14      	ldr	r3, [pc, #80]	; (800dac8 <vPortFree+0xb8>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4013      	ands	r3, r2
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d01e      	beq.n	800dabe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d11a      	bne.n	800dabe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	685a      	ldr	r2, [r3, #4]
 800da8c:	4b0e      	ldr	r3, [pc, #56]	; (800dac8 <vPortFree+0xb8>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	43db      	mvns	r3, r3
 800da92:	401a      	ands	r2, r3
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da98:	f7fd ff34 	bl	800b904 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	685a      	ldr	r2, [r3, #4]
 800daa0:	4b0a      	ldr	r3, [pc, #40]	; (800dacc <vPortFree+0xbc>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4413      	add	r3, r2
 800daa6:	4a09      	ldr	r2, [pc, #36]	; (800dacc <vPortFree+0xbc>)
 800daa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800daaa:	6938      	ldr	r0, [r7, #16]
 800daac:	f000 f874 	bl	800db98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dab0:	4b07      	ldr	r3, [pc, #28]	; (800dad0 <vPortFree+0xc0>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	3301      	adds	r3, #1
 800dab6:	4a06      	ldr	r2, [pc, #24]	; (800dad0 <vPortFree+0xc0>)
 800dab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800daba:	f7fd ff31 	bl	800b920 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dabe:	bf00      	nop
 800dac0:	3718      	adds	r7, #24
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	20009f20 	.word	0x20009f20
 800dacc:	20009f10 	.word	0x20009f10
 800dad0:	20009f1c 	.word	0x20009f1c

0800dad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dae0:	4b27      	ldr	r3, [pc, #156]	; (800db80 <prvHeapInit+0xac>)
 800dae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f003 0307 	and.w	r3, r3, #7
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00c      	beq.n	800db08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3307      	adds	r3, #7
 800daf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f023 0307 	bic.w	r3, r3, #7
 800dafa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	4a1f      	ldr	r2, [pc, #124]	; (800db80 <prvHeapInit+0xac>)
 800db04:	4413      	add	r3, r2
 800db06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db0c:	4a1d      	ldr	r2, [pc, #116]	; (800db84 <prvHeapInit+0xb0>)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db12:	4b1c      	ldr	r3, [pc, #112]	; (800db84 <prvHeapInit+0xb0>)
 800db14:	2200      	movs	r2, #0
 800db16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	4413      	add	r3, r2
 800db1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db20:	2208      	movs	r2, #8
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	1a9b      	subs	r3, r3, r2
 800db26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f023 0307 	bic.w	r3, r3, #7
 800db2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	4a15      	ldr	r2, [pc, #84]	; (800db88 <prvHeapInit+0xb4>)
 800db34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db36:	4b14      	ldr	r3, [pc, #80]	; (800db88 <prvHeapInit+0xb4>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2200      	movs	r2, #0
 800db3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db3e:	4b12      	ldr	r3, [pc, #72]	; (800db88 <prvHeapInit+0xb4>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2200      	movs	r2, #0
 800db44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	1ad2      	subs	r2, r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db54:	4b0c      	ldr	r3, [pc, #48]	; (800db88 <prvHeapInit+0xb4>)
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	4a0a      	ldr	r2, [pc, #40]	; (800db8c <prvHeapInit+0xb8>)
 800db62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	4a09      	ldr	r2, [pc, #36]	; (800db90 <prvHeapInit+0xbc>)
 800db6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db6c:	4b09      	ldr	r3, [pc, #36]	; (800db94 <prvHeapInit+0xc0>)
 800db6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800db72:	601a      	str	r2, [r3, #0]
}
 800db74:	bf00      	nop
 800db76:	3714      	adds	r7, #20
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr
 800db80:	20001f04 	.word	0x20001f04
 800db84:	20009f04 	.word	0x20009f04
 800db88:	20009f0c 	.word	0x20009f0c
 800db8c:	20009f14 	.word	0x20009f14
 800db90:	20009f10 	.word	0x20009f10
 800db94:	20009f20 	.word	0x20009f20

0800db98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dba0:	4b28      	ldr	r3, [pc, #160]	; (800dc44 <prvInsertBlockIntoFreeList+0xac>)
 800dba2:	60fb      	str	r3, [r7, #12]
 800dba4:	e002      	b.n	800dbac <prvInsertBlockIntoFreeList+0x14>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	60fb      	str	r3, [r7, #12]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d8f7      	bhi.n	800dba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	68ba      	ldr	r2, [r7, #8]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d108      	bne.n	800dbda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	685a      	ldr	r2, [r3, #4]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	441a      	add	r2, r3
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	441a      	add	r2, r3
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d118      	bne.n	800dc20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	4b15      	ldr	r3, [pc, #84]	; (800dc48 <prvInsertBlockIntoFreeList+0xb0>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d00d      	beq.n	800dc16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	685a      	ldr	r2, [r3, #4]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	441a      	add	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	e008      	b.n	800dc28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc16:	4b0c      	ldr	r3, [pc, #48]	; (800dc48 <prvInsertBlockIntoFreeList+0xb0>)
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	601a      	str	r2, [r3, #0]
 800dc1e:	e003      	b.n	800dc28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d002      	beq.n	800dc36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc36:	bf00      	nop
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	20009f04 	.word	0x20009f04
 800dc48:	20009f0c 	.word	0x20009f0c

0800dc4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc50:	2200      	movs	r2, #0
 800dc52:	4912      	ldr	r1, [pc, #72]	; (800dc9c <MX_USB_DEVICE_Init+0x50>)
 800dc54:	4812      	ldr	r0, [pc, #72]	; (800dca0 <MX_USB_DEVICE_Init+0x54>)
 800dc56:	f7fa fb8b 	bl	8008370 <USBD_Init>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dc60:	f7f4 f872 	bl	8001d48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dc64:	490f      	ldr	r1, [pc, #60]	; (800dca4 <MX_USB_DEVICE_Init+0x58>)
 800dc66:	480e      	ldr	r0, [pc, #56]	; (800dca0 <MX_USB_DEVICE_Init+0x54>)
 800dc68:	f7fa fbb2 	bl	80083d0 <USBD_RegisterClass>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d001      	beq.n	800dc76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dc72:	f7f4 f869 	bl	8001d48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dc76:	490c      	ldr	r1, [pc, #48]	; (800dca8 <MX_USB_DEVICE_Init+0x5c>)
 800dc78:	4809      	ldr	r0, [pc, #36]	; (800dca0 <MX_USB_DEVICE_Init+0x54>)
 800dc7a:	f7fa faa3 	bl	80081c4 <USBD_CDC_RegisterInterface>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d001      	beq.n	800dc88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dc84:	f7f4 f860 	bl	8001d48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dc88:	4805      	ldr	r0, [pc, #20]	; (800dca0 <MX_USB_DEVICE_Init+0x54>)
 800dc8a:	f7fa fbd7 	bl	800843c <USBD_Start>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dc94:	f7f4 f858 	bl	8001d48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dc98:	bf00      	nop
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	200000bc 	.word	0x200000bc
 800dca0:	20009f24 	.word	0x20009f24
 800dca4:	20000024 	.word	0x20000024
 800dca8:	200000a8 	.word	0x200000a8

0800dcac <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
void Print_Task(void *param);
void init_usb_rtos_obj(void){
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af02      	add	r7, sp, #8
	sem_usb_tx = xSemaphoreCreateBinary();
 800dcb2:	2203      	movs	r2, #3
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	2001      	movs	r0, #1
 800dcb8:	f7fc f924 	bl	8009f04 <xQueueGenericCreate>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	4a12      	ldr	r2, [pc, #72]	; (800dd08 <init_usb_rtos_obj+0x5c>)
 800dcc0:	6013      	str	r3, [r2, #0]
	msg_buf_rx = xMessageBufferCreate(768);
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	f44f 7040 	mov.w	r0, #768	; 0x300
 800dcca:	f7fc ff11 	bl	800aaf0 <xStreamBufferGenericCreate>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	4a0e      	ldr	r2, [pc, #56]	; (800dd0c <init_usb_rtos_obj+0x60>)
 800dcd2:	6013      	str	r3, [r2, #0]
	msg_buf_tx = xMessageBufferCreate(768);
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	f44f 7040 	mov.w	r0, #768	; 0x300
 800dcdc:	f7fc ff08 	bl	800aaf0 <xStreamBufferGenericCreate>
 800dce0:	4603      	mov	r3, r0
 800dce2:	4a0b      	ldr	r2, [pc, #44]	; (800dd10 <init_usb_rtos_obj+0x64>)
 800dce4:	6013      	str	r3, [r2, #0]
	/*
	 *
	 */
	xTaskCreate(Print_Task,"Impressao",256, NULL, 5, NULL);
 800dce6:	2300      	movs	r3, #0
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	2305      	movs	r3, #5
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	2300      	movs	r3, #0
 800dcf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dcf4:	4907      	ldr	r1, [pc, #28]	; (800dd14 <init_usb_rtos_obj+0x68>)
 800dcf6:	4808      	ldr	r0, [pc, #32]	; (800dd18 <init_usb_rtos_obj+0x6c>)
 800dcf8:	f7fd fa99 	bl	800b22e <xTaskCreate>
	usb_on = 1;
 800dcfc:	4b07      	ldr	r3, [pc, #28]	; (800dd1c <init_usb_rtos_obj+0x70>)
 800dcfe:	2201      	movs	r2, #1
 800dd00:	601a      	str	r2, [r3, #0]
}
 800dd02:	bf00      	nop
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	2000b200 	.word	0x2000b200
 800dd0c:	2000b204 	.word	0x2000b204
 800dd10:	2000b208 	.word	0x2000b208
 800dd14:	08010c2c 	.word	0x08010c2c
 800dd18:	0800dd65 	.word	0x0800dd65
 800dd1c:	2000b20c 	.word	0x2000b20c

0800dd20 <CDC_Receiveq_FS>:
uint32_t usb_is_on(){
	return usb_on;
}


BaseType_t CDC_Receiveq_FS(char *data, TickType_t timeout){
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
	return xMessageBufferReceive(msg_buf_tx,(void *) data, 128,portMAX_DELAY);
 800dd2a:	4b06      	ldr	r3, [pc, #24]	; (800dd44 <CDC_Receiveq_FS+0x24>)
 800dd2c:	6818      	ldr	r0, [r3, #0]
 800dd2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd32:	2280      	movs	r2, #128	; 0x80
 800dd34:	6879      	ldr	r1, [r7, #4]
 800dd36:	f7fd f817 	bl	800ad68 <xStreamBufferReceive>
 800dd3a:	4603      	mov	r3, r0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	2000b208 	.word	0x2000b208

0800dd48 <queue_print>:

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
}

void queue_print(char *data,int size){
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
	CDC_Receiveq_FS(data,portMAX_DELAY);
 800dd52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff ffe2 	bl	800dd20 <CDC_Receiveq_FS>
//	xMessageBufferSend(msg_buf_tx,data,size,portMAX_DELAY);
}
 800dd5c:	bf00      	nop
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <Print_Task>:

void Print_Task(void * param){
 800dd64:	b580      	push	{r7, lr}
 800dd66:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800dd70:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800dd74:	6018      	str	r0, [r3, #0]
	char buffer[768];
	uint8_t qtd=0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
	uint8_t pcInputString[64], pcIndexInput = 0,pcOutputString[512];
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557

	BaseType_t xMoreDataToFollow;


	while(1){
		qtd = xMessageBufferReceive(msg_buf_rx,(void *) buffer,sizeof(buffer),portMAX_DELAY);
 800dd82:	4b62      	ldr	r3, [pc, #392]	; (800df0c <Print_Task+0x1a8>)
 800dd84:	6818      	ldr	r0, [r3, #0]
 800dd86:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800dd8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800dd92:	f7fc ffe9 	bl	800ad68 <xStreamBufferReceive>
 800dd96:	4603      	mov	r3, r0
 800dd98:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
		xRchar = buffer[0];
 800dd9c:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800dda0:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800dda4:	781a      	ldrb	r2, [r3, #0]
 800dda6:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800ddaa:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800ddae:	701a      	strb	r2, [r3, #0]
		if(xRchar == '\r'){
 800ddb0:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800ddb4:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	2b0d      	cmp	r3, #13
 800ddbc:	d12f      	bne.n	800de1e <Print_Task+0xba>
			CDC_Transmit_FS((uint8_t *)"\n\r", 2);
 800ddbe:	2102      	movs	r1, #2
 800ddc0:	4853      	ldr	r0, [pc, #332]	; (800df10 <Print_Task+0x1ac>)
 800ddc2:	f000 f973 	bl	800e0ac <CDC_Transmit_FS>
			pcInputString[pcIndexInput] = '\0';
 800ddc6:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800ddca:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800ddce:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	54d1      	strb	r1, [r2, r3]
			do{
							 /* Send the command string to the command interpreter.  Any
							 output generated by the command interpreter will be placed in the
							 pcOutputString buffer. */
				xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 800ddd6:	f107 0110 	add.w	r1, r7, #16
 800ddda:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ddde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7f3 f8a8 	bl	8000f38 <FreeRTOS_CLIProcessCommand>
 800dde8:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
							   MAX_OUTPUT_LENGTH/* The size of the output buffer. */
						   );

							 /* Write the output generated by the command interpreter to the
							 console. */
				CDC_Transmit_FS((uint8_t *) pcOutputString, strlen((char *) pcOutputString ) );
 800ddec:	f107 0310 	add.w	r3, r7, #16
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7f2 fa5f 	bl	80002b4 <strlen>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	f107 0310 	add.w	r3, r7, #16
 800ddfe:	4611      	mov	r1, r2
 800de00:	4618      	mov	r0, r3
 800de02:	f000 f953 	bl	800e0ac <CDC_Transmit_FS>
			 } while( xMoreDataToFollow != pdFALSE );
 800de06:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1e3      	bne.n	800ddd6 <Print_Task+0x72>


			CDC_Transmit_FS((uint8_t *) "\n\r# ", 4);
 800de0e:	2104      	movs	r1, #4
 800de10:	4840      	ldr	r0, [pc, #256]	; (800df14 <Print_Task+0x1b0>)
 800de12:	f000 f94b 	bl	800e0ac <CDC_Transmit_FS>
//			CDC_Transmit_FS((uint8_t *)pcInputString, pcIndexInput);
			pcIndexInput = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
 800de1c:	e7b1      	b.n	800dd82 <Print_Task+0x1e>
		} else {
			if( xRchar == '\0' ){
 800de1e:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800de22:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d10b      	bne.n	800de44 <Print_Task+0xe0>
				CDC_Transmit_FS((uint8_t *)"Welcome to FreeRTOS\n\r", 21);
 800de2c:	2115      	movs	r1, #21
 800de2e:	483a      	ldr	r0, [pc, #232]	; (800df18 <Print_Task+0x1b4>)
 800de30:	f000 f93c 	bl	800e0ac <CDC_Transmit_FS>
				CDC_Transmit_FS((uint8_t *)NewLine, 2);
 800de34:	2102      	movs	r1, #2
 800de36:	4839      	ldr	r0, [pc, #228]	; (800df1c <Print_Task+0x1b8>)
 800de38:	f000 f938 	bl	800e0ac <CDC_Transmit_FS>
				pcIndexInput = 0;
 800de3c:	2300      	movs	r3, #0
 800de3e:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
 800de42:	e79e      	b.n	800dd82 <Print_Task+0x1e>
			} else if (xRchar == 0x7F ){
 800de44:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800de48:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b7f      	cmp	r3, #127	; 0x7f
 800de50:	d117      	bne.n	800de82 <Print_Task+0x11e>
				/*
				 * Backspace was pressed.
				 */
				if(pcIndexInput > 0){
 800de52:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800de56:	2b00      	cmp	r3, #0
 800de58:	d093      	beq.n	800dd82 <Print_Task+0x1e>
					CDC_Transmit_FS(&xRchar, 1);
 800de5a:	f107 030f 	add.w	r3, r7, #15
 800de5e:	2101      	movs	r1, #1
 800de60:	4618      	mov	r0, r3
 800de62:	f000 f923 	bl	800e0ac <CDC_Transmit_FS>
					pcIndexInput--;
 800de66:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800de6a:	3b01      	subs	r3, #1
 800de6c:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
					pcInputString[pcIndexInput] = '\0';
 800de70:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800de74:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800de78:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 800de7c:	2100      	movs	r1, #0
 800de7e:	54d1      	strb	r1, [r2, r3]
 800de80:	e77f      	b.n	800dd82 <Print_Task+0x1e>

				}
			} else if(xRchar == 0x1B){
 800de82:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800de86:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	2b1b      	cmp	r3, #27
 800de8e:	d11c      	bne.n	800deca <Print_Task+0x166>
				/*
				 * Entrou no seta pra cima
				 */
				CDC_Transmit_FS(pcInputString, strlen((const char*)pcInputString));
 800de90:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800de94:	4618      	mov	r0, r3
 800de96:	f7f2 fa0d 	bl	80002b4 <strlen>
 800de9a:	4603      	mov	r3, r0
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800dea2:	4611      	mov	r1, r2
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 f901 	bl	800e0ac <CDC_Transmit_FS>
				pcIndexInput = strlen((const char*)pcInputString)+1;
 800deaa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800deae:	4618      	mov	r0, r3
 800deb0:	f7f2 fa00 	bl	80002b4 <strlen>
 800deb4:	4603      	mov	r3, r0
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	3301      	adds	r3, #1
 800deba:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
				pcIndexInput--;
 800debe:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800dec2:	3b01      	subs	r3, #1
 800dec4:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
 800dec8:	e75b      	b.n	800dd82 <Print_Task+0x1e>
			} else if(pcIndexInput < 64){
 800deca:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800dece:	2b3f      	cmp	r3, #63	; 0x3f
 800ded0:	f63f af57 	bhi.w	800dd82 <Print_Task+0x1e>
				(void) qtd;
				CDC_Transmit_FS(&xRchar, qtd);
 800ded4:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800ded8:	b29a      	uxth	r2, r3
 800deda:	f107 030f 	add.w	r3, r7, #15
 800dede:	4611      	mov	r1, r2
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 f8e3 	bl	800e0ac <CDC_Transmit_FS>
				pcInputString[pcIndexInput] = xRchar;
 800dee6:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800deea:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800deee:	f2a2 5249 	subw	r2, r2, #1353	; 0x549
 800def2:	7811      	ldrb	r1, [r2, #0]
 800def4:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800def8:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 800defc:	54d1      	strb	r1, [r2, r3]
				pcIndexInput++;
 800defe:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800df02:	3301      	adds	r3, #1
 800df04:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
		qtd = xMessageBufferReceive(msg_buf_rx,(void *) buffer,sizeof(buffer),portMAX_DELAY);
 800df08:	e73b      	b.n	800dd82 <Print_Task+0x1e>
 800df0a:	bf00      	nop
 800df0c:	2000b204 	.word	0x2000b204
 800df10:	08010c38 	.word	0x08010c38
 800df14:	08010c3c 	.word	0x08010c3c
 800df18:	08010c44 	.word	0x08010c44
 800df1c:	08010c5c 	.word	0x08010c5c

0800df20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800df24:	2200      	movs	r2, #0
 800df26:	4905      	ldr	r1, [pc, #20]	; (800df3c <CDC_Init_FS+0x1c>)
 800df28:	4805      	ldr	r0, [pc, #20]	; (800df40 <CDC_Init_FS+0x20>)
 800df2a:	f7fa f965 	bl	80081f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800df2e:	4905      	ldr	r1, [pc, #20]	; (800df44 <CDC_Init_FS+0x24>)
 800df30:	4803      	ldr	r0, [pc, #12]	; (800df40 <CDC_Init_FS+0x20>)
 800df32:	f7fa f983 	bl	800823c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800df36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800df38:	4618      	mov	r0, r3
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	2000aa00 	.word	0x2000aa00
 800df40:	20009f24 	.word	0x20009f24
 800df44:	2000a200 	.word	0x2000a200

0800df48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800df48:	b480      	push	{r7}
 800df4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800df4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800df4e:	4618      	mov	r0, r3
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	4603      	mov	r3, r0
 800df60:	6039      	str	r1, [r7, #0]
 800df62:	71fb      	strb	r3, [r7, #7]
 800df64:	4613      	mov	r3, r2
 800df66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  portBASE_TYPE yield = pdFALSE;
 800df68:	2300      	movs	r3, #0
 800df6a:	60fb      	str	r3, [r7, #12]
  char data = 0;
 800df6c:	2300      	movs	r3, #0
 800df6e:	72fb      	strb	r3, [r7, #11]
  switch(cmd)
 800df70:	79fb      	ldrb	r3, [r7, #7]
 800df72:	2b23      	cmp	r3, #35	; 0x23
 800df74:	d85f      	bhi.n	800e036 <CDC_Control_FS+0xde>
 800df76:	a201      	add	r2, pc, #4	; (adr r2, 800df7c <CDC_Control_FS+0x24>)
 800df78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7c:	0800e037 	.word	0x0800e037
 800df80:	0800e037 	.word	0x0800e037
 800df84:	0800e037 	.word	0x0800e037
 800df88:	0800e037 	.word	0x0800e037
 800df8c:	0800e037 	.word	0x0800e037
 800df90:	0800e037 	.word	0x0800e037
 800df94:	0800e037 	.word	0x0800e037
 800df98:	0800e037 	.word	0x0800e037
 800df9c:	0800e037 	.word	0x0800e037
 800dfa0:	0800e037 	.word	0x0800e037
 800dfa4:	0800e037 	.word	0x0800e037
 800dfa8:	0800e037 	.word	0x0800e037
 800dfac:	0800e037 	.word	0x0800e037
 800dfb0:	0800e037 	.word	0x0800e037
 800dfb4:	0800e037 	.word	0x0800e037
 800dfb8:	0800e037 	.word	0x0800e037
 800dfbc:	0800e037 	.word	0x0800e037
 800dfc0:	0800e037 	.word	0x0800e037
 800dfc4:	0800e037 	.word	0x0800e037
 800dfc8:	0800e037 	.word	0x0800e037
 800dfcc:	0800e037 	.word	0x0800e037
 800dfd0:	0800e037 	.word	0x0800e037
 800dfd4:	0800e037 	.word	0x0800e037
 800dfd8:	0800e037 	.word	0x0800e037
 800dfdc:	0800e037 	.word	0x0800e037
 800dfe0:	0800e037 	.word	0x0800e037
 800dfe4:	0800e037 	.word	0x0800e037
 800dfe8:	0800e037 	.word	0x0800e037
 800dfec:	0800e037 	.word	0x0800e037
 800dff0:	0800e037 	.word	0x0800e037
 800dff4:	0800e037 	.word	0x0800e037
 800dff8:	0800e037 	.word	0x0800e037
 800dffc:	0800e037 	.word	0x0800e037
 800e000:	0800e037 	.word	0x0800e037
 800e004:	0800e00d 	.word	0x0800e00d
 800e008:	0800e037 	.word	0x0800e037
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  	  xMessageBufferSendFromISR(msg_buf_rx, &data, 1, &yield);
 800e00c:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <CDC_Control_FS+0xf0>)
 800e00e:	6818      	ldr	r0, [r3, #0]
 800e010:	f107 030c 	add.w	r3, r7, #12
 800e014:	f107 010b 	add.w	r1, r7, #11
 800e018:	2201      	movs	r2, #1
 800e01a:	f7fc fdf7 	bl	800ac0c <xStreamBufferSendFromISR>
  	  portYIELD_FROM_ISR(yield);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00a      	beq.n	800e03a <CDC_Control_FS+0xe2>
 800e024:	4b09      	ldr	r3, [pc, #36]	; (800e04c <CDC_Control_FS+0xf4>)
 800e026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e02a:	601a      	str	r2, [r3, #0]
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	f3bf 8f6f 	isb	sy

    break;
 800e034:	e001      	b.n	800e03a <CDC_Control_FS+0xe2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e036:	bf00      	nop
 800e038:	e000      	b.n	800e03c <CDC_Control_FS+0xe4>
    break;
 800e03a:	bf00      	nop
  }

  return (USBD_OK);
 800e03c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	2000b204 	.word	0x2000b204
 800e04c:	e000ed04 	.word	0xe000ed04

0800e050 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 800e05a:	2300      	movs	r3, #0
 800e05c:	60fb      	str	r3, [r7, #12]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e05e:	6879      	ldr	r1, [r7, #4]
 800e060:	480f      	ldr	r0, [pc, #60]	; (800e0a0 <CDC_Receive_FS+0x50>)
 800e062:	f7fa f8eb 	bl	800823c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e066:	480e      	ldr	r0, [pc, #56]	; (800e0a0 <CDC_Receive_FS+0x50>)
 800e068:	f7fa f94c 	bl	8008304 <USBD_CDC_ReceivePacket>

	  xMessageBufferSendFromISR(msg_buf_rx, Buf, *Len, &yield);
 800e06c:	4b0d      	ldr	r3, [pc, #52]	; (800e0a4 <CDC_Receive_FS+0x54>)
 800e06e:	6818      	ldr	r0, [r3, #0]
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	f107 030c 	add.w	r3, r7, #12
 800e078:	6879      	ldr	r1, [r7, #4]
 800e07a:	f7fc fdc7 	bl	800ac0c <xStreamBufferSendFromISR>
	  portYIELD_FROM_ISR(yield);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d007      	beq.n	800e094 <CDC_Receive_FS+0x44>
 800e084:	4b08      	ldr	r3, [pc, #32]	; (800e0a8 <CDC_Receive_FS+0x58>)
 800e086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e08a:	601a      	str	r2, [r3, #0]
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800e094:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	20009f24 	.word	0x20009f24
 800e0a4:	2000b204 	.word	0x2000b204
 800e0a8:	e000ed04 	.word	0xe000ed04

0800e0ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e0bc:	4b10      	ldr	r3, [pc, #64]	; (800e100 <CDC_Transmit_FS+0x54>)
 800e0be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e012      	b.n	800e0f8 <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e0d2:	887b      	ldrh	r3, [r7, #2]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	6879      	ldr	r1, [r7, #4]
 800e0d8:	4809      	ldr	r0, [pc, #36]	; (800e100 <CDC_Transmit_FS+0x54>)
 800e0da:	f7fa f88d 	bl	80081f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e0de:	4808      	ldr	r0, [pc, #32]	; (800e100 <CDC_Transmit_FS+0x54>)
 800e0e0:	f7fa f8ca 	bl	8008278 <USBD_CDC_TransmitPacket>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800e0e8:	4b06      	ldr	r3, [pc, #24]	; (800e104 <CDC_Transmit_FS+0x58>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7fc fa6b 	bl	800a5cc <xQueueSemaphoreTake>
  /* USER CODE END 7 */
  return result;
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	20009f24 	.word	0x20009f24
 800e104:	2000b200 	.word	0x2000b200

0800e108 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	4613      	mov	r3, r2
 800e114:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e116:	2300      	movs	r3, #0
 800e118:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800e11a:	2300      	movs	r3, #0
 800e11c:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800e11e:	4b0b      	ldr	r3, [pc, #44]	; (800e14c <CDC_TransmitCplt_FS+0x44>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f107 0210 	add.w	r2, r7, #16
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fc f8e2 	bl	800a2f2 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 800e12e:	4b08      	ldr	r3, [pc, #32]	; (800e150 <CDC_TransmitCplt_FS+0x48>)
 800e130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e134:	601a      	str	r2, [r3, #0]
 800e136:	f3bf 8f4f 	dsb	sy
 800e13a:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800e13e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	2000b200 	.word	0x2000b200
 800e150:	e000ed04 	.word	0xe000ed04

0800e154 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	4603      	mov	r3, r0
 800e15c:	6039      	str	r1, [r7, #0]
 800e15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2212      	movs	r2, #18
 800e164:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e166:	4b03      	ldr	r3, [pc, #12]	; (800e174 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e168:	4618      	mov	r0, r3
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr
 800e174:	200000d8 	.word	0x200000d8

0800e178 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	4603      	mov	r3, r0
 800e180:	6039      	str	r1, [r7, #0]
 800e182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2204      	movs	r2, #4
 800e188:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e18a:	4b03      	ldr	r3, [pc, #12]	; (800e198 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr
 800e198:	200000ec 	.word	0x200000ec

0800e19c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	6039      	str	r1, [r7, #0]
 800e1a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1a8:	79fb      	ldrb	r3, [r7, #7]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d105      	bne.n	800e1ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1ae:	683a      	ldr	r2, [r7, #0]
 800e1b0:	4907      	ldr	r1, [pc, #28]	; (800e1d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e1b2:	4808      	ldr	r0, [pc, #32]	; (800e1d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e1b4:	f7fb faee 	bl	8009794 <USBD_GetString>
 800e1b8:	e004      	b.n	800e1c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e1ba:	683a      	ldr	r2, [r7, #0]
 800e1bc:	4904      	ldr	r1, [pc, #16]	; (800e1d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e1be:	4805      	ldr	r0, [pc, #20]	; (800e1d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e1c0:	f7fb fae8 	bl	8009794 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1c4:	4b02      	ldr	r3, [pc, #8]	; (800e1d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	2000b210 	.word	0x2000b210
 800e1d4:	08010c60 	.word	0x08010c60

0800e1d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	4603      	mov	r3, r0
 800e1e0:	6039      	str	r1, [r7, #0]
 800e1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e1e4:	683a      	ldr	r2, [r7, #0]
 800e1e6:	4904      	ldr	r1, [pc, #16]	; (800e1f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e1e8:	4804      	ldr	r0, [pc, #16]	; (800e1fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e1ea:	f7fb fad3 	bl	8009794 <USBD_GetString>
  return USBD_StrDesc;
 800e1ee:	4b02      	ldr	r3, [pc, #8]	; (800e1f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	2000b210 	.word	0x2000b210
 800e1fc:	08010c78 	.word	0x08010c78

0800e200 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	4603      	mov	r3, r0
 800e208:	6039      	str	r1, [r7, #0]
 800e20a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	221a      	movs	r2, #26
 800e210:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e212:	f000 f843 	bl	800e29c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e216:	4b02      	ldr	r3, [pc, #8]	; (800e220 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	200000f0 	.word	0x200000f0

0800e224 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	4603      	mov	r3, r0
 800e22c:	6039      	str	r1, [r7, #0]
 800e22e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e230:	79fb      	ldrb	r3, [r7, #7]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d105      	bne.n	800e242 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	4907      	ldr	r1, [pc, #28]	; (800e258 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e23a:	4808      	ldr	r0, [pc, #32]	; (800e25c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e23c:	f7fb faaa 	bl	8009794 <USBD_GetString>
 800e240:	e004      	b.n	800e24c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e242:	683a      	ldr	r2, [r7, #0]
 800e244:	4904      	ldr	r1, [pc, #16]	; (800e258 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e246:	4805      	ldr	r0, [pc, #20]	; (800e25c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e248:	f7fb faa4 	bl	8009794 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e24c:	4b02      	ldr	r3, [pc, #8]	; (800e258 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	2000b210 	.word	0x2000b210
 800e25c:	08010c8c 	.word	0x08010c8c

0800e260 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	4603      	mov	r3, r0
 800e268:	6039      	str	r1, [r7, #0]
 800e26a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e26c:	79fb      	ldrb	r3, [r7, #7]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d105      	bne.n	800e27e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	4907      	ldr	r1, [pc, #28]	; (800e294 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e276:	4808      	ldr	r0, [pc, #32]	; (800e298 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e278:	f7fb fa8c 	bl	8009794 <USBD_GetString>
 800e27c:	e004      	b.n	800e288 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e27e:	683a      	ldr	r2, [r7, #0]
 800e280:	4904      	ldr	r1, [pc, #16]	; (800e294 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e282:	4805      	ldr	r0, [pc, #20]	; (800e298 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e284:	f7fb fa86 	bl	8009794 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e288:	4b02      	ldr	r3, [pc, #8]	; (800e294 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	2000b210 	.word	0x2000b210
 800e298:	08010c98 	.word	0x08010c98

0800e29c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e2a2:	4b0f      	ldr	r3, [pc, #60]	; (800e2e0 <Get_SerialNum+0x44>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e2a8:	4b0e      	ldr	r3, [pc, #56]	; (800e2e4 <Get_SerialNum+0x48>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e2ae:	4b0e      	ldr	r3, [pc, #56]	; (800e2e8 <Get_SerialNum+0x4c>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d009      	beq.n	800e2d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e2c2:	2208      	movs	r2, #8
 800e2c4:	4909      	ldr	r1, [pc, #36]	; (800e2ec <Get_SerialNum+0x50>)
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f000 f814 	bl	800e2f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e2cc:	2204      	movs	r2, #4
 800e2ce:	4908      	ldr	r1, [pc, #32]	; (800e2f0 <Get_SerialNum+0x54>)
 800e2d0:	68b8      	ldr	r0, [r7, #8]
 800e2d2:	f000 f80f 	bl	800e2f4 <IntToUnicode>
  }
}
 800e2d6:	bf00      	nop
 800e2d8:	3710      	adds	r7, #16
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	1fff7a10 	.word	0x1fff7a10
 800e2e4:	1fff7a14 	.word	0x1fff7a14
 800e2e8:	1fff7a18 	.word	0x1fff7a18
 800e2ec:	200000f2 	.word	0x200000f2
 800e2f0:	20000102 	.word	0x20000102

0800e2f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b087      	sub	sp, #28
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	4613      	mov	r3, r2
 800e300:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e302:	2300      	movs	r3, #0
 800e304:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e306:	2300      	movs	r3, #0
 800e308:	75fb      	strb	r3, [r7, #23]
 800e30a:	e027      	b.n	800e35c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	0f1b      	lsrs	r3, r3, #28
 800e310:	2b09      	cmp	r3, #9
 800e312:	d80b      	bhi.n	800e32c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	0f1b      	lsrs	r3, r3, #28
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	7dfb      	ldrb	r3, [r7, #23]
 800e31c:	005b      	lsls	r3, r3, #1
 800e31e:	4619      	mov	r1, r3
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	440b      	add	r3, r1
 800e324:	3230      	adds	r2, #48	; 0x30
 800e326:	b2d2      	uxtb	r2, r2
 800e328:	701a      	strb	r2, [r3, #0]
 800e32a:	e00a      	b.n	800e342 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	0f1b      	lsrs	r3, r3, #28
 800e330:	b2da      	uxtb	r2, r3
 800e332:	7dfb      	ldrb	r3, [r7, #23]
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	4619      	mov	r1, r3
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	440b      	add	r3, r1
 800e33c:	3237      	adds	r2, #55	; 0x37
 800e33e:	b2d2      	uxtb	r2, r2
 800e340:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	011b      	lsls	r3, r3, #4
 800e346:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e348:	7dfb      	ldrb	r3, [r7, #23]
 800e34a:	005b      	lsls	r3, r3, #1
 800e34c:	3301      	adds	r3, #1
 800e34e:	68ba      	ldr	r2, [r7, #8]
 800e350:	4413      	add	r3, r2
 800e352:	2200      	movs	r2, #0
 800e354:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e356:	7dfb      	ldrb	r3, [r7, #23]
 800e358:	3301      	adds	r3, #1
 800e35a:	75fb      	strb	r3, [r7, #23]
 800e35c:	7dfa      	ldrb	r2, [r7, #23]
 800e35e:	79fb      	ldrb	r3, [r7, #7]
 800e360:	429a      	cmp	r2, r3
 800e362:	d3d3      	bcc.n	800e30c <IntToUnicode+0x18>
  }
}
 800e364:	bf00      	nop
 800e366:	bf00      	nop
 800e368:	371c      	adds	r7, #28
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
	...

0800e374 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b08a      	sub	sp, #40	; 0x28
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e37c:	f107 0314 	add.w	r3, r7, #20
 800e380:	2200      	movs	r2, #0
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	605a      	str	r2, [r3, #4]
 800e386:	609a      	str	r2, [r3, #8]
 800e388:	60da      	str	r2, [r3, #12]
 800e38a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e394:	d13a      	bne.n	800e40c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e396:	2300      	movs	r3, #0
 800e398:	613b      	str	r3, [r7, #16]
 800e39a:	4b1e      	ldr	r3, [pc, #120]	; (800e414 <HAL_PCD_MspInit+0xa0>)
 800e39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e39e:	4a1d      	ldr	r2, [pc, #116]	; (800e414 <HAL_PCD_MspInit+0xa0>)
 800e3a0:	f043 0301 	orr.w	r3, r3, #1
 800e3a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e3a6:	4b1b      	ldr	r3, [pc, #108]	; (800e414 <HAL_PCD_MspInit+0xa0>)
 800e3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3aa:	f003 0301 	and.w	r3, r3, #1
 800e3ae:	613b      	str	r3, [r7, #16]
 800e3b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e3b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e3b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3b8:	2302      	movs	r3, #2
 800e3ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3c0:	2303      	movs	r3, #3
 800e3c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e3c4:	230a      	movs	r3, #10
 800e3c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3c8:	f107 0314 	add.w	r3, r7, #20
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	4812      	ldr	r0, [pc, #72]	; (800e418 <HAL_PCD_MspInit+0xa4>)
 800e3d0:	f7f4 ffa8 	bl	8003324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e3d4:	4b0f      	ldr	r3, [pc, #60]	; (800e414 <HAL_PCD_MspInit+0xa0>)
 800e3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d8:	4a0e      	ldr	r2, [pc, #56]	; (800e414 <HAL_PCD_MspInit+0xa0>)
 800e3da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3de:	6353      	str	r3, [r2, #52]	; 0x34
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	60fb      	str	r3, [r7, #12]
 800e3e4:	4b0b      	ldr	r3, [pc, #44]	; (800e414 <HAL_PCD_MspInit+0xa0>)
 800e3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e8:	4a0a      	ldr	r2, [pc, #40]	; (800e414 <HAL_PCD_MspInit+0xa0>)
 800e3ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e3ee:	6453      	str	r3, [r2, #68]	; 0x44
 800e3f0:	4b08      	ldr	r3, [pc, #32]	; (800e414 <HAL_PCD_MspInit+0xa0>)
 800e3f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3f8:	60fb      	str	r3, [r7, #12]
 800e3fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2105      	movs	r1, #5
 800e400:	2043      	movs	r0, #67	; 0x43
 800e402:	f7f4 fbe8 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e406:	2043      	movs	r0, #67	; 0x43
 800e408:	f7f4 fc01 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e40c:	bf00      	nop
 800e40e:	3728      	adds	r7, #40	; 0x28
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	40023800 	.word	0x40023800
 800e418:	40020000 	.word	0x40020000

0800e41c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e430:	4619      	mov	r1, r3
 800e432:	4610      	mov	r0, r2
 800e434:	f7fa f84f 	bl	80084d6 <USBD_LL_SetupStage>
}
 800e438:	bf00      	nop
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	460b      	mov	r3, r1
 800e44a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e452:	78fa      	ldrb	r2, [r7, #3]
 800e454:	6879      	ldr	r1, [r7, #4]
 800e456:	4613      	mov	r3, r2
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	4413      	add	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	440b      	add	r3, r1
 800e460:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	78fb      	ldrb	r3, [r7, #3]
 800e468:	4619      	mov	r1, r3
 800e46a:	f7fa f889 	bl	8008580 <USBD_LL_DataOutStage>
}
 800e46e:	bf00      	nop
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e476:	b580      	push	{r7, lr}
 800e478:	b082      	sub	sp, #8
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
 800e47e:	460b      	mov	r3, r1
 800e480:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e488:	78fa      	ldrb	r2, [r7, #3]
 800e48a:	6879      	ldr	r1, [r7, #4]
 800e48c:	4613      	mov	r3, r2
 800e48e:	00db      	lsls	r3, r3, #3
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	440b      	add	r3, r1
 800e496:	334c      	adds	r3, #76	; 0x4c
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	78fb      	ldrb	r3, [r7, #3]
 800e49c:	4619      	mov	r1, r3
 800e49e:	f7fa f922 	bl	80086e6 <USBD_LL_DataInStage>
}
 800e4a2:	bf00      	nop
 800e4a4:	3708      	adds	r7, #8
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b082      	sub	sp, #8
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fa fa56 	bl	800896a <USBD_LL_SOF>
}
 800e4be:	bf00      	nop
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b084      	sub	sp, #16
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d102      	bne.n	800e4e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	73fb      	strb	r3, [r7, #15]
 800e4de:	e008      	b.n	800e4f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d102      	bne.n	800e4ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	73fb      	strb	r3, [r7, #15]
 800e4ec:	e001      	b.n	800e4f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e4ee:	f7f3 fc2b 	bl	8001d48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4f8:	7bfa      	ldrb	r2, [r7, #15]
 800e4fa:	4611      	mov	r1, r2
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fa f9f6 	bl	80088ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fa f99e 	bl	800884a <USBD_LL_Reset>
}
 800e50e:	bf00      	nop
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
	...

0800e518 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e526:	4618      	mov	r0, r3
 800e528:	f7fa f9f1 	bl	800890e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	6812      	ldr	r2, [r2, #0]
 800e53a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e53e:	f043 0301 	orr.w	r3, r3, #1
 800e542:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6a1b      	ldr	r3, [r3, #32]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d005      	beq.n	800e558 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e54c:	4b04      	ldr	r3, [pc, #16]	; (800e560 <HAL_PCD_SuspendCallback+0x48>)
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	4a03      	ldr	r2, [pc, #12]	; (800e560 <HAL_PCD_SuspendCallback+0x48>)
 800e552:	f043 0306 	orr.w	r3, r3, #6
 800e556:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e558:	bf00      	nop
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	e000ed00 	.word	0xe000ed00

0800e564 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e572:	4618      	mov	r0, r3
 800e574:	f7fa f9e1 	bl	800893a <USBD_LL_Resume>
}
 800e578:	bf00      	nop
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	460b      	mov	r3, r1
 800e58a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e592:	78fa      	ldrb	r2, [r7, #3]
 800e594:	4611      	mov	r1, r2
 800e596:	4618      	mov	r0, r3
 800e598:	f7fa fa39 	bl	8008a0e <USBD_LL_IsoOUTIncomplete>
}
 800e59c:	bf00      	nop
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5b6:	78fa      	ldrb	r2, [r7, #3]
 800e5b8:	4611      	mov	r1, r2
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fa f9f5 	bl	80089aa <USBD_LL_IsoINIncomplete>
}
 800e5c0:	bf00      	nop
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fa fa4b 	bl	8008a72 <USBD_LL_DevConnected>
}
 800e5dc:	bf00      	nop
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fa fa48 	bl	8008a88 <USBD_LL_DevDisconnected>
}
 800e5f8:	bf00      	nop
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d13c      	bne.n	800e68a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e610:	4a20      	ldr	r2, [pc, #128]	; (800e694 <USBD_LL_Init+0x94>)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4a1e      	ldr	r2, [pc, #120]	; (800e694 <USBD_LL_Init+0x94>)
 800e61c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e620:	4b1c      	ldr	r3, [pc, #112]	; (800e694 <USBD_LL_Init+0x94>)
 800e622:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e626:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e628:	4b1a      	ldr	r3, [pc, #104]	; (800e694 <USBD_LL_Init+0x94>)
 800e62a:	2204      	movs	r2, #4
 800e62c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e62e:	4b19      	ldr	r3, [pc, #100]	; (800e694 <USBD_LL_Init+0x94>)
 800e630:	2202      	movs	r2, #2
 800e632:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e634:	4b17      	ldr	r3, [pc, #92]	; (800e694 <USBD_LL_Init+0x94>)
 800e636:	2200      	movs	r2, #0
 800e638:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e63a:	4b16      	ldr	r3, [pc, #88]	; (800e694 <USBD_LL_Init+0x94>)
 800e63c:	2202      	movs	r2, #2
 800e63e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e640:	4b14      	ldr	r3, [pc, #80]	; (800e694 <USBD_LL_Init+0x94>)
 800e642:	2200      	movs	r2, #0
 800e644:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e646:	4b13      	ldr	r3, [pc, #76]	; (800e694 <USBD_LL_Init+0x94>)
 800e648:	2200      	movs	r2, #0
 800e64a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e64c:	4b11      	ldr	r3, [pc, #68]	; (800e694 <USBD_LL_Init+0x94>)
 800e64e:	2200      	movs	r2, #0
 800e650:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e652:	4b10      	ldr	r3, [pc, #64]	; (800e694 <USBD_LL_Init+0x94>)
 800e654:	2200      	movs	r2, #0
 800e656:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e658:	4b0e      	ldr	r3, [pc, #56]	; (800e694 <USBD_LL_Init+0x94>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e65e:	480d      	ldr	r0, [pc, #52]	; (800e694 <USBD_LL_Init+0x94>)
 800e660:	f7f5 f817 	bl	8003692 <HAL_PCD_Init>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d001      	beq.n	800e66e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e66a:	f7f3 fb6d 	bl	8001d48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e66e:	2180      	movs	r1, #128	; 0x80
 800e670:	4808      	ldr	r0, [pc, #32]	; (800e694 <USBD_LL_Init+0x94>)
 800e672:	f7f6 fa6e 	bl	8004b52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e676:	2240      	movs	r2, #64	; 0x40
 800e678:	2100      	movs	r1, #0
 800e67a:	4806      	ldr	r0, [pc, #24]	; (800e694 <USBD_LL_Init+0x94>)
 800e67c:	f7f6 fa22 	bl	8004ac4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e680:	2280      	movs	r2, #128	; 0x80
 800e682:	2101      	movs	r1, #1
 800e684:	4803      	ldr	r0, [pc, #12]	; (800e694 <USBD_LL_Init+0x94>)
 800e686:	f7f6 fa1d 	bl	8004ac4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3708      	adds	r7, #8
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	2000b410 	.word	0x2000b410

0800e698 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7f5 f90c 	bl	80038cc <HAL_PCD_Start>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6b8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 f942 	bl	800e944 <USBD_Get_USB_Status>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b084      	sub	sp, #16
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	4608      	mov	r0, r1
 800e6d8:	4611      	mov	r1, r2
 800e6da:	461a      	mov	r2, r3
 800e6dc:	4603      	mov	r3, r0
 800e6de:	70fb      	strb	r3, [r7, #3]
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	70bb      	strb	r3, [r7, #2]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e6f6:	78bb      	ldrb	r3, [r7, #2]
 800e6f8:	883a      	ldrh	r2, [r7, #0]
 800e6fa:	78f9      	ldrb	r1, [r7, #3]
 800e6fc:	f7f5 fddd 	bl	80042ba <HAL_PCD_EP_Open>
 800e700:	4603      	mov	r3, r0
 800e702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	4618      	mov	r0, r3
 800e708:	f000 f91c 	bl	800e944 <USBD_Get_USB_Status>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e710:	7bbb      	ldrb	r3, [r7, #14]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b084      	sub	sp, #16
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	460b      	mov	r3, r1
 800e724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e726:	2300      	movs	r3, #0
 800e728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72a:	2300      	movs	r3, #0
 800e72c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e734:	78fa      	ldrb	r2, [r7, #3]
 800e736:	4611      	mov	r1, r2
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f5 fe26 	bl	800438a <HAL_PCD_EP_Close>
 800e73e:	4603      	mov	r3, r0
 800e740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e742:	7bfb      	ldrb	r3, [r7, #15]
 800e744:	4618      	mov	r0, r3
 800e746:	f000 f8fd 	bl	800e944 <USBD_Get_USB_Status>
 800e74a:	4603      	mov	r3, r0
 800e74c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e74e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e750:	4618      	mov	r0, r3
 800e752:	3710      	adds	r7, #16
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	460b      	mov	r3, r1
 800e762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e768:	2300      	movs	r3, #0
 800e76a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e772:	78fa      	ldrb	r2, [r7, #3]
 800e774:	4611      	mov	r1, r2
 800e776:	4618      	mov	r0, r3
 800e778:	f7f5 fefe 	bl	8004578 <HAL_PCD_EP_SetStall>
 800e77c:	4603      	mov	r3, r0
 800e77e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e780:	7bfb      	ldrb	r3, [r7, #15]
 800e782:	4618      	mov	r0, r3
 800e784:	f000 f8de 	bl	800e944 <USBD_Get_USB_Status>
 800e788:	4603      	mov	r3, r0
 800e78a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e78c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b084      	sub	sp, #16
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
 800e79e:	460b      	mov	r3, r1
 800e7a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7b0:	78fa      	ldrb	r2, [r7, #3]
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7f5 ff43 	bl	8004640 <HAL_PCD_EP_ClrStall>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7be:	7bfb      	ldrb	r3, [r7, #15]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f000 f8bf 	bl	800e944 <USBD_Get_USB_Status>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	460b      	mov	r3, r1
 800e7de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e7e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	da0b      	bge.n	800e808 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e7f0:	78fb      	ldrb	r3, [r7, #3]
 800e7f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7f6:	68f9      	ldr	r1, [r7, #12]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	4413      	add	r3, r2
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	440b      	add	r3, r1
 800e802:	333e      	adds	r3, #62	; 0x3e
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	e00b      	b.n	800e820 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e808:	78fb      	ldrb	r3, [r7, #3]
 800e80a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e80e:	68f9      	ldr	r1, [r7, #12]
 800e810:	4613      	mov	r3, r2
 800e812:	00db      	lsls	r3, r3, #3
 800e814:	4413      	add	r3, r2
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	440b      	add	r3, r1
 800e81a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e81e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e820:	4618      	mov	r0, r3
 800e822:	3714      	adds	r7, #20
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	460b      	mov	r3, r1
 800e836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e838:	2300      	movs	r3, #0
 800e83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e846:	78fa      	ldrb	r2, [r7, #3]
 800e848:	4611      	mov	r1, r2
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7f5 fd10 	bl	8004270 <HAL_PCD_SetAddress>
 800e850:	4603      	mov	r3, r0
 800e852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e854:	7bfb      	ldrb	r3, [r7, #15]
 800e856:	4618      	mov	r0, r3
 800e858:	f000 f874 	bl	800e944 <USBD_Get_USB_Status>
 800e85c:	4603      	mov	r3, r0
 800e85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e860:	7bbb      	ldrb	r3, [r7, #14]
}
 800e862:	4618      	mov	r0, r3
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b086      	sub	sp, #24
 800e86e:	af00      	add	r7, sp, #0
 800e870:	60f8      	str	r0, [r7, #12]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	603b      	str	r3, [r7, #0]
 800e876:	460b      	mov	r3, r1
 800e878:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e87a:	2300      	movs	r3, #0
 800e87c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e87e:	2300      	movs	r3, #0
 800e880:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e888:	7af9      	ldrb	r1, [r7, #11]
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	f7f5 fe29 	bl	80044e4 <HAL_PCD_EP_Transmit>
 800e892:	4603      	mov	r3, r0
 800e894:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e896:	7dfb      	ldrb	r3, [r7, #23]
 800e898:	4618      	mov	r0, r3
 800e89a:	f000 f853 	bl	800e944 <USBD_Get_USB_Status>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e8a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3718      	adds	r7, #24
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b086      	sub	sp, #24
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	607a      	str	r2, [r7, #4]
 800e8b6:	603b      	str	r3, [r7, #0]
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e8ca:	7af9      	ldrb	r1, [r7, #11]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	f7f5 fda5 	bl	800441e <HAL_PCD_EP_Receive>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8d8:	7dfb      	ldrb	r3, [r7, #23]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f000 f832 	bl	800e944 <USBD_Get_USB_Status>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e8e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3718      	adds	r7, #24
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b082      	sub	sp, #8
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e900:	78fa      	ldrb	r2, [r7, #3]
 800e902:	4611      	mov	r1, r2
 800e904:	4618      	mov	r0, r3
 800e906:	f7f5 fdd5 	bl	80044b4 <HAL_PCD_EP_GetRxCount>
 800e90a:	4603      	mov	r3, r0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e91c:	4b03      	ldr	r3, [pc, #12]	; (800e92c <USBD_static_malloc+0x18>)
}
 800e91e:	4618      	mov	r0, r3
 800e920:	370c      	adds	r7, #12
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	2000b91c 	.word	0x2000b91c

0800e930 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]

}
 800e938:	bf00      	nop
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e944:	b480      	push	{r7}
 800e946:	b085      	sub	sp, #20
 800e948:	af00      	add	r7, sp, #0
 800e94a:	4603      	mov	r3, r0
 800e94c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e952:	79fb      	ldrb	r3, [r7, #7]
 800e954:	2b03      	cmp	r3, #3
 800e956:	d817      	bhi.n	800e988 <USBD_Get_USB_Status+0x44>
 800e958:	a201      	add	r2, pc, #4	; (adr r2, 800e960 <USBD_Get_USB_Status+0x1c>)
 800e95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e95e:	bf00      	nop
 800e960:	0800e971 	.word	0x0800e971
 800e964:	0800e977 	.word	0x0800e977
 800e968:	0800e97d 	.word	0x0800e97d
 800e96c:	0800e983 	.word	0x0800e983
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e970:	2300      	movs	r3, #0
 800e972:	73fb      	strb	r3, [r7, #15]
    break;
 800e974:	e00b      	b.n	800e98e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e976:	2303      	movs	r3, #3
 800e978:	73fb      	strb	r3, [r7, #15]
    break;
 800e97a:	e008      	b.n	800e98e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e97c:	2301      	movs	r3, #1
 800e97e:	73fb      	strb	r3, [r7, #15]
    break;
 800e980:	e005      	b.n	800e98e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e982:	2303      	movs	r3, #3
 800e984:	73fb      	strb	r3, [r7, #15]
    break;
 800e986:	e002      	b.n	800e98e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e988:	2303      	movs	r3, #3
 800e98a:	73fb      	strb	r3, [r7, #15]
    break;
 800e98c:	bf00      	nop
  }
  return usb_status;
 800e98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e990:	4618      	mov	r0, r3
 800e992:	3714      	adds	r7, #20
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <arm_cfft_radix8by2_f32>:
 800e99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a0:	ed2d 8b08 	vpush	{d8-d11}
 800e9a4:	f8b0 e000 	ldrh.w	lr, [r0]
 800e9a8:	6842      	ldr	r2, [r0, #4]
 800e9aa:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800e9ae:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800e9b2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800e9b6:	4607      	mov	r7, r0
 800e9b8:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800e9bc:	f000 80af 	beq.w	800eb1e <arm_cfft_radix8by2_f32+0x182>
 800e9c0:	3310      	adds	r3, #16
 800e9c2:	18ce      	adds	r6, r1, r3
 800e9c4:	3210      	adds	r2, #16
 800e9c6:	4443      	add	r3, r8
 800e9c8:	f101 0510 	add.w	r5, r1, #16
 800e9cc:	f108 0410 	add.w	r4, r8, #16
 800e9d0:	ed54 1a04 	vldr	s3, [r4, #-16]
 800e9d4:	ed13 4a04 	vldr	s8, [r3, #-16]
 800e9d8:	ed53 3a03 	vldr	s7, [r3, #-12]
 800e9dc:	ed53 5a02 	vldr	s11, [r3, #-8]
 800e9e0:	ed13 5a01 	vldr	s10, [r3, #-4]
 800e9e4:	ed54 6a03 	vldr	s13, [r4, #-12]
 800e9e8:	ed14 0a02 	vldr	s0, [r4, #-8]
 800e9ec:	ed16 2a04 	vldr	s4, [r6, #-16]
 800e9f0:	ed56 2a03 	vldr	s5, [r6, #-12]
 800e9f4:	ed15 6a03 	vldr	s12, [r5, #-12]
 800e9f8:	ed15 7a01 	vldr	s14, [r5, #-4]
 800e9fc:	ed15 3a04 	vldr	s6, [r5, #-16]
 800ea00:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ea04:	ed56 0a02 	vldr	s1, [r6, #-8]
 800ea08:	ed16 1a01 	vldr	s2, [r6, #-4]
 800ea0c:	ed55 4a02 	vldr	s9, [r5, #-8]
 800ea10:	ee73 ba21 	vadd.f32	s23, s6, s3
 800ea14:	ee36 ba26 	vadd.f32	s22, s12, s13
 800ea18:	ee37 aa27 	vadd.f32	s20, s14, s15
 800ea1c:	ee72 9a04 	vadd.f32	s19, s4, s8
 800ea20:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800ea24:	ee31 8a05 	vadd.f32	s16, s2, s10
 800ea28:	ee74 aa80 	vadd.f32	s21, s9, s0
 800ea2c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800ea30:	ed45 ba04 	vstr	s23, [r5, #-16]
 800ea34:	ed05 ba03 	vstr	s22, [r5, #-12]
 800ea38:	ed45 aa02 	vstr	s21, [r5, #-8]
 800ea3c:	ed05 aa01 	vstr	s20, [r5, #-4]
 800ea40:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ea44:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ea48:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ea4c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ea50:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ea54:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800ea58:	ed12 6a03 	vldr	s12, [r2, #-12]
 800ea5c:	ed52 2a04 	vldr	s5, [r2, #-16]
 800ea60:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ea64:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ea68:	ee26 8a86 	vmul.f32	s16, s13, s12
 800ea6c:	ee24 2a06 	vmul.f32	s4, s8, s12
 800ea70:	ee63 1a22 	vmul.f32	s3, s6, s5
 800ea74:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ea78:	ee23 3a06 	vmul.f32	s6, s6, s12
 800ea7c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800ea80:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ea84:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800ea88:	ee36 6a04 	vadd.f32	s12, s12, s8
 800ea8c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ea90:	ee72 3a63 	vsub.f32	s7, s4, s7
 800ea94:	ee71 2a88 	vadd.f32	s5, s3, s16
 800ea98:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ea9c:	ed44 2a04 	vstr	s5, [r4, #-16]
 800eaa0:	ed43 3a04 	vstr	s7, [r3, #-16]
 800eaa4:	ed03 6a03 	vstr	s12, [r3, #-12]
 800eaa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eaac:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800eab0:	ed12 7a01 	vldr	s14, [r2, #-4]
 800eab4:	ed52 5a02 	vldr	s11, [r2, #-8]
 800eab8:	ee35 6a41 	vsub.f32	s12, s10, s2
 800eabc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800eac0:	ee67 3a87 	vmul.f32	s7, s15, s14
 800eac4:	ee26 5a87 	vmul.f32	s10, s13, s14
 800eac8:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800eacc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ead0:	ee64 4a87 	vmul.f32	s9, s9, s14
 800ead4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ead8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800eadc:	ee26 6a25 	vmul.f32	s12, s12, s11
 800eae0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800eae4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800eae8:	ee35 6a46 	vsub.f32	s12, s10, s12
 800eaec:	ee37 7a26 	vadd.f32	s14, s14, s13
 800eaf0:	f1be 0e01 	subs.w	lr, lr, #1
 800eaf4:	ed44 5a02 	vstr	s11, [r4, #-8]
 800eaf8:	f105 0510 	add.w	r5, r5, #16
 800eafc:	ed44 7a01 	vstr	s15, [r4, #-4]
 800eb00:	f106 0610 	add.w	r6, r6, #16
 800eb04:	ed03 6a02 	vstr	s12, [r3, #-8]
 800eb08:	ed03 7a01 	vstr	s14, [r3, #-4]
 800eb0c:	f102 0210 	add.w	r2, r2, #16
 800eb10:	f104 0410 	add.w	r4, r4, #16
 800eb14:	f103 0310 	add.w	r3, r3, #16
 800eb18:	f47f af5a 	bne.w	800e9d0 <arm_cfft_radix8by2_f32+0x34>
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	fa1f f48c 	uxth.w	r4, ip
 800eb22:	4608      	mov	r0, r1
 800eb24:	2302      	movs	r3, #2
 800eb26:	4621      	mov	r1, r4
 800eb28:	f000 fc00 	bl	800f32c <arm_radix8_butterfly_f32>
 800eb2c:	ecbd 8b08 	vpop	{d8-d11}
 800eb30:	4640      	mov	r0, r8
 800eb32:	4621      	mov	r1, r4
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	2302      	movs	r3, #2
 800eb38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3c:	f000 bbf6 	b.w	800f32c <arm_radix8_butterfly_f32>

0800eb40 <arm_cfft_radix8by4_f32>:
 800eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb44:	ed2d 8b0a 	vpush	{d8-d12}
 800eb48:	8802      	ldrh	r2, [r0, #0]
 800eb4a:	ed91 6a00 	vldr	s12, [r1]
 800eb4e:	b08f      	sub	sp, #60	; 0x3c
 800eb50:	460f      	mov	r7, r1
 800eb52:	0852      	lsrs	r2, r2, #1
 800eb54:	0093      	lsls	r3, r2, #2
 800eb56:	900c      	str	r0, [sp, #48]	; 0x30
 800eb58:	9103      	str	r1, [sp, #12]
 800eb5a:	6841      	ldr	r1, [r0, #4]
 800eb5c:	ed97 7a01 	vldr	s14, [r7, #4]
 800eb60:	4638      	mov	r0, r7
 800eb62:	4418      	add	r0, r3
 800eb64:	4606      	mov	r6, r0
 800eb66:	9009      	str	r0, [sp, #36]	; 0x24
 800eb68:	4418      	add	r0, r3
 800eb6a:	edd0 6a00 	vldr	s13, [r0]
 800eb6e:	edd6 3a00 	vldr	s7, [r6]
 800eb72:	edd6 2a01 	vldr	s5, [r6, #4]
 800eb76:	edd0 7a01 	vldr	s15, [r0, #4]
 800eb7a:	900a      	str	r0, [sp, #40]	; 0x28
 800eb7c:	ee76 5a26 	vadd.f32	s11, s12, s13
 800eb80:	4604      	mov	r4, r0
 800eb82:	4625      	mov	r5, r4
 800eb84:	441c      	add	r4, r3
 800eb86:	ed94 4a00 	vldr	s8, [r4]
 800eb8a:	ed94 5a01 	vldr	s10, [r4, #4]
 800eb8e:	9401      	str	r4, [sp, #4]
 800eb90:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800eb94:	4630      	mov	r0, r6
 800eb96:	ee74 4a24 	vadd.f32	s9, s8, s9
 800eb9a:	463e      	mov	r6, r7
 800eb9c:	ee14 ea90 	vmov	lr, s9
 800eba0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800eba4:	f846 eb08 	str.w	lr, [r6], #8
 800eba8:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ebac:	edd0 4a01 	vldr	s9, [r0, #4]
 800ebb0:	9604      	str	r6, [sp, #16]
 800ebb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebb6:	9e01      	ldr	r6, [sp, #4]
 800ebb8:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800ebbc:	ed96 2a01 	vldr	s4, [r6, #4]
 800ebc0:	ee36 7a24 	vadd.f32	s14, s12, s9
 800ebc4:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800ebc8:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800ebcc:	ee36 6a62 	vsub.f32	s12, s12, s5
 800ebd0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ebd4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800ebd8:	ee73 3a45 	vsub.f32	s7, s6, s10
 800ebdc:	4604      	mov	r4, r0
 800ebde:	ee36 6a45 	vsub.f32	s12, s12, s10
 800ebe2:	ee75 6a26 	vadd.f32	s13, s10, s13
 800ebe6:	46a3      	mov	fp, r4
 800ebe8:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ebec:	ee34 5a84 	vadd.f32	s10, s9, s8
 800ebf0:	ee13 8a90 	vmov	r8, s7
 800ebf4:	46a4      	mov	ip, r4
 800ebf6:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800ebfa:	ed87 7a01 	vstr	s14, [r7, #4]
 800ebfe:	f84b 8b08 	str.w	r8, [fp], #8
 800ec02:	f1ac 0704 	sub.w	r7, ip, #4
 800ec06:	ed8c 5a01 	vstr	s10, [ip, #4]
 800ec0a:	f101 0c08 	add.w	ip, r1, #8
 800ec0e:	462c      	mov	r4, r5
 800ec10:	f8cd c014 	str.w	ip, [sp, #20]
 800ec14:	ee15 ca90 	vmov	ip, s11
 800ec18:	f844 cb08 	str.w	ip, [r4], #8
 800ec1c:	9407      	str	r4, [sp, #28]
 800ec1e:	f101 0410 	add.w	r4, r1, #16
 800ec22:	ed85 6a01 	vstr	s12, [r5, #4]
 800ec26:	0852      	lsrs	r2, r2, #1
 800ec28:	9402      	str	r4, [sp, #8]
 800ec2a:	462c      	mov	r4, r5
 800ec2c:	f101 0518 	add.w	r5, r1, #24
 800ec30:	920b      	str	r2, [sp, #44]	; 0x2c
 800ec32:	46b2      	mov	sl, r6
 800ec34:	9506      	str	r5, [sp, #24]
 800ec36:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800ec3a:	3a02      	subs	r2, #2
 800ec3c:	ee16 5a90 	vmov	r5, s13
 800ec40:	46b6      	mov	lr, r6
 800ec42:	4630      	mov	r0, r6
 800ec44:	0852      	lsrs	r2, r2, #1
 800ec46:	f84a 5b08 	str.w	r5, [sl], #8
 800ec4a:	f1a0 0604 	sub.w	r6, r0, #4
 800ec4e:	edce 7a01 	vstr	s15, [lr, #4]
 800ec52:	9208      	str	r2, [sp, #32]
 800ec54:	f000 8130 	beq.w	800eeb8 <arm_cfft_radix8by4_f32+0x378>
 800ec58:	4691      	mov	r9, r2
 800ec5a:	9a03      	ldr	r2, [sp, #12]
 800ec5c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ec60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ec64:	3b08      	subs	r3, #8
 800ec66:	f102 0510 	add.w	r5, r2, #16
 800ec6a:	f101 0c20 	add.w	ip, r1, #32
 800ec6e:	f1a4 020c 	sub.w	r2, r4, #12
 800ec72:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800ec76:	4433      	add	r3, r6
 800ec78:	3410      	adds	r4, #16
 800ec7a:	4650      	mov	r0, sl
 800ec7c:	4659      	mov	r1, fp
 800ec7e:	ed55 3a02 	vldr	s7, [r5, #-8]
 800ec82:	ed14 5a02 	vldr	s10, [r4, #-8]
 800ec86:	ed91 7a00 	vldr	s14, [r1]
 800ec8a:	edd0 7a00 	vldr	s15, [r0]
 800ec8e:	ed15 4a01 	vldr	s8, [r5, #-4]
 800ec92:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ec96:	edd0 6a01 	vldr	s13, [r0, #4]
 800ec9a:	ed91 6a01 	vldr	s12, [r1, #4]
 800ec9e:	ee33 8a85 	vadd.f32	s16, s7, s10
 800eca2:	ee34 0a25 	vadd.f32	s0, s8, s11
 800eca6:	ee78 4a07 	vadd.f32	s9, s16, s14
 800ecaa:	ee74 5a65 	vsub.f32	s11, s8, s11
 800ecae:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800ecb2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800ecb6:	ed45 4a02 	vstr	s9, [r5, #-8]
 800ecba:	edd1 4a01 	vldr	s9, [r1, #4]
 800ecbe:	ed90 4a01 	vldr	s8, [r0, #4]
 800ecc2:	ee70 4a24 	vadd.f32	s9, s0, s9
 800ecc6:	ee76 aa05 	vadd.f32	s21, s12, s10
 800ecca:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ecce:	ee35 aac7 	vsub.f32	s20, s11, s14
 800ecd2:	ed45 4a01 	vstr	s9, [r5, #-4]
 800ecd6:	edd6 1a00 	vldr	s3, [r6]
 800ecda:	edd7 0a00 	vldr	s1, [r7]
 800ecde:	ed92 4a02 	vldr	s8, [r2, #8]
 800ece2:	edd3 3a02 	vldr	s7, [r3, #8]
 800ece6:	ed93 2a01 	vldr	s4, [r3, #4]
 800ecea:	ed16 1a01 	vldr	s2, [r6, #-4]
 800ecee:	edd2 2a01 	vldr	s5, [r2, #4]
 800ecf2:	ed57 9a01 	vldr	s19, [r7, #-4]
 800ecf6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800ecfa:	ee39 3a81 	vadd.f32	s6, s19, s2
 800ecfe:	ee74 8a84 	vadd.f32	s17, s9, s8
 800ed02:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800ed06:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800ed0a:	ee7a aae6 	vsub.f32	s21, s21, s13
 800ed0e:	ee18 aa90 	vmov	sl, s17
 800ed12:	f847 a908 	str.w	sl, [r7], #-8
 800ed16:	edd2 8a01 	vldr	s17, [r2, #4]
 800ed1a:	ed93 9a01 	vldr	s18, [r3, #4]
 800ed1e:	ee73 8a28 	vadd.f32	s17, s6, s17
 800ed22:	ee3a aa27 	vadd.f32	s20, s20, s15
 800ed26:	ee78 8a89 	vadd.f32	s17, s17, s18
 800ed2a:	ee74 0a63 	vsub.f32	s1, s8, s7
 800ed2e:	edc7 8a01 	vstr	s17, [r7, #4]
 800ed32:	ed18 ba02 	vldr	s22, [r8, #-8]
 800ed36:	ed58 8a01 	vldr	s17, [r8, #-4]
 800ed3a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800ed3e:	ee6a ba28 	vmul.f32	s23, s20, s17
 800ed42:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800ed46:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800ed4a:	ee30 9a81 	vadd.f32	s18, s1, s2
 800ed4e:	ee79 9a82 	vadd.f32	s19, s19, s4
 800ed52:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800ed56:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800ed5a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800ed5e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800ed62:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800ed66:	ee69 8a28 	vmul.f32	s17, s18, s17
 800ed6a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800ed6e:	ee1c aa10 	vmov	sl, s24
 800ed72:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800ed76:	f841 ab08 	str.w	sl, [r1], #8
 800ed7a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800ed7e:	ee3b bacb 	vsub.f32	s22, s23, s22
 800ed82:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800ed86:	ee33 3a62 	vsub.f32	s6, s6, s5
 800ed8a:	ed01 aa01 	vstr	s20, [r1, #-4]
 800ed8e:	edc2 8a01 	vstr	s17, [r2, #4]
 800ed92:	ed82 ba02 	vstr	s22, [r2, #8]
 800ed96:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800ed9a:	ee74 3a63 	vsub.f32	s7, s8, s7
 800ed9e:	ee38 8a47 	vsub.f32	s16, s16, s14
 800eda2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800eda6:	ee30 0a46 	vsub.f32	s0, s0, s12
 800edaa:	ee33 3a42 	vsub.f32	s6, s6, s4
 800edae:	ee38 8a67 	vsub.f32	s16, s16, s15
 800edb2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800edb6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800edba:	ee63 8a04 	vmul.f32	s17, s6, s8
 800edbe:	ee28 aa24 	vmul.f32	s20, s16, s9
 800edc2:	ee60 9a04 	vmul.f32	s19, s0, s8
 800edc6:	ee28 8a04 	vmul.f32	s16, s16, s8
 800edca:	ee20 0a24 	vmul.f32	s0, s0, s9
 800edce:	ee63 3a84 	vmul.f32	s7, s7, s8
 800edd2:	ee39 4a68 	vsub.f32	s8, s18, s17
 800edd6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800edda:	ee14 aa10 	vmov	sl, s8
 800edde:	ee30 0a48 	vsub.f32	s0, s0, s16
 800ede2:	ee63 4a24 	vmul.f32	s9, s6, s9
 800ede6:	ed44 9a02 	vstr	s19, [r4, #-8]
 800edea:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800edee:	ed04 0a01 	vstr	s0, [r4, #-4]
 800edf2:	f846 a908 	str.w	sl, [r6], #-8
 800edf6:	ee35 6a46 	vsub.f32	s12, s10, s12
 800edfa:	ee35 7a87 	vadd.f32	s14, s11, s14
 800edfe:	edc6 3a01 	vstr	s7, [r6, #4]
 800ee02:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ee06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee0a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800ee0e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800ee12:	ee67 5a86 	vmul.f32	s11, s15, s12
 800ee16:	ee26 5a87 	vmul.f32	s10, s13, s14
 800ee1a:	ee72 2a62 	vsub.f32	s5, s4, s5
 800ee1e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800ee22:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800ee26:	ee75 5a25 	vadd.f32	s11, s10, s11
 800ee2a:	ee62 0a86 	vmul.f32	s1, s5, s12
 800ee2e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ee32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee36:	ee21 6a06 	vmul.f32	s12, s2, s12
 800ee3a:	ee62 2a87 	vmul.f32	s5, s5, s14
 800ee3e:	ee21 1a07 	vmul.f32	s2, s2, s14
 800ee42:	ee15 aa90 	vmov	sl, s11
 800ee46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ee4a:	f840 ab08 	str.w	sl, [r0], #8
 800ee4e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800ee52:	ee76 2a22 	vadd.f32	s5, s12, s5
 800ee56:	f1b9 0901 	subs.w	r9, r9, #1
 800ee5a:	ed40 7a01 	vstr	s15, [r0, #-4]
 800ee5e:	f105 0508 	add.w	r5, r5, #8
 800ee62:	ed83 1a02 	vstr	s2, [r3, #8]
 800ee66:	edc3 2a01 	vstr	s5, [r3, #4]
 800ee6a:	f108 0808 	add.w	r8, r8, #8
 800ee6e:	f1a2 0208 	sub.w	r2, r2, #8
 800ee72:	f10c 0c10 	add.w	ip, ip, #16
 800ee76:	f104 0408 	add.w	r4, r4, #8
 800ee7a:	f10e 0e18 	add.w	lr, lr, #24
 800ee7e:	f1a3 0308 	sub.w	r3, r3, #8
 800ee82:	f47f aefc 	bne.w	800ec7e <arm_cfft_radix8by4_f32+0x13e>
 800ee86:	9908      	ldr	r1, [sp, #32]
 800ee88:	9802      	ldr	r0, [sp, #8]
 800ee8a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800ee8e:	00cb      	lsls	r3, r1, #3
 800ee90:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ee94:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ee98:	9102      	str	r1, [sp, #8]
 800ee9a:	9904      	ldr	r1, [sp, #16]
 800ee9c:	4419      	add	r1, r3
 800ee9e:	9104      	str	r1, [sp, #16]
 800eea0:	9905      	ldr	r1, [sp, #20]
 800eea2:	4419      	add	r1, r3
 800eea4:	9105      	str	r1, [sp, #20]
 800eea6:	9907      	ldr	r1, [sp, #28]
 800eea8:	449b      	add	fp, r3
 800eeaa:	4419      	add	r1, r3
 800eeac:	449a      	add	sl, r3
 800eeae:	9b06      	ldr	r3, [sp, #24]
 800eeb0:	9107      	str	r1, [sp, #28]
 800eeb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eeb6:	9306      	str	r3, [sp, #24]
 800eeb8:	9a04      	ldr	r2, [sp, #16]
 800eeba:	9807      	ldr	r0, [sp, #28]
 800eebc:	edd2 3a00 	vldr	s7, [r2]
 800eec0:	ed90 4a00 	vldr	s8, [r0]
 800eec4:	eddb 7a00 	vldr	s15, [fp]
 800eec8:	ed9a 3a00 	vldr	s6, [sl]
 800eecc:	edd2 4a01 	vldr	s9, [r2, #4]
 800eed0:	ed90 7a01 	vldr	s14, [r0, #4]
 800eed4:	ed9b 2a01 	vldr	s4, [fp, #4]
 800eed8:	edda 5a01 	vldr	s11, [sl, #4]
 800eedc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800eee0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eee2:	ee73 6a84 	vadd.f32	s13, s7, s8
 800eee6:	ee34 6a87 	vadd.f32	s12, s9, s14
 800eeea:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800eeee:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800eef2:	ee33 5a05 	vadd.f32	s10, s6, s10
 800eef6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800eefa:	ed82 5a00 	vstr	s10, [r2]
 800eefe:	ed9b 5a01 	vldr	s10, [fp, #4]
 800ef02:	edda 4a01 	vldr	s9, [sl, #4]
 800ef06:	ee36 5a05 	vadd.f32	s10, s12, s10
 800ef0a:	ee72 3a04 	vadd.f32	s7, s4, s8
 800ef0e:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ef12:	ee77 4a67 	vsub.f32	s9, s14, s15
 800ef16:	ed82 5a01 	vstr	s10, [r2, #4]
 800ef1a:	9a05      	ldr	r2, [sp, #20]
 800ef1c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800ef20:	edd2 1a00 	vldr	s3, [r2]
 800ef24:	edd2 2a01 	vldr	s5, [r2, #4]
 800ef28:	9a02      	ldr	r2, [sp, #8]
 800ef2a:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800ef2e:	ee36 6a42 	vsub.f32	s12, s12, s4
 800ef32:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800ef36:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800ef3a:	ee65 2a22 	vmul.f32	s5, s10, s5
 800ef3e:	ee25 5a21 	vmul.f32	s10, s10, s3
 800ef42:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800ef46:	ee35 5a63 	vsub.f32	s10, s10, s7
 800ef4a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ef4e:	edcb 2a00 	vstr	s5, [fp]
 800ef52:	ed8b 5a01 	vstr	s10, [fp, #4]
 800ef56:	edd2 3a01 	vldr	s7, [r2, #4]
 800ef5a:	ed92 5a00 	vldr	s10, [r2]
 800ef5e:	9a06      	ldr	r2, [sp, #24]
 800ef60:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ef64:	ee36 6a65 	vsub.f32	s12, s12, s11
 800ef68:	ee66 4a85 	vmul.f32	s9, s13, s10
 800ef6c:	ee26 5a05 	vmul.f32	s10, s12, s10
 800ef70:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ef74:	ee26 6a23 	vmul.f32	s12, s12, s7
 800ef78:	ee75 6a66 	vsub.f32	s13, s10, s13
 800ef7c:	ee34 6a86 	vadd.f32	s12, s9, s12
 800ef80:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ef84:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef88:	edc0 6a01 	vstr	s13, [r0, #4]
 800ef8c:	ed80 6a00 	vstr	s12, [r0]
 800ef90:	ed92 6a01 	vldr	s12, [r2, #4]
 800ef94:	9803      	ldr	r0, [sp, #12]
 800ef96:	ee77 7a43 	vsub.f32	s15, s14, s6
 800ef9a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800ef9e:	ed92 7a00 	vldr	s14, [r2]
 800efa2:	ee65 6a87 	vmul.f32	s13, s11, s14
 800efa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800efaa:	ee65 5a86 	vmul.f32	s11, s11, s12
 800efae:	ee67 7a86 	vmul.f32	s15, s15, s12
 800efb2:	ee77 5a65 	vsub.f32	s11, s14, s11
 800efb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efba:	edca 5a01 	vstr	s11, [sl, #4]
 800efbe:	edca 7a00 	vstr	s15, [sl]
 800efc2:	6872      	ldr	r2, [r6, #4]
 800efc4:	4621      	mov	r1, r4
 800efc6:	2304      	movs	r3, #4
 800efc8:	f000 f9b0 	bl	800f32c <arm_radix8_butterfly_f32>
 800efcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efce:	6872      	ldr	r2, [r6, #4]
 800efd0:	4621      	mov	r1, r4
 800efd2:	2304      	movs	r3, #4
 800efd4:	f000 f9aa 	bl	800f32c <arm_radix8_butterfly_f32>
 800efd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efda:	6872      	ldr	r2, [r6, #4]
 800efdc:	4621      	mov	r1, r4
 800efde:	2304      	movs	r3, #4
 800efe0:	f000 f9a4 	bl	800f32c <arm_radix8_butterfly_f32>
 800efe4:	9801      	ldr	r0, [sp, #4]
 800efe6:	6872      	ldr	r2, [r6, #4]
 800efe8:	4621      	mov	r1, r4
 800efea:	2304      	movs	r3, #4
 800efec:	b00f      	add	sp, #60	; 0x3c
 800efee:	ecbd 8b0a 	vpop	{d8-d12}
 800eff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff6:	f000 b999 	b.w	800f32c <arm_radix8_butterfly_f32>
 800effa:	bf00      	nop

0800effc <arm_cfft_f32>:
 800effc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f000:	2a01      	cmp	r2, #1
 800f002:	4606      	mov	r6, r0
 800f004:	4617      	mov	r7, r2
 800f006:	460c      	mov	r4, r1
 800f008:	4698      	mov	r8, r3
 800f00a:	8805      	ldrh	r5, [r0, #0]
 800f00c:	d054      	beq.n	800f0b8 <arm_cfft_f32+0xbc>
 800f00e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f012:	d04c      	beq.n	800f0ae <arm_cfft_f32+0xb2>
 800f014:	d916      	bls.n	800f044 <arm_cfft_f32+0x48>
 800f016:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800f01a:	d01a      	beq.n	800f052 <arm_cfft_f32+0x56>
 800f01c:	d95c      	bls.n	800f0d8 <arm_cfft_f32+0xdc>
 800f01e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800f022:	d044      	beq.n	800f0ae <arm_cfft_f32+0xb2>
 800f024:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800f028:	d105      	bne.n	800f036 <arm_cfft_f32+0x3a>
 800f02a:	4620      	mov	r0, r4
 800f02c:	4629      	mov	r1, r5
 800f02e:	6872      	ldr	r2, [r6, #4]
 800f030:	2301      	movs	r3, #1
 800f032:	f000 f97b 	bl	800f32c <arm_radix8_butterfly_f32>
 800f036:	f1b8 0f00 	cmp.w	r8, #0
 800f03a:	d111      	bne.n	800f060 <arm_cfft_f32+0x64>
 800f03c:	2f01      	cmp	r7, #1
 800f03e:	d016      	beq.n	800f06e <arm_cfft_f32+0x72>
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f044:	2d20      	cmp	r5, #32
 800f046:	d032      	beq.n	800f0ae <arm_cfft_f32+0xb2>
 800f048:	d94a      	bls.n	800f0e0 <arm_cfft_f32+0xe4>
 800f04a:	2d40      	cmp	r5, #64	; 0x40
 800f04c:	d0ed      	beq.n	800f02a <arm_cfft_f32+0x2e>
 800f04e:	2d80      	cmp	r5, #128	; 0x80
 800f050:	d1f1      	bne.n	800f036 <arm_cfft_f32+0x3a>
 800f052:	4630      	mov	r0, r6
 800f054:	4621      	mov	r1, r4
 800f056:	f7ff fca1 	bl	800e99c <arm_cfft_radix8by2_f32>
 800f05a:	f1b8 0f00 	cmp.w	r8, #0
 800f05e:	d0ed      	beq.n	800f03c <arm_cfft_f32+0x40>
 800f060:	4620      	mov	r0, r4
 800f062:	89b1      	ldrh	r1, [r6, #12]
 800f064:	68b2      	ldr	r2, [r6, #8]
 800f066:	f7f1 f8bb 	bl	80001e0 <arm_bitreversal_32>
 800f06a:	2f01      	cmp	r7, #1
 800f06c:	d1e8      	bne.n	800f040 <arm_cfft_f32+0x44>
 800f06e:	ee07 5a90 	vmov	s15, r5
 800f072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f076:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f07a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800f07e:	2d00      	cmp	r5, #0
 800f080:	d0de      	beq.n	800f040 <arm_cfft_f32+0x44>
 800f082:	f104 0108 	add.w	r1, r4, #8
 800f086:	2300      	movs	r3, #0
 800f088:	3301      	adds	r3, #1
 800f08a:	429d      	cmp	r5, r3
 800f08c:	f101 0108 	add.w	r1, r1, #8
 800f090:	ed11 7a04 	vldr	s14, [r1, #-16]
 800f094:	ed51 7a03 	vldr	s15, [r1, #-12]
 800f098:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f09c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f0a0:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f0a4:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f0a8:	d1ee      	bne.n	800f088 <arm_cfft_f32+0x8c>
 800f0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	f7ff fd45 	bl	800eb40 <arm_cfft_radix8by4_f32>
 800f0b6:	e7be      	b.n	800f036 <arm_cfft_f32+0x3a>
 800f0b8:	b1ad      	cbz	r5, 800f0e6 <arm_cfft_f32+0xea>
 800f0ba:	f101 030c 	add.w	r3, r1, #12
 800f0be:	2200      	movs	r2, #0
 800f0c0:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f0c4:	3201      	adds	r2, #1
 800f0c6:	eef1 7a67 	vneg.f32	s15, s15
 800f0ca:	4295      	cmp	r5, r2
 800f0cc:	ed43 7a02 	vstr	s15, [r3, #-8]
 800f0d0:	f103 0308 	add.w	r3, r3, #8
 800f0d4:	d1f4      	bne.n	800f0c0 <arm_cfft_f32+0xc4>
 800f0d6:	e79a      	b.n	800f00e <arm_cfft_f32+0x12>
 800f0d8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f0dc:	d0a5      	beq.n	800f02a <arm_cfft_f32+0x2e>
 800f0de:	e7aa      	b.n	800f036 <arm_cfft_f32+0x3a>
 800f0e0:	2d10      	cmp	r5, #16
 800f0e2:	d0b6      	beq.n	800f052 <arm_cfft_f32+0x56>
 800f0e4:	e7a7      	b.n	800f036 <arm_cfft_f32+0x3a>
 800f0e6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f0ea:	d894      	bhi.n	800f016 <arm_cfft_f32+0x1a>
 800f0ec:	e7aa      	b.n	800f044 <arm_cfft_f32+0x48>
 800f0ee:	bf00      	nop

0800f0f0 <arm_cmplx_mag_f32>:
 800f0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800f0f8:	b084      	sub	sp, #16
 800f0fa:	d07f      	beq.n	800f1fc <arm_cmplx_mag_f32+0x10c>
 800f0fc:	2700      	movs	r7, #0
 800f0fe:	f100 0420 	add.w	r4, r0, #32
 800f102:	f101 0510 	add.w	r5, r1, #16
 800f106:	4646      	mov	r6, r8
 800f108:	e05a      	b.n	800f1c0 <arm_cmplx_mag_f32+0xd0>
 800f10a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f10e:	eeb4 0a40 	vcmp.f32	s0, s0
 800f112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f116:	f040 80a4 	bne.w	800f262 <arm_cmplx_mag_f32+0x172>
 800f11a:	ed05 0a04 	vstr	s0, [r5, #-16]
 800f11e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800f122:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800f126:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f12a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f12e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13a:	f2c0 808f 	blt.w	800f25c <arm_cmplx_mag_f32+0x16c>
 800f13e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f142:	eeb4 0a40 	vcmp.f32	s0, s0
 800f146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14a:	f040 80af 	bne.w	800f2ac <arm_cmplx_mag_f32+0x1bc>
 800f14e:	ed05 0a03 	vstr	s0, [r5, #-12]
 800f152:	ed54 7a04 	vldr	s15, [r4, #-16]
 800f156:	ed14 0a03 	vldr	s0, [r4, #-12]
 800f15a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f15e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f162:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f16e:	db72      	blt.n	800f256 <arm_cmplx_mag_f32+0x166>
 800f170:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f174:	eeb4 0a40 	vcmp.f32	s0, s0
 800f178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f17c:	f040 808c 	bne.w	800f298 <arm_cmplx_mag_f32+0x1a8>
 800f180:	ed05 0a02 	vstr	s0, [r5, #-8]
 800f184:	ed54 7a02 	vldr	s15, [r4, #-8]
 800f188:	ed14 0a01 	vldr	s0, [r4, #-4]
 800f18c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f190:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f194:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a0:	db20      	blt.n	800f1e4 <arm_cmplx_mag_f32+0xf4>
 800f1a2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f1a6:	eeb4 0a40 	vcmp.f32	s0, s0
 800f1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ae:	d169      	bne.n	800f284 <arm_cmplx_mag_f32+0x194>
 800f1b0:	3e01      	subs	r6, #1
 800f1b2:	ed05 0a01 	vstr	s0, [r5, #-4]
 800f1b6:	f104 0420 	add.w	r4, r4, #32
 800f1ba:	f105 0510 	add.w	r5, r5, #16
 800f1be:	d019      	beq.n	800f1f4 <arm_cmplx_mag_f32+0x104>
 800f1c0:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800f1c4:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800f1c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f1cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f1d0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f1d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1dc:	da95      	bge.n	800f10a <arm_cmplx_mag_f32+0x1a>
 800f1de:	f845 7c10 	str.w	r7, [r5, #-16]
 800f1e2:	e79c      	b.n	800f11e <arm_cmplx_mag_f32+0x2e>
 800f1e4:	3e01      	subs	r6, #1
 800f1e6:	f845 7c04 	str.w	r7, [r5, #-4]
 800f1ea:	f104 0420 	add.w	r4, r4, #32
 800f1ee:	f105 0510 	add.w	r5, r5, #16
 800f1f2:	d1e5      	bne.n	800f1c0 <arm_cmplx_mag_f32+0xd0>
 800f1f4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800f1f8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800f1fc:	f012 0503 	ands.w	r5, r2, #3
 800f200:	d026      	beq.n	800f250 <arm_cmplx_mag_f32+0x160>
 800f202:	2600      	movs	r6, #0
 800f204:	f100 0408 	add.w	r4, r0, #8
 800f208:	e00c      	b.n	800f224 <arm_cmplx_mag_f32+0x134>
 800f20a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f20e:	eeb4 0a40 	vcmp.f32	s0, s0
 800f212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f216:	d12e      	bne.n	800f276 <arm_cmplx_mag_f32+0x186>
 800f218:	3d01      	subs	r5, #1
 800f21a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800f21e:	f104 0408 	add.w	r4, r4, #8
 800f222:	d015      	beq.n	800f250 <arm_cmplx_mag_f32+0x160>
 800f224:	ed54 7a02 	vldr	s15, [r4, #-8]
 800f228:	ed14 0a01 	vldr	s0, [r4, #-4]
 800f22c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f230:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f234:	3104      	adds	r1, #4
 800f236:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f23a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f242:	dae2      	bge.n	800f20a <arm_cmplx_mag_f32+0x11a>
 800f244:	3d01      	subs	r5, #1
 800f246:	f841 6c04 	str.w	r6, [r1, #-4]
 800f24a:	f104 0408 	add.w	r4, r4, #8
 800f24e:	d1e9      	bne.n	800f224 <arm_cmplx_mag_f32+0x134>
 800f250:	b004      	add	sp, #16
 800f252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f256:	f845 7c08 	str.w	r7, [r5, #-8]
 800f25a:	e793      	b.n	800f184 <arm_cmplx_mag_f32+0x94>
 800f25c:	f845 7c0c 	str.w	r7, [r5, #-12]
 800f260:	e777      	b.n	800f152 <arm_cmplx_mag_f32+0x62>
 800f262:	eeb0 0a67 	vmov.f32	s0, s15
 800f266:	9203      	str	r2, [sp, #12]
 800f268:	9102      	str	r1, [sp, #8]
 800f26a:	9001      	str	r0, [sp, #4]
 800f26c:	f001 f968 	bl	8010540 <sqrtf>
 800f270:	a801      	add	r0, sp, #4
 800f272:	c807      	ldmia	r0, {r0, r1, r2}
 800f274:	e751      	b.n	800f11a <arm_cmplx_mag_f32+0x2a>
 800f276:	eeb0 0a67 	vmov.f32	s0, s15
 800f27a:	9101      	str	r1, [sp, #4]
 800f27c:	f001 f960 	bl	8010540 <sqrtf>
 800f280:	9901      	ldr	r1, [sp, #4]
 800f282:	e7c9      	b.n	800f218 <arm_cmplx_mag_f32+0x128>
 800f284:	eeb0 0a67 	vmov.f32	s0, s15
 800f288:	9203      	str	r2, [sp, #12]
 800f28a:	9102      	str	r1, [sp, #8]
 800f28c:	9001      	str	r0, [sp, #4]
 800f28e:	f001 f957 	bl	8010540 <sqrtf>
 800f292:	a801      	add	r0, sp, #4
 800f294:	c807      	ldmia	r0, {r0, r1, r2}
 800f296:	e78b      	b.n	800f1b0 <arm_cmplx_mag_f32+0xc0>
 800f298:	eeb0 0a67 	vmov.f32	s0, s15
 800f29c:	9203      	str	r2, [sp, #12]
 800f29e:	9102      	str	r1, [sp, #8]
 800f2a0:	9001      	str	r0, [sp, #4]
 800f2a2:	f001 f94d 	bl	8010540 <sqrtf>
 800f2a6:	a801      	add	r0, sp, #4
 800f2a8:	c807      	ldmia	r0, {r0, r1, r2}
 800f2aa:	e769      	b.n	800f180 <arm_cmplx_mag_f32+0x90>
 800f2ac:	eeb0 0a67 	vmov.f32	s0, s15
 800f2b0:	9203      	str	r2, [sp, #12]
 800f2b2:	9102      	str	r1, [sp, #8]
 800f2b4:	9001      	str	r0, [sp, #4]
 800f2b6:	f001 f943 	bl	8010540 <sqrtf>
 800f2ba:	a801      	add	r0, sp, #4
 800f2bc:	c807      	ldmia	r0, {r0, r1, r2}
 800f2be:	e746      	b.n	800f14e <arm_cmplx_mag_f32+0x5e>

0800f2c0 <arm_scale_f32>:
 800f2c0:	b470      	push	{r4, r5, r6}
 800f2c2:	0896      	lsrs	r6, r2, #2
 800f2c4:	d025      	beq.n	800f312 <arm_scale_f32+0x52>
 800f2c6:	f100 0410 	add.w	r4, r0, #16
 800f2ca:	f101 0310 	add.w	r3, r1, #16
 800f2ce:	4635      	mov	r5, r6
 800f2d0:	ed14 6a04 	vldr	s12, [r4, #-16]
 800f2d4:	ed54 6a03 	vldr	s13, [r4, #-12]
 800f2d8:	ed14 7a02 	vldr	s14, [r4, #-8]
 800f2dc:	ed54 7a01 	vldr	s15, [r4, #-4]
 800f2e0:	ee26 6a00 	vmul.f32	s12, s12, s0
 800f2e4:	ee66 6a80 	vmul.f32	s13, s13, s0
 800f2e8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f2ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f2f0:	3d01      	subs	r5, #1
 800f2f2:	ed03 6a04 	vstr	s12, [r3, #-16]
 800f2f6:	ed43 6a03 	vstr	s13, [r3, #-12]
 800f2fa:	ed03 7a02 	vstr	s14, [r3, #-8]
 800f2fe:	ed43 7a01 	vstr	s15, [r3, #-4]
 800f302:	f104 0410 	add.w	r4, r4, #16
 800f306:	f103 0310 	add.w	r3, r3, #16
 800f30a:	d1e1      	bne.n	800f2d0 <arm_scale_f32+0x10>
 800f30c:	0136      	lsls	r6, r6, #4
 800f30e:	4430      	add	r0, r6
 800f310:	4431      	add	r1, r6
 800f312:	f012 0203 	ands.w	r2, r2, #3
 800f316:	d007      	beq.n	800f328 <arm_scale_f32+0x68>
 800f318:	ecf0 7a01 	vldmia	r0!, {s15}
 800f31c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f320:	3a01      	subs	r2, #1
 800f322:	ece1 7a01 	vstmia	r1!, {s15}
 800f326:	d1f7      	bne.n	800f318 <arm_scale_f32+0x58>
 800f328:	bc70      	pop	{r4, r5, r6}
 800f32a:	4770      	bx	lr

0800f32c <arm_radix8_butterfly_f32>:
 800f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f330:	ed2d 8b10 	vpush	{d8-d15}
 800f334:	b09d      	sub	sp, #116	; 0x74
 800f336:	461c      	mov	r4, r3
 800f338:	ed9f bac8 	vldr	s22, [pc, #800]	; 800f65c <arm_radix8_butterfly_f32+0x330>
 800f33c:	921a      	str	r2, [sp, #104]	; 0x68
 800f33e:	1d03      	adds	r3, r0, #4
 800f340:	4682      	mov	sl, r0
 800f342:	4689      	mov	r9, r1
 800f344:	468b      	mov	fp, r1
 800f346:	931b      	str	r3, [sp, #108]	; 0x6c
 800f348:	9400      	str	r4, [sp, #0]
 800f34a:	469e      	mov	lr, r3
 800f34c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800f350:	005a      	lsls	r2, r3, #1
 800f352:	18d6      	adds	r6, r2, r3
 800f354:	18f5      	adds	r5, r6, r3
 800f356:	9203      	str	r2, [sp, #12]
 800f358:	195a      	adds	r2, r3, r5
 800f35a:	18d0      	adds	r0, r2, r3
 800f35c:	00df      	lsls	r7, r3, #3
 800f35e:	1819      	adds	r1, r3, r0
 800f360:	463c      	mov	r4, r7
 800f362:	9701      	str	r7, [sp, #4]
 800f364:	4457      	add	r7, sl
 800f366:	930c      	str	r3, [sp, #48]	; 0x30
 800f368:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800f36c:	011b      	lsls	r3, r3, #4
 800f36e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800f372:	eb07 0c04 	add.w	ip, r7, r4
 800f376:	9c00      	ldr	r4, [sp, #0]
 800f378:	9302      	str	r3, [sp, #8]
 800f37a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800f37e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800f382:	3204      	adds	r2, #4
 800f384:	3104      	adds	r1, #4
 800f386:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800f38a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f38e:	f04f 0800 	mov.w	r8, #0
 800f392:	eddc 7a00 	vldr	s15, [ip]
 800f396:	edd7 6a00 	vldr	s13, [r7]
 800f39a:	edd6 3a00 	vldr	s7, [r6]
 800f39e:	ed5e aa01 	vldr	s21, [lr, #-4]
 800f3a2:	edd5 4a00 	vldr	s9, [r5]
 800f3a6:	ed90 2a00 	vldr	s4, [r0]
 800f3aa:	ed12 7a01 	vldr	s14, [r2, #-4]
 800f3ae:	ed51 0a01 	vldr	s1, [r1, #-4]
 800f3b2:	ee77 8a82 	vadd.f32	s17, s15, s4
 800f3b6:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800f3ba:	ee76 1a87 	vadd.f32	s3, s13, s14
 800f3be:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800f3c2:	ee31 6a84 	vadd.f32	s12, s3, s8
 800f3c6:	ee33 5a28 	vadd.f32	s10, s6, s17
 800f3ca:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f3ce:	ee75 6a06 	vadd.f32	s13, s10, s12
 800f3d2:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f3d6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800f3da:	ed85 5a00 	vstr	s10, [r5]
 800f3de:	ed96 1a01 	vldr	s2, [r6, #4]
 800f3e2:	edd7 5a01 	vldr	s11, [r7, #4]
 800f3e6:	ed92 aa00 	vldr	s20, [r2]
 800f3ea:	ed91 6a00 	vldr	s12, [r1]
 800f3ee:	ed9e 9a00 	vldr	s18, [lr]
 800f3f2:	ed95 5a01 	vldr	s10, [r5, #4]
 800f3f6:	eddc 6a01 	vldr	s13, [ip, #4]
 800f3fa:	edd0 9a01 	vldr	s19, [r0, #4]
 800f3fe:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800f402:	ee71 2a46 	vsub.f32	s5, s2, s12
 800f406:	ee75 3aca 	vsub.f32	s7, s11, s20
 800f40a:	ee37 0a60 	vsub.f32	s0, s14, s1
 800f40e:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800f412:	ee37 7a20 	vadd.f32	s14, s14, s1
 800f416:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800f41a:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800f41e:	ee79 3a05 	vadd.f32	s7, s18, s10
 800f422:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800f426:	ee39 5a45 	vsub.f32	s10, s18, s10
 800f42a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800f42e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800f432:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800f436:	ee31 6a06 	vadd.f32	s12, s2, s12
 800f43a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800f43e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800f442:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800f446:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800f44a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800f44e:	ee36 0a88 	vadd.f32	s0, s13, s16
 800f452:	ee75 8a86 	vadd.f32	s17, s11, s12
 800f456:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800f45a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800f45e:	ee75 6a62 	vsub.f32	s13, s10, s5
 800f462:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800f466:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f46a:	ee33 1a89 	vadd.f32	s2, s7, s18
 800f46e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800f472:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800f476:	ee75 4a22 	vadd.f32	s9, s10, s5
 800f47a:	ee32 5a27 	vadd.f32	s10, s4, s15
 800f47e:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f482:	ee33 8a06 	vadd.f32	s16, s6, s12
 800f486:	ee75 2a87 	vadd.f32	s5, s11, s14
 800f48a:	ee31 9a28 	vadd.f32	s18, s2, s17
 800f48e:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f492:	ee74 0a61 	vsub.f32	s1, s8, s3
 800f496:	ee33 2a80 	vadd.f32	s4, s7, s0
 800f49a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f49e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800f4a2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f4a6:	ee31 1a68 	vsub.f32	s2, s2, s17
 800f4aa:	ee34 4a21 	vadd.f32	s8, s8, s3
 800f4ae:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800f4b2:	ee74 4a85 	vadd.f32	s9, s9, s10
 800f4b6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f4ba:	44d8      	add	r8, fp
 800f4bc:	45c1      	cmp	r9, r8
 800f4be:	ed8e 9a00 	vstr	s18, [lr]
 800f4c2:	ed85 1a01 	vstr	s2, [r5, #4]
 800f4c6:	449e      	add	lr, r3
 800f4c8:	ed8c 8a00 	vstr	s16, [ip]
 800f4cc:	441d      	add	r5, r3
 800f4ce:	ed80 6a00 	vstr	s12, [r0]
 800f4d2:	edcc 0a01 	vstr	s1, [ip, #4]
 800f4d6:	ed80 4a01 	vstr	s8, [r0, #4]
 800f4da:	449c      	add	ip, r3
 800f4dc:	ed87 2a00 	vstr	s4, [r7]
 800f4e0:	4418      	add	r0, r3
 800f4e2:	ed41 3a01 	vstr	s7, [r1, #-4]
 800f4e6:	ed42 2a01 	vstr	s5, [r2, #-4]
 800f4ea:	ed86 7a00 	vstr	s14, [r6]
 800f4ee:	ed87 3a01 	vstr	s6, [r7, #4]
 800f4f2:	edc1 4a00 	vstr	s9, [r1]
 800f4f6:	441f      	add	r7, r3
 800f4f8:	edc2 5a00 	vstr	s11, [r2]
 800f4fc:	4419      	add	r1, r3
 800f4fe:	edc6 6a01 	vstr	s13, [r6, #4]
 800f502:	441a      	add	r2, r3
 800f504:	441e      	add	r6, r3
 800f506:	f63f af44 	bhi.w	800f392 <arm_radix8_butterfly_f32+0x66>
 800f50a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f50c:	2907      	cmp	r1, #7
 800f50e:	4620      	mov	r0, r4
 800f510:	f240 81e9 	bls.w	800f8e6 <arm_radix8_butterfly_f32+0x5ba>
 800f514:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800f518:	193e      	adds	r6, r7, r4
 800f51a:	1935      	adds	r5, r6, r4
 800f51c:	9c03      	ldr	r4, [sp, #12]
 800f51e:	9000      	str	r0, [sp, #0]
 800f520:	4622      	mov	r2, r4
 800f522:	3201      	adds	r2, #1
 800f524:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f528:	9900      	ldr	r1, [sp, #0]
 800f52a:	1828      	adds	r0, r5, r0
 800f52c:	eb00 0e01 	add.w	lr, r0, r1
 800f530:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f532:	440a      	add	r2, r1
 800f534:	eb04 0c01 	add.w	ip, r4, r1
 800f538:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800f53c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800f540:	9a00      	ldr	r2, [sp, #0]
 800f542:	940f      	str	r4, [sp, #60]	; 0x3c
 800f544:	00ed      	lsls	r5, r5, #3
 800f546:	9511      	str	r5, [sp, #68]	; 0x44
 800f548:	00d5      	lsls	r5, r2, #3
 800f54a:	950d      	str	r5, [sp, #52]	; 0x34
 800f54c:	9d01      	ldr	r5, [sp, #4]
 800f54e:	3508      	adds	r5, #8
 800f550:	9516      	str	r5, [sp, #88]	; 0x58
 800f552:	9d02      	ldr	r5, [sp, #8]
 800f554:	3508      	adds	r5, #8
 800f556:	0114      	lsls	r4, r2, #4
 800f558:	9517      	str	r5, [sp, #92]	; 0x5c
 800f55a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f55c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f55e:	940e      	str	r4, [sp, #56]	; 0x38
 800f560:	00c0      	lsls	r0, r0, #3
 800f562:	9010      	str	r0, [sp, #64]	; 0x40
 800f564:	18aa      	adds	r2, r5, r2
 800f566:	9207      	str	r2, [sp, #28]
 800f568:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f56a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f56c:	18aa      	adds	r2, r5, r2
 800f56e:	9208      	str	r2, [sp, #32]
 800f570:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f572:	18aa      	adds	r2, r5, r2
 800f574:	9209      	str	r2, [sp, #36]	; 0x24
 800f576:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f57a:	f10e 0204 	add.w	r2, lr, #4
 800f57e:	920a      	str	r2, [sp, #40]	; 0x28
 800f580:	00c9      	lsls	r1, r1, #3
 800f582:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f584:	310c      	adds	r1, #12
 800f586:	00f6      	lsls	r6, r6, #3
 800f588:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800f58c:	9114      	str	r1, [sp, #80]	; 0x50
 800f58e:	18a9      	adds	r1, r5, r2
 800f590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f592:	9612      	str	r6, [sp, #72]	; 0x48
 800f594:	00ff      	lsls	r7, r7, #3
 800f596:	19ae      	adds	r6, r5, r6
 800f598:	3008      	adds	r0, #8
 800f59a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800f59e:	9606      	str	r6, [sp, #24]
 800f5a0:	9019      	str	r0, [sp, #100]	; 0x64
 800f5a2:	18aa      	adds	r2, r5, r2
 800f5a4:	0164      	lsls	r4, r4, #5
 800f5a6:	19ee      	adds	r6, r5, r7
 800f5a8:	f10c 000c 	add.w	r0, ip, #12
 800f5ac:	9713      	str	r7, [sp, #76]	; 0x4c
 800f5ae:	9604      	str	r6, [sp, #16]
 800f5b0:	9015      	str	r0, [sp, #84]	; 0x54
 800f5b2:	9103      	str	r1, [sp, #12]
 800f5b4:	9205      	str	r2, [sp, #20]
 800f5b6:	f104 0208 	add.w	r2, r4, #8
 800f5ba:	9218      	str	r2, [sp, #96]	; 0x60
 800f5bc:	f04f 0801 	mov.w	r8, #1
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f102 0108 	add.w	r1, r2, #8
 800f5c6:	460f      	mov	r7, r1
 800f5c8:	910b      	str	r1, [sp, #44]	; 0x2c
 800f5ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f5cc:	188e      	adds	r6, r1, r2
 800f5ce:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f5d0:	188d      	adds	r5, r1, r2
 800f5d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f5d4:	188c      	adds	r4, r1, r2
 800f5d6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f5d8:	1888      	adds	r0, r1, r2
 800f5da:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f5dc:	eb01 0c02 	add.w	ip, r1, r2
 800f5e0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f5e2:	440a      	add	r2, r1
 800f5e4:	9903      	ldr	r1, [sp, #12]
 800f5e6:	edd1 fa00 	vldr	s31, [r1]
 800f5ea:	9905      	ldr	r1, [sp, #20]
 800f5ec:	ed91 fa00 	vldr	s30, [r1]
 800f5f0:	9904      	ldr	r1, [sp, #16]
 800f5f2:	edd1 ea00 	vldr	s29, [r1]
 800f5f6:	9906      	ldr	r1, [sp, #24]
 800f5f8:	ed91 ea00 	vldr	s28, [r1]
 800f5fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5fe:	edd1 da00 	vldr	s27, [r1]
 800f602:	9908      	ldr	r1, [sp, #32]
 800f604:	ed91 da00 	vldr	s26, [r1]
 800f608:	9907      	ldr	r1, [sp, #28]
 800f60a:	edd1 ca00 	vldr	s25, [r1]
 800f60e:	9903      	ldr	r1, [sp, #12]
 800f610:	ed91 ca01 	vldr	s24, [r1, #4]
 800f614:	9905      	ldr	r1, [sp, #20]
 800f616:	edd1 ba01 	vldr	s23, [r1, #4]
 800f61a:	9904      	ldr	r1, [sp, #16]
 800f61c:	edd1 aa01 	vldr	s21, [r1, #4]
 800f620:	9906      	ldr	r1, [sp, #24]
 800f622:	ed91 aa01 	vldr	s20, [r1, #4]
 800f626:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f628:	edd1 7a01 	vldr	s15, [r1, #4]
 800f62c:	9908      	ldr	r1, [sp, #32]
 800f62e:	edcd 7a00 	vstr	s15, [sp]
 800f632:	edd1 7a01 	vldr	s15, [r1, #4]
 800f636:	9907      	ldr	r1, [sp, #28]
 800f638:	edcd 7a01 	vstr	s15, [sp, #4]
 800f63c:	edd1 7a01 	vldr	s15, [r1, #4]
 800f640:	eb0a 0e07 	add.w	lr, sl, r7
 800f644:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f646:	edcd 7a02 	vstr	s15, [sp, #8]
 800f64a:	eb0c 010a 	add.w	r1, ip, sl
 800f64e:	4456      	add	r6, sl
 800f650:	4455      	add	r5, sl
 800f652:	4454      	add	r4, sl
 800f654:	4450      	add	r0, sl
 800f656:	4452      	add	r2, sl
 800f658:	46c4      	mov	ip, r8
 800f65a:	e001      	b.n	800f660 <arm_radix8_butterfly_f32+0x334>
 800f65c:	3f3504f3 	.word	0x3f3504f3
 800f660:	ed96 5a00 	vldr	s10, [r6]
 800f664:	ed52 9a01 	vldr	s19, [r2, #-4]
 800f668:	ed11 6a01 	vldr	s12, [r1, #-4]
 800f66c:	edd0 7a00 	vldr	s15, [r0]
 800f670:	ed17 7a01 	vldr	s14, [r7, #-4]
 800f674:	edde 3a00 	vldr	s7, [lr]
 800f678:	ed94 3a00 	vldr	s6, [r4]
 800f67c:	ed95 2a00 	vldr	s4, [r5]
 800f680:	ed9e 0a01 	vldr	s0, [lr, #4]
 800f684:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f688:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f68c:	ee33 4a29 	vadd.f32	s8, s6, s19
 800f690:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f694:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f698:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f69c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f6a0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f6a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f6a8:	ed8e 6a00 	vstr	s12, [lr]
 800f6ac:	edd0 8a01 	vldr	s17, [r0, #4]
 800f6b0:	ed95 9a01 	vldr	s18, [r5, #4]
 800f6b4:	edd1 2a00 	vldr	s5, [r1]
 800f6b8:	ed97 7a00 	vldr	s14, [r7]
 800f6bc:	edd4 0a01 	vldr	s1, [r4, #4]
 800f6c0:	ed96 6a01 	vldr	s12, [r6, #4]
 800f6c4:	edd2 5a00 	vldr	s11, [r2]
 800f6c8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f6cc:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f6d0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f6d4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800f6d8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f6dc:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f6e0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f6e4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f6e8:	ee75 8a69 	vsub.f32	s17, s10, s19
 800f6ec:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f6f0:	ee35 5a29 	vadd.f32	s10, s10, s19
 800f6f4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f6f8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f6fc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800f700:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f704:	ee32 9a08 	vadd.f32	s18, s4, s16
 800f708:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f70c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f710:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f714:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f718:	ee32 1a87 	vadd.f32	s2, s5, s14
 800f71c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f720:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f724:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f728:	ee73 0a29 	vadd.f32	s1, s6, s19
 800f72c:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f730:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f734:	ee32 7a64 	vsub.f32	s14, s4, s9
 800f738:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800f73c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f740:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f744:	ee75 8a85 	vadd.f32	s17, s11, s10
 800f748:	ee74 3a22 	vadd.f32	s7, s8, s5
 800f74c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800f750:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f754:	ee79 1a41 	vsub.f32	s3, s18, s2
 800f758:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800f75c:	ee76 5a43 	vsub.f32	s11, s12, s6
 800f760:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f764:	ee72 4a24 	vadd.f32	s9, s4, s9
 800f768:	ee30 4a60 	vsub.f32	s8, s0, s1
 800f76c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800f770:	ee30 0a20 	vadd.f32	s0, s0, s1
 800f774:	ee77 9a85 	vadd.f32	s19, s15, s10
 800f778:	ee36 6a03 	vadd.f32	s12, s12, s6
 800f77c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f780:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800f784:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800f788:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800f78c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800f790:	ee39 1a01 	vadd.f32	s2, s18, s2
 800f794:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800f798:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800f79c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800f7a0:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800f7a4:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800f7a8:	ee35 3a03 	vadd.f32	s6, s10, s6
 800f7ac:	ee72 6a66 	vsub.f32	s13, s4, s13
 800f7b0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800f7b4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800f7b8:	ed9d 4a02 	vldr	s8, [sp, #8]
 800f7bc:	ed8e 1a01 	vstr	s2, [lr, #4]
 800f7c0:	ee77 3a63 	vsub.f32	s7, s14, s7
 800f7c4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800f7c8:	ed9d 7a01 	vldr	s14, [sp, #4]
 800f7cc:	ed86 3a00 	vstr	s6, [r6]
 800f7d0:	ee30 9a89 	vadd.f32	s18, s1, s18
 800f7d4:	ee32 2a05 	vadd.f32	s4, s4, s10
 800f7d8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800f7dc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800f7e0:	ee67 2a22 	vmul.f32	s5, s14, s5
 800f7e4:	ee64 1a00 	vmul.f32	s3, s8, s0
 800f7e8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f7ec:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800f7f0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800f7f4:	ee64 8a28 	vmul.f32	s17, s8, s17
 800f7f8:	ed9d 4a00 	vldr	s8, [sp]
 800f7fc:	edc6 6a01 	vstr	s13, [r6, #4]
 800f800:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800f804:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800f808:	ee64 9a29 	vmul.f32	s19, s8, s19
 800f80c:	ee24 4a25 	vmul.f32	s8, s8, s11
 800f810:	ee30 7a87 	vadd.f32	s14, s1, s14
 800f814:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f818:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800f81c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800f820:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800f824:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800f828:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800f82c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800f830:	ee75 1a21 	vadd.f32	s3, s10, s3
 800f834:	ee30 0a68 	vsub.f32	s0, s0, s17
 800f838:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800f83c:	ee70 0a84 	vadd.f32	s1, s1, s8
 800f840:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f844:	44dc      	add	ip, fp
 800f846:	45e1      	cmp	r9, ip
 800f848:	ed84 9a00 	vstr	s18, [r4]
 800f84c:	edc4 3a01 	vstr	s7, [r4, #4]
 800f850:	449e      	add	lr, r3
 800f852:	ed02 7a01 	vstr	s14, [r2, #-4]
 800f856:	edc2 2a00 	vstr	s5, [r2]
 800f85a:	441e      	add	r6, r3
 800f85c:	ed85 2a00 	vstr	s4, [r5]
 800f860:	ed85 8a01 	vstr	s16, [r5, #4]
 800f864:	441c      	add	r4, r3
 800f866:	ed47 1a01 	vstr	s3, [r7, #-4]
 800f86a:	ed87 0a00 	vstr	s0, [r7]
 800f86e:	441a      	add	r2, r3
 800f870:	ed41 4a01 	vstr	s9, [r1, #-4]
 800f874:	edc1 9a00 	vstr	s19, [r1]
 800f878:	441d      	add	r5, r3
 800f87a:	edc0 0a00 	vstr	s1, [r0]
 800f87e:	441f      	add	r7, r3
 800f880:	ed80 6a01 	vstr	s12, [r0, #4]
 800f884:	4419      	add	r1, r3
 800f886:	4418      	add	r0, r3
 800f888:	f63f aeea 	bhi.w	800f660 <arm_radix8_butterfly_f32+0x334>
 800f88c:	9a03      	ldr	r2, [sp, #12]
 800f88e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f890:	440a      	add	r2, r1
 800f892:	9203      	str	r2, [sp, #12]
 800f894:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f896:	9a05      	ldr	r2, [sp, #20]
 800f898:	440a      	add	r2, r1
 800f89a:	9205      	str	r2, [sp, #20]
 800f89c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f89e:	9a04      	ldr	r2, [sp, #16]
 800f8a0:	440a      	add	r2, r1
 800f8a2:	9204      	str	r2, [sp, #16]
 800f8a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f8a6:	9a06      	ldr	r2, [sp, #24]
 800f8a8:	440a      	add	r2, r1
 800f8aa:	9206      	str	r2, [sp, #24]
 800f8ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8b0:	440a      	add	r2, r1
 800f8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800f8b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f8b6:	9a08      	ldr	r2, [sp, #32]
 800f8b8:	440a      	add	r2, r1
 800f8ba:	9208      	str	r2, [sp, #32]
 800f8bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f8be:	9a07      	ldr	r2, [sp, #28]
 800f8c0:	440a      	add	r2, r1
 800f8c2:	9207      	str	r2, [sp, #28]
 800f8c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f8c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8c8:	f108 0801 	add.w	r8, r8, #1
 800f8cc:	3208      	adds	r2, #8
 800f8ce:	4588      	cmp	r8, r1
 800f8d0:	920a      	str	r2, [sp, #40]	; 0x28
 800f8d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8d4:	f47f ae75 	bne.w	800f5c2 <arm_radix8_butterfly_f32+0x296>
 800f8d8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800f8dc:	9300      	str	r3, [sp, #0]
 800f8de:	46c3      	mov	fp, r8
 800f8e0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800f8e4:	e532      	b.n	800f34c <arm_radix8_butterfly_f32+0x20>
 800f8e6:	b01d      	add	sp, #116	; 0x74
 800f8e8:	ecbd 8b10 	vpop	{d8-d15}
 800f8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8f0 <atoi>:
 800f8f0:	220a      	movs	r2, #10
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	f000 ba3c 	b.w	800fd70 <strtol>

0800f8f8 <__errno>:
 800f8f8:	4b01      	ldr	r3, [pc, #4]	; (800f900 <__errno+0x8>)
 800f8fa:	6818      	ldr	r0, [r3, #0]
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	2000010c 	.word	0x2000010c

0800f904 <__libc_init_array>:
 800f904:	b570      	push	{r4, r5, r6, lr}
 800f906:	4d0d      	ldr	r5, [pc, #52]	; (800f93c <__libc_init_array+0x38>)
 800f908:	4c0d      	ldr	r4, [pc, #52]	; (800f940 <__libc_init_array+0x3c>)
 800f90a:	1b64      	subs	r4, r4, r5
 800f90c:	10a4      	asrs	r4, r4, #2
 800f90e:	2600      	movs	r6, #0
 800f910:	42a6      	cmp	r6, r4
 800f912:	d109      	bne.n	800f928 <__libc_init_array+0x24>
 800f914:	4d0b      	ldr	r5, [pc, #44]	; (800f944 <__libc_init_array+0x40>)
 800f916:	4c0c      	ldr	r4, [pc, #48]	; (800f948 <__libc_init_array+0x44>)
 800f918:	f000 ffb0 	bl	801087c <_init>
 800f91c:	1b64      	subs	r4, r4, r5
 800f91e:	10a4      	asrs	r4, r4, #2
 800f920:	2600      	movs	r6, #0
 800f922:	42a6      	cmp	r6, r4
 800f924:	d105      	bne.n	800f932 <__libc_init_array+0x2e>
 800f926:	bd70      	pop	{r4, r5, r6, pc}
 800f928:	f855 3b04 	ldr.w	r3, [r5], #4
 800f92c:	4798      	blx	r3
 800f92e:	3601      	adds	r6, #1
 800f930:	e7ee      	b.n	800f910 <__libc_init_array+0xc>
 800f932:	f855 3b04 	ldr.w	r3, [r5], #4
 800f936:	4798      	blx	r3
 800f938:	3601      	adds	r6, #1
 800f93a:	e7f2      	b.n	800f922 <__libc_init_array+0x1e>
 800f93c:	08011ab0 	.word	0x08011ab0
 800f940:	08011ab0 	.word	0x08011ab0
 800f944:	08011ab0 	.word	0x08011ab0
 800f948:	08011ab4 	.word	0x08011ab4

0800f94c <__itoa>:
 800f94c:	1e93      	subs	r3, r2, #2
 800f94e:	2b22      	cmp	r3, #34	; 0x22
 800f950:	b510      	push	{r4, lr}
 800f952:	460c      	mov	r4, r1
 800f954:	d904      	bls.n	800f960 <__itoa+0x14>
 800f956:	2300      	movs	r3, #0
 800f958:	700b      	strb	r3, [r1, #0]
 800f95a:	461c      	mov	r4, r3
 800f95c:	4620      	mov	r0, r4
 800f95e:	bd10      	pop	{r4, pc}
 800f960:	2a0a      	cmp	r2, #10
 800f962:	d109      	bne.n	800f978 <__itoa+0x2c>
 800f964:	2800      	cmp	r0, #0
 800f966:	da07      	bge.n	800f978 <__itoa+0x2c>
 800f968:	232d      	movs	r3, #45	; 0x2d
 800f96a:	700b      	strb	r3, [r1, #0]
 800f96c:	4240      	negs	r0, r0
 800f96e:	2101      	movs	r1, #1
 800f970:	4421      	add	r1, r4
 800f972:	f000 fa07 	bl	800fd84 <__utoa>
 800f976:	e7f1      	b.n	800f95c <__itoa+0x10>
 800f978:	2100      	movs	r1, #0
 800f97a:	e7f9      	b.n	800f970 <__itoa+0x24>

0800f97c <itoa>:
 800f97c:	f7ff bfe6 	b.w	800f94c <__itoa>

0800f980 <__retarget_lock_acquire_recursive>:
 800f980:	4770      	bx	lr

0800f982 <__retarget_lock_release_recursive>:
 800f982:	4770      	bx	lr

0800f984 <memcpy>:
 800f984:	440a      	add	r2, r1
 800f986:	4291      	cmp	r1, r2
 800f988:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f98c:	d100      	bne.n	800f990 <memcpy+0xc>
 800f98e:	4770      	bx	lr
 800f990:	b510      	push	{r4, lr}
 800f992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f99a:	4291      	cmp	r1, r2
 800f99c:	d1f9      	bne.n	800f992 <memcpy+0xe>
 800f99e:	bd10      	pop	{r4, pc}

0800f9a0 <memset>:
 800f9a0:	4402      	add	r2, r0
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d100      	bne.n	800f9aa <memset+0xa>
 800f9a8:	4770      	bx	lr
 800f9aa:	f803 1b01 	strb.w	r1, [r3], #1
 800f9ae:	e7f9      	b.n	800f9a4 <memset+0x4>

0800f9b0 <sbrk_aligned>:
 800f9b0:	b570      	push	{r4, r5, r6, lr}
 800f9b2:	4e0e      	ldr	r6, [pc, #56]	; (800f9ec <sbrk_aligned+0x3c>)
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	6831      	ldr	r1, [r6, #0]
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	b911      	cbnz	r1, 800f9c2 <sbrk_aligned+0x12>
 800f9bc:	f000 f8f6 	bl	800fbac <_sbrk_r>
 800f9c0:	6030      	str	r0, [r6, #0]
 800f9c2:	4621      	mov	r1, r4
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	f000 f8f1 	bl	800fbac <_sbrk_r>
 800f9ca:	1c43      	adds	r3, r0, #1
 800f9cc:	d00a      	beq.n	800f9e4 <sbrk_aligned+0x34>
 800f9ce:	1cc4      	adds	r4, r0, #3
 800f9d0:	f024 0403 	bic.w	r4, r4, #3
 800f9d4:	42a0      	cmp	r0, r4
 800f9d6:	d007      	beq.n	800f9e8 <sbrk_aligned+0x38>
 800f9d8:	1a21      	subs	r1, r4, r0
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f000 f8e6 	bl	800fbac <_sbrk_r>
 800f9e0:	3001      	adds	r0, #1
 800f9e2:	d101      	bne.n	800f9e8 <sbrk_aligned+0x38>
 800f9e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	bd70      	pop	{r4, r5, r6, pc}
 800f9ec:	2000bb44 	.word	0x2000bb44

0800f9f0 <_malloc_r>:
 800f9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f4:	1ccd      	adds	r5, r1, #3
 800f9f6:	f025 0503 	bic.w	r5, r5, #3
 800f9fa:	3508      	adds	r5, #8
 800f9fc:	2d0c      	cmp	r5, #12
 800f9fe:	bf38      	it	cc
 800fa00:	250c      	movcc	r5, #12
 800fa02:	2d00      	cmp	r5, #0
 800fa04:	4607      	mov	r7, r0
 800fa06:	db01      	blt.n	800fa0c <_malloc_r+0x1c>
 800fa08:	42a9      	cmp	r1, r5
 800fa0a:	d905      	bls.n	800fa18 <_malloc_r+0x28>
 800fa0c:	230c      	movs	r3, #12
 800fa0e:	603b      	str	r3, [r7, #0]
 800fa10:	2600      	movs	r6, #0
 800fa12:	4630      	mov	r0, r6
 800fa14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa18:	4e2e      	ldr	r6, [pc, #184]	; (800fad4 <_malloc_r+0xe4>)
 800fa1a:	f000 f9f5 	bl	800fe08 <__malloc_lock>
 800fa1e:	6833      	ldr	r3, [r6, #0]
 800fa20:	461c      	mov	r4, r3
 800fa22:	bb34      	cbnz	r4, 800fa72 <_malloc_r+0x82>
 800fa24:	4629      	mov	r1, r5
 800fa26:	4638      	mov	r0, r7
 800fa28:	f7ff ffc2 	bl	800f9b0 <sbrk_aligned>
 800fa2c:	1c43      	adds	r3, r0, #1
 800fa2e:	4604      	mov	r4, r0
 800fa30:	d14d      	bne.n	800face <_malloc_r+0xde>
 800fa32:	6834      	ldr	r4, [r6, #0]
 800fa34:	4626      	mov	r6, r4
 800fa36:	2e00      	cmp	r6, #0
 800fa38:	d140      	bne.n	800fabc <_malloc_r+0xcc>
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	4631      	mov	r1, r6
 800fa3e:	4638      	mov	r0, r7
 800fa40:	eb04 0803 	add.w	r8, r4, r3
 800fa44:	f000 f8b2 	bl	800fbac <_sbrk_r>
 800fa48:	4580      	cmp	r8, r0
 800fa4a:	d13a      	bne.n	800fac2 <_malloc_r+0xd2>
 800fa4c:	6821      	ldr	r1, [r4, #0]
 800fa4e:	3503      	adds	r5, #3
 800fa50:	1a6d      	subs	r5, r5, r1
 800fa52:	f025 0503 	bic.w	r5, r5, #3
 800fa56:	3508      	adds	r5, #8
 800fa58:	2d0c      	cmp	r5, #12
 800fa5a:	bf38      	it	cc
 800fa5c:	250c      	movcc	r5, #12
 800fa5e:	4629      	mov	r1, r5
 800fa60:	4638      	mov	r0, r7
 800fa62:	f7ff ffa5 	bl	800f9b0 <sbrk_aligned>
 800fa66:	3001      	adds	r0, #1
 800fa68:	d02b      	beq.n	800fac2 <_malloc_r+0xd2>
 800fa6a:	6823      	ldr	r3, [r4, #0]
 800fa6c:	442b      	add	r3, r5
 800fa6e:	6023      	str	r3, [r4, #0]
 800fa70:	e00e      	b.n	800fa90 <_malloc_r+0xa0>
 800fa72:	6822      	ldr	r2, [r4, #0]
 800fa74:	1b52      	subs	r2, r2, r5
 800fa76:	d41e      	bmi.n	800fab6 <_malloc_r+0xc6>
 800fa78:	2a0b      	cmp	r2, #11
 800fa7a:	d916      	bls.n	800faaa <_malloc_r+0xba>
 800fa7c:	1961      	adds	r1, r4, r5
 800fa7e:	42a3      	cmp	r3, r4
 800fa80:	6025      	str	r5, [r4, #0]
 800fa82:	bf18      	it	ne
 800fa84:	6059      	strne	r1, [r3, #4]
 800fa86:	6863      	ldr	r3, [r4, #4]
 800fa88:	bf08      	it	eq
 800fa8a:	6031      	streq	r1, [r6, #0]
 800fa8c:	5162      	str	r2, [r4, r5]
 800fa8e:	604b      	str	r3, [r1, #4]
 800fa90:	4638      	mov	r0, r7
 800fa92:	f104 060b 	add.w	r6, r4, #11
 800fa96:	f000 f9bd 	bl	800fe14 <__malloc_unlock>
 800fa9a:	f026 0607 	bic.w	r6, r6, #7
 800fa9e:	1d23      	adds	r3, r4, #4
 800faa0:	1af2      	subs	r2, r6, r3
 800faa2:	d0b6      	beq.n	800fa12 <_malloc_r+0x22>
 800faa4:	1b9b      	subs	r3, r3, r6
 800faa6:	50a3      	str	r3, [r4, r2]
 800faa8:	e7b3      	b.n	800fa12 <_malloc_r+0x22>
 800faaa:	6862      	ldr	r2, [r4, #4]
 800faac:	42a3      	cmp	r3, r4
 800faae:	bf0c      	ite	eq
 800fab0:	6032      	streq	r2, [r6, #0]
 800fab2:	605a      	strne	r2, [r3, #4]
 800fab4:	e7ec      	b.n	800fa90 <_malloc_r+0xa0>
 800fab6:	4623      	mov	r3, r4
 800fab8:	6864      	ldr	r4, [r4, #4]
 800faba:	e7b2      	b.n	800fa22 <_malloc_r+0x32>
 800fabc:	4634      	mov	r4, r6
 800fabe:	6876      	ldr	r6, [r6, #4]
 800fac0:	e7b9      	b.n	800fa36 <_malloc_r+0x46>
 800fac2:	230c      	movs	r3, #12
 800fac4:	603b      	str	r3, [r7, #0]
 800fac6:	4638      	mov	r0, r7
 800fac8:	f000 f9a4 	bl	800fe14 <__malloc_unlock>
 800facc:	e7a1      	b.n	800fa12 <_malloc_r+0x22>
 800face:	6025      	str	r5, [r4, #0]
 800fad0:	e7de      	b.n	800fa90 <_malloc_r+0xa0>
 800fad2:	bf00      	nop
 800fad4:	2000bb40 	.word	0x2000bb40

0800fad8 <cleanup_glue>:
 800fad8:	b538      	push	{r3, r4, r5, lr}
 800fada:	460c      	mov	r4, r1
 800fadc:	6809      	ldr	r1, [r1, #0]
 800fade:	4605      	mov	r5, r0
 800fae0:	b109      	cbz	r1, 800fae6 <cleanup_glue+0xe>
 800fae2:	f7ff fff9 	bl	800fad8 <cleanup_glue>
 800fae6:	4621      	mov	r1, r4
 800fae8:	4628      	mov	r0, r5
 800faea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faee:	f000 b997 	b.w	800fe20 <_free_r>
	...

0800faf4 <_reclaim_reent>:
 800faf4:	4b2c      	ldr	r3, [pc, #176]	; (800fba8 <_reclaim_reent+0xb4>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4283      	cmp	r3, r0
 800fafa:	b570      	push	{r4, r5, r6, lr}
 800fafc:	4604      	mov	r4, r0
 800fafe:	d051      	beq.n	800fba4 <_reclaim_reent+0xb0>
 800fb00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fb02:	b143      	cbz	r3, 800fb16 <_reclaim_reent+0x22>
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d14a      	bne.n	800fba0 <_reclaim_reent+0xac>
 800fb0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb0c:	6819      	ldr	r1, [r3, #0]
 800fb0e:	b111      	cbz	r1, 800fb16 <_reclaim_reent+0x22>
 800fb10:	4620      	mov	r0, r4
 800fb12:	f000 f985 	bl	800fe20 <_free_r>
 800fb16:	6961      	ldr	r1, [r4, #20]
 800fb18:	b111      	cbz	r1, 800fb20 <_reclaim_reent+0x2c>
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f000 f980 	bl	800fe20 <_free_r>
 800fb20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fb22:	b111      	cbz	r1, 800fb2a <_reclaim_reent+0x36>
 800fb24:	4620      	mov	r0, r4
 800fb26:	f000 f97b 	bl	800fe20 <_free_r>
 800fb2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fb2c:	b111      	cbz	r1, 800fb34 <_reclaim_reent+0x40>
 800fb2e:	4620      	mov	r0, r4
 800fb30:	f000 f976 	bl	800fe20 <_free_r>
 800fb34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fb36:	b111      	cbz	r1, 800fb3e <_reclaim_reent+0x4a>
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f000 f971 	bl	800fe20 <_free_r>
 800fb3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fb40:	b111      	cbz	r1, 800fb48 <_reclaim_reent+0x54>
 800fb42:	4620      	mov	r0, r4
 800fb44:	f000 f96c 	bl	800fe20 <_free_r>
 800fb48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fb4a:	b111      	cbz	r1, 800fb52 <_reclaim_reent+0x5e>
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f000 f967 	bl	800fe20 <_free_r>
 800fb52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fb54:	b111      	cbz	r1, 800fb5c <_reclaim_reent+0x68>
 800fb56:	4620      	mov	r0, r4
 800fb58:	f000 f962 	bl	800fe20 <_free_r>
 800fb5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb5e:	b111      	cbz	r1, 800fb66 <_reclaim_reent+0x72>
 800fb60:	4620      	mov	r0, r4
 800fb62:	f000 f95d 	bl	800fe20 <_free_r>
 800fb66:	69a3      	ldr	r3, [r4, #24]
 800fb68:	b1e3      	cbz	r3, 800fba4 <_reclaim_reent+0xb0>
 800fb6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	4798      	blx	r3
 800fb70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fb72:	b1b9      	cbz	r1, 800fba4 <_reclaim_reent+0xb0>
 800fb74:	4620      	mov	r0, r4
 800fb76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb7a:	f7ff bfad 	b.w	800fad8 <cleanup_glue>
 800fb7e:	5949      	ldr	r1, [r1, r5]
 800fb80:	b941      	cbnz	r1, 800fb94 <_reclaim_reent+0xa0>
 800fb82:	3504      	adds	r5, #4
 800fb84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb86:	2d80      	cmp	r5, #128	; 0x80
 800fb88:	68d9      	ldr	r1, [r3, #12]
 800fb8a:	d1f8      	bne.n	800fb7e <_reclaim_reent+0x8a>
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f000 f947 	bl	800fe20 <_free_r>
 800fb92:	e7ba      	b.n	800fb0a <_reclaim_reent+0x16>
 800fb94:	680e      	ldr	r6, [r1, #0]
 800fb96:	4620      	mov	r0, r4
 800fb98:	f000 f942 	bl	800fe20 <_free_r>
 800fb9c:	4631      	mov	r1, r6
 800fb9e:	e7ef      	b.n	800fb80 <_reclaim_reent+0x8c>
 800fba0:	2500      	movs	r5, #0
 800fba2:	e7ef      	b.n	800fb84 <_reclaim_reent+0x90>
 800fba4:	bd70      	pop	{r4, r5, r6, pc}
 800fba6:	bf00      	nop
 800fba8:	2000010c 	.word	0x2000010c

0800fbac <_sbrk_r>:
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	4d06      	ldr	r5, [pc, #24]	; (800fbc8 <_sbrk_r+0x1c>)
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	4608      	mov	r0, r1
 800fbb6:	602b      	str	r3, [r5, #0]
 800fbb8:	f7f2 fa38 	bl	800202c <_sbrk>
 800fbbc:	1c43      	adds	r3, r0, #1
 800fbbe:	d102      	bne.n	800fbc6 <_sbrk_r+0x1a>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	b103      	cbz	r3, 800fbc6 <_sbrk_r+0x1a>
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	bd38      	pop	{r3, r4, r5, pc}
 800fbc8:	2000bb48 	.word	0x2000bb48

0800fbcc <siprintf>:
 800fbcc:	b40e      	push	{r1, r2, r3}
 800fbce:	b500      	push	{lr}
 800fbd0:	b09c      	sub	sp, #112	; 0x70
 800fbd2:	ab1d      	add	r3, sp, #116	; 0x74
 800fbd4:	9002      	str	r0, [sp, #8]
 800fbd6:	9006      	str	r0, [sp, #24]
 800fbd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fbdc:	4809      	ldr	r0, [pc, #36]	; (800fc04 <siprintf+0x38>)
 800fbde:	9107      	str	r1, [sp, #28]
 800fbe0:	9104      	str	r1, [sp, #16]
 800fbe2:	4909      	ldr	r1, [pc, #36]	; (800fc08 <siprintf+0x3c>)
 800fbe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbe8:	9105      	str	r1, [sp, #20]
 800fbea:	6800      	ldr	r0, [r0, #0]
 800fbec:	9301      	str	r3, [sp, #4]
 800fbee:	a902      	add	r1, sp, #8
 800fbf0:	f000 f9be 	bl	800ff70 <_svfiprintf_r>
 800fbf4:	9b02      	ldr	r3, [sp, #8]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	701a      	strb	r2, [r3, #0]
 800fbfa:	b01c      	add	sp, #112	; 0x70
 800fbfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc00:	b003      	add	sp, #12
 800fc02:	4770      	bx	lr
 800fc04:	2000010c 	.word	0x2000010c
 800fc08:	ffff0208 	.word	0xffff0208

0800fc0c <strcpy>:
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc12:	f803 2b01 	strb.w	r2, [r3], #1
 800fc16:	2a00      	cmp	r2, #0
 800fc18:	d1f9      	bne.n	800fc0e <strcpy+0x2>
 800fc1a:	4770      	bx	lr

0800fc1c <strncmp>:
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	b17a      	cbz	r2, 800fc40 <strncmp+0x24>
 800fc20:	4603      	mov	r3, r0
 800fc22:	3901      	subs	r1, #1
 800fc24:	1884      	adds	r4, r0, r2
 800fc26:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fc2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fc2e:	4290      	cmp	r0, r2
 800fc30:	d101      	bne.n	800fc36 <strncmp+0x1a>
 800fc32:	42a3      	cmp	r3, r4
 800fc34:	d101      	bne.n	800fc3a <strncmp+0x1e>
 800fc36:	1a80      	subs	r0, r0, r2
 800fc38:	bd10      	pop	{r4, pc}
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d1f3      	bne.n	800fc26 <strncmp+0xa>
 800fc3e:	e7fa      	b.n	800fc36 <strncmp+0x1a>
 800fc40:	4610      	mov	r0, r2
 800fc42:	e7f9      	b.n	800fc38 <strncmp+0x1c>

0800fc44 <strncpy>:
 800fc44:	b510      	push	{r4, lr}
 800fc46:	3901      	subs	r1, #1
 800fc48:	4603      	mov	r3, r0
 800fc4a:	b132      	cbz	r2, 800fc5a <strncpy+0x16>
 800fc4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fc50:	f803 4b01 	strb.w	r4, [r3], #1
 800fc54:	3a01      	subs	r2, #1
 800fc56:	2c00      	cmp	r4, #0
 800fc58:	d1f7      	bne.n	800fc4a <strncpy+0x6>
 800fc5a:	441a      	add	r2, r3
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d100      	bne.n	800fc64 <strncpy+0x20>
 800fc62:	bd10      	pop	{r4, pc}
 800fc64:	f803 1b01 	strb.w	r1, [r3], #1
 800fc68:	e7f9      	b.n	800fc5e <strncpy+0x1a>
	...

0800fc6c <_strtol_l.constprop.0>:
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc72:	d001      	beq.n	800fc78 <_strtol_l.constprop.0+0xc>
 800fc74:	2b24      	cmp	r3, #36	; 0x24
 800fc76:	d906      	bls.n	800fc86 <_strtol_l.constprop.0+0x1a>
 800fc78:	f7ff fe3e 	bl	800f8f8 <__errno>
 800fc7c:	2316      	movs	r3, #22
 800fc7e:	6003      	str	r3, [r0, #0]
 800fc80:	2000      	movs	r0, #0
 800fc82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fd6c <_strtol_l.constprop.0+0x100>
 800fc8a:	460d      	mov	r5, r1
 800fc8c:	462e      	mov	r6, r5
 800fc8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc92:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fc96:	f017 0708 	ands.w	r7, r7, #8
 800fc9a:	d1f7      	bne.n	800fc8c <_strtol_l.constprop.0+0x20>
 800fc9c:	2c2d      	cmp	r4, #45	; 0x2d
 800fc9e:	d132      	bne.n	800fd06 <_strtol_l.constprop.0+0x9a>
 800fca0:	782c      	ldrb	r4, [r5, #0]
 800fca2:	2701      	movs	r7, #1
 800fca4:	1cb5      	adds	r5, r6, #2
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d05b      	beq.n	800fd62 <_strtol_l.constprop.0+0xf6>
 800fcaa:	2b10      	cmp	r3, #16
 800fcac:	d109      	bne.n	800fcc2 <_strtol_l.constprop.0+0x56>
 800fcae:	2c30      	cmp	r4, #48	; 0x30
 800fcb0:	d107      	bne.n	800fcc2 <_strtol_l.constprop.0+0x56>
 800fcb2:	782c      	ldrb	r4, [r5, #0]
 800fcb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fcb8:	2c58      	cmp	r4, #88	; 0x58
 800fcba:	d14d      	bne.n	800fd58 <_strtol_l.constprop.0+0xec>
 800fcbc:	786c      	ldrb	r4, [r5, #1]
 800fcbe:	2310      	movs	r3, #16
 800fcc0:	3502      	adds	r5, #2
 800fcc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fcc6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fcca:	f04f 0c00 	mov.w	ip, #0
 800fcce:	fbb8 f9f3 	udiv	r9, r8, r3
 800fcd2:	4666      	mov	r6, ip
 800fcd4:	fb03 8a19 	mls	sl, r3, r9, r8
 800fcd8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fcdc:	f1be 0f09 	cmp.w	lr, #9
 800fce0:	d816      	bhi.n	800fd10 <_strtol_l.constprop.0+0xa4>
 800fce2:	4674      	mov	r4, lr
 800fce4:	42a3      	cmp	r3, r4
 800fce6:	dd24      	ble.n	800fd32 <_strtol_l.constprop.0+0xc6>
 800fce8:	f1bc 0f00 	cmp.w	ip, #0
 800fcec:	db1e      	blt.n	800fd2c <_strtol_l.constprop.0+0xc0>
 800fcee:	45b1      	cmp	r9, r6
 800fcf0:	d31c      	bcc.n	800fd2c <_strtol_l.constprop.0+0xc0>
 800fcf2:	d101      	bne.n	800fcf8 <_strtol_l.constprop.0+0x8c>
 800fcf4:	45a2      	cmp	sl, r4
 800fcf6:	db19      	blt.n	800fd2c <_strtol_l.constprop.0+0xc0>
 800fcf8:	fb06 4603 	mla	r6, r6, r3, r4
 800fcfc:	f04f 0c01 	mov.w	ip, #1
 800fd00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd04:	e7e8      	b.n	800fcd8 <_strtol_l.constprop.0+0x6c>
 800fd06:	2c2b      	cmp	r4, #43	; 0x2b
 800fd08:	bf04      	itt	eq
 800fd0a:	782c      	ldrbeq	r4, [r5, #0]
 800fd0c:	1cb5      	addeq	r5, r6, #2
 800fd0e:	e7ca      	b.n	800fca6 <_strtol_l.constprop.0+0x3a>
 800fd10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fd14:	f1be 0f19 	cmp.w	lr, #25
 800fd18:	d801      	bhi.n	800fd1e <_strtol_l.constprop.0+0xb2>
 800fd1a:	3c37      	subs	r4, #55	; 0x37
 800fd1c:	e7e2      	b.n	800fce4 <_strtol_l.constprop.0+0x78>
 800fd1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fd22:	f1be 0f19 	cmp.w	lr, #25
 800fd26:	d804      	bhi.n	800fd32 <_strtol_l.constprop.0+0xc6>
 800fd28:	3c57      	subs	r4, #87	; 0x57
 800fd2a:	e7db      	b.n	800fce4 <_strtol_l.constprop.0+0x78>
 800fd2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800fd30:	e7e6      	b.n	800fd00 <_strtol_l.constprop.0+0x94>
 800fd32:	f1bc 0f00 	cmp.w	ip, #0
 800fd36:	da05      	bge.n	800fd44 <_strtol_l.constprop.0+0xd8>
 800fd38:	2322      	movs	r3, #34	; 0x22
 800fd3a:	6003      	str	r3, [r0, #0]
 800fd3c:	4646      	mov	r6, r8
 800fd3e:	b942      	cbnz	r2, 800fd52 <_strtol_l.constprop.0+0xe6>
 800fd40:	4630      	mov	r0, r6
 800fd42:	e79e      	b.n	800fc82 <_strtol_l.constprop.0+0x16>
 800fd44:	b107      	cbz	r7, 800fd48 <_strtol_l.constprop.0+0xdc>
 800fd46:	4276      	negs	r6, r6
 800fd48:	2a00      	cmp	r2, #0
 800fd4a:	d0f9      	beq.n	800fd40 <_strtol_l.constprop.0+0xd4>
 800fd4c:	f1bc 0f00 	cmp.w	ip, #0
 800fd50:	d000      	beq.n	800fd54 <_strtol_l.constprop.0+0xe8>
 800fd52:	1e69      	subs	r1, r5, #1
 800fd54:	6011      	str	r1, [r2, #0]
 800fd56:	e7f3      	b.n	800fd40 <_strtol_l.constprop.0+0xd4>
 800fd58:	2430      	movs	r4, #48	; 0x30
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d1b1      	bne.n	800fcc2 <_strtol_l.constprop.0+0x56>
 800fd5e:	2308      	movs	r3, #8
 800fd60:	e7af      	b.n	800fcc2 <_strtol_l.constprop.0+0x56>
 800fd62:	2c30      	cmp	r4, #48	; 0x30
 800fd64:	d0a5      	beq.n	800fcb2 <_strtol_l.constprop.0+0x46>
 800fd66:	230a      	movs	r3, #10
 800fd68:	e7ab      	b.n	800fcc2 <_strtol_l.constprop.0+0x56>
 800fd6a:	bf00      	nop
 800fd6c:	0801193a 	.word	0x0801193a

0800fd70 <strtol>:
 800fd70:	4613      	mov	r3, r2
 800fd72:	460a      	mov	r2, r1
 800fd74:	4601      	mov	r1, r0
 800fd76:	4802      	ldr	r0, [pc, #8]	; (800fd80 <strtol+0x10>)
 800fd78:	6800      	ldr	r0, [r0, #0]
 800fd7a:	f7ff bf77 	b.w	800fc6c <_strtol_l.constprop.0>
 800fd7e:	bf00      	nop
 800fd80:	2000010c 	.word	0x2000010c

0800fd84 <__utoa>:
 800fd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd86:	4c1f      	ldr	r4, [pc, #124]	; (800fe04 <__utoa+0x80>)
 800fd88:	b08b      	sub	sp, #44	; 0x2c
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	460b      	mov	r3, r1
 800fd8e:	466e      	mov	r6, sp
 800fd90:	f104 0c20 	add.w	ip, r4, #32
 800fd94:	6820      	ldr	r0, [r4, #0]
 800fd96:	6861      	ldr	r1, [r4, #4]
 800fd98:	4637      	mov	r7, r6
 800fd9a:	c703      	stmia	r7!, {r0, r1}
 800fd9c:	3408      	adds	r4, #8
 800fd9e:	4564      	cmp	r4, ip
 800fda0:	463e      	mov	r6, r7
 800fda2:	d1f7      	bne.n	800fd94 <__utoa+0x10>
 800fda4:	7921      	ldrb	r1, [r4, #4]
 800fda6:	7139      	strb	r1, [r7, #4]
 800fda8:	1e91      	subs	r1, r2, #2
 800fdaa:	6820      	ldr	r0, [r4, #0]
 800fdac:	6038      	str	r0, [r7, #0]
 800fdae:	2922      	cmp	r1, #34	; 0x22
 800fdb0:	f04f 0100 	mov.w	r1, #0
 800fdb4:	d904      	bls.n	800fdc0 <__utoa+0x3c>
 800fdb6:	7019      	strb	r1, [r3, #0]
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4618      	mov	r0, r3
 800fdbc:	b00b      	add	sp, #44	; 0x2c
 800fdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdc0:	1e58      	subs	r0, r3, #1
 800fdc2:	4684      	mov	ip, r0
 800fdc4:	fbb5 f7f2 	udiv	r7, r5, r2
 800fdc8:	fb02 5617 	mls	r6, r2, r7, r5
 800fdcc:	3628      	adds	r6, #40	; 0x28
 800fdce:	446e      	add	r6, sp
 800fdd0:	460c      	mov	r4, r1
 800fdd2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800fdd6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800fdda:	462e      	mov	r6, r5
 800fddc:	42b2      	cmp	r2, r6
 800fdde:	f101 0101 	add.w	r1, r1, #1
 800fde2:	463d      	mov	r5, r7
 800fde4:	d9ee      	bls.n	800fdc4 <__utoa+0x40>
 800fde6:	2200      	movs	r2, #0
 800fde8:	545a      	strb	r2, [r3, r1]
 800fdea:	1919      	adds	r1, r3, r4
 800fdec:	1aa5      	subs	r5, r4, r2
 800fdee:	42aa      	cmp	r2, r5
 800fdf0:	dae3      	bge.n	800fdba <__utoa+0x36>
 800fdf2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800fdf6:	780e      	ldrb	r6, [r1, #0]
 800fdf8:	7006      	strb	r6, [r0, #0]
 800fdfa:	3201      	adds	r2, #1
 800fdfc:	f801 5901 	strb.w	r5, [r1], #-1
 800fe00:	e7f4      	b.n	800fdec <__utoa+0x68>
 800fe02:	bf00      	nop
 800fe04:	08011914 	.word	0x08011914

0800fe08 <__malloc_lock>:
 800fe08:	4801      	ldr	r0, [pc, #4]	; (800fe10 <__malloc_lock+0x8>)
 800fe0a:	f7ff bdb9 	b.w	800f980 <__retarget_lock_acquire_recursive>
 800fe0e:	bf00      	nop
 800fe10:	2000bb3c 	.word	0x2000bb3c

0800fe14 <__malloc_unlock>:
 800fe14:	4801      	ldr	r0, [pc, #4]	; (800fe1c <__malloc_unlock+0x8>)
 800fe16:	f7ff bdb4 	b.w	800f982 <__retarget_lock_release_recursive>
 800fe1a:	bf00      	nop
 800fe1c:	2000bb3c 	.word	0x2000bb3c

0800fe20 <_free_r>:
 800fe20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe22:	2900      	cmp	r1, #0
 800fe24:	d044      	beq.n	800feb0 <_free_r+0x90>
 800fe26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe2a:	9001      	str	r0, [sp, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f1a1 0404 	sub.w	r4, r1, #4
 800fe32:	bfb8      	it	lt
 800fe34:	18e4      	addlt	r4, r4, r3
 800fe36:	f7ff ffe7 	bl	800fe08 <__malloc_lock>
 800fe3a:	4a1e      	ldr	r2, [pc, #120]	; (800feb4 <_free_r+0x94>)
 800fe3c:	9801      	ldr	r0, [sp, #4]
 800fe3e:	6813      	ldr	r3, [r2, #0]
 800fe40:	b933      	cbnz	r3, 800fe50 <_free_r+0x30>
 800fe42:	6063      	str	r3, [r4, #4]
 800fe44:	6014      	str	r4, [r2, #0]
 800fe46:	b003      	add	sp, #12
 800fe48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe4c:	f7ff bfe2 	b.w	800fe14 <__malloc_unlock>
 800fe50:	42a3      	cmp	r3, r4
 800fe52:	d908      	bls.n	800fe66 <_free_r+0x46>
 800fe54:	6825      	ldr	r5, [r4, #0]
 800fe56:	1961      	adds	r1, r4, r5
 800fe58:	428b      	cmp	r3, r1
 800fe5a:	bf01      	itttt	eq
 800fe5c:	6819      	ldreq	r1, [r3, #0]
 800fe5e:	685b      	ldreq	r3, [r3, #4]
 800fe60:	1949      	addeq	r1, r1, r5
 800fe62:	6021      	streq	r1, [r4, #0]
 800fe64:	e7ed      	b.n	800fe42 <_free_r+0x22>
 800fe66:	461a      	mov	r2, r3
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	b10b      	cbz	r3, 800fe70 <_free_r+0x50>
 800fe6c:	42a3      	cmp	r3, r4
 800fe6e:	d9fa      	bls.n	800fe66 <_free_r+0x46>
 800fe70:	6811      	ldr	r1, [r2, #0]
 800fe72:	1855      	adds	r5, r2, r1
 800fe74:	42a5      	cmp	r5, r4
 800fe76:	d10b      	bne.n	800fe90 <_free_r+0x70>
 800fe78:	6824      	ldr	r4, [r4, #0]
 800fe7a:	4421      	add	r1, r4
 800fe7c:	1854      	adds	r4, r2, r1
 800fe7e:	42a3      	cmp	r3, r4
 800fe80:	6011      	str	r1, [r2, #0]
 800fe82:	d1e0      	bne.n	800fe46 <_free_r+0x26>
 800fe84:	681c      	ldr	r4, [r3, #0]
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	6053      	str	r3, [r2, #4]
 800fe8a:	4421      	add	r1, r4
 800fe8c:	6011      	str	r1, [r2, #0]
 800fe8e:	e7da      	b.n	800fe46 <_free_r+0x26>
 800fe90:	d902      	bls.n	800fe98 <_free_r+0x78>
 800fe92:	230c      	movs	r3, #12
 800fe94:	6003      	str	r3, [r0, #0]
 800fe96:	e7d6      	b.n	800fe46 <_free_r+0x26>
 800fe98:	6825      	ldr	r5, [r4, #0]
 800fe9a:	1961      	adds	r1, r4, r5
 800fe9c:	428b      	cmp	r3, r1
 800fe9e:	bf04      	itt	eq
 800fea0:	6819      	ldreq	r1, [r3, #0]
 800fea2:	685b      	ldreq	r3, [r3, #4]
 800fea4:	6063      	str	r3, [r4, #4]
 800fea6:	bf04      	itt	eq
 800fea8:	1949      	addeq	r1, r1, r5
 800feaa:	6021      	streq	r1, [r4, #0]
 800feac:	6054      	str	r4, [r2, #4]
 800feae:	e7ca      	b.n	800fe46 <_free_r+0x26>
 800feb0:	b003      	add	sp, #12
 800feb2:	bd30      	pop	{r4, r5, pc}
 800feb4:	2000bb40 	.word	0x2000bb40

0800feb8 <__ssputs_r>:
 800feb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800febc:	688e      	ldr	r6, [r1, #8]
 800febe:	429e      	cmp	r6, r3
 800fec0:	4682      	mov	sl, r0
 800fec2:	460c      	mov	r4, r1
 800fec4:	4690      	mov	r8, r2
 800fec6:	461f      	mov	r7, r3
 800fec8:	d838      	bhi.n	800ff3c <__ssputs_r+0x84>
 800feca:	898a      	ldrh	r2, [r1, #12]
 800fecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fed0:	d032      	beq.n	800ff38 <__ssputs_r+0x80>
 800fed2:	6825      	ldr	r5, [r4, #0]
 800fed4:	6909      	ldr	r1, [r1, #16]
 800fed6:	eba5 0901 	sub.w	r9, r5, r1
 800feda:	6965      	ldr	r5, [r4, #20]
 800fedc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fee4:	3301      	adds	r3, #1
 800fee6:	444b      	add	r3, r9
 800fee8:	106d      	asrs	r5, r5, #1
 800feea:	429d      	cmp	r5, r3
 800feec:	bf38      	it	cc
 800feee:	461d      	movcc	r5, r3
 800fef0:	0553      	lsls	r3, r2, #21
 800fef2:	d531      	bpl.n	800ff58 <__ssputs_r+0xa0>
 800fef4:	4629      	mov	r1, r5
 800fef6:	f7ff fd7b 	bl	800f9f0 <_malloc_r>
 800fefa:	4606      	mov	r6, r0
 800fefc:	b950      	cbnz	r0, 800ff14 <__ssputs_r+0x5c>
 800fefe:	230c      	movs	r3, #12
 800ff00:	f8ca 3000 	str.w	r3, [sl]
 800ff04:	89a3      	ldrh	r3, [r4, #12]
 800ff06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff0a:	81a3      	strh	r3, [r4, #12]
 800ff0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff14:	6921      	ldr	r1, [r4, #16]
 800ff16:	464a      	mov	r2, r9
 800ff18:	f7ff fd34 	bl	800f984 <memcpy>
 800ff1c:	89a3      	ldrh	r3, [r4, #12]
 800ff1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff26:	81a3      	strh	r3, [r4, #12]
 800ff28:	6126      	str	r6, [r4, #16]
 800ff2a:	6165      	str	r5, [r4, #20]
 800ff2c:	444e      	add	r6, r9
 800ff2e:	eba5 0509 	sub.w	r5, r5, r9
 800ff32:	6026      	str	r6, [r4, #0]
 800ff34:	60a5      	str	r5, [r4, #8]
 800ff36:	463e      	mov	r6, r7
 800ff38:	42be      	cmp	r6, r7
 800ff3a:	d900      	bls.n	800ff3e <__ssputs_r+0x86>
 800ff3c:	463e      	mov	r6, r7
 800ff3e:	6820      	ldr	r0, [r4, #0]
 800ff40:	4632      	mov	r2, r6
 800ff42:	4641      	mov	r1, r8
 800ff44:	f000 faa8 	bl	8010498 <memmove>
 800ff48:	68a3      	ldr	r3, [r4, #8]
 800ff4a:	1b9b      	subs	r3, r3, r6
 800ff4c:	60a3      	str	r3, [r4, #8]
 800ff4e:	6823      	ldr	r3, [r4, #0]
 800ff50:	4433      	add	r3, r6
 800ff52:	6023      	str	r3, [r4, #0]
 800ff54:	2000      	movs	r0, #0
 800ff56:	e7db      	b.n	800ff10 <__ssputs_r+0x58>
 800ff58:	462a      	mov	r2, r5
 800ff5a:	f000 fab7 	bl	80104cc <_realloc_r>
 800ff5e:	4606      	mov	r6, r0
 800ff60:	2800      	cmp	r0, #0
 800ff62:	d1e1      	bne.n	800ff28 <__ssputs_r+0x70>
 800ff64:	6921      	ldr	r1, [r4, #16]
 800ff66:	4650      	mov	r0, sl
 800ff68:	f7ff ff5a 	bl	800fe20 <_free_r>
 800ff6c:	e7c7      	b.n	800fefe <__ssputs_r+0x46>
	...

0800ff70 <_svfiprintf_r>:
 800ff70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff74:	4698      	mov	r8, r3
 800ff76:	898b      	ldrh	r3, [r1, #12]
 800ff78:	061b      	lsls	r3, r3, #24
 800ff7a:	b09d      	sub	sp, #116	; 0x74
 800ff7c:	4607      	mov	r7, r0
 800ff7e:	460d      	mov	r5, r1
 800ff80:	4614      	mov	r4, r2
 800ff82:	d50e      	bpl.n	800ffa2 <_svfiprintf_r+0x32>
 800ff84:	690b      	ldr	r3, [r1, #16]
 800ff86:	b963      	cbnz	r3, 800ffa2 <_svfiprintf_r+0x32>
 800ff88:	2140      	movs	r1, #64	; 0x40
 800ff8a:	f7ff fd31 	bl	800f9f0 <_malloc_r>
 800ff8e:	6028      	str	r0, [r5, #0]
 800ff90:	6128      	str	r0, [r5, #16]
 800ff92:	b920      	cbnz	r0, 800ff9e <_svfiprintf_r+0x2e>
 800ff94:	230c      	movs	r3, #12
 800ff96:	603b      	str	r3, [r7, #0]
 800ff98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff9c:	e0d1      	b.n	8010142 <_svfiprintf_r+0x1d2>
 800ff9e:	2340      	movs	r3, #64	; 0x40
 800ffa0:	616b      	str	r3, [r5, #20]
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	9309      	str	r3, [sp, #36]	; 0x24
 800ffa6:	2320      	movs	r3, #32
 800ffa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffac:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffb0:	2330      	movs	r3, #48	; 0x30
 800ffb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801015c <_svfiprintf_r+0x1ec>
 800ffb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffba:	f04f 0901 	mov.w	r9, #1
 800ffbe:	4623      	mov	r3, r4
 800ffc0:	469a      	mov	sl, r3
 800ffc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffc6:	b10a      	cbz	r2, 800ffcc <_svfiprintf_r+0x5c>
 800ffc8:	2a25      	cmp	r2, #37	; 0x25
 800ffca:	d1f9      	bne.n	800ffc0 <_svfiprintf_r+0x50>
 800ffcc:	ebba 0b04 	subs.w	fp, sl, r4
 800ffd0:	d00b      	beq.n	800ffea <_svfiprintf_r+0x7a>
 800ffd2:	465b      	mov	r3, fp
 800ffd4:	4622      	mov	r2, r4
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	4638      	mov	r0, r7
 800ffda:	f7ff ff6d 	bl	800feb8 <__ssputs_r>
 800ffde:	3001      	adds	r0, #1
 800ffe0:	f000 80aa 	beq.w	8010138 <_svfiprintf_r+0x1c8>
 800ffe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffe6:	445a      	add	r2, fp
 800ffe8:	9209      	str	r2, [sp, #36]	; 0x24
 800ffea:	f89a 3000 	ldrb.w	r3, [sl]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	f000 80a2 	beq.w	8010138 <_svfiprintf_r+0x1c8>
 800fff4:	2300      	movs	r3, #0
 800fff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fffe:	f10a 0a01 	add.w	sl, sl, #1
 8010002:	9304      	str	r3, [sp, #16]
 8010004:	9307      	str	r3, [sp, #28]
 8010006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801000a:	931a      	str	r3, [sp, #104]	; 0x68
 801000c:	4654      	mov	r4, sl
 801000e:	2205      	movs	r2, #5
 8010010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010014:	4851      	ldr	r0, [pc, #324]	; (801015c <_svfiprintf_r+0x1ec>)
 8010016:	f7f0 f95b 	bl	80002d0 <memchr>
 801001a:	9a04      	ldr	r2, [sp, #16]
 801001c:	b9d8      	cbnz	r0, 8010056 <_svfiprintf_r+0xe6>
 801001e:	06d0      	lsls	r0, r2, #27
 8010020:	bf44      	itt	mi
 8010022:	2320      	movmi	r3, #32
 8010024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010028:	0711      	lsls	r1, r2, #28
 801002a:	bf44      	itt	mi
 801002c:	232b      	movmi	r3, #43	; 0x2b
 801002e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010032:	f89a 3000 	ldrb.w	r3, [sl]
 8010036:	2b2a      	cmp	r3, #42	; 0x2a
 8010038:	d015      	beq.n	8010066 <_svfiprintf_r+0xf6>
 801003a:	9a07      	ldr	r2, [sp, #28]
 801003c:	4654      	mov	r4, sl
 801003e:	2000      	movs	r0, #0
 8010040:	f04f 0c0a 	mov.w	ip, #10
 8010044:	4621      	mov	r1, r4
 8010046:	f811 3b01 	ldrb.w	r3, [r1], #1
 801004a:	3b30      	subs	r3, #48	; 0x30
 801004c:	2b09      	cmp	r3, #9
 801004e:	d94e      	bls.n	80100ee <_svfiprintf_r+0x17e>
 8010050:	b1b0      	cbz	r0, 8010080 <_svfiprintf_r+0x110>
 8010052:	9207      	str	r2, [sp, #28]
 8010054:	e014      	b.n	8010080 <_svfiprintf_r+0x110>
 8010056:	eba0 0308 	sub.w	r3, r0, r8
 801005a:	fa09 f303 	lsl.w	r3, r9, r3
 801005e:	4313      	orrs	r3, r2
 8010060:	9304      	str	r3, [sp, #16]
 8010062:	46a2      	mov	sl, r4
 8010064:	e7d2      	b.n	801000c <_svfiprintf_r+0x9c>
 8010066:	9b03      	ldr	r3, [sp, #12]
 8010068:	1d19      	adds	r1, r3, #4
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	9103      	str	r1, [sp, #12]
 801006e:	2b00      	cmp	r3, #0
 8010070:	bfbb      	ittet	lt
 8010072:	425b      	neglt	r3, r3
 8010074:	f042 0202 	orrlt.w	r2, r2, #2
 8010078:	9307      	strge	r3, [sp, #28]
 801007a:	9307      	strlt	r3, [sp, #28]
 801007c:	bfb8      	it	lt
 801007e:	9204      	strlt	r2, [sp, #16]
 8010080:	7823      	ldrb	r3, [r4, #0]
 8010082:	2b2e      	cmp	r3, #46	; 0x2e
 8010084:	d10c      	bne.n	80100a0 <_svfiprintf_r+0x130>
 8010086:	7863      	ldrb	r3, [r4, #1]
 8010088:	2b2a      	cmp	r3, #42	; 0x2a
 801008a:	d135      	bne.n	80100f8 <_svfiprintf_r+0x188>
 801008c:	9b03      	ldr	r3, [sp, #12]
 801008e:	1d1a      	adds	r2, r3, #4
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	9203      	str	r2, [sp, #12]
 8010094:	2b00      	cmp	r3, #0
 8010096:	bfb8      	it	lt
 8010098:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801009c:	3402      	adds	r4, #2
 801009e:	9305      	str	r3, [sp, #20]
 80100a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801016c <_svfiprintf_r+0x1fc>
 80100a4:	7821      	ldrb	r1, [r4, #0]
 80100a6:	2203      	movs	r2, #3
 80100a8:	4650      	mov	r0, sl
 80100aa:	f7f0 f911 	bl	80002d0 <memchr>
 80100ae:	b140      	cbz	r0, 80100c2 <_svfiprintf_r+0x152>
 80100b0:	2340      	movs	r3, #64	; 0x40
 80100b2:	eba0 000a 	sub.w	r0, r0, sl
 80100b6:	fa03 f000 	lsl.w	r0, r3, r0
 80100ba:	9b04      	ldr	r3, [sp, #16]
 80100bc:	4303      	orrs	r3, r0
 80100be:	3401      	adds	r4, #1
 80100c0:	9304      	str	r3, [sp, #16]
 80100c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100c6:	4826      	ldr	r0, [pc, #152]	; (8010160 <_svfiprintf_r+0x1f0>)
 80100c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100cc:	2206      	movs	r2, #6
 80100ce:	f7f0 f8ff 	bl	80002d0 <memchr>
 80100d2:	2800      	cmp	r0, #0
 80100d4:	d038      	beq.n	8010148 <_svfiprintf_r+0x1d8>
 80100d6:	4b23      	ldr	r3, [pc, #140]	; (8010164 <_svfiprintf_r+0x1f4>)
 80100d8:	bb1b      	cbnz	r3, 8010122 <_svfiprintf_r+0x1b2>
 80100da:	9b03      	ldr	r3, [sp, #12]
 80100dc:	3307      	adds	r3, #7
 80100de:	f023 0307 	bic.w	r3, r3, #7
 80100e2:	3308      	adds	r3, #8
 80100e4:	9303      	str	r3, [sp, #12]
 80100e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100e8:	4433      	add	r3, r6
 80100ea:	9309      	str	r3, [sp, #36]	; 0x24
 80100ec:	e767      	b.n	800ffbe <_svfiprintf_r+0x4e>
 80100ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80100f2:	460c      	mov	r4, r1
 80100f4:	2001      	movs	r0, #1
 80100f6:	e7a5      	b.n	8010044 <_svfiprintf_r+0xd4>
 80100f8:	2300      	movs	r3, #0
 80100fa:	3401      	adds	r4, #1
 80100fc:	9305      	str	r3, [sp, #20]
 80100fe:	4619      	mov	r1, r3
 8010100:	f04f 0c0a 	mov.w	ip, #10
 8010104:	4620      	mov	r0, r4
 8010106:	f810 2b01 	ldrb.w	r2, [r0], #1
 801010a:	3a30      	subs	r2, #48	; 0x30
 801010c:	2a09      	cmp	r2, #9
 801010e:	d903      	bls.n	8010118 <_svfiprintf_r+0x1a8>
 8010110:	2b00      	cmp	r3, #0
 8010112:	d0c5      	beq.n	80100a0 <_svfiprintf_r+0x130>
 8010114:	9105      	str	r1, [sp, #20]
 8010116:	e7c3      	b.n	80100a0 <_svfiprintf_r+0x130>
 8010118:	fb0c 2101 	mla	r1, ip, r1, r2
 801011c:	4604      	mov	r4, r0
 801011e:	2301      	movs	r3, #1
 8010120:	e7f0      	b.n	8010104 <_svfiprintf_r+0x194>
 8010122:	ab03      	add	r3, sp, #12
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	462a      	mov	r2, r5
 8010128:	4b0f      	ldr	r3, [pc, #60]	; (8010168 <_svfiprintf_r+0x1f8>)
 801012a:	a904      	add	r1, sp, #16
 801012c:	4638      	mov	r0, r7
 801012e:	f3af 8000 	nop.w
 8010132:	1c42      	adds	r2, r0, #1
 8010134:	4606      	mov	r6, r0
 8010136:	d1d6      	bne.n	80100e6 <_svfiprintf_r+0x176>
 8010138:	89ab      	ldrh	r3, [r5, #12]
 801013a:	065b      	lsls	r3, r3, #25
 801013c:	f53f af2c 	bmi.w	800ff98 <_svfiprintf_r+0x28>
 8010140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010142:	b01d      	add	sp, #116	; 0x74
 8010144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010148:	ab03      	add	r3, sp, #12
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	462a      	mov	r2, r5
 801014e:	4b06      	ldr	r3, [pc, #24]	; (8010168 <_svfiprintf_r+0x1f8>)
 8010150:	a904      	add	r1, sp, #16
 8010152:	4638      	mov	r0, r7
 8010154:	f000 f87a 	bl	801024c <_printf_i>
 8010158:	e7eb      	b.n	8010132 <_svfiprintf_r+0x1c2>
 801015a:	bf00      	nop
 801015c:	08011a3a 	.word	0x08011a3a
 8010160:	08011a44 	.word	0x08011a44
 8010164:	00000000 	.word	0x00000000
 8010168:	0800feb9 	.word	0x0800feb9
 801016c:	08011a40 	.word	0x08011a40

08010170 <_printf_common>:
 8010170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010174:	4616      	mov	r6, r2
 8010176:	4699      	mov	r9, r3
 8010178:	688a      	ldr	r2, [r1, #8]
 801017a:	690b      	ldr	r3, [r1, #16]
 801017c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010180:	4293      	cmp	r3, r2
 8010182:	bfb8      	it	lt
 8010184:	4613      	movlt	r3, r2
 8010186:	6033      	str	r3, [r6, #0]
 8010188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801018c:	4607      	mov	r7, r0
 801018e:	460c      	mov	r4, r1
 8010190:	b10a      	cbz	r2, 8010196 <_printf_common+0x26>
 8010192:	3301      	adds	r3, #1
 8010194:	6033      	str	r3, [r6, #0]
 8010196:	6823      	ldr	r3, [r4, #0]
 8010198:	0699      	lsls	r1, r3, #26
 801019a:	bf42      	ittt	mi
 801019c:	6833      	ldrmi	r3, [r6, #0]
 801019e:	3302      	addmi	r3, #2
 80101a0:	6033      	strmi	r3, [r6, #0]
 80101a2:	6825      	ldr	r5, [r4, #0]
 80101a4:	f015 0506 	ands.w	r5, r5, #6
 80101a8:	d106      	bne.n	80101b8 <_printf_common+0x48>
 80101aa:	f104 0a19 	add.w	sl, r4, #25
 80101ae:	68e3      	ldr	r3, [r4, #12]
 80101b0:	6832      	ldr	r2, [r6, #0]
 80101b2:	1a9b      	subs	r3, r3, r2
 80101b4:	42ab      	cmp	r3, r5
 80101b6:	dc26      	bgt.n	8010206 <_printf_common+0x96>
 80101b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80101bc:	1e13      	subs	r3, r2, #0
 80101be:	6822      	ldr	r2, [r4, #0]
 80101c0:	bf18      	it	ne
 80101c2:	2301      	movne	r3, #1
 80101c4:	0692      	lsls	r2, r2, #26
 80101c6:	d42b      	bmi.n	8010220 <_printf_common+0xb0>
 80101c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101cc:	4649      	mov	r1, r9
 80101ce:	4638      	mov	r0, r7
 80101d0:	47c0      	blx	r8
 80101d2:	3001      	adds	r0, #1
 80101d4:	d01e      	beq.n	8010214 <_printf_common+0xa4>
 80101d6:	6823      	ldr	r3, [r4, #0]
 80101d8:	68e5      	ldr	r5, [r4, #12]
 80101da:	6832      	ldr	r2, [r6, #0]
 80101dc:	f003 0306 	and.w	r3, r3, #6
 80101e0:	2b04      	cmp	r3, #4
 80101e2:	bf08      	it	eq
 80101e4:	1aad      	subeq	r5, r5, r2
 80101e6:	68a3      	ldr	r3, [r4, #8]
 80101e8:	6922      	ldr	r2, [r4, #16]
 80101ea:	bf0c      	ite	eq
 80101ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101f0:	2500      	movne	r5, #0
 80101f2:	4293      	cmp	r3, r2
 80101f4:	bfc4      	itt	gt
 80101f6:	1a9b      	subgt	r3, r3, r2
 80101f8:	18ed      	addgt	r5, r5, r3
 80101fa:	2600      	movs	r6, #0
 80101fc:	341a      	adds	r4, #26
 80101fe:	42b5      	cmp	r5, r6
 8010200:	d11a      	bne.n	8010238 <_printf_common+0xc8>
 8010202:	2000      	movs	r0, #0
 8010204:	e008      	b.n	8010218 <_printf_common+0xa8>
 8010206:	2301      	movs	r3, #1
 8010208:	4652      	mov	r2, sl
 801020a:	4649      	mov	r1, r9
 801020c:	4638      	mov	r0, r7
 801020e:	47c0      	blx	r8
 8010210:	3001      	adds	r0, #1
 8010212:	d103      	bne.n	801021c <_printf_common+0xac>
 8010214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021c:	3501      	adds	r5, #1
 801021e:	e7c6      	b.n	80101ae <_printf_common+0x3e>
 8010220:	18e1      	adds	r1, r4, r3
 8010222:	1c5a      	adds	r2, r3, #1
 8010224:	2030      	movs	r0, #48	; 0x30
 8010226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801022a:	4422      	add	r2, r4
 801022c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010234:	3302      	adds	r3, #2
 8010236:	e7c7      	b.n	80101c8 <_printf_common+0x58>
 8010238:	2301      	movs	r3, #1
 801023a:	4622      	mov	r2, r4
 801023c:	4649      	mov	r1, r9
 801023e:	4638      	mov	r0, r7
 8010240:	47c0      	blx	r8
 8010242:	3001      	adds	r0, #1
 8010244:	d0e6      	beq.n	8010214 <_printf_common+0xa4>
 8010246:	3601      	adds	r6, #1
 8010248:	e7d9      	b.n	80101fe <_printf_common+0x8e>
	...

0801024c <_printf_i>:
 801024c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010250:	7e0f      	ldrb	r7, [r1, #24]
 8010252:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010254:	2f78      	cmp	r7, #120	; 0x78
 8010256:	4691      	mov	r9, r2
 8010258:	4680      	mov	r8, r0
 801025a:	460c      	mov	r4, r1
 801025c:	469a      	mov	sl, r3
 801025e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010262:	d807      	bhi.n	8010274 <_printf_i+0x28>
 8010264:	2f62      	cmp	r7, #98	; 0x62
 8010266:	d80a      	bhi.n	801027e <_printf_i+0x32>
 8010268:	2f00      	cmp	r7, #0
 801026a:	f000 80d8 	beq.w	801041e <_printf_i+0x1d2>
 801026e:	2f58      	cmp	r7, #88	; 0x58
 8010270:	f000 80a3 	beq.w	80103ba <_printf_i+0x16e>
 8010274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801027c:	e03a      	b.n	80102f4 <_printf_i+0xa8>
 801027e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010282:	2b15      	cmp	r3, #21
 8010284:	d8f6      	bhi.n	8010274 <_printf_i+0x28>
 8010286:	a101      	add	r1, pc, #4	; (adr r1, 801028c <_printf_i+0x40>)
 8010288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801028c:	080102e5 	.word	0x080102e5
 8010290:	080102f9 	.word	0x080102f9
 8010294:	08010275 	.word	0x08010275
 8010298:	08010275 	.word	0x08010275
 801029c:	08010275 	.word	0x08010275
 80102a0:	08010275 	.word	0x08010275
 80102a4:	080102f9 	.word	0x080102f9
 80102a8:	08010275 	.word	0x08010275
 80102ac:	08010275 	.word	0x08010275
 80102b0:	08010275 	.word	0x08010275
 80102b4:	08010275 	.word	0x08010275
 80102b8:	08010405 	.word	0x08010405
 80102bc:	08010329 	.word	0x08010329
 80102c0:	080103e7 	.word	0x080103e7
 80102c4:	08010275 	.word	0x08010275
 80102c8:	08010275 	.word	0x08010275
 80102cc:	08010427 	.word	0x08010427
 80102d0:	08010275 	.word	0x08010275
 80102d4:	08010329 	.word	0x08010329
 80102d8:	08010275 	.word	0x08010275
 80102dc:	08010275 	.word	0x08010275
 80102e0:	080103ef 	.word	0x080103ef
 80102e4:	682b      	ldr	r3, [r5, #0]
 80102e6:	1d1a      	adds	r2, r3, #4
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	602a      	str	r2, [r5, #0]
 80102ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80102f4:	2301      	movs	r3, #1
 80102f6:	e0a3      	b.n	8010440 <_printf_i+0x1f4>
 80102f8:	6820      	ldr	r0, [r4, #0]
 80102fa:	6829      	ldr	r1, [r5, #0]
 80102fc:	0606      	lsls	r6, r0, #24
 80102fe:	f101 0304 	add.w	r3, r1, #4
 8010302:	d50a      	bpl.n	801031a <_printf_i+0xce>
 8010304:	680e      	ldr	r6, [r1, #0]
 8010306:	602b      	str	r3, [r5, #0]
 8010308:	2e00      	cmp	r6, #0
 801030a:	da03      	bge.n	8010314 <_printf_i+0xc8>
 801030c:	232d      	movs	r3, #45	; 0x2d
 801030e:	4276      	negs	r6, r6
 8010310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010314:	485e      	ldr	r0, [pc, #376]	; (8010490 <_printf_i+0x244>)
 8010316:	230a      	movs	r3, #10
 8010318:	e019      	b.n	801034e <_printf_i+0x102>
 801031a:	680e      	ldr	r6, [r1, #0]
 801031c:	602b      	str	r3, [r5, #0]
 801031e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010322:	bf18      	it	ne
 8010324:	b236      	sxthne	r6, r6
 8010326:	e7ef      	b.n	8010308 <_printf_i+0xbc>
 8010328:	682b      	ldr	r3, [r5, #0]
 801032a:	6820      	ldr	r0, [r4, #0]
 801032c:	1d19      	adds	r1, r3, #4
 801032e:	6029      	str	r1, [r5, #0]
 8010330:	0601      	lsls	r1, r0, #24
 8010332:	d501      	bpl.n	8010338 <_printf_i+0xec>
 8010334:	681e      	ldr	r6, [r3, #0]
 8010336:	e002      	b.n	801033e <_printf_i+0xf2>
 8010338:	0646      	lsls	r6, r0, #25
 801033a:	d5fb      	bpl.n	8010334 <_printf_i+0xe8>
 801033c:	881e      	ldrh	r6, [r3, #0]
 801033e:	4854      	ldr	r0, [pc, #336]	; (8010490 <_printf_i+0x244>)
 8010340:	2f6f      	cmp	r7, #111	; 0x6f
 8010342:	bf0c      	ite	eq
 8010344:	2308      	moveq	r3, #8
 8010346:	230a      	movne	r3, #10
 8010348:	2100      	movs	r1, #0
 801034a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801034e:	6865      	ldr	r5, [r4, #4]
 8010350:	60a5      	str	r5, [r4, #8]
 8010352:	2d00      	cmp	r5, #0
 8010354:	bfa2      	ittt	ge
 8010356:	6821      	ldrge	r1, [r4, #0]
 8010358:	f021 0104 	bicge.w	r1, r1, #4
 801035c:	6021      	strge	r1, [r4, #0]
 801035e:	b90e      	cbnz	r6, 8010364 <_printf_i+0x118>
 8010360:	2d00      	cmp	r5, #0
 8010362:	d04d      	beq.n	8010400 <_printf_i+0x1b4>
 8010364:	4615      	mov	r5, r2
 8010366:	fbb6 f1f3 	udiv	r1, r6, r3
 801036a:	fb03 6711 	mls	r7, r3, r1, r6
 801036e:	5dc7      	ldrb	r7, [r0, r7]
 8010370:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010374:	4637      	mov	r7, r6
 8010376:	42bb      	cmp	r3, r7
 8010378:	460e      	mov	r6, r1
 801037a:	d9f4      	bls.n	8010366 <_printf_i+0x11a>
 801037c:	2b08      	cmp	r3, #8
 801037e:	d10b      	bne.n	8010398 <_printf_i+0x14c>
 8010380:	6823      	ldr	r3, [r4, #0]
 8010382:	07de      	lsls	r6, r3, #31
 8010384:	d508      	bpl.n	8010398 <_printf_i+0x14c>
 8010386:	6923      	ldr	r3, [r4, #16]
 8010388:	6861      	ldr	r1, [r4, #4]
 801038a:	4299      	cmp	r1, r3
 801038c:	bfde      	ittt	le
 801038e:	2330      	movle	r3, #48	; 0x30
 8010390:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010394:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010398:	1b52      	subs	r2, r2, r5
 801039a:	6122      	str	r2, [r4, #16]
 801039c:	f8cd a000 	str.w	sl, [sp]
 80103a0:	464b      	mov	r3, r9
 80103a2:	aa03      	add	r2, sp, #12
 80103a4:	4621      	mov	r1, r4
 80103a6:	4640      	mov	r0, r8
 80103a8:	f7ff fee2 	bl	8010170 <_printf_common>
 80103ac:	3001      	adds	r0, #1
 80103ae:	d14c      	bne.n	801044a <_printf_i+0x1fe>
 80103b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103b4:	b004      	add	sp, #16
 80103b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ba:	4835      	ldr	r0, [pc, #212]	; (8010490 <_printf_i+0x244>)
 80103bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80103c0:	6829      	ldr	r1, [r5, #0]
 80103c2:	6823      	ldr	r3, [r4, #0]
 80103c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80103c8:	6029      	str	r1, [r5, #0]
 80103ca:	061d      	lsls	r5, r3, #24
 80103cc:	d514      	bpl.n	80103f8 <_printf_i+0x1ac>
 80103ce:	07df      	lsls	r7, r3, #31
 80103d0:	bf44      	itt	mi
 80103d2:	f043 0320 	orrmi.w	r3, r3, #32
 80103d6:	6023      	strmi	r3, [r4, #0]
 80103d8:	b91e      	cbnz	r6, 80103e2 <_printf_i+0x196>
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	f023 0320 	bic.w	r3, r3, #32
 80103e0:	6023      	str	r3, [r4, #0]
 80103e2:	2310      	movs	r3, #16
 80103e4:	e7b0      	b.n	8010348 <_printf_i+0xfc>
 80103e6:	6823      	ldr	r3, [r4, #0]
 80103e8:	f043 0320 	orr.w	r3, r3, #32
 80103ec:	6023      	str	r3, [r4, #0]
 80103ee:	2378      	movs	r3, #120	; 0x78
 80103f0:	4828      	ldr	r0, [pc, #160]	; (8010494 <_printf_i+0x248>)
 80103f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80103f6:	e7e3      	b.n	80103c0 <_printf_i+0x174>
 80103f8:	0659      	lsls	r1, r3, #25
 80103fa:	bf48      	it	mi
 80103fc:	b2b6      	uxthmi	r6, r6
 80103fe:	e7e6      	b.n	80103ce <_printf_i+0x182>
 8010400:	4615      	mov	r5, r2
 8010402:	e7bb      	b.n	801037c <_printf_i+0x130>
 8010404:	682b      	ldr	r3, [r5, #0]
 8010406:	6826      	ldr	r6, [r4, #0]
 8010408:	6961      	ldr	r1, [r4, #20]
 801040a:	1d18      	adds	r0, r3, #4
 801040c:	6028      	str	r0, [r5, #0]
 801040e:	0635      	lsls	r5, r6, #24
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	d501      	bpl.n	8010418 <_printf_i+0x1cc>
 8010414:	6019      	str	r1, [r3, #0]
 8010416:	e002      	b.n	801041e <_printf_i+0x1d2>
 8010418:	0670      	lsls	r0, r6, #25
 801041a:	d5fb      	bpl.n	8010414 <_printf_i+0x1c8>
 801041c:	8019      	strh	r1, [r3, #0]
 801041e:	2300      	movs	r3, #0
 8010420:	6123      	str	r3, [r4, #16]
 8010422:	4615      	mov	r5, r2
 8010424:	e7ba      	b.n	801039c <_printf_i+0x150>
 8010426:	682b      	ldr	r3, [r5, #0]
 8010428:	1d1a      	adds	r2, r3, #4
 801042a:	602a      	str	r2, [r5, #0]
 801042c:	681d      	ldr	r5, [r3, #0]
 801042e:	6862      	ldr	r2, [r4, #4]
 8010430:	2100      	movs	r1, #0
 8010432:	4628      	mov	r0, r5
 8010434:	f7ef ff4c 	bl	80002d0 <memchr>
 8010438:	b108      	cbz	r0, 801043e <_printf_i+0x1f2>
 801043a:	1b40      	subs	r0, r0, r5
 801043c:	6060      	str	r0, [r4, #4]
 801043e:	6863      	ldr	r3, [r4, #4]
 8010440:	6123      	str	r3, [r4, #16]
 8010442:	2300      	movs	r3, #0
 8010444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010448:	e7a8      	b.n	801039c <_printf_i+0x150>
 801044a:	6923      	ldr	r3, [r4, #16]
 801044c:	462a      	mov	r2, r5
 801044e:	4649      	mov	r1, r9
 8010450:	4640      	mov	r0, r8
 8010452:	47d0      	blx	sl
 8010454:	3001      	adds	r0, #1
 8010456:	d0ab      	beq.n	80103b0 <_printf_i+0x164>
 8010458:	6823      	ldr	r3, [r4, #0]
 801045a:	079b      	lsls	r3, r3, #30
 801045c:	d413      	bmi.n	8010486 <_printf_i+0x23a>
 801045e:	68e0      	ldr	r0, [r4, #12]
 8010460:	9b03      	ldr	r3, [sp, #12]
 8010462:	4298      	cmp	r0, r3
 8010464:	bfb8      	it	lt
 8010466:	4618      	movlt	r0, r3
 8010468:	e7a4      	b.n	80103b4 <_printf_i+0x168>
 801046a:	2301      	movs	r3, #1
 801046c:	4632      	mov	r2, r6
 801046e:	4649      	mov	r1, r9
 8010470:	4640      	mov	r0, r8
 8010472:	47d0      	blx	sl
 8010474:	3001      	adds	r0, #1
 8010476:	d09b      	beq.n	80103b0 <_printf_i+0x164>
 8010478:	3501      	adds	r5, #1
 801047a:	68e3      	ldr	r3, [r4, #12]
 801047c:	9903      	ldr	r1, [sp, #12]
 801047e:	1a5b      	subs	r3, r3, r1
 8010480:	42ab      	cmp	r3, r5
 8010482:	dcf2      	bgt.n	801046a <_printf_i+0x21e>
 8010484:	e7eb      	b.n	801045e <_printf_i+0x212>
 8010486:	2500      	movs	r5, #0
 8010488:	f104 0619 	add.w	r6, r4, #25
 801048c:	e7f5      	b.n	801047a <_printf_i+0x22e>
 801048e:	bf00      	nop
 8010490:	08011a4b 	.word	0x08011a4b
 8010494:	08011a5c 	.word	0x08011a5c

08010498 <memmove>:
 8010498:	4288      	cmp	r0, r1
 801049a:	b510      	push	{r4, lr}
 801049c:	eb01 0402 	add.w	r4, r1, r2
 80104a0:	d902      	bls.n	80104a8 <memmove+0x10>
 80104a2:	4284      	cmp	r4, r0
 80104a4:	4623      	mov	r3, r4
 80104a6:	d807      	bhi.n	80104b8 <memmove+0x20>
 80104a8:	1e43      	subs	r3, r0, #1
 80104aa:	42a1      	cmp	r1, r4
 80104ac:	d008      	beq.n	80104c0 <memmove+0x28>
 80104ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80104b6:	e7f8      	b.n	80104aa <memmove+0x12>
 80104b8:	4402      	add	r2, r0
 80104ba:	4601      	mov	r1, r0
 80104bc:	428a      	cmp	r2, r1
 80104be:	d100      	bne.n	80104c2 <memmove+0x2a>
 80104c0:	bd10      	pop	{r4, pc}
 80104c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80104c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80104ca:	e7f7      	b.n	80104bc <memmove+0x24>

080104cc <_realloc_r>:
 80104cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d0:	4680      	mov	r8, r0
 80104d2:	4614      	mov	r4, r2
 80104d4:	460e      	mov	r6, r1
 80104d6:	b921      	cbnz	r1, 80104e2 <_realloc_r+0x16>
 80104d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104dc:	4611      	mov	r1, r2
 80104de:	f7ff ba87 	b.w	800f9f0 <_malloc_r>
 80104e2:	b92a      	cbnz	r2, 80104f0 <_realloc_r+0x24>
 80104e4:	f7ff fc9c 	bl	800fe20 <_free_r>
 80104e8:	4625      	mov	r5, r4
 80104ea:	4628      	mov	r0, r5
 80104ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104f0:	f000 f81b 	bl	801052a <_malloc_usable_size_r>
 80104f4:	4284      	cmp	r4, r0
 80104f6:	4607      	mov	r7, r0
 80104f8:	d802      	bhi.n	8010500 <_realloc_r+0x34>
 80104fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80104fe:	d812      	bhi.n	8010526 <_realloc_r+0x5a>
 8010500:	4621      	mov	r1, r4
 8010502:	4640      	mov	r0, r8
 8010504:	f7ff fa74 	bl	800f9f0 <_malloc_r>
 8010508:	4605      	mov	r5, r0
 801050a:	2800      	cmp	r0, #0
 801050c:	d0ed      	beq.n	80104ea <_realloc_r+0x1e>
 801050e:	42bc      	cmp	r4, r7
 8010510:	4622      	mov	r2, r4
 8010512:	4631      	mov	r1, r6
 8010514:	bf28      	it	cs
 8010516:	463a      	movcs	r2, r7
 8010518:	f7ff fa34 	bl	800f984 <memcpy>
 801051c:	4631      	mov	r1, r6
 801051e:	4640      	mov	r0, r8
 8010520:	f7ff fc7e 	bl	800fe20 <_free_r>
 8010524:	e7e1      	b.n	80104ea <_realloc_r+0x1e>
 8010526:	4635      	mov	r5, r6
 8010528:	e7df      	b.n	80104ea <_realloc_r+0x1e>

0801052a <_malloc_usable_size_r>:
 801052a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801052e:	1f18      	subs	r0, r3, #4
 8010530:	2b00      	cmp	r3, #0
 8010532:	bfbc      	itt	lt
 8010534:	580b      	ldrlt	r3, [r1, r0]
 8010536:	18c0      	addlt	r0, r0, r3
 8010538:	4770      	bx	lr

0801053a <atan2f>:
 801053a:	f000 b81f 	b.w	801057c <__ieee754_atan2f>
	...

08010540 <sqrtf>:
 8010540:	b508      	push	{r3, lr}
 8010542:	ed2d 8b02 	vpush	{d8}
 8010546:	eeb0 8a40 	vmov.f32	s16, s0
 801054a:	f000 f8b7 	bl	80106bc <__ieee754_sqrtf>
 801054e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010556:	d60c      	bvs.n	8010572 <sqrtf+0x32>
 8010558:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010578 <sqrtf+0x38>
 801055c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010564:	d505      	bpl.n	8010572 <sqrtf+0x32>
 8010566:	f7ff f9c7 	bl	800f8f8 <__errno>
 801056a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801056e:	2321      	movs	r3, #33	; 0x21
 8010570:	6003      	str	r3, [r0, #0]
 8010572:	ecbd 8b02 	vpop	{d8}
 8010576:	bd08      	pop	{r3, pc}
 8010578:	00000000 	.word	0x00000000

0801057c <__ieee754_atan2f>:
 801057c:	ee10 2a90 	vmov	r2, s1
 8010580:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010584:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010588:	b510      	push	{r4, lr}
 801058a:	eef0 7a40 	vmov.f32	s15, s0
 801058e:	dc06      	bgt.n	801059e <__ieee754_atan2f+0x22>
 8010590:	ee10 0a10 	vmov	r0, s0
 8010594:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8010598:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801059c:	dd04      	ble.n	80105a8 <__ieee754_atan2f+0x2c>
 801059e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80105a2:	eeb0 0a67 	vmov.f32	s0, s15
 80105a6:	bd10      	pop	{r4, pc}
 80105a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80105ac:	d103      	bne.n	80105b6 <__ieee754_atan2f+0x3a>
 80105ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105b2:	f000 b887 	b.w	80106c4 <atanf>
 80105b6:	1794      	asrs	r4, r2, #30
 80105b8:	f004 0402 	and.w	r4, r4, #2
 80105bc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80105c0:	b943      	cbnz	r3, 80105d4 <__ieee754_atan2f+0x58>
 80105c2:	2c02      	cmp	r4, #2
 80105c4:	d05e      	beq.n	8010684 <__ieee754_atan2f+0x108>
 80105c6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010698 <__ieee754_atan2f+0x11c>
 80105ca:	2c03      	cmp	r4, #3
 80105cc:	bf08      	it	eq
 80105ce:	eef0 7a47 	vmoveq.f32	s15, s14
 80105d2:	e7e6      	b.n	80105a2 <__ieee754_atan2f+0x26>
 80105d4:	b941      	cbnz	r1, 80105e8 <__ieee754_atan2f+0x6c>
 80105d6:	eddf 7a31 	vldr	s15, [pc, #196]	; 801069c <__ieee754_atan2f+0x120>
 80105da:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80106a0 <__ieee754_atan2f+0x124>
 80105de:	2800      	cmp	r0, #0
 80105e0:	bfb8      	it	lt
 80105e2:	eef0 7a40 	vmovlt.f32	s15, s0
 80105e6:	e7dc      	b.n	80105a2 <__ieee754_atan2f+0x26>
 80105e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80105ec:	d110      	bne.n	8010610 <__ieee754_atan2f+0x94>
 80105ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80105f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80105f6:	d107      	bne.n	8010608 <__ieee754_atan2f+0x8c>
 80105f8:	2c02      	cmp	r4, #2
 80105fa:	d846      	bhi.n	801068a <__ieee754_atan2f+0x10e>
 80105fc:	4b29      	ldr	r3, [pc, #164]	; (80106a4 <__ieee754_atan2f+0x128>)
 80105fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010602:	edd4 7a00 	vldr	s15, [r4]
 8010606:	e7cc      	b.n	80105a2 <__ieee754_atan2f+0x26>
 8010608:	2c02      	cmp	r4, #2
 801060a:	d841      	bhi.n	8010690 <__ieee754_atan2f+0x114>
 801060c:	4b26      	ldr	r3, [pc, #152]	; (80106a8 <__ieee754_atan2f+0x12c>)
 801060e:	e7f6      	b.n	80105fe <__ieee754_atan2f+0x82>
 8010610:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010614:	d0df      	beq.n	80105d6 <__ieee754_atan2f+0x5a>
 8010616:	1a5b      	subs	r3, r3, r1
 8010618:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801061c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010620:	da1a      	bge.n	8010658 <__ieee754_atan2f+0xdc>
 8010622:	2a00      	cmp	r2, #0
 8010624:	da01      	bge.n	801062a <__ieee754_atan2f+0xae>
 8010626:	313c      	adds	r1, #60	; 0x3c
 8010628:	db19      	blt.n	801065e <__ieee754_atan2f+0xe2>
 801062a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801062e:	f000 f91d 	bl	801086c <fabsf>
 8010632:	f000 f847 	bl	80106c4 <atanf>
 8010636:	eef0 7a40 	vmov.f32	s15, s0
 801063a:	2c01      	cmp	r4, #1
 801063c:	d012      	beq.n	8010664 <__ieee754_atan2f+0xe8>
 801063e:	2c02      	cmp	r4, #2
 8010640:	d017      	beq.n	8010672 <__ieee754_atan2f+0xf6>
 8010642:	2c00      	cmp	r4, #0
 8010644:	d0ad      	beq.n	80105a2 <__ieee754_atan2f+0x26>
 8010646:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80106ac <__ieee754_atan2f+0x130>
 801064a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801064e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80106b0 <__ieee754_atan2f+0x134>
 8010652:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010656:	e7a4      	b.n	80105a2 <__ieee754_atan2f+0x26>
 8010658:	eddf 7a10 	vldr	s15, [pc, #64]	; 801069c <__ieee754_atan2f+0x120>
 801065c:	e7ed      	b.n	801063a <__ieee754_atan2f+0xbe>
 801065e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80106b4 <__ieee754_atan2f+0x138>
 8010662:	e7ea      	b.n	801063a <__ieee754_atan2f+0xbe>
 8010664:	ee17 3a90 	vmov	r3, s15
 8010668:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801066c:	ee07 3a90 	vmov	s15, r3
 8010670:	e797      	b.n	80105a2 <__ieee754_atan2f+0x26>
 8010672:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80106ac <__ieee754_atan2f+0x130>
 8010676:	ee77 7a80 	vadd.f32	s15, s15, s0
 801067a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80106b0 <__ieee754_atan2f+0x134>
 801067e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010682:	e78e      	b.n	80105a2 <__ieee754_atan2f+0x26>
 8010684:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80106b0 <__ieee754_atan2f+0x134>
 8010688:	e78b      	b.n	80105a2 <__ieee754_atan2f+0x26>
 801068a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80106b8 <__ieee754_atan2f+0x13c>
 801068e:	e788      	b.n	80105a2 <__ieee754_atan2f+0x26>
 8010690:	eddf 7a08 	vldr	s15, [pc, #32]	; 80106b4 <__ieee754_atan2f+0x138>
 8010694:	e785      	b.n	80105a2 <__ieee754_atan2f+0x26>
 8010696:	bf00      	nop
 8010698:	c0490fdb 	.word	0xc0490fdb
 801069c:	3fc90fdb 	.word	0x3fc90fdb
 80106a0:	bfc90fdb 	.word	0xbfc90fdb
 80106a4:	08011a70 	.word	0x08011a70
 80106a8:	08011a7c 	.word	0x08011a7c
 80106ac:	33bbbd2e 	.word	0x33bbbd2e
 80106b0:	40490fdb 	.word	0x40490fdb
 80106b4:	00000000 	.word	0x00000000
 80106b8:	3f490fdb 	.word	0x3f490fdb

080106bc <__ieee754_sqrtf>:
 80106bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80106c0:	4770      	bx	lr
	...

080106c4 <atanf>:
 80106c4:	b538      	push	{r3, r4, r5, lr}
 80106c6:	ee10 5a10 	vmov	r5, s0
 80106ca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80106ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80106d2:	eef0 7a40 	vmov.f32	s15, s0
 80106d6:	db10      	blt.n	80106fa <atanf+0x36>
 80106d8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80106dc:	dd04      	ble.n	80106e8 <atanf+0x24>
 80106de:	ee70 7a00 	vadd.f32	s15, s0, s0
 80106e2:	eeb0 0a67 	vmov.f32	s0, s15
 80106e6:	bd38      	pop	{r3, r4, r5, pc}
 80106e8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010820 <atanf+0x15c>
 80106ec:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010824 <atanf+0x160>
 80106f0:	2d00      	cmp	r5, #0
 80106f2:	bfd8      	it	le
 80106f4:	eef0 7a40 	vmovle.f32	s15, s0
 80106f8:	e7f3      	b.n	80106e2 <atanf+0x1e>
 80106fa:	4b4b      	ldr	r3, [pc, #300]	; (8010828 <atanf+0x164>)
 80106fc:	429c      	cmp	r4, r3
 80106fe:	dc10      	bgt.n	8010722 <atanf+0x5e>
 8010700:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8010704:	da0a      	bge.n	801071c <atanf+0x58>
 8010706:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801082c <atanf+0x168>
 801070a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801070e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010712:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071a:	dce2      	bgt.n	80106e2 <atanf+0x1e>
 801071c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010720:	e013      	b.n	801074a <atanf+0x86>
 8010722:	f000 f8a3 	bl	801086c <fabsf>
 8010726:	4b42      	ldr	r3, [pc, #264]	; (8010830 <atanf+0x16c>)
 8010728:	429c      	cmp	r4, r3
 801072a:	dc4f      	bgt.n	80107cc <atanf+0x108>
 801072c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010730:	429c      	cmp	r4, r3
 8010732:	dc41      	bgt.n	80107b8 <atanf+0xf4>
 8010734:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010738:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801073c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010740:	2300      	movs	r3, #0
 8010742:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010746:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801074a:	1c5a      	adds	r2, r3, #1
 801074c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010750:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010834 <atanf+0x170>
 8010754:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010838 <atanf+0x174>
 8010758:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801083c <atanf+0x178>
 801075c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010760:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010764:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010840 <atanf+0x17c>
 8010768:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801076c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8010844 <atanf+0x180>
 8010770:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010774:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010848 <atanf+0x184>
 8010778:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801077c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801084c <atanf+0x188>
 8010780:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010784:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010850 <atanf+0x18c>
 8010788:	eea6 5a87 	vfma.f32	s10, s13, s14
 801078c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010854 <atanf+0x190>
 8010790:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010794:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010858 <atanf+0x194>
 8010798:	eea7 5a26 	vfma.f32	s10, s14, s13
 801079c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801085c <atanf+0x198>
 80107a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80107a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80107a8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80107ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80107b0:	d121      	bne.n	80107f6 <atanf+0x132>
 80107b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80107b6:	e794      	b.n	80106e2 <atanf+0x1e>
 80107b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80107bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80107c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80107c4:	2301      	movs	r3, #1
 80107c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80107ca:	e7be      	b.n	801074a <atanf+0x86>
 80107cc:	4b24      	ldr	r3, [pc, #144]	; (8010860 <atanf+0x19c>)
 80107ce:	429c      	cmp	r4, r3
 80107d0:	dc0b      	bgt.n	80107ea <atanf+0x126>
 80107d2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80107d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80107da:	eea0 7a27 	vfma.f32	s14, s0, s15
 80107de:	2302      	movs	r3, #2
 80107e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80107e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107e8:	e7af      	b.n	801074a <atanf+0x86>
 80107ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80107ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80107f2:	2303      	movs	r3, #3
 80107f4:	e7a9      	b.n	801074a <atanf+0x86>
 80107f6:	4a1b      	ldr	r2, [pc, #108]	; (8010864 <atanf+0x1a0>)
 80107f8:	491b      	ldr	r1, [pc, #108]	; (8010868 <atanf+0x1a4>)
 80107fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80107fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010802:	ed93 0a00 	vldr	s0, [r3]
 8010806:	ee37 7a40 	vsub.f32	s14, s14, s0
 801080a:	ed92 0a00 	vldr	s0, [r2]
 801080e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010812:	2d00      	cmp	r5, #0
 8010814:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010818:	bfb8      	it	lt
 801081a:	eef1 7a67 	vneglt.f32	s15, s15
 801081e:	e760      	b.n	80106e2 <atanf+0x1e>
 8010820:	3fc90fdb 	.word	0x3fc90fdb
 8010824:	bfc90fdb 	.word	0xbfc90fdb
 8010828:	3edfffff 	.word	0x3edfffff
 801082c:	7149f2ca 	.word	0x7149f2ca
 8010830:	3f97ffff 	.word	0x3f97ffff
 8010834:	3c8569d7 	.word	0x3c8569d7
 8010838:	3d4bda59 	.word	0x3d4bda59
 801083c:	bd6ef16b 	.word	0xbd6ef16b
 8010840:	3d886b35 	.word	0x3d886b35
 8010844:	3dba2e6e 	.word	0x3dba2e6e
 8010848:	3e124925 	.word	0x3e124925
 801084c:	3eaaaaab 	.word	0x3eaaaaab
 8010850:	bd15a221 	.word	0xbd15a221
 8010854:	bd9d8795 	.word	0xbd9d8795
 8010858:	bde38e38 	.word	0xbde38e38
 801085c:	be4ccccd 	.word	0xbe4ccccd
 8010860:	401bffff 	.word	0x401bffff
 8010864:	08011a88 	.word	0x08011a88
 8010868:	08011a98 	.word	0x08011a98

0801086c <fabsf>:
 801086c:	ee10 3a10 	vmov	r3, s0
 8010870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010874:	ee00 3a10 	vmov	s0, r3
 8010878:	4770      	bx	lr
	...

0801087c <_init>:
 801087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801087e:	bf00      	nop
 8010880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010882:	bc08      	pop	{r3}
 8010884:	469e      	mov	lr, r3
 8010886:	4770      	bx	lr

08010888 <_fini>:
 8010888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088a:	bf00      	nop
 801088c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801088e:	bc08      	pop	{r3}
 8010890:	469e      	mov	lr, r3
 8010892:	4770      	bx	lr
