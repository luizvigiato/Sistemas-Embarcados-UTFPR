
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800a37c  0800a37c  0001a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a0  0800a4a0  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a0  0800a4a0  0001a4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4a8  0800a4a8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4ac  0800a4ac  0001a4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800a4b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aa84  20000164  0800a614  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000abe8  0800a614  0002abe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019aec  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004015  00000000  00000000  00039c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003dc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000602f  00000000  00000000  000401d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c0a  00000000  00000000  000461ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091afc  00000000  00000000  0005ce09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee905  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005284  00000000  00000000  000ee958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a364 	.word	0x0800a364

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800a364 	.word	0x0800a364

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <task_led>:
	int timeout;
}led_t;

led_t green_led;

void task_led(void *param){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	889b      	ldrh	r3, [r3, #4]
 80004f8:	4619      	mov	r1, r3
 80004fa:	4610      	mov	r0, r2
 80004fc:	f000 fcfb 	bl	8000ef6 <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4618      	mov	r0, r3
 8000506:	f007 fa8b 	bl	8007a20 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 800050a:	e7f1      	b.n	80004f0 <task_led+0xc>

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 f9ab 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f833 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f89d 	bl	8000658 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051e:	f005 fffb 	bl	8006518 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <main+0x58>)
 8000524:	2100      	movs	r1, #0
 8000526:	4810      	ldr	r0, [pc, #64]	; (8000568 <main+0x5c>)
 8000528:	f006 f840 	bl	80065ac <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a0f      	ldr	r2, [pc, #60]	; (800056c <main+0x60>)
 8000530:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <main+0x64>)
 8000534:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000538:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0x64>)
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <main+0x68>)
 800053e:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <main+0x64>)
 8000542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000546:	809a      	strh	r2, [r3, #4]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8000548:	2300      	movs	r3, #0
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	2301      	movs	r3, #1
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <main+0x64>)
 8000552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000556:	4908      	ldr	r1, [pc, #32]	; (8000578 <main+0x6c>)
 8000558:	4808      	ldr	r0, [pc, #32]	; (800057c <main+0x70>)
 800055a:	f007 f906 	bl	800776a <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055e:	f005 ffff 	bl	8006560 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x56>
 8000564:	0800a40c 	.word	0x0800a40c
 8000568:	080006fd 	.word	0x080006fd
 800056c:	20000180 	.word	0x20000180
 8000570:	20000184 	.word	0x20000184
 8000574:	40020800 	.word	0x40020800
 8000578:	0800a39c 	.word	0x0800a39c
 800057c:	080004e5 	.word	0x080004e5

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f009 fe1e 	bl	800a1d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a28      	ldr	r2, [pc, #160]	; (8000650 <SystemClock_Config+0xd0>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <SystemClock_Config+0xd0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd4>)
 80005ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005f4:	2319      	movs	r3, #25
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fe:	2304      	movs	r3, #4
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	4618      	mov	r0, r3
 800060c:	f001 ff0a 	bl	8002424 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000616:	f000 f88d 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f96c 	bl	8002914 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000642:	f000 f877 	bl	8000734 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_GPIO_Init+0x9c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_GPIO_Init+0x9c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <MX_GPIO_Init+0x9c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0x9c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <MX_GPIO_Init+0xa0>)
 80006ca:	f000 fbfb 	bl	8000ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_GPIO_Init+0xa0>)
 80006e8:	f000 fa68 	bl	8000bbc <HAL_GPIO_Init>

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020800 	.word	0x40020800

080006fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000704:	f008 ff82 	bl	800960c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8000708:	f008 ffb0 	bl	800966c <init_usb_rtos_obj>
	  if (len){
		  (void) CDC_Transmit_FS(buffer,(uint16_t) len);
	  }*/
	  //osDelay(250);
	  char data;
	  CDC_Receiveq_MS(&data,portMAX_DELAY);
 800070c:	f107 030f 	add.w	r3, r7, #15
 8000710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000714:	4618      	mov	r0, r3
 8000716:	f008 ffcf 	bl	80096b8 <CDC_Receiveq_MS>
	  (void) CDC_Transmit_FS((uint8_t *) "\n\r",2);
 800071a:	2102      	movs	r1, #2
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <StartDefaultTask+0x34>)
 800071e:	f009 f891 	bl	8009844 <CDC_Transmit_FS>
	  (void) CDC_Transmit_FS((uint8_t *) &data,1);
 8000722:	f107 030f 	add.w	r3, r7, #15
 8000726:	2101      	movs	r1, #1
 8000728:	4618      	mov	r0, r3
 800072a:	f009 f88b 	bl	8009844 <CDC_Transmit_FS>
  {
 800072e:	e7ed      	b.n	800070c <StartDefaultTask+0x10>
 8000730:	0800a3a8 	.word	0x0800a3a8

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_MspInit+0x54>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <HAL_MspInit+0x54>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x54>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <HAL_MspInit+0x54>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_MspInit+0x54>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	; 0x40
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_MspInit+0x54>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	210f      	movs	r1, #15
 8000782:	f06f 0001 	mvn.w	r0, #1
 8000786:	f000 f9e2 	bl	8000b4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f8a2 	bl	8000910 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007cc:	f007 fdb8 	bl	8008340 <xTaskGetSchedulerState>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d001      	beq.n	80007da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007d6:	f008 fc9f 	bl	8009118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <OTG_FS_IRQHandler+0x10>)
 80007e6:	f000 fcf0 	bl	80011ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000a4b4 	.word	0x2000a4b4

080007f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <SystemInit+0x20>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <SystemInit+0x20>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800081e:	490e      	ldr	r1, [pc, #56]	; (8000858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000834:	4c0b      	ldr	r4, [pc, #44]	; (8000864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000842:	f7ff ffd7 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000846:	f009 fc8f 	bl	800a168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084a:	f7ff fe5f 	bl	800050c <main>
  bx  lr    
 800084e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000850:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800085c:	0800a4b0 	.word	0x0800a4b0
  ldr r2, =_sbss
 8000860:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000864:	2000abe8 	.word	0x2000abe8

08000868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_Init+0x40>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_Init+0x40>)
 8000882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_Init+0x40>)
 800088e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f94f 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff ff4e 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023c00 	.word	0x40023c00

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f967 	bl	8000ba2 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ec:	f000 f92f 	bl	8000b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20000190 	.word	0x20000190

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000190 	.word	0x20000190

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff ffee 	bl	8000938 <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffde 	bl	8000938 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b18:	f7ff ff8e 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff29 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff3e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff8e 	bl	8000a8c <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff31 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffa2 	bl	8000af4 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	e159      	b.n	8000e8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	f040 8148 	bne.w	8000e86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d005      	beq.n	8000c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d130      	bne.n	8000c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d017      	beq.n	8000cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d123      	bne.n	8000d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	69b9      	ldr	r1, [r7, #24]
 8000cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0203 	and.w	r2, r3, #3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80a2 	beq.w	8000e86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b57      	ldr	r3, [pc, #348]	; (8000ea4 <HAL_GPIO_Init+0x2e8>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a56      	ldr	r2, [pc, #344]	; (8000ea4 <HAL_GPIO_Init+0x2e8>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <HAL_GPIO_Init+0x2e8>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5e:	4a52      	ldr	r2, [pc, #328]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a49      	ldr	r2, [pc, #292]	; (8000eac <HAL_GPIO_Init+0x2f0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d019      	beq.n	8000dbe <HAL_GPIO_Init+0x202>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_GPIO_Init+0x2f4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x1fe>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a47      	ldr	r2, [pc, #284]	; (8000eb4 <HAL_GPIO_Init+0x2f8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x1fa>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a46      	ldr	r2, [pc, #280]	; (8000eb8 <HAL_GPIO_Init+0x2fc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x1f6>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a45      	ldr	r2, [pc, #276]	; (8000ebc <HAL_GPIO_Init+0x300>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x1f2>
 8000daa:	2304      	movs	r3, #4
 8000dac:	e008      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000dae:	2307      	movs	r3, #7
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000db2:	2303      	movs	r3, #3
 8000db4:	e004      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e002      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	69fa      	ldr	r2, [r7, #28]
 8000dc2:	f002 0203 	and.w	r2, r2, #3
 8000dc6:	0092      	lsls	r2, r2, #2
 8000dc8:	4093      	lsls	r3, r2
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd0:	4935      	ldr	r1, [pc, #212]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e02:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e2c:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e56:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	f67f aea2 	bls.w	8000bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40020c00 	.word	0x40020c00
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40013c00 	.word	0x40013c00

08000ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed4:	787b      	ldrb	r3, [r7, #1]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eda:	887a      	ldrh	r2, [r7, #2]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ee0:	e003      	b.n	8000eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	041a      	lsls	r2, r3, #16
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	619a      	str	r2, [r3, #24]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f08:	887a      	ldrh	r2, [r7, #2]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	041a      	lsls	r2, r3, #16
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	400b      	ands	r3, r1
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	619a      	str	r2, [r3, #24]
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2c:	b08f      	sub	sp, #60	; 0x3c
 8000f2e:	af0a      	add	r7, sp, #40	; 0x28
 8000f30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e10f      	b.n	800115c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d106      	bne.n	8000f5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f008 fdf2 	bl	8009b40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 ff97 	bl	8002eae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	687e      	ldr	r6, [r7, #4]
 8000f88:	466d      	mov	r5, sp
 8000f8a:	f106 0410 	add.w	r4, r6, #16
 8000f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f9e:	1d33      	adds	r3, r6, #4
 8000fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa2:	6838      	ldr	r0, [r7, #0]
 8000fa4:	f001 fe6e 	bl	8002c84 <USB_CoreInit>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0d0      	b.n	800115c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 ff85 	bl	8002ed0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e04a      	b.n	8001062 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	333d      	adds	r3, #61	; 0x3d
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	333c      	adds	r3, #60	; 0x3c
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	b298      	uxth	r0, r3
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	3344      	adds	r3, #68	; 0x44
 8001008:	4602      	mov	r2, r0
 800100a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	3340      	adds	r3, #64	; 0x40
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3348      	adds	r3, #72	; 0x48
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	334c      	adds	r3, #76	; 0x4c
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	3354      	adds	r3, #84	; 0x54
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3301      	adds	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	d3af      	bcc.n	8000fcc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	e044      	b.n	80010fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	440b      	add	r3, r1
 80010d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	3301      	adds	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3b5      	bcc.n	8001072 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	687e      	ldr	r6, [r7, #4]
 800110e:	466d      	mov	r5, sp
 8001110:	f106 0410 	add.w	r4, r6, #16
 8001114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001120:	e885 0003 	stmia.w	r5, {r0, r1}
 8001124:	1d33      	adds	r3, r6, #4
 8001126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f001 ff1d 	bl	8002f68 <USB_DevInit>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2202      	movs	r2, #2
 8001138:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e00d      	b.n	800115c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f86c 	bl	8004232 <USB_DevDisconnect>

  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001164 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_PCD_Start+0x1c>
 800117c:	2302      	movs	r3, #2
 800117e:	e020      	b.n	80011c2 <HAL_PCD_Start+0x5e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	2b01      	cmp	r3, #1
 800118e:	d109      	bne.n	80011a4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fe6f 	bl	8002e8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 f81c 	bl	80041f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b08d      	sub	sp, #52	; 0x34
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 f8da 	bl	800439a <USB_GetMode>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f040 848a 	bne.w	8001b02 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 f83e 	bl	8004274 <USB_ReadInterrupts>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8480 	beq.w	8001b00 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f003 f82b 	bl	8004274 <USB_ReadInterrupts>
 800121e:	4603      	mov	r3, r0
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b02      	cmp	r3, #2
 8001226:	d107      	bne.n	8001238 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f002 0202 	and.w	r2, r2, #2
 8001236:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f003 f819 	bl	8004274 <USB_ReadInterrupts>
 8001242:	4603      	mov	r3, r0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	2b10      	cmp	r3, #16
 800124a:	d161      	bne.n	8001310 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0210 	bic.w	r2, r2, #16
 800125a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	f003 020f 	and.w	r2, r3, #15
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	3304      	adds	r3, #4
 800127a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	0c5b      	lsrs	r3, r3, #17
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	2b02      	cmp	r3, #2
 8001286:	d124      	bne.n	80012d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d035      	beq.n	8001300 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800129e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	6a38      	ldr	r0, [r7, #32]
 80012a8:	f002 fe50 	bl	8003f4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b8:	441a      	add	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ca:	441a      	add	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	621a      	str	r2, [r3, #32]
 80012d0:	e016      	b.n	8001300 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	0c5b      	lsrs	r3, r3, #17
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d110      	bne.n	8001300 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012e4:	2208      	movs	r2, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	6a38      	ldr	r0, [r7, #32]
 80012ea:	f002 fe2f 	bl	8003f4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fa:	441a      	add	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	699a      	ldr	r2, [r3, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0210 	orr.w	r2, r2, #16
 800130e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f002 ffad 	bl	8004274 <USB_ReadInterrupts>
 800131a:	4603      	mov	r3, r0
 800131c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001320:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001324:	f040 80a7 	bne.w	8001476 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 ffb2 	bl	800429a <USB_ReadDevAllOutEpInterrupt>
 8001336:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001338:	e099      	b.n	800146e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 808e 	beq.w	8001462 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f002 ffd6 	bl	8004302 <USB_ReadDevOutEPInterrupt>
 8001356:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00c      	beq.n	800137c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	015a      	lsls	r2, r3, #5
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800136e:	461a      	mov	r2, r3
 8001370:	2301      	movs	r3, #1
 8001372:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fec2 	bl	8002100 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00c      	beq.n	80013a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	4413      	add	r3, r2
 800138e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001392:	461a      	mov	r2, r3
 8001394:	2308      	movs	r3, #8
 8001396:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 ff98 	bl	80022d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	015a      	lsls	r2, r3, #5
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4413      	add	r3, r2
 80013b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b6:	461a      	mov	r2, r3
 80013b8:	2310      	movs	r3, #16
 80013ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d030      	beq.n	8001428 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	2b80      	cmp	r3, #128	; 0x80
 80013d0:	d109      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	3304      	adds	r3, #4
 80013fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	78db      	ldrb	r3, [r3, #3]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d108      	bne.n	8001416 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2200      	movs	r2, #0
 8001408:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4619      	mov	r1, r3
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f008 fc9b 	bl	8009d4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001422:	461a      	mov	r2, r3
 8001424:	2302      	movs	r3, #2
 8001426:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	015a      	lsls	r2, r3, #5
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	4413      	add	r3, r2
 800143a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143e:	461a      	mov	r2, r3
 8001440:	2320      	movs	r3, #32
 8001442:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	015a      	lsls	r2, r3, #5
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	4413      	add	r3, r2
 8001456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800145a:	461a      	mov	r2, r3
 800145c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001460:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	3301      	adds	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001470:	2b00      	cmp	r3, #0
 8001472:	f47f af62 	bne.w	800133a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fefa 	bl	8004274 <USB_ReadInterrupts>
 8001480:	4603      	mov	r3, r0
 8001482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001486:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800148a:	f040 80db 	bne.w	8001644 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f002 ff1b 	bl	80042ce <USB_ReadDevAllInEpInterrupt>
 8001498:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800149e:	e0cd      	b.n	800163c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80c2 	beq.w	8001630 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 ff41 	bl	800433e <USB_ReadDevInEPInterrupt>
 80014bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d057      	beq.n	8001578 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	2201      	movs	r2, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69f9      	ldr	r1, [r7, #28]
 80014e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014e8:	4013      	ands	r3, r2
 80014ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	015a      	lsls	r2, r3, #5
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	4413      	add	r3, r2
 80014f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f8:	461a      	mov	r2, r3
 80014fa:	2301      	movs	r3, #1
 80014fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d132      	bne.n	800156c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	334c      	adds	r3, #76	; 0x4c
 8001516:	6819      	ldr	r1, [r3, #0]
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4403      	add	r3, r0
 8001526:	3348      	adds	r3, #72	; 0x48
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4419      	add	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4403      	add	r3, r0
 800153a:	334c      	adds	r3, #76	; 0x4c
 800153c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	2b00      	cmp	r3, #0
 8001542:	d113      	bne.n	800156c <HAL_PCD_IRQHandler+0x3a2>
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	3354      	adds	r3, #84	; 0x54
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d108      	bne.n	800156c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001564:	461a      	mov	r2, r3
 8001566:	2101      	movs	r1, #1
 8001568:	f002 ff48 	bl	80043fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f008 fb65 	bl	8009c42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800158e:	461a      	mov	r2, r3
 8001590:	2308      	movs	r3, #8
 8001592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015aa:	461a      	mov	r2, r3
 80015ac:	2310      	movs	r3, #16
 80015ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c6:	461a      	mov	r2, r3
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d023      	beq.n	800161e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	6a38      	ldr	r0, [r7, #32]
 80015da:	f001 fe29 	bl	8003230 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	3338      	adds	r3, #56	; 0x38
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	3304      	adds	r3, #4
 80015f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	78db      	ldrb	r3, [r3, #3]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d108      	bne.n	800160c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2200      	movs	r2, #0
 80015fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f008 fbb2 	bl	8009d70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	015a      	lsls	r2, r3, #5
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4413      	add	r3, r2
 8001614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001618:	461a      	mov	r2, r3
 800161a:	2302      	movs	r3, #2
 800161c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fcdb 	bl	8001fe6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	3301      	adds	r3, #1
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	2b00      	cmp	r3, #0
 8001640:	f47f af2e 	bne.w	80014a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f002 fe13 	bl	8004274 <USB_ReadInterrupts>
 800164e:	4603      	mov	r3, r0
 8001650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001658:	d122      	bne.n	80016a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001674:	2b01      	cmp	r3, #1
 8001676:	d108      	bne.n	800168a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001680:	2100      	movs	r1, #0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fec2 	bl	800240c <HAL_PCDEx_LPM_Callback>
 8001688:	e002      	b.n	8001690 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f008 fb50 	bl	8009d30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800169e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 fde5 	bl	8004274 <USB_ReadInterrupts>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016b4:	d112      	bne.n	80016dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d102      	bne.n	80016cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f008 fb0c 	bl	8009ce4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016da:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fdc7 	bl	8004274 <USB_ReadInterrupts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f0:	f040 80b7 	bne.w	8001862 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2110      	movs	r1, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fd8e 	bl	8003230 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001718:	e046      	b.n	80017a8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	4413      	add	r3, r2
 8001722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001726:	461a      	mov	r2, r3
 8001728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800172c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800173e:	0151      	lsls	r1, r2, #5
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	440a      	add	r2, r1
 8001744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001748:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800174c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	015a      	lsls	r2, r3, #5
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	4413      	add	r3, r2
 8001756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175a:	461a      	mov	r2, r3
 800175c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001760:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001764:	015a      	lsls	r2, r3, #5
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	4413      	add	r3, r2
 800176a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001772:	0151      	lsls	r1, r2, #5
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	440a      	add	r2, r1
 8001778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800177c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001780:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	4413      	add	r3, r2
 800178a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001792:	0151      	lsls	r1, r2, #5
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	440a      	add	r2, r1
 8001798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800179c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	3301      	adds	r3, #1
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3b3      	bcc.n	800171a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d016      	beq.n	80017fc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017de:	f043 030b 	orr.w	r3, r3, #11
 80017e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f4:	f043 030b 	orr.w	r3, r3, #11
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	e015      	b.n	8001828 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800180a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800180e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001812:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001822:	f043 030b 	orr.w	r3, r3, #11
 8001826:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001836:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800183a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800184c:	461a      	mov	r2, r3
 800184e:	f002 fdd5 	bl	80043fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fd04 	bl	8004274 <USB_ReadInterrupts>
 800186c:	4603      	mov	r3, r0
 800186e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001876:	d124      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fd9a 	bl	80043b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f001 fd4f 	bl	800332a <USB_GetDevSpeed>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681c      	ldr	r4, [r3, #0]
 8001898:	f001 f9e8 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 800189c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	4620      	mov	r0, r4
 80018a8:	f001 fa4e 	bl	8002d48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f008 f9f0 	bl	8009c92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fcd4 	bl	8004274 <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d10a      	bne.n	80018ec <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f008 f9cd 	bl	8009c76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f002 0208 	and.w	r2, r2, #8
 80018ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fcbf 	bl	8004274 <USB_ReadInterrupts>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fc:	2b80      	cmp	r3, #128	; 0x80
 80018fe:	d122      	bne.n	8001946 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800190c:	2301      	movs	r3, #1
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
 8001910:	e014      	b.n	800193c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fb27 	bl	8001f84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3301      	adds	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001942:	429a      	cmp	r2, r3
 8001944:	d3e5      	bcc.n	8001912 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fc92 	bl	8004274 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800195a:	d13b      	bne.n	80019d4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800195c:	2301      	movs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
 8001960:	e02b      	b.n	80019ba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	015a      	lsls	r2, r3, #5
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	3340      	adds	r3, #64	; 0x40
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d115      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001988:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800198a:	2b00      	cmp	r3, #0
 800198c:	da12      	bge.n	80019b4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	333f      	adds	r3, #63	; 0x3f
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fae8 	bl	8001f84 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	3301      	adds	r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d3ce      	bcc.n	8001962 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 fc4b 	bl	8004274 <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019e8:	d155      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ea:	2301      	movs	r3, #1
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	e045      	b.n	8001a7c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d12e      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	da2b      	bge.n	8001a76 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d121      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10a      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6053      	str	r3, [r2, #4]
            break;
 8001a74:	e007      	b.n	8001a86 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	3301      	adds	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3b4      	bcc.n	80019f0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fbea 	bl	8004274 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aaa:	d10a      	bne.n	8001ac2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f008 f971 	bl	8009d94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fbd4 	bl	8004274 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d115      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f008 f961 	bl	8009db0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	e000      	b.n	8001b02 <HAL_PCD_IRQHandler+0x938>
      return;
 8001b00:	bf00      	nop
    }
  }
}
 8001b02:	3734      	adds	r7, #52	; 0x34
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}

08001b08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_PCD_SetAddress+0x1a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e013      	b.n	8001b4a <HAL_PCD_SetAddress+0x42>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fb32 	bl	80041a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	4608      	mov	r0, r1
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4603      	mov	r3, r0
 8001b62:	70fb      	strb	r3, [r7, #3]
 8001b64:	460b      	mov	r3, r1
 8001b66:	803b      	strh	r3, [r7, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	da0f      	bge.n	8001b98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	f003 020f 	and.w	r2, r3, #15
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	3338      	adds	r3, #56	; 0x38
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	705a      	strb	r2, [r3, #1]
 8001b96:	e00f      	b.n	8001bb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 020f 	and.w	r2, r3, #15
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bc4:	883a      	ldrh	r2, [r7, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	78ba      	ldrb	r2, [r7, #2]
 8001bce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001be2:	78bb      	ldrb	r3, [r7, #2]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d102      	bne.n	8001bee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_PCD_EP_Open+0xaa>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e00e      	b.n	8001c1a <HAL_PCD_EP_Open+0xc8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fbb2 	bl	8003374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c18:	7afb      	ldrb	r3, [r7, #11]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da0f      	bge.n	8001c56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	f003 020f 	and.w	r2, r3, #15
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	3338      	adds	r3, #56	; 0x38
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	705a      	strb	r2, [r3, #1]
 8001c54:	e00f      	b.n	8001c76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 020f 	and.w	r2, r3, #15
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_PCD_EP_Close+0x6e>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e00e      	b.n	8001cae <HAL_PCD_EP_Close+0x8c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 fbf0 	bl	8003484 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d102      	bne.n	8001d12 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	f001 fecf 	bl	8003acc <USB_EP0StartXfer>
 8001d2e:	e008      	b.n	8001d42 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	6979      	ldr	r1, [r7, #20]
 8001d3e:	f001 fc7d 	bl	800363c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	3338      	adds	r3, #56	; 0x38
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3304      	adds	r3, #4
 8001da2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2201      	movs	r2, #1
 8001dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d102      	bne.n	8001dd6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	6979      	ldr	r1, [r7, #20]
 8001dee:	f001 fe6d 	bl	8003acc <USB_EP0StartXfer>
 8001df2:	e008      	b.n	8001e06 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6979      	ldr	r1, [r7, #20]
 8001e02:	f001 fc1b 	bl	800363c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f003 020f 	and.w	r2, r3, #15
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d901      	bls.n	8001e2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e050      	b.n	8001ed0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da0f      	bge.n	8001e56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 020f 	and.w	r2, r3, #15
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	3338      	adds	r3, #56	; 0x38
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	705a      	strb	r2, [r3, #1]
 8001e54:	e00d      	b.n	8001e72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	3304      	adds	r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_PCD_EP_SetStall+0x82>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e01e      	b.n	8001ed0 <HAL_PCD_EP_SetStall+0xc0>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 f8ab 	bl	8003ffc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10a      	bne.n	8001ec6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	b2d9      	uxtb	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f002 fa9b 	bl	80043fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f003 020f 	and.w	r2, r3, #15
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d901      	bls.n	8001ef6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e042      	b.n	8001f7c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	da0f      	bge.n	8001f1e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 020f 	and.w	r2, r3, #15
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	3338      	adds	r3, #56	; 0x38
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	705a      	strb	r2, [r3, #1]
 8001f1c:	e00f      	b.n	8001f3e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 020f 	and.w	r2, r3, #15
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_PCD_EP_ClrStall+0x86>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e00e      	b.n	8001f7c <HAL_PCD_EP_ClrStall+0xa4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68f9      	ldr	r1, [r7, #12]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f002 f8b3 	bl	80040d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	da0c      	bge.n	8001fb2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	f003 020f 	and.w	r2, r3, #15
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	3338      	adds	r3, #56	; 0x38
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	3304      	adds	r3, #4
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e00c      	b.n	8001fcc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68f9      	ldr	r1, [r7, #12]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fed2 	bl	8003d7c <USB_EPStopXfer>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b08a      	sub	sp, #40	; 0x28
 8001fea:	af02      	add	r7, sp, #8
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	3338      	adds	r3, #56	; 0x38
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	3304      	adds	r3, #4
 800200c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a1a      	ldr	r2, [r3, #32]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	429a      	cmp	r2, r3
 8002018:	d901      	bls.n	800201e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e06c      	b.n	80020f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	429a      	cmp	r2, r3
 8002032:	d902      	bls.n	800203a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3303      	adds	r3, #3
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002042:	e02b      	b.n	800209c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	429a      	cmp	r2, r3
 8002058:	d902      	bls.n	8002060 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3303      	adds	r3, #3
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6919      	ldr	r1, [r3, #16]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002078:	b2db      	uxtb	r3, r3
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4603      	mov	r3, r0
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f001 ff26 	bl	8003ed0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	441a      	add	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	441a      	add	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d809      	bhi.n	80020c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a1a      	ldr	r2, [r3, #32]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d203      	bcs.n	80020c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1be      	bne.n	8002044 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d811      	bhi.n	80020f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	2201      	movs	r2, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	6939      	ldr	r1, [r7, #16]
 80020ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020f2:	4013      	ands	r3, r2
 80020f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	333c      	adds	r3, #60	; 0x3c
 8002118:	3304      	adds	r3, #4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d17b      	bne.n	800222e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	4a61      	ldr	r2, [pc, #388]	; (80022c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	f240 80b9 	bls.w	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80b3 	beq.w	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002162:	461a      	mov	r2, r3
 8002164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002168:	6093      	str	r3, [r2, #8]
 800216a:	e0a7      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002182:	461a      	mov	r2, r3
 8002184:	2320      	movs	r3, #32
 8002186:	6093      	str	r3, [r2, #8]
 8002188:	e098      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	f040 8093 	bne.w	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d90f      	bls.n	80021be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b4:	461a      	mov	r2, r3
 80021b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ba:	6093      	str	r3, [r2, #8]
 80021bc:	e07e      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	0159      	lsls	r1, r3, #5
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	440b      	add	r3, r1
 80021e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	1ad2      	subs	r2, r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d114      	bne.n	8002220 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d109      	bne.n	8002212 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002208:	461a      	mov	r2, r3
 800220a:	2101      	movs	r1, #1
 800220c:	f002 f8f6 	bl	80043fc <USB_EP0_OutStart>
 8002210:	e006      	b.n	8002220 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	441a      	add	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4619      	mov	r1, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f007 fcf0 	bl	8009c0c <HAL_PCD_DataOutStageCallback>
 800222c:	e046      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4a26      	ldr	r2, [pc, #152]	; (80022cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d124      	bne.n	8002280 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224c:	461a      	mov	r2, r3
 800224e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002252:	6093      	str	r3, [r2, #8]
 8002254:	e032      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	2320      	movs	r3, #32
 8002270:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f007 fcc7 	bl	8009c0c <HAL_PCD_DataOutStageCallback>
 800227e:	e01d      	b.n	80022bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d108      	bne.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022a8:	461a      	mov	r2, r3
 80022aa:	2100      	movs	r1, #0
 80022ac:	f002 f8a6 	bl	80043fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f007 fca8 	bl	8009c0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	4f54300a 	.word	0x4f54300a
 80022cc:	4f54310a 	.word	0x4f54310a

080022d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	333c      	adds	r3, #60	; 0x3c
 80022e8:	3304      	adds	r3, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a15      	ldr	r2, [pc, #84]	; (8002358 <PCD_EP_OutSetupPacket_int+0x88>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d90e      	bls.n	8002324 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231c:	461a      	mov	r2, r3
 800231e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002322:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f007 fc5f 	bl	8009be8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <PCD_EP_OutSetupPacket_int+0x88>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d90c      	bls.n	800234c <PCD_EP_OutSetupPacket_int+0x7c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002344:	461a      	mov	r2, r3
 8002346:	2101      	movs	r1, #1
 8002348:	f002 f858 	bl	80043fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	4f54300a 	.word	0x4f54300a

0800235c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	4613      	mov	r3, r2
 800236a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d107      	bne.n	800238a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800237a:	883b      	ldrh	r3, [r7, #0]
 800237c:	0419      	lsls	r1, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	430a      	orrs	r2, r1
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
 8002388:	e028      	b.n	80023dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4413      	add	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e00d      	b.n	80023ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	3340      	adds	r3, #64	; 0x40
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4413      	add	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	3301      	adds	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	3b01      	subs	r3, #1
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3ec      	bcc.n	800239e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023c4:	883b      	ldrh	r3, [r7, #0]
 80023c6:	0418      	lsls	r0, r3, #16
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	4302      	orrs	r2, r0
 80023d4:	3340      	adds	r3, #64	; 0x40
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e267      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d075      	beq.n	800252e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002442:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b04      	cmp	r3, #4
 800244c:	d00c      	beq.n	8002468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244e:	4b85      	ldr	r3, [pc, #532]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002456:	2b08      	cmp	r3, #8
 8002458:	d112      	bne.n	8002480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245a:	4b82      	ldr	r3, [pc, #520]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002466:	d10b      	bne.n	8002480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	4b7e      	ldr	r3, [pc, #504]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05b      	beq.n	800252c <HAL_RCC_OscConfig+0x108>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d157      	bne.n	800252c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e242      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002488:	d106      	bne.n	8002498 <HAL_RCC_OscConfig+0x74>
 800248a:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a75      	ldr	r2, [pc, #468]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e01d      	b.n	80024d4 <HAL_RCC_OscConfig+0xb0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x98>
 80024a2:	4b70      	ldr	r3, [pc, #448]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6f      	ldr	r2, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b6d      	ldr	r3, [pc, #436]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6c      	ldr	r2, [pc, #432]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0xb0>
 80024bc:	4b69      	ldr	r3, [pc, #420]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a68      	ldr	r2, [pc, #416]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fa2c 	bl	8000938 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe fa28 	bl	8000938 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e207      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0xc0>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fa18 	bl	8000938 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe fa14 	bl	8000938 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1f3      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	4b51      	ldr	r3, [pc, #324]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0xe8>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d063      	beq.n	8002602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253a:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00b      	beq.n	800255e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254e:	2b08      	cmp	r3, #8
 8002550:	d11c      	bne.n	800258c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d116      	bne.n	800258c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x152>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e1c7      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	e03a      	b.n	8002602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <HAL_RCC_OscConfig+0x244>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe f9cd 	bl	8000938 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe f9c9 	bl	8000938 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e1a8      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4925      	ldr	r1, [pc, #148]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e015      	b.n	8002602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x244>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe f9ac 	bl	8000938 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e4:	f7fe f9a8 	bl	8000938 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e187      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d036      	beq.n	800267c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_RCC_OscConfig+0x248>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe f98c 	bl	8000938 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe f988 	bl	8000938 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e167      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_OscConfig+0x240>)
 8002638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x200>
 8002642:	e01b      	b.n	800267c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_RCC_OscConfig+0x248>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7fe f975 	bl	8000938 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	e00e      	b.n	8002670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002652:	f7fe f971 	bl	8000938 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d907      	bls.n	8002670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e150      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
 8002664:	40023800 	.word	0x40023800
 8002668:	42470000 	.word	0x42470000
 800266c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	4b88      	ldr	r3, [pc, #544]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ea      	bne.n	8002652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8097 	beq.w	80027b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268e:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b7d      	ldr	r3, [pc, #500]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a7c      	ldr	r2, [pc, #496]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b7a      	ldr	r3, [pc, #488]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b77      	ldr	r3, [pc, #476]	; (8002898 <HAL_RCC_OscConfig+0x474>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b74      	ldr	r3, [pc, #464]	; (8002898 <HAL_RCC_OscConfig+0x474>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a73      	ldr	r2, [pc, #460]	; (8002898 <HAL_RCC_OscConfig+0x474>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe f931 	bl	8000938 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe f92d 	bl	8000938 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e10c      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <HAL_RCC_OscConfig+0x474>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x2ea>
 8002700:	4b64      	ldr	r3, [pc, #400]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a63      	ldr	r2, [pc, #396]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	e01c      	b.n	8002748 <HAL_RCC_OscConfig+0x324>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b05      	cmp	r3, #5
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x30c>
 8002716:	4b5f      	ldr	r3, [pc, #380]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a5e      	ldr	r2, [pc, #376]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a5b      	ldr	r2, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0x324>
 8002730:	4b58      	ldr	r3, [pc, #352]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a57      	ldr	r2, [pc, #348]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
 800273c:	4b55      	ldr	r3, [pc, #340]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a54      	ldr	r2, [pc, #336]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002742:	f023 0304 	bic.w	r3, r3, #4
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe f8f2 	bl	8000938 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fe f8ee 	bl	8000938 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0cb      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	4b49      	ldr	r3, [pc, #292]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0ee      	beq.n	8002758 <HAL_RCC_OscConfig+0x334>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7fe f8dc 	bl	8000938 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe f8d8 	bl	8000938 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0b5      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279a:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ee      	bne.n	8002784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ac:	4b39      	ldr	r3, [pc, #228]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a38      	ldr	r2, [pc, #224]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a1 	beq.w	8002904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c2:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d05c      	beq.n	8002888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d141      	bne.n	800285a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_RCC_OscConfig+0x478>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe f8ac 	bl	8000938 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe f8a8 	bl	8000938 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e087      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	019b      	lsls	r3, r3, #6
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	041b      	lsls	r3, r3, #16
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	491b      	ldr	r1, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x478>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe f881 	bl	8000938 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe f87d 	bl	8000938 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e05c      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x416>
 8002858:	e054      	b.n	8002904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_RCC_OscConfig+0x478>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe f86a 	bl	8000938 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe f866 	bl	8000938 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e045      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCC_OscConfig+0x470>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x444>
 8002886:	e03d      	b.n	8002904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e038      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
 8002894:	40023800 	.word	0x40023800
 8002898:	40007000 	.word	0x40007000
 800289c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x4ec>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d028      	beq.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d121      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d11a      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800

08002914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0cc      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b68      	ldr	r3, [pc, #416]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d90c      	bls.n	8002950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b65      	ldr	r3, [pc, #404]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0b8      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002968:	4b59      	ldr	r3, [pc, #356]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	494d      	ldr	r1, [pc, #308]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d044      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d119      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b3f      	ldr	r3, [pc, #252]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e06f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e067      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4934      	ldr	r1, [pc, #208]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7fd ff98 	bl	8000938 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fd ff94 	bl	8000938 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e04f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d20c      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e032      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4916      	ldr	r1, [pc, #88]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a9a:	f000 f821 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	490a      	ldr	r1, [pc, #40]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	5ccb      	ldrb	r3, [r1, r3]
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fef8 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023c00 	.word	0x40023c00
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	0800a430 	.word	0x0800a430
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000004 	.word	0x20000004

08002ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae4:	b090      	sub	sp, #64	; 0x40
 8002ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
 8002aec:	2300      	movs	r3, #0
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af0:	2300      	movs	r3, #0
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002af8:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d00d      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x40>
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	f200 80a1 	bhi.w	8002c4c <HAL_RCC_GetSysClockFreq+0x16c>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x34>
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d003      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b12:	e09b      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b18:	e09b      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b1a:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b1e:	e098      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b20:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2a:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d028      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b36:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	099b      	lsrs	r3, r3, #6
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	627a      	str	r2, [r7, #36]	; 0x24
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b4c:	fb03 f201 	mul.w	r2, r3, r1
 8002b50:	2300      	movs	r3, #0
 8002b52:	fb00 f303 	mul.w	r3, r0, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	4a43      	ldr	r2, [pc, #268]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b5a:	fba0 1202 	umull	r1, r2, r0, r2
 8002b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b60:	460a      	mov	r2, r1
 8002b62:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b66:	4413      	add	r3, r2
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	61fa      	str	r2, [r7, #28]
 8002b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b7a:	f7fd fb31 	bl	80001e0 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4613      	mov	r3, r2
 8002b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b86:	e053      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b88:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	2200      	movs	r2, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	617a      	str	r2, [r7, #20]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b9a:	f04f 0b00 	mov.w	fp, #0
 8002b9e:	4652      	mov	r2, sl
 8002ba0:	465b      	mov	r3, fp
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f04f 0100 	mov.w	r1, #0
 8002baa:	0159      	lsls	r1, r3, #5
 8002bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb0:	0150      	lsls	r0, r2, #5
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	ebb2 080a 	subs.w	r8, r2, sl
 8002bba:	eb63 090b 	sbc.w	r9, r3, fp
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bd2:	ebb2 0408 	subs.w	r4, r2, r8
 8002bd6:	eb63 0509 	sbc.w	r5, r3, r9
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	00eb      	lsls	r3, r5, #3
 8002be4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be8:	00e2      	lsls	r2, r4, #3
 8002bea:	4614      	mov	r4, r2
 8002bec:	461d      	mov	r5, r3
 8002bee:	eb14 030a 	adds.w	r3, r4, sl
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	eb45 030b 	adc.w	r3, r5, fp
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c06:	4629      	mov	r1, r5
 8002c08:	028b      	lsls	r3, r1, #10
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c10:	4621      	mov	r1, r4
 8002c12:	028a      	lsls	r2, r1, #10
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	60fa      	str	r2, [r7, #12]
 8002c20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c24:	f7fd fadc 	bl	80001e0 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3740      	adds	r7, #64	; 0x40
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	017d7840 	.word	0x017d7840

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c84:	b084      	sub	sp, #16
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	f107 001c 	add.w	r0, r7, #28
 8002c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d122      	bne.n	8002ce2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f001 fbee 	bl	80044b8 <USB_CoreReset>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e01a      	b.n	8002d18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f001 fbe2 	bl	80044b8 <USB_CoreReset>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
 8002d0a:	e005      	b.n	8002d18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10b      	bne.n	8002d36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f043 0206 	orr.w	r2, r3, #6
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d42:	b004      	add	sp, #16
 8002d44:	4770      	bx	lr
	...

08002d48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	4613      	mov	r3, r2
 8002d54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d165      	bne.n	8002e28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4a41      	ldr	r2, [pc, #260]	; (8002e64 <USB_SetTurnaroundTime+0x11c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d906      	bls.n	8002d72 <USB_SetTurnaroundTime+0x2a>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <USB_SetTurnaroundTime+0x120>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d202      	bcs.n	8002d72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e062      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <USB_SetTurnaroundTime+0x120>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d306      	bcc.n	8002d88 <USB_SetTurnaroundTime+0x40>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a3b      	ldr	r2, [pc, #236]	; (8002e6c <USB_SetTurnaroundTime+0x124>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d202      	bcs.n	8002d88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d82:	230e      	movs	r3, #14
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e057      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4a38      	ldr	r2, [pc, #224]	; (8002e6c <USB_SetTurnaroundTime+0x124>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d306      	bcc.n	8002d9e <USB_SetTurnaroundTime+0x56>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a37      	ldr	r2, [pc, #220]	; (8002e70 <USB_SetTurnaroundTime+0x128>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d202      	bcs.n	8002d9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d98:	230d      	movs	r3, #13
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e04c      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a33      	ldr	r2, [pc, #204]	; (8002e70 <USB_SetTurnaroundTime+0x128>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d306      	bcc.n	8002db4 <USB_SetTurnaroundTime+0x6c>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4a32      	ldr	r2, [pc, #200]	; (8002e74 <USB_SetTurnaroundTime+0x12c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d802      	bhi.n	8002db4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002dae:	230c      	movs	r3, #12
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e041      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4a2f      	ldr	r2, [pc, #188]	; (8002e74 <USB_SetTurnaroundTime+0x12c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d906      	bls.n	8002dca <USB_SetTurnaroundTime+0x82>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4a2e      	ldr	r2, [pc, #184]	; (8002e78 <USB_SetTurnaroundTime+0x130>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d802      	bhi.n	8002dca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002dc4:	230b      	movs	r3, #11
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e036      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <USB_SetTurnaroundTime+0x130>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d906      	bls.n	8002de0 <USB_SetTurnaroundTime+0x98>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4a29      	ldr	r2, [pc, #164]	; (8002e7c <USB_SetTurnaroundTime+0x134>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d802      	bhi.n	8002de0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002dda:	230a      	movs	r3, #10
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e02b      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <USB_SetTurnaroundTime+0x134>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d906      	bls.n	8002df6 <USB_SetTurnaroundTime+0xae>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <USB_SetTurnaroundTime+0x138>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d202      	bcs.n	8002df6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002df0:	2309      	movs	r3, #9
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e020      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <USB_SetTurnaroundTime+0x138>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d306      	bcc.n	8002e0c <USB_SetTurnaroundTime+0xc4>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <USB_SetTurnaroundTime+0x13c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d802      	bhi.n	8002e0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e06:	2308      	movs	r3, #8
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e015      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <USB_SetTurnaroundTime+0x13c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d906      	bls.n	8002e22 <USB_SetTurnaroundTime+0xda>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <USB_SetTurnaroundTime+0x140>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d202      	bcs.n	8002e22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e1c:	2307      	movs	r3, #7
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e00a      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e22:	2306      	movs	r3, #6
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e007      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e2e:	2309      	movs	r3, #9
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e001      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e34:	2309      	movs	r3, #9
 8002e36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	029b      	lsls	r3, r3, #10
 8002e4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	00d8acbf 	.word	0x00d8acbf
 8002e68:	00e4e1c0 	.word	0x00e4e1c0
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	01067380 	.word	0x01067380
 8002e74:	011a499f 	.word	0x011a499f
 8002e78:	01312cff 	.word	0x01312cff
 8002e7c:	014ca43f 	.word	0x014ca43f
 8002e80:	016e3600 	.word	0x016e3600
 8002e84:	01a6ab1f 	.word	0x01a6ab1f
 8002e88:	01e84800 	.word	0x01e84800

08002e8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d115      	bne.n	8002f1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fd fd26 	bl	8000950 <HAL_Delay>
      ms++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3301      	adds	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f001 fa45 	bl	800439a <USB_GetMode>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d01e      	beq.n	8002f54 <USB_SetCurrentMode+0x84>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b31      	cmp	r3, #49	; 0x31
 8002f1a:	d9f0      	bls.n	8002efe <USB_SetCurrentMode+0x2e>
 8002f1c:	e01a      	b.n	8002f54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d115      	bne.n	8002f50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f7fd fd0d 	bl	8000950 <HAL_Delay>
      ms++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f001 fa2c 	bl	800439a <USB_GetMode>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <USB_SetCurrentMode+0x84>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b31      	cmp	r3, #49	; 0x31
 8002f4c:	d9f0      	bls.n	8002f30 <USB_SetCurrentMode+0x60>
 8002f4e:	e001      	b.n	8002f54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e005      	b.n	8002f60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b32      	cmp	r3, #50	; 0x32
 8002f58:	d101      	bne.n	8002f5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f68:	b084      	sub	sp, #16
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	e009      	b.n	8002f9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	2200      	movs	r2, #0
 8002f94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b0e      	cmp	r3, #14
 8002fa0:	d9f2      	bls.n	8002f88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11c      	bne.n	8002fe2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe0:	e00b      	b.n	8002ffa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003000:	461a      	mov	r2, r3
 8003002:	2300      	movs	r3, #0
 8003004:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	4619      	mov	r1, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003014:	461a      	mov	r2, r3
 8003016:	680b      	ldr	r3, [r1, #0]
 8003018:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10c      	bne.n	800303a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003026:	2100      	movs	r1, #0
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f965 	bl	80032f8 <USB_SetDevSpeed>
 800302e:	e008      	b.n	8003042 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003030:	2101      	movs	r1, #1
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f960 	bl	80032f8 <USB_SetDevSpeed>
 8003038:	e003      	b.n	8003042 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800303a:	2103      	movs	r1, #3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f95b 	bl	80032f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003042:	2110      	movs	r1, #16
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f8f3 	bl	8003230 <USB_FlushTxFifo>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f91f 	bl	8003298 <USB_FlushRxFifo>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306a:	461a      	mov	r2, r3
 800306c:	2300      	movs	r3, #0
 800306e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003076:	461a      	mov	r2, r3
 8003078:	2300      	movs	r3, #0
 800307a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e043      	b.n	8003116 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a4:	d118      	bne.n	80030d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b8:	461a      	mov	r2, r3
 80030ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	e013      	b.n	80030ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ce:	461a      	mov	r2, r3
 80030d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e008      	b.n	80030ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e4:	461a      	mov	r2, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f6:	461a      	mov	r2, r3
 80030f8:	2300      	movs	r3, #0
 80030fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003108:	461a      	mov	r2, r3
 800310a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800310e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	3301      	adds	r3, #1
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	429a      	cmp	r2, r3
 800311c:	d3b7      	bcc.n	800308e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	e043      	b.n	80031ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800313a:	d118      	bne.n	800316e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314e:	461a      	mov	r2, r3
 8003150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e013      	b.n	8003180 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e008      	b.n	8003180 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	461a      	mov	r2, r3
 800317c:	2300      	movs	r3, #0
 800317e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	461a      	mov	r2, r3
 80031a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	3301      	adds	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3b7      	bcc.n	8003124 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f043 0210 	orr.w	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <USB_DevInit+0x2c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f043 0208 	orr.w	r2, r3, #8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d107      	bne.n	800321c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003228:	b004      	add	sp, #16
 800322a:	4770      	bx	lr
 800322c:	803c3800 	.word	0x803c3800

08003230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3301      	adds	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <USB_FlushTxFifo+0x64>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e01b      	b.n	8003288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	daf2      	bge.n	800323e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	019b      	lsls	r3, r3, #6
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a08      	ldr	r2, [pc, #32]	; (8003294 <USB_FlushTxFifo+0x64>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e006      	b.n	8003288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d0f0      	beq.n	8003268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	00030d40 	.word	0x00030d40

08003298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3301      	adds	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a11      	ldr	r2, [pc, #68]	; (80032f4 <USB_FlushRxFifo+0x5c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e018      	b.n	80032e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	daf2      	bge.n	80032a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2210      	movs	r2, #16
 80032c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <USB_FlushRxFifo+0x5c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e006      	b.n	80032e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d0f0      	beq.n	80032c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	00030d40 	.word	0x00030d40

080032f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	68f9      	ldr	r1, [r7, #12]
 8003314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800332a:	b480      	push	{r7}
 800332c:	b087      	sub	sp, #28
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0306 	and.w	r3, r3, #6
 8003342:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]
 800334e:	e00a      	b.n	8003366 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d002      	beq.n	800335c <USB_GetDevSpeed+0x32>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b06      	cmp	r3, #6
 800335a:	d102      	bne.n	8003362 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800335c:	2302      	movs	r3, #2
 800335e:	75fb      	strb	r3, [r7, #23]
 8003360:	e001      	b.n	8003366 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003362:	230f      	movs	r3, #15
 8003364:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003366:	7dfb      	ldrb	r3, [r7, #23]
}
 8003368:	4618      	mov	r0, r3
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d13a      	bne.n	8003406 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	68f9      	ldr	r1, [r7, #12]
 80033aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d155      	bne.n	8003474 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	791b      	ldrb	r3, [r3, #4]
 80033e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	059b      	lsls	r3, r3, #22
 80033ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033ec:	4313      	orrs	r3, r2
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	0151      	lsls	r1, r2, #5
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	440a      	add	r2, r1
 80033f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e036      	b.n	8003474 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	68f9      	ldr	r1, [r7, #12]
 8003420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003424:	4313      	orrs	r3, r2
 8003426:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11a      	bne.n	8003474 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	791b      	ldrb	r3, [r3, #4]
 8003458:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800345a:	430b      	orrs	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	0151      	lsls	r1, r2, #5
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	440a      	add	r2, r1
 8003466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003472:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d161      	bne.n	8003564 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b6:	d11f      	bne.n	80034f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	0151      	lsls	r1, r2, #5
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	440a      	add	r2, r1
 80034ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	2101      	movs	r1, #1
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	b29b      	uxth	r3, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003518:	4013      	ands	r3, r2
 800351a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	b29b      	uxth	r3, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800353c:	4013      	ands	r3, r2
 800353e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0159      	lsls	r1, r3, #5
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	440b      	add	r3, r1
 8003556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355a:	4619      	mov	r1, r3
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <USB_DeactivateEndpoint+0x1b0>)
 800355e:	4013      	ands	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
 8003562:	e060      	b.n	8003626 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800357a:	d11f      	bne.n	80035bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	0151      	lsls	r1, r2, #5
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	440a      	add	r2, r1
 8003592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800359a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	0151      	lsls	r1, r2, #5
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	440a      	add	r2, r1
 80035b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	43db      	mvns	r3, r3
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035dc:	4013      	ands	r3, r2
 80035de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	43db      	mvns	r3, r3
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003600:	4013      	ands	r3, r2
 8003602:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	0159      	lsls	r1, r3, #5
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	440b      	add	r3, r1
 800361a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361e:	4619      	mov	r1, r3
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <USB_DeactivateEndpoint+0x1b4>)
 8003622:	4013      	ands	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	ec337800 	.word	0xec337800
 8003638:	eff37800 	.word	0xeff37800

0800363c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	4613      	mov	r3, r2
 8003648:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b01      	cmp	r3, #1
 800365a:	f040 815c 	bne.w	8003916 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d132      	bne.n	80036cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	440a      	add	r2, r1
 800367c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c4:	0cdb      	lsrs	r3, r3, #19
 80036c6:	04db      	lsls	r3, r3, #19
 80036c8:	6113      	str	r3, [r2, #16]
 80036ca:	e074      	b.n	80037b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e6:	0cdb      	lsrs	r3, r3, #19
 80036e8:	04db      	lsls	r3, r3, #19
 80036ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	440a      	add	r2, r1
 8003702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003706:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800370a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800370e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6999      	ldr	r1, [r3, #24]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	440b      	add	r3, r1
 8003728:	1e59      	subs	r1, r3, #1
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003732:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003734:	4b9d      	ldr	r3, [pc, #628]	; (80039ac <USB_EPStartXfer+0x370>)
 8003736:	400b      	ands	r3, r1
 8003738:	69b9      	ldr	r1, [r7, #24]
 800373a:	0148      	lsls	r0, r1, #5
 800373c:	69f9      	ldr	r1, [r7, #28]
 800373e:	4401      	add	r1, r0
 8003740:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003744:	4313      	orrs	r3, r2
 8003746:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	0148      	lsls	r0, r1, #5
 8003762:	69f9      	ldr	r1, [r7, #28]
 8003764:	4401      	add	r1, r0
 8003766:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800376a:	4313      	orrs	r3, r2
 800376c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	791b      	ldrb	r3, [r3, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d11f      	bne.n	80037b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003790:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003794:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d14b      	bne.n	8003854 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	791b      	ldrb	r3, [r3, #4]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d128      	bne.n	8003832 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d110      	bne.n	8003812 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	0151      	lsls	r1, r2, #5
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	440a      	add	r2, r1
 8003806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	e00f      	b.n	8003832 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003830:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e133      	b.n	8003abc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	0151      	lsls	r1, r2, #5
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	440a      	add	r2, r1
 800386a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800386e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003872:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	791b      	ldrb	r3, [r3, #4]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d015      	beq.n	80038a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 811b 	beq.w	8003abc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	2101      	movs	r1, #1
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	69f9      	ldr	r1, [r7, #28]
 800389e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a2:	4313      	orrs	r3, r2
 80038a4:	634b      	str	r3, [r1, #52]	; 0x34
 80038a6:	e109      	b.n	8003abc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d110      	bne.n	80038da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	0151      	lsls	r1, r2, #5
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	440a      	add	r2, r1
 80038ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e00f      	b.n	80038fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	0151      	lsls	r1, r2, #5
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	440a      	add	r2, r1
 80038f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6919      	ldr	r1, [r3, #16]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	b298      	uxth	r0, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4603      	mov	r3, r0
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fade 	bl	8003ed0 <USB_WritePacket>
 8003914:	e0d2      	b.n	8003abc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	0151      	lsls	r1, r2, #5
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	440a      	add	r2, r1
 800392c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003930:	0cdb      	lsrs	r3, r3, #19
 8003932:	04db      	lsls	r3, r3, #19
 8003934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	440a      	add	r2, r1
 800394c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003958:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d126      	bne.n	80039b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	0148      	lsls	r0, r1, #5
 800397c:	69f9      	ldr	r1, [r7, #28]
 800397e:	4401      	add	r1, r0
 8003980:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003984:	4313      	orrs	r3, r2
 8003986:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039a6:	6113      	str	r3, [r2, #16]
 80039a8:	e03a      	b.n	8003a20 <USB_EPStartXfer+0x3e4>
 80039aa:	bf00      	nop
 80039ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	1e5a      	subs	r2, r3, #1
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	8afa      	ldrh	r2, [r7, #22]
 80039cc:	fb03 f202 	mul.w	r2, r3, r2
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	8afb      	ldrh	r3, [r7, #22]
 80039e4:	04d9      	lsls	r1, r3, #19
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <USB_EPStartXfer+0x48c>)
 80039e8:	400b      	ands	r3, r1
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	0148      	lsls	r0, r1, #5
 80039ee:	69f9      	ldr	r1, [r7, #28]
 80039f0:	4401      	add	r1, r0
 80039f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039f6:	4313      	orrs	r3, r2
 80039f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	0148      	lsls	r0, r1, #5
 8003a14:	69f9      	ldr	r1, [r7, #28]
 8003a16:	4401      	add	r1, r0
 8003a18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d10d      	bne.n	8003a42 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6919      	ldr	r1, [r3, #16]
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	460a      	mov	r2, r1
 8003a40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	791b      	ldrb	r3, [r3, #4]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d128      	bne.n	8003a9c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d110      	bne.n	8003a7c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	0151      	lsls	r1, r2, #5
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	440a      	add	r2, r1
 8003a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e00f      	b.n	8003a9c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ab6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003aba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	1ff80000 	.word	0x1ff80000

08003acc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 80ce 	bne.w	8003c8a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d132      	bne.n	8003b5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	0151      	lsls	r1, r2, #5
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	440a      	add	r2, r1
 8003b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	0151      	lsls	r1, r2, #5
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	440a      	add	r2, r1
 8003b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b54:	0cdb      	lsrs	r3, r3, #19
 8003b56:	04db      	lsls	r3, r3, #19
 8003b58:	6113      	str	r3, [r2, #16]
 8003b5a:	e04e      	b.n	8003bfa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b76:	0cdb      	lsrs	r3, r3, #19
 8003b78:	04db      	lsls	r3, r3, #19
 8003b7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d903      	bls.n	8003bb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bea:	6939      	ldr	r1, [r7, #16]
 8003bec:	0148      	lsls	r0, r1, #5
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	4401      	add	r1, r0
 8003bf2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d11e      	bne.n	8003c3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	e097      	b.n	8003d6e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8083 	beq.w	8003d6e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	2101      	movs	r1, #1
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c84:	4313      	orrs	r3, r2
 8003c86:	634b      	str	r3, [r1, #52]	; 0x34
 8003c88:	e071      	b.n	8003d6e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca4:	0cdb      	lsrs	r3, r3, #19
 8003ca6:	04db      	lsls	r3, r3, #19
 8003ca8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ccc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1c:	6939      	ldr	r1, [r7, #16]
 8003d1e:	0148      	lsls	r0, r1, #5
 8003d20:	6979      	ldr	r1, [r7, #20]
 8003d22:	4401      	add	r1, r0
 8003d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10d      	bne.n	8003d4e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6919      	ldr	r1, [r3, #16]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	0151      	lsls	r1, r2, #5
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	440a      	add	r2, r1
 8003d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d14a      	bne.n	8003e30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db2:	f040 8086 	bne.w	8003ec2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	7812      	ldrb	r2, [r2, #0]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d902      	bls.n	8003e14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
          break;
 8003e12:	e056      	b.n	8003ec2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e2c:	d0e7      	beq.n	8003dfe <USB_EPStopXfer+0x82>
 8003e2e:	e048      	b.n	8003ec2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e48:	d13b      	bne.n	8003ec2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	7812      	ldrb	r2, [r2, #0]
 8003e5e:	0151      	lsls	r1, r2, #5
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	440a      	add	r2, r1
 8003e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d902      	bls.n	8003ea8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8003ea6:	e00c      	b.n	8003ec2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec0:	d0e7      	beq.n	8003e92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	4611      	mov	r1, r2
 8003edc:	461a      	mov	r2, r3
 8003ede:	460b      	mov	r3, r1
 8003ee0:	71fb      	strb	r3, [r7, #7]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003eee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d123      	bne.n	8003f3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ef6:	88bb      	ldrh	r3, [r7, #4]
 8003ef8:	3303      	adds	r3, #3
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	e018      	b.n	8003f36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	031a      	lsls	r2, r3, #12
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f10:	461a      	mov	r2, r3
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3301      	adds	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3e2      	bcc.n	8003f04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3724      	adds	r7, #36	; 0x24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b08b      	sub	sp, #44	; 0x2c
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	e014      	b.n	8003fa2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	3301      	adds	r3, #1
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	3301      	adds	r3, #1
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	3301      	adds	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	6a3a      	ldr	r2, [r7, #32]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d3e6      	bcc.n	8003f78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003faa:	8bfb      	ldrh	r3, [r7, #30]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01e      	beq.n	8003fee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f107 0310 	add.w	r3, r7, #16
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	701a      	strb	r2, [r3, #0]
      i++;
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	3301      	adds	r3, #1
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003fe2:	8bfb      	ldrh	r3, [r7, #30]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fe8:	8bfb      	ldrh	r3, [r7, #30]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ea      	bne.n	8003fc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	372c      	adds	r7, #44	; 0x2c
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d12c      	bne.n	8004072 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	db12      	blt.n	8004050 <USB_EPSetStall+0x54>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00f      	beq.n	8004050 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800404e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e02b      	b.n	80040ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	db12      	blt.n	80040aa <USB_EPSetStall+0xae>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00f      	beq.n	80040aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	0151      	lsls	r1, r2, #5
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	440a      	add	r2, r1
 80040a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	785b      	ldrb	r3, [r3, #1]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d128      	bne.n	8004146 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004112:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	791b      	ldrb	r3, [r3, #4]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d003      	beq.n	8004124 <USB_EPClearStall+0x4c>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	791b      	ldrb	r3, [r3, #4]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d138      	bne.n	8004196 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e027      	b.n	8004196 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004160:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004164:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	791b      	ldrb	r3, [r3, #4]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d003      	beq.n	8004176 <USB_EPClearStall+0x9e>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	791b      	ldrb	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d10f      	bne.n	8004196 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80041d8:	68f9      	ldr	r1, [r7, #12]
 80041da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800421e:	f023 0302 	bic.w	r3, r3, #2
 8004222:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800424c:	f023 0303 	bic.w	r3, r3, #3
 8004250:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	4013      	ands	r3, r2
 80042bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	0c1b      	lsrs	r3, r3, #16
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	4013      	ands	r3, r2
 80042f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	b29b      	uxth	r3, r3
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004330:	68bb      	ldr	r3, [r7, #8]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800433e:	b480      	push	{r7}
 8004340:	b087      	sub	sp, #28
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	fa22 f303 	lsr.w	r3, r2, r3
 800436e:	01db      	lsls	r3, r3, #7
 8004370:	b2db      	uxtb	r3, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4013      	ands	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800438c:	68bb      	ldr	r3, [r7, #8]
}
 800438e:	4618      	mov	r0, r3
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0301 	and.w	r3, r3, #1
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043d4:	f023 0307 	bic.w	r3, r3, #7
 80043d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	460b      	mov	r3, r1
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	333c      	adds	r3, #60	; 0x3c
 8004412:	3304      	adds	r3, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <USB_EP0_OutStart+0xb8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d90a      	bls.n	8004436 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800442c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004430:	d101      	bne.n	8004436 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e037      	b.n	80044a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	461a      	mov	r2, r3
 800443e:	2300      	movs	r3, #0
 8004440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004464:	f043 0318 	orr.w	r3, r3, #24
 8004468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004478:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800447c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800447e:	7afb      	ldrb	r3, [r7, #11]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10f      	bne.n	80044a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800449e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	4f54300a 	.word	0x4f54300a

080044b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a13      	ldr	r2, [pc, #76]	; (800451c <USB_CoreReset+0x64>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e01b      	b.n	800450e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	daf2      	bge.n	80044c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3301      	adds	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a09      	ldr	r2, [pc, #36]	; (800451c <USB_CoreReset+0x64>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e006      	b.n	800450e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d0f0      	beq.n	80044ee <USB_CoreReset+0x36>

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	00030d40 	.word	0x00030d40

08004520 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800452c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004530:	f005 fdd6 	bl	800a0e0 <USBD_static_malloc>
 8004534:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	32b0      	adds	r2, #176	; 0xb0
 8004546:	2100      	movs	r1, #0
 8004548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800454c:	2302      	movs	r3, #2
 800454e:	e0d4      	b.n	80046fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004550:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004554:	2100      	movs	r1, #0
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f005 fe3a 	bl	800a1d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	32b0      	adds	r2, #176	; 0xb0
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	32b0      	adds	r2, #176	; 0xb0
 8004576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7c1b      	ldrb	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d138      	bne.n	80045fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004588:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <USBD_CDC_Init+0x1e4>)
 800458a:	7819      	ldrb	r1, [r3, #0]
 800458c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004590:	2202      	movs	r2, #2
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f005 fc81 	bl	8009e9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004598:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <USBD_CDC_Init+0x1e4>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	f003 020f 	and.w	r2, r3, #15
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	3324      	adds	r3, #36	; 0x24
 80045ae:	2201      	movs	r2, #1
 80045b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80045b2:	4b55      	ldr	r3, [pc, #340]	; (8004708 <USBD_CDC_Init+0x1e8>)
 80045b4:	7819      	ldrb	r1, [r3, #0]
 80045b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ba:	2202      	movs	r2, #2
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f005 fc6c 	bl	8009e9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80045c2:	4b51      	ldr	r3, [pc, #324]	; (8004708 <USBD_CDC_Init+0x1e8>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	f003 020f 	and.w	r2, r3, #15
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045da:	2201      	movs	r2, #1
 80045dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80045de:	4b4b      	ldr	r3, [pc, #300]	; (800470c <USBD_CDC_Init+0x1ec>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f003 020f 	and.w	r2, r3, #15
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	3326      	adds	r3, #38	; 0x26
 80045f4:	2210      	movs	r2, #16
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	e035      	b.n	8004666 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045fa:	4b42      	ldr	r3, [pc, #264]	; (8004704 <USBD_CDC_Init+0x1e4>)
 80045fc:	7819      	ldrb	r1, [r3, #0]
 80045fe:	2340      	movs	r3, #64	; 0x40
 8004600:	2202      	movs	r2, #2
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f005 fc49 	bl	8009e9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004608:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <USBD_CDC_Init+0x1e4>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	f003 020f 	and.w	r2, r3, #15
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	3324      	adds	r3, #36	; 0x24
 800461e:	2201      	movs	r2, #1
 8004620:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004622:	4b39      	ldr	r3, [pc, #228]	; (8004708 <USBD_CDC_Init+0x1e8>)
 8004624:	7819      	ldrb	r1, [r3, #0]
 8004626:	2340      	movs	r3, #64	; 0x40
 8004628:	2202      	movs	r2, #2
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f005 fc35 	bl	8009e9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004630:	4b35      	ldr	r3, [pc, #212]	; (8004708 <USBD_CDC_Init+0x1e8>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	f003 020f 	and.w	r2, r3, #15
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004648:	2201      	movs	r2, #1
 800464a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800464c:	4b2f      	ldr	r3, [pc, #188]	; (800470c <USBD_CDC_Init+0x1ec>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	3326      	adds	r3, #38	; 0x26
 8004662:	2210      	movs	r2, #16
 8004664:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004666:	4b29      	ldr	r3, [pc, #164]	; (800470c <USBD_CDC_Init+0x1ec>)
 8004668:	7819      	ldrb	r1, [r3, #0]
 800466a:	2308      	movs	r3, #8
 800466c:	2203      	movs	r2, #3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f005 fc13 	bl	8009e9a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004674:	4b25      	ldr	r3, [pc, #148]	; (800470c <USBD_CDC_Init+0x1ec>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	f003 020f 	and.w	r2, r3, #15
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	3324      	adds	r3, #36	; 0x24
 800468a:	2201      	movs	r2, #1
 800468c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	33b0      	adds	r3, #176	; 0xb0
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80046c4:	2302      	movs	r3, #2
 80046c6:	e018      	b.n	80046fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7c1b      	ldrb	r3, [r3, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <USBD_CDC_Init+0x1e8>)
 80046d2:	7819      	ldrb	r1, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f005 fcca 	bl	800a078 <USBD_LL_PrepareReceive>
 80046e4:	e008      	b.n	80046f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <USBD_CDC_Init+0x1e8>)
 80046e8:	7819      	ldrb	r1, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046f0:	2340      	movs	r3, #64	; 0x40
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f005 fcc0 	bl	800a078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000093 	.word	0x20000093
 8004708:	20000094 	.word	0x20000094
 800470c:	20000095 	.word	0x20000095

08004710 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800471c:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <USBD_CDC_DeInit+0xf8>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f005 fbdf 	bl	8009ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004728:	4b37      	ldr	r3, [pc, #220]	; (8004808 <USBD_CDC_DeInit+0xf8>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	3324      	adds	r3, #36	; 0x24
 800473e:	2200      	movs	r2, #0
 8004740:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004742:	4b32      	ldr	r3, [pc, #200]	; (800480c <USBD_CDC_DeInit+0xfc>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f005 fbcc 	bl	8009ee6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800474e:	4b2f      	ldr	r3, [pc, #188]	; (800480c <USBD_CDC_DeInit+0xfc>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	f003 020f 	and.w	r2, r3, #15
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004766:	2200      	movs	r2, #0
 8004768:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800476a:	4b29      	ldr	r3, [pc, #164]	; (8004810 <USBD_CDC_DeInit+0x100>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f005 fbb8 	bl	8009ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004776:	4b26      	ldr	r3, [pc, #152]	; (8004810 <USBD_CDC_DeInit+0x100>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f003 020f 	and.w	r2, r3, #15
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3324      	adds	r3, #36	; 0x24
 800478c:	2200      	movs	r2, #0
 800478e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004790:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <USBD_CDC_DeInit+0x100>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f003 020f 	and.w	r2, r3, #15
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	3326      	adds	r3, #38	; 0x26
 80047a6:	2200      	movs	r2, #0
 80047a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	32b0      	adds	r2, #176	; 0xb0
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01f      	beq.n	80047fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	33b0      	adds	r3, #176	; 0xb0
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	32b0      	adds	r2, #176	; 0xb0
 80047da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047de:	4618      	mov	r0, r3
 80047e0:	f005 fc8c 	bl	800a0fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	32b0      	adds	r2, #176	; 0xb0
 80047ee:	2100      	movs	r1, #0
 80047f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000093 	.word	0x20000093
 800480c:	20000094 	.word	0x20000094
 8004810:	20000095 	.word	0x20000095

08004814 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	32b0      	adds	r2, #176	; 0xb0
 8004828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004840:	2303      	movs	r3, #3
 8004842:	e0bf      	b.n	80049c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800484c:	2b00      	cmp	r3, #0
 800484e:	d050      	beq.n	80048f2 <USBD_CDC_Setup+0xde>
 8004850:	2b20      	cmp	r3, #32
 8004852:	f040 80af 	bne.w	80049b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	88db      	ldrh	r3, [r3, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d03a      	beq.n	80048d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	b25b      	sxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	da1b      	bge.n	80048a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	33b0      	adds	r3, #176	; 0xb0
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800487e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	88d2      	ldrh	r2, [r2, #6]
 8004884:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	88db      	ldrh	r3, [r3, #6]
 800488a:	2b07      	cmp	r3, #7
 800488c:	bf28      	it	cs
 800488e:	2307      	movcs	r3, #7
 8004890:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	89fa      	ldrh	r2, [r7, #14]
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f001 fd89 	bl	80063b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800489e:	e090      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	785a      	ldrb	r2, [r3, #1]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	88db      	ldrh	r3, [r3, #6]
 80048ae:	2b3f      	cmp	r3, #63	; 0x3f
 80048b0:	d803      	bhi.n	80048ba <USBD_CDC_Setup+0xa6>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	88db      	ldrh	r3, [r3, #6]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	e000      	b.n	80048bc <USBD_CDC_Setup+0xa8>
 80048ba:	2240      	movs	r2, #64	; 0x40
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80048c2:	6939      	ldr	r1, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80048ca:	461a      	mov	r2, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 fd9b 	bl	8006408 <USBD_CtlPrepareRx>
      break;
 80048d2:	e076      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	33b0      	adds	r3, #176	; 0xb0
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	7850      	ldrb	r0, [r2, #1]
 80048ea:	2200      	movs	r2, #0
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	4798      	blx	r3
      break;
 80048f0:	e067      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	2b0b      	cmp	r3, #11
 80048f8:	d851      	bhi.n	800499e <USBD_CDC_Setup+0x18a>
 80048fa:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <USBD_CDC_Setup+0xec>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004931 	.word	0x08004931
 8004904:	080049ad 	.word	0x080049ad
 8004908:	0800499f 	.word	0x0800499f
 800490c:	0800499f 	.word	0x0800499f
 8004910:	0800499f 	.word	0x0800499f
 8004914:	0800499f 	.word	0x0800499f
 8004918:	0800499f 	.word	0x0800499f
 800491c:	0800499f 	.word	0x0800499f
 8004920:	0800499f 	.word	0x0800499f
 8004924:	0800499f 	.word	0x0800499f
 8004928:	0800495b 	.word	0x0800495b
 800492c:	08004985 	.word	0x08004985
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b03      	cmp	r3, #3
 800493a:	d107      	bne.n	800494c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800493c:	f107 030a 	add.w	r3, r7, #10
 8004940:	2202      	movs	r2, #2
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 fd33 	bl	80063b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800494a:	e032      	b.n	80049b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f001 fcbd 	bl	80062ce <USBD_CtlError>
            ret = USBD_FAIL;
 8004954:	2303      	movs	r3, #3
 8004956:	75fb      	strb	r3, [r7, #23]
          break;
 8004958:	e02b      	b.n	80049b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b03      	cmp	r3, #3
 8004964:	d107      	bne.n	8004976 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004966:	f107 030d 	add.w	r3, r7, #13
 800496a:	2201      	movs	r2, #1
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 fd1e 	bl	80063b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004974:	e01d      	b.n	80049b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 fca8 	bl	80062ce <USBD_CtlError>
            ret = USBD_FAIL;
 800497e:	2303      	movs	r3, #3
 8004980:	75fb      	strb	r3, [r7, #23]
          break;
 8004982:	e016      	b.n	80049b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b03      	cmp	r3, #3
 800498e:	d00f      	beq.n	80049b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 fc9b 	bl	80062ce <USBD_CtlError>
            ret = USBD_FAIL;
 8004998:	2303      	movs	r3, #3
 800499a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800499c:	e008      	b.n	80049b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 fc94 	bl	80062ce <USBD_CtlError>
          ret = USBD_FAIL;
 80049a6:	2303      	movs	r3, #3
 80049a8:	75fb      	strb	r3, [r7, #23]
          break;
 80049aa:	e002      	b.n	80049b2 <USBD_CDC_Setup+0x19e>
          break;
 80049ac:	bf00      	nop
 80049ae:	e008      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>
          break;
 80049b0:	bf00      	nop
      }
      break;
 80049b2:	e006      	b.n	80049c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 fc89 	bl	80062ce <USBD_CtlError>
      ret = USBD_FAIL;
 80049bc:	2303      	movs	r3, #3
 80049be:	75fb      	strb	r3, [r7, #23]
      break;
 80049c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80049de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	32b0      	adds	r2, #176	; 0xb0
 80049ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e065      	b.n	8004ac2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	32b0      	adds	r2, #176	; 0xb0
 8004a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	3318      	adds	r3, #24
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02f      	beq.n	8004a80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 020f 	and.w	r2, r3, #15
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	3318      	adds	r3, #24
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 010f 	and.w	r1, r3, #15
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4403      	add	r3, r0
 8004a48:	3348      	adds	r3, #72	; 0x48
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d112      	bne.n	8004a80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	f003 020f 	and.w	r2, r3, #15
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3318      	adds	r3, #24
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a72:	78f9      	ldrb	r1, [r7, #3]
 8004a74:	2300      	movs	r3, #0
 8004a76:	2200      	movs	r2, #0
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f005 fadc 	bl	800a036 <USBD_LL_Transmit>
 8004a7e:	e01f      	b.n	8004ac0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	33b0      	adds	r3, #176	; 0xb0
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d010      	beq.n	8004ac0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	33b0      	adds	r3, #176	; 0xb0
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	32b0      	adds	r2, #176	; 0xb0
 8004ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	32b0      	adds	r2, #176	; 0xb0
 8004af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e01a      	b.n	8004b32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f005 fada 	bl	800a0ba <USBD_LL_GetRxDataSize>
 8004b06:	4602      	mov	r2, r0
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	33b0      	adds	r3, #176	; 0xb0
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	32b0      	adds	r2, #176	; 0xb0
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e025      	b.n	8004ba8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	33b0      	adds	r3, #176	; 0xb0
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01a      	beq.n	8004ba6 <USBD_CDC_EP0_RxReady+0x6c>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b76:	2bff      	cmp	r3, #255	; 0xff
 8004b78:	d015      	beq.n	8004ba6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	33b0      	adds	r3, #176	; 0xb0
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004b92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b9a:	b292      	uxth	r2, r2
 8004b9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bb8:	2182      	movs	r1, #130	; 0x82
 8004bba:	4818      	ldr	r0, [pc, #96]	; (8004c1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bbc:	f000 fd4f 	bl	800565e <USBD_GetEpDesc>
 8004bc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4815      	ldr	r0, [pc, #84]	; (8004c1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bc6:	f000 fd4a 	bl	800565e <USBD_GetEpDesc>
 8004bca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004bcc:	2181      	movs	r1, #129	; 0x81
 8004bce:	4813      	ldr	r0, [pc, #76]	; (8004c1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bd0:	f000 fd45 	bl	800565e <USBD_GetEpDesc>
 8004bd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2210      	movs	r2, #16
 8004be0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d006      	beq.n	8004bf6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf0:	711a      	strb	r2, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c04:	711a      	strb	r2, [r3, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2243      	movs	r2, #67	; 0x43
 8004c0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c10:	4b02      	ldr	r3, [pc, #8]	; (8004c1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000050 	.word	0x20000050

08004c20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c28:	2182      	movs	r1, #130	; 0x82
 8004c2a:	4818      	ldr	r0, [pc, #96]	; (8004c8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c2c:	f000 fd17 	bl	800565e <USBD_GetEpDesc>
 8004c30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c32:	2101      	movs	r1, #1
 8004c34:	4815      	ldr	r0, [pc, #84]	; (8004c8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c36:	f000 fd12 	bl	800565e <USBD_GetEpDesc>
 8004c3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c3c:	2181      	movs	r1, #129	; 0x81
 8004c3e:	4813      	ldr	r0, [pc, #76]	; (8004c8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c40:	f000 fd0d 	bl	800565e <USBD_GetEpDesc>
 8004c44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d006      	beq.n	8004c66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	711a      	strb	r2, [r3, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f042 0202 	orr.w	r2, r2, #2
 8004c64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d006      	beq.n	8004c7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	711a      	strb	r2, [r3, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f042 0202 	orr.w	r2, r2, #2
 8004c78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2243      	movs	r2, #67	; 0x43
 8004c7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c80:	4b02      	ldr	r3, [pc, #8]	; (8004c8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000050 	.word	0x20000050

08004c90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c98:	2182      	movs	r1, #130	; 0x82
 8004c9a:	4818      	ldr	r0, [pc, #96]	; (8004cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c9c:	f000 fcdf 	bl	800565e <USBD_GetEpDesc>
 8004ca0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4815      	ldr	r0, [pc, #84]	; (8004cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004ca6:	f000 fcda 	bl	800565e <USBD_GetEpDesc>
 8004caa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004cac:	2181      	movs	r1, #129	; 0x81
 8004cae:	4813      	ldr	r0, [pc, #76]	; (8004cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cb0:	f000 fcd5 	bl	800565e <USBD_GetEpDesc>
 8004cb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2210      	movs	r2, #16
 8004cc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd0:	711a      	strb	r2, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d006      	beq.n	8004cea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce4:	711a      	strb	r2, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2243      	movs	r2, #67	; 0x43
 8004cee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cf0:	4b02      	ldr	r3, [pc, #8]	; (8004cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000050 	.word	0x20000050

08004d00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	220a      	movs	r2, #10
 8004d0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d0e:	4b03      	ldr	r3, [pc, #12]	; (8004d1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	2000000c 	.word	0x2000000c

08004d20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e009      	b.n	8004d48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	33b0      	adds	r3, #176	; 0xb0
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	32b0      	adds	r2, #176	; 0xb0
 8004d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e008      	b.n	8004d8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	32b0      	adds	r2, #176	; 0xb0
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e004      	b.n	8004dc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	32b0      	adds	r2, #176	; 0xb0
 8004de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	32b0      	adds	r2, #176	; 0xb0
 8004dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e025      	b.n	8004e52 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11f      	bne.n	8004e50 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004e18:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <USBD_CDC_TransmitPacket+0x88>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f003 020f 	and.w	r2, r3, #15
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4403      	add	r3, r0
 8004e32:	3318      	adds	r3, #24
 8004e34:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <USBD_CDC_TransmitPacket+0x88>)
 8004e38:	7819      	ldrb	r1, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f005 f8f5 	bl	800a036 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000093 	.word	0x20000093

08004e60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	32b0      	adds	r2, #176	; 0xb0
 8004e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	32b0      	adds	r2, #176	; 0xb0
 8004e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e018      	b.n	8004ec0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	7c1b      	ldrb	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10a      	bne.n	8004eac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <USBD_CDC_ReceivePacket+0x68>)
 8004e98:	7819      	ldrb	r1, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f005 f8e7 	bl	800a078 <USBD_LL_PrepareReceive>
 8004eaa:	e008      	b.n	8004ebe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <USBD_CDC_ReceivePacket+0x68>)
 8004eae:	7819      	ldrb	r1, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eb6:	2340      	movs	r3, #64	; 0x40
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f005 f8dd 	bl	800a078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000094 	.word	0x20000094

08004ecc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e01f      	b.n	8004f24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	79fa      	ldrb	r2, [r7, #7]
 8004f16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f004 ff57 	bl	8009dcc <USBD_LL_Init>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e025      	b.n	8004f90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	32ae      	adds	r2, #174	; 0xae
 8004f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00f      	beq.n	8004f80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	32ae      	adds	r2, #174	; 0xae
 8004f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	f107 020e 	add.w	r2, r7, #14
 8004f74:	4610      	mov	r0, r2
 8004f76:	4798      	blx	r3
 8004f78:	4602      	mov	r2, r0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f004 ff5f 	bl	8009e64 <USBD_LL_Start>
 8004fa6:	4603      	mov	r3, r0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	4611      	mov	r1, r2
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	4611      	mov	r1, r2
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005024:	2303      	movs	r3, #3
 8005026:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f001 f908 	bl	800625a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005058:	461a      	mov	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2b02      	cmp	r3, #2
 800506c:	d01a      	beq.n	80050a4 <USBD_LL_SetupStage+0x72>
 800506e:	2b02      	cmp	r3, #2
 8005070:	d822      	bhi.n	80050b8 <USBD_LL_SetupStage+0x86>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <USBD_LL_SetupStage+0x4a>
 8005076:	2b01      	cmp	r3, #1
 8005078:	d00a      	beq.n	8005090 <USBD_LL_SetupStage+0x5e>
 800507a:	e01d      	b.n	80050b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fb5f 	bl	8005748 <USBD_StdDevReq>
 800508a:	4603      	mov	r3, r0
 800508c:	73fb      	strb	r3, [r7, #15]
      break;
 800508e:	e020      	b.n	80050d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fbc7 	bl	800582c <USBD_StdItfReq>
 800509e:	4603      	mov	r3, r0
 80050a0:	73fb      	strb	r3, [r7, #15]
      break;
 80050a2:	e016      	b.n	80050d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fc29 	bl	8005904 <USBD_StdEPReq>
 80050b2:	4603      	mov	r3, r0
 80050b4:	73fb      	strb	r3, [r7, #15]
      break;
 80050b6:	e00c      	b.n	80050d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f004 ff2c 	bl	8009f24 <USBD_LL_StallEP>
 80050cc:	4603      	mov	r3, r0
 80050ce:	73fb      	strb	r3, [r7, #15]
      break;
 80050d0:	bf00      	nop
  }

  return ret;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	460b      	mov	r3, r1
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d16e      	bne.n	80051d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005102:	2b03      	cmp	r3, #3
 8005104:	f040 8098 	bne.w	8005238 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	429a      	cmp	r2, r3
 8005112:	d913      	bls.n	800513c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	1ad2      	subs	r2, r2, r3
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4293      	cmp	r3, r2
 800512c:	bf28      	it	cs
 800512e:	4613      	movcs	r3, r2
 8005130:	461a      	mov	r2, r3
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f001 f984 	bl	8006442 <USBD_CtlContinueRx>
 800513a:	e07d      	b.n	8005238 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2b02      	cmp	r3, #2
 8005148:	d014      	beq.n	8005174 <USBD_LL_DataOutStage+0x98>
 800514a:	2b02      	cmp	r3, #2
 800514c:	d81d      	bhi.n	800518a <USBD_LL_DataOutStage+0xae>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <USBD_LL_DataOutStage+0x7c>
 8005152:	2b01      	cmp	r3, #1
 8005154:	d003      	beq.n	800515e <USBD_LL_DataOutStage+0x82>
 8005156:	e018      	b.n	800518a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	75bb      	strb	r3, [r7, #22]
            break;
 800515c:	e018      	b.n	8005190 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005164:	b2db      	uxtb	r3, r3
 8005166:	4619      	mov	r1, r3
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fa5e 	bl	800562a <USBD_CoreFindIF>
 800516e:	4603      	mov	r3, r0
 8005170:	75bb      	strb	r3, [r7, #22]
            break;
 8005172:	e00d      	b.n	8005190 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800517a:	b2db      	uxtb	r3, r3
 800517c:	4619      	mov	r1, r3
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fa60 	bl	8005644 <USBD_CoreFindEP>
 8005184:	4603      	mov	r3, r0
 8005186:	75bb      	strb	r3, [r7, #22]
            break;
 8005188:	e002      	b.n	8005190 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	75bb      	strb	r3, [r7, #22]
            break;
 800518e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005190:	7dbb      	ldrb	r3, [r7, #22]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d119      	bne.n	80051ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d113      	bne.n	80051ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80051a2:	7dba      	ldrb	r2, [r7, #22]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	32ae      	adds	r2, #174	; 0xae
 80051a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80051b2:	7dba      	ldrb	r2, [r7, #22]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80051ba:	7dba      	ldrb	r2, [r7, #22]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	32ae      	adds	r2, #174	; 0xae
 80051c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f001 f94a 	bl	8006464 <USBD_CtlSendStatus>
 80051d0:	e032      	b.n	8005238 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80051d2:	7afb      	ldrb	r3, [r7, #11]
 80051d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	4619      	mov	r1, r3
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fa31 	bl	8005644 <USBD_CoreFindEP>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051e6:	7dbb      	ldrb	r3, [r7, #22]
 80051e8:	2bff      	cmp	r3, #255	; 0xff
 80051ea:	d025      	beq.n	8005238 <USBD_LL_DataOutStage+0x15c>
 80051ec:	7dbb      	ldrb	r3, [r7, #22]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d122      	bne.n	8005238 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d117      	bne.n	800522e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80051fe:	7dba      	ldrb	r2, [r7, #22]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	32ae      	adds	r2, #174	; 0xae
 8005204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00f      	beq.n	800522e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800520e:	7dba      	ldrb	r2, [r7, #22]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005216:	7dba      	ldrb	r2, [r7, #22]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	32ae      	adds	r2, #174	; 0xae
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	7afa      	ldrb	r2, [r7, #11]
 8005224:	4611      	mov	r1, r2
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	4798      	blx	r3
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	e000      	b.n	800523a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b086      	sub	sp, #24
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	460b      	mov	r3, r1
 800524c:	607a      	str	r2, [r7, #4]
 800524e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005250:	7afb      	ldrb	r3, [r7, #11]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d16f      	bne.n	8005336 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3314      	adds	r3, #20
 800525a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005262:	2b02      	cmp	r3, #2
 8005264:	d15a      	bne.n	800531c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	429a      	cmp	r2, r3
 8005270:	d914      	bls.n	800529c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	461a      	mov	r2, r3
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f001 f8ac 	bl	80063e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800528e:	2300      	movs	r3, #0
 8005290:	2200      	movs	r2, #0
 8005292:	2100      	movs	r1, #0
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f004 feef 	bl	800a078 <USBD_LL_PrepareReceive>
 800529a:	e03f      	b.n	800531c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d11c      	bne.n	80052e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d316      	bcc.n	80052e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052be:	429a      	cmp	r2, r3
 80052c0:	d20f      	bcs.n	80052e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052c2:	2200      	movs	r2, #0
 80052c4:	2100      	movs	r1, #0
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f001 f88d 	bl	80063e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052d4:	2300      	movs	r3, #0
 80052d6:	2200      	movs	r2, #0
 80052d8:	2100      	movs	r1, #0
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f004 fecc 	bl	800a078 <USBD_LL_PrepareReceive>
 80052e0:	e01c      	b.n	800531c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d10f      	bne.n	800530e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f004 fe07 	bl	8009f24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f001 f8b7 	bl	800648a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d03a      	beq.n	800539c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff fe42 	bl	8004fb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005334:	e032      	b.n	800539c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005336:	7afb      	ldrb	r3, [r7, #11]
 8005338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800533c:	b2db      	uxtb	r3, r3
 800533e:	4619      	mov	r1, r3
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f97f 	bl	8005644 <USBD_CoreFindEP>
 8005346:	4603      	mov	r3, r0
 8005348:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	2bff      	cmp	r3, #255	; 0xff
 800534e:	d025      	beq.n	800539c <USBD_LL_DataInStage+0x15a>
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d122      	bne.n	800539c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b03      	cmp	r3, #3
 8005360:	d11c      	bne.n	800539c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005362:	7dfa      	ldrb	r2, [r7, #23]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	32ae      	adds	r2, #174	; 0xae
 8005368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d014      	beq.n	800539c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005372:	7dfa      	ldrb	r2, [r7, #23]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800537a:	7dfa      	ldrb	r2, [r7, #23]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	32ae      	adds	r2, #174	; 0xae
 8005380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	7afa      	ldrb	r2, [r7, #11]
 8005388:	4611      	mov	r1, r2
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	4798      	blx	r3
 800538e:	4603      	mov	r3, r0
 8005390:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005392:	7dbb      	ldrb	r3, [r7, #22]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005398:	7dbb      	ldrb	r3, [r7, #22]
 800539a:	e000      	b.n	800539e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d014      	beq.n	800540c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00e      	beq.n	800540c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6852      	ldr	r2, [r2, #4]
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	4611      	mov	r1, r2
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005408:	2303      	movs	r3, #3
 800540a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800540c:	2340      	movs	r3, #64	; 0x40
 800540e:	2200      	movs	r2, #0
 8005410:	2100      	movs	r1, #0
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f004 fd41 	bl	8009e9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2240      	movs	r2, #64	; 0x40
 8005424:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005428:	2340      	movs	r3, #64	; 0x40
 800542a:	2200      	movs	r2, #0
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f004 fd33 	bl	8009e9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2240      	movs	r2, #64	; 0x40
 800543e:	621a      	str	r2, [r3, #32]

  return ret;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	78fa      	ldrb	r2, [r7, #3]
 800545a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005478:	b2da      	uxtb	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2204      	movs	r2, #4
 8005484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d106      	bne.n	80054b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d110      	bne.n	80054fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00b      	beq.n	80054fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	460b      	mov	r3, r1
 8005510:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	32ae      	adds	r2, #174	; 0xae
 800551c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005524:	2303      	movs	r3, #3
 8005526:	e01c      	b.n	8005562 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b03      	cmp	r3, #3
 8005532:	d115      	bne.n	8005560 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	32ae      	adds	r2, #174	; 0xae
 800553e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00b      	beq.n	8005560 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	32ae      	adds	r2, #174	; 0xae
 8005552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	4611      	mov	r1, r2
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	460b      	mov	r3, r1
 8005574:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	32ae      	adds	r2, #174	; 0xae
 8005580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005588:	2303      	movs	r3, #3
 800558a:	e01c      	b.n	80055c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b03      	cmp	r3, #3
 8005596:	d115      	bne.n	80055c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	32ae      	adds	r2, #174	; 0xae
 80055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	32ae      	adds	r2, #174	; 0xae
 80055b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	4611      	mov	r1, r2
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00e      	beq.n	8005620 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6852      	ldr	r2, [r2, #4]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	4611      	mov	r1, r2
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800561c:	2303      	movs	r3, #3
 800561e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005636:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005650:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	885b      	ldrh	r3, [r3, #2]
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	429a      	cmp	r2, r3
 8005684:	d920      	bls.n	80056c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800568e:	e013      	b.n	80056b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005690:	f107 030a 	add.w	r3, r7, #10
 8005694:	4619      	mov	r1, r3
 8005696:	6978      	ldr	r0, [r7, #20]
 8005698:	f000 f81b 	bl	80056d2 <USBD_GetNextDesc>
 800569c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b05      	cmp	r3, #5
 80056a4:	d108      	bne.n	80056b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	789b      	ldrb	r3, [r3, #2]
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d008      	beq.n	80056c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	885b      	ldrh	r3, [r3, #2]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	897b      	ldrh	r3, [r7, #10]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d8e5      	bhi.n	8005690 <USBD_GetEpDesc+0x32>
 80056c4:	e000      	b.n	80056c8 <USBD_GetEpDesc+0x6a>
          break;
 80056c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80056c8:	693b      	ldr	r3, [r7, #16]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	881a      	ldrh	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4413      	add	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80056fe:	68fb      	ldr	r3, [r7, #12]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	3301      	adds	r3, #1
 8005722:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800572a:	8a3b      	ldrh	r3, [r7, #16]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	b21a      	sxth	r2, r3
 8005730:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005734:	4313      	orrs	r3, r2
 8005736:	b21b      	sxth	r3, r3
 8005738:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800573a:	89fb      	ldrh	r3, [r7, #14]
}
 800573c:	4618      	mov	r0, r3
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d005      	beq.n	800576e <USBD_StdDevReq+0x26>
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d857      	bhi.n	8005816 <USBD_StdDevReq+0xce>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00f      	beq.n	800578a <USBD_StdDevReq+0x42>
 800576a:	2b20      	cmp	r3, #32
 800576c:	d153      	bne.n	8005816 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	32ae      	adds	r2, #174	; 0xae
 8005778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4798      	blx	r3
 8005784:	4603      	mov	r3, r0
 8005786:	73fb      	strb	r3, [r7, #15]
      break;
 8005788:	e04a      	b.n	8005820 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b09      	cmp	r3, #9
 8005790:	d83b      	bhi.n	800580a <USBD_StdDevReq+0xc2>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <USBD_StdDevReq+0x50>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057ed 	.word	0x080057ed
 800579c:	08005801 	.word	0x08005801
 80057a0:	0800580b 	.word	0x0800580b
 80057a4:	080057f7 	.word	0x080057f7
 80057a8:	0800580b 	.word	0x0800580b
 80057ac:	080057cb 	.word	0x080057cb
 80057b0:	080057c1 	.word	0x080057c1
 80057b4:	0800580b 	.word	0x0800580b
 80057b8:	080057e3 	.word	0x080057e3
 80057bc:	080057d5 	.word	0x080057d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057c0:	6839      	ldr	r1, [r7, #0]
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa3c 	bl	8005c40 <USBD_GetDescriptor>
          break;
 80057c8:	e024      	b.n	8005814 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fba1 	bl	8005f14 <USBD_SetAddress>
          break;
 80057d2:	e01f      	b.n	8005814 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fbe0 	bl	8005f9c <USBD_SetConfig>
 80057dc:	4603      	mov	r3, r0
 80057de:	73fb      	strb	r3, [r7, #15]
          break;
 80057e0:	e018      	b.n	8005814 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fc83 	bl	80060f0 <USBD_GetConfig>
          break;
 80057ea:	e013      	b.n	8005814 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fcb4 	bl	800615c <USBD_GetStatus>
          break;
 80057f4:	e00e      	b.n	8005814 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fce3 	bl	80061c4 <USBD_SetFeature>
          break;
 80057fe:	e009      	b.n	8005814 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fd07 	bl	8006216 <USBD_ClrFeature>
          break;
 8005808:	e004      	b.n	8005814 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fd5e 	bl	80062ce <USBD_CtlError>
          break;
 8005812:	bf00      	nop
      }
      break;
 8005814:	e004      	b.n	8005820 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fd58 	bl	80062ce <USBD_CtlError>
      break;
 800581e:	bf00      	nop
  }

  return ret;
 8005820:	7bfb      	ldrb	r3, [r7, #15]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop

0800582c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d005      	beq.n	8005852 <USBD_StdItfReq+0x26>
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d852      	bhi.n	80058f0 <USBD_StdItfReq+0xc4>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <USBD_StdItfReq+0x26>
 800584e:	2b20      	cmp	r3, #32
 8005850:	d14e      	bne.n	80058f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005858:	b2db      	uxtb	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	2b02      	cmp	r3, #2
 800585e:	d840      	bhi.n	80058e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	889b      	ldrh	r3, [r3, #4]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	d836      	bhi.n	80058d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	889b      	ldrh	r3, [r3, #4]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fed9 	bl	800562a <USBD_CoreFindIF>
 8005878:	4603      	mov	r3, r0
 800587a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800587c:	7bbb      	ldrb	r3, [r7, #14]
 800587e:	2bff      	cmp	r3, #255	; 0xff
 8005880:	d01d      	beq.n	80058be <USBD_StdItfReq+0x92>
 8005882:	7bbb      	ldrb	r3, [r7, #14]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d11a      	bne.n	80058be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005888:	7bba      	ldrb	r2, [r7, #14]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	; 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00f      	beq.n	80058b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005898:	7bba      	ldrb	r2, [r7, #14]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80058a0:	7bba      	ldrb	r2, [r7, #14]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	32ae      	adds	r2, #174	; 0xae
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4798      	blx	r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058b6:	e004      	b.n	80058c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80058b8:	2303      	movs	r3, #3
 80058ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058bc:	e001      	b.n	80058c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80058be:	2303      	movs	r3, #3
 80058c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	88db      	ldrh	r3, [r3, #6]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d110      	bne.n	80058ec <USBD_StdItfReq+0xc0>
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10d      	bne.n	80058ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fdc7 	bl	8006464 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058d6:	e009      	b.n	80058ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fcf7 	bl	80062ce <USBD_CtlError>
          break;
 80058e0:	e004      	b.n	80058ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fcf2 	bl	80062ce <USBD_CtlError>
          break;
 80058ea:	e000      	b.n	80058ee <USBD_StdItfReq+0xc2>
          break;
 80058ec:	bf00      	nop
      }
      break;
 80058ee:	e004      	b.n	80058fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fceb 	bl	80062ce <USBD_CtlError>
      break;
 80058f8:	bf00      	nop
  }

  return ret;
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	889b      	ldrh	r3, [r3, #4]
 8005916:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d007      	beq.n	8005934 <USBD_StdEPReq+0x30>
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	f200 817f 	bhi.w	8005c28 <USBD_StdEPReq+0x324>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d02a      	beq.n	8005984 <USBD_StdEPReq+0x80>
 800592e:	2b20      	cmp	r3, #32
 8005930:	f040 817a 	bne.w	8005c28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005934:	7bbb      	ldrb	r3, [r7, #14]
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fe83 	bl	8005644 <USBD_CoreFindEP>
 800593e:	4603      	mov	r3, r0
 8005940:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005942:	7b7b      	ldrb	r3, [r7, #13]
 8005944:	2bff      	cmp	r3, #255	; 0xff
 8005946:	f000 8174 	beq.w	8005c32 <USBD_StdEPReq+0x32e>
 800594a:	7b7b      	ldrb	r3, [r7, #13]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f040 8170 	bne.w	8005c32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005952:	7b7a      	ldrb	r2, [r7, #13]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800595a:	7b7a      	ldrb	r2, [r7, #13]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	32ae      	adds	r2, #174	; 0xae
 8005960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8163 	beq.w	8005c32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800596c:	7b7a      	ldrb	r2, [r7, #13]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	32ae      	adds	r2, #174	; 0xae
 8005972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005982:	e156      	b.n	8005c32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b03      	cmp	r3, #3
 800598a:	d008      	beq.n	800599e <USBD_StdEPReq+0x9a>
 800598c:	2b03      	cmp	r3, #3
 800598e:	f300 8145 	bgt.w	8005c1c <USBD_StdEPReq+0x318>
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 809b 	beq.w	8005ace <USBD_StdEPReq+0x1ca>
 8005998:	2b01      	cmp	r3, #1
 800599a:	d03c      	beq.n	8005a16 <USBD_StdEPReq+0x112>
 800599c:	e13e      	b.n	8005c1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d002      	beq.n	80059b0 <USBD_StdEPReq+0xac>
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d016      	beq.n	80059dc <USBD_StdEPReq+0xd8>
 80059ae:	e02c      	b.n	8005a0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00d      	beq.n	80059d2 <USBD_StdEPReq+0xce>
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d00a      	beq.n	80059d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f004 faaf 	bl	8009f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f004 faab 	bl	8009f24 <USBD_LL_StallEP>
 80059ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059d0:	e020      	b.n	8005a14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fc7a 	bl	80062ce <USBD_CtlError>
              break;
 80059da:	e01b      	b.n	8005a14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	885b      	ldrh	r3, [r3, #2]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10e      	bne.n	8005a02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <USBD_StdEPReq+0xfe>
 80059ea:	7bbb      	ldrb	r3, [r7, #14]
 80059ec:	2b80      	cmp	r3, #128	; 0x80
 80059ee:	d008      	beq.n	8005a02 <USBD_StdEPReq+0xfe>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	88db      	ldrh	r3, [r3, #6]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f004 fa91 	bl	8009f24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fd2e 	bl	8006464 <USBD_CtlSendStatus>

              break;
 8005a08:	e004      	b.n	8005a14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fc5e 	bl	80062ce <USBD_CtlError>
              break;
 8005a12:	bf00      	nop
          }
          break;
 8005a14:	e107      	b.n	8005c26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d002      	beq.n	8005a28 <USBD_StdEPReq+0x124>
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d016      	beq.n	8005a54 <USBD_StdEPReq+0x150>
 8005a26:	e04b      	b.n	8005ac0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a28:	7bbb      	ldrb	r3, [r7, #14]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00d      	beq.n	8005a4a <USBD_StdEPReq+0x146>
 8005a2e:	7bbb      	ldrb	r3, [r7, #14]
 8005a30:	2b80      	cmp	r3, #128	; 0x80
 8005a32:	d00a      	beq.n	8005a4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a34:	7bbb      	ldrb	r3, [r7, #14]
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f004 fa73 	bl	8009f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a3e:	2180      	movs	r1, #128	; 0x80
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f004 fa6f 	bl	8009f24 <USBD_LL_StallEP>
 8005a46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a48:	e040      	b.n	8005acc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fc3e 	bl	80062ce <USBD_CtlError>
              break;
 8005a52:	e03b      	b.n	8005acc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	885b      	ldrh	r3, [r3, #2]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d136      	bne.n	8005aca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f004 fa79 	bl	8009f62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fcf7 	bl	8006464 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fde2 	bl	8005644 <USBD_CoreFindEP>
 8005a80:	4603      	mov	r3, r0
 8005a82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a84:	7b7b      	ldrb	r3, [r7, #13]
 8005a86:	2bff      	cmp	r3, #255	; 0xff
 8005a88:	d01f      	beq.n	8005aca <USBD_StdEPReq+0x1c6>
 8005a8a:	7b7b      	ldrb	r3, [r7, #13]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d11c      	bne.n	8005aca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005a90:	7b7a      	ldrb	r2, [r7, #13]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005a98:	7b7a      	ldrb	r2, [r7, #13]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	32ae      	adds	r2, #174	; 0xae
 8005a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d010      	beq.n	8005aca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005aa8:	7b7a      	ldrb	r2, [r7, #13]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	32ae      	adds	r2, #174	; 0xae
 8005aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
 8005aba:	4603      	mov	r3, r0
 8005abc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005abe:	e004      	b.n	8005aca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fc03 	bl	80062ce <USBD_CtlError>
              break;
 8005ac8:	e000      	b.n	8005acc <USBD_StdEPReq+0x1c8>
              break;
 8005aca:	bf00      	nop
          }
          break;
 8005acc:	e0ab      	b.n	8005c26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d002      	beq.n	8005ae0 <USBD_StdEPReq+0x1dc>
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d032      	beq.n	8005b44 <USBD_StdEPReq+0x240>
 8005ade:	e097      	b.n	8005c10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ae0:	7bbb      	ldrb	r3, [r7, #14]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <USBD_StdEPReq+0x1f2>
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b80      	cmp	r3, #128	; 0x80
 8005aea:	d004      	beq.n	8005af6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fbed 	bl	80062ce <USBD_CtlError>
                break;
 8005af4:	e091      	b.n	8005c1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da0b      	bge.n	8005b16 <USBD_StdEPReq+0x212>
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	3310      	adds	r3, #16
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	3304      	adds	r3, #4
 8005b14:	e00b      	b.n	8005b2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fc37 	bl	80063b0 <USBD_CtlSendData>
              break;
 8005b42:	e06a      	b.n	8005c1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	da11      	bge.n	8005b70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b4c:	7bbb      	ldrb	r3, [r7, #14]
 8005b4e:	f003 020f 	and.w	r2, r3, #15
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	3324      	adds	r3, #36	; 0x24
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d117      	bne.n	8005b96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fbb0 	bl	80062ce <USBD_CtlError>
                  break;
 8005b6e:	e054      	b.n	8005c1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fb9d 	bl	80062ce <USBD_CtlError>
                  break;
 8005b94:	e041      	b.n	8005c1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da0b      	bge.n	8005bb6 <USBD_StdEPReq+0x2b2>
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	3310      	adds	r3, #16
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	e00b      	b.n	8005bce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	4413      	add	r3, r2
 8005bcc:	3304      	adds	r3, #4
 8005bce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <USBD_StdEPReq+0x2d8>
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	d103      	bne.n	8005be4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e00e      	b.n	8005c02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f004 f9d9 	bl	8009fa0 <USBD_LL_IsStallEP>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e002      	b.n	8005c02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2202      	movs	r2, #2
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fbd1 	bl	80063b0 <USBD_CtlSendData>
              break;
 8005c0e:	e004      	b.n	8005c1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fb5b 	bl	80062ce <USBD_CtlError>
              break;
 8005c18:	bf00      	nop
          }
          break;
 8005c1a:	e004      	b.n	8005c26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fb55 	bl	80062ce <USBD_CtlError>
          break;
 8005c24:	bf00      	nop
      }
      break;
 8005c26:	e005      	b.n	8005c34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fb4f 	bl	80062ce <USBD_CtlError>
      break;
 8005c30:	e000      	b.n	8005c34 <USBD_StdEPReq+0x330>
      break;
 8005c32:	bf00      	nop
  }

  return ret;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	885b      	ldrh	r3, [r3, #2]
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	2b06      	cmp	r3, #6
 8005c62:	f200 8128 	bhi.w	8005eb6 <USBD_GetDescriptor+0x276>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <USBD_GetDescriptor+0x2c>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c89 	.word	0x08005c89
 8005c70:	08005ca1 	.word	0x08005ca1
 8005c74:	08005ce1 	.word	0x08005ce1
 8005c78:	08005eb7 	.word	0x08005eb7
 8005c7c:	08005eb7 	.word	0x08005eb7
 8005c80:	08005e57 	.word	0x08005e57
 8005c84:	08005e83 	.word	0x08005e83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	7c12      	ldrb	r2, [r2, #16]
 8005c94:	f107 0108 	add.w	r1, r7, #8
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4798      	blx	r3
 8005c9c:	60f8      	str	r0, [r7, #12]
      break;
 8005c9e:	e112      	b.n	8005ec6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	7c1b      	ldrb	r3, [r3, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10d      	bne.n	8005cc4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	f107 0208 	add.w	r2, r7, #8
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
 8005cb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cc2:	e100      	b.n	8005ec6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	f107 0208 	add.w	r2, r7, #8
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4798      	blx	r3
 8005cd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	2202      	movs	r2, #2
 8005cdc:	701a      	strb	r2, [r3, #0]
      break;
 8005cde:	e0f2      	b.n	8005ec6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	885b      	ldrh	r3, [r3, #2]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	f200 80ac 	bhi.w	8005e44 <USBD_GetDescriptor+0x204>
 8005cec:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <USBD_GetDescriptor+0xb4>)
 8005cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf2:	bf00      	nop
 8005cf4:	08005d0d 	.word	0x08005d0d
 8005cf8:	08005d41 	.word	0x08005d41
 8005cfc:	08005d75 	.word	0x08005d75
 8005d00:	08005da9 	.word	0x08005da9
 8005d04:	08005ddd 	.word	0x08005ddd
 8005d08:	08005e11 	.word	0x08005e11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	7c12      	ldrb	r2, [r2, #16]
 8005d24:	f107 0108 	add.w	r1, r7, #8
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4798      	blx	r3
 8005d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d2e:	e091      	b.n	8005e54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 facb 	bl	80062ce <USBD_CtlError>
            err++;
 8005d38:	7afb      	ldrb	r3, [r7, #11]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d3e:	e089      	b.n	8005e54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	7c12      	ldrb	r2, [r2, #16]
 8005d58:	f107 0108 	add.w	r1, r7, #8
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4798      	blx	r3
 8005d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d62:	e077      	b.n	8005e54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fab1 	bl	80062ce <USBD_CtlError>
            err++;
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	72fb      	strb	r3, [r7, #11]
          break;
 8005d72:	e06f      	b.n	8005e54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	7c12      	ldrb	r2, [r2, #16]
 8005d8c:	f107 0108 	add.w	r1, r7, #8
 8005d90:	4610      	mov	r0, r2
 8005d92:	4798      	blx	r3
 8005d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d96:	e05d      	b.n	8005e54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa97 	bl	80062ce <USBD_CtlError>
            err++;
 8005da0:	7afb      	ldrb	r3, [r7, #11]
 8005da2:	3301      	adds	r3, #1
 8005da4:	72fb      	strb	r3, [r7, #11]
          break;
 8005da6:	e055      	b.n	8005e54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	7c12      	ldrb	r2, [r2, #16]
 8005dc0:	f107 0108 	add.w	r1, r7, #8
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4798      	blx	r3
 8005dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dca:	e043      	b.n	8005e54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa7d 	bl	80062ce <USBD_CtlError>
            err++;
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dda:	e03b      	b.n	8005e54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	7c12      	ldrb	r2, [r2, #16]
 8005df4:	f107 0108 	add.w	r1, r7, #8
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4798      	blx	r3
 8005dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dfe:	e029      	b.n	8005e54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa63 	bl	80062ce <USBD_CtlError>
            err++;
 8005e08:	7afb      	ldrb	r3, [r7, #11]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e0e:	e021      	b.n	8005e54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	7c12      	ldrb	r2, [r2, #16]
 8005e28:	f107 0108 	add.w	r1, r7, #8
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4798      	blx	r3
 8005e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e32:	e00f      	b.n	8005e54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa49 	bl	80062ce <USBD_CtlError>
            err++;
 8005e3c:	7afb      	ldrb	r3, [r7, #11]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	72fb      	strb	r3, [r7, #11]
          break;
 8005e42:	e007      	b.n	8005e54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa41 	bl	80062ce <USBD_CtlError>
          err++;
 8005e4c:	7afb      	ldrb	r3, [r7, #11]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e52:	bf00      	nop
      }
      break;
 8005e54:	e037      	b.n	8005ec6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	7c1b      	ldrb	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	f107 0208 	add.w	r2, r7, #8
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4798      	blx	r3
 8005e6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e70:	e029      	b.n	8005ec6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fa2a 	bl	80062ce <USBD_CtlError>
        err++;
 8005e7a:	7afb      	ldrb	r3, [r7, #11]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e80:	e021      	b.n	8005ec6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7c1b      	ldrb	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10d      	bne.n	8005ea6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	f107 0208 	add.w	r2, r7, #8
 8005e96:	4610      	mov	r0, r2
 8005e98:	4798      	blx	r3
 8005e9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ea4:	e00f      	b.n	8005ec6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fa10 	bl	80062ce <USBD_CtlError>
        err++;
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	72fb      	strb	r3, [r7, #11]
      break;
 8005eb4:	e007      	b.n	8005ec6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fa08 	bl	80062ce <USBD_CtlError>
      err++;
 8005ebe:	7afb      	ldrb	r3, [r7, #11]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ec4:	bf00      	nop
  }

  if (err != 0U)
 8005ec6:	7afb      	ldrb	r3, [r7, #11]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d11e      	bne.n	8005f0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	88db      	ldrh	r3, [r3, #6]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d016      	beq.n	8005f02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005ed4:	893b      	ldrh	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00e      	beq.n	8005ef8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	88da      	ldrh	r2, [r3, #6]
 8005ede:	893b      	ldrh	r3, [r7, #8]
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	bf28      	it	cs
 8005ee4:	4613      	movcs	r3, r2
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005eea:	893b      	ldrh	r3, [r7, #8]
 8005eec:	461a      	mov	r2, r3
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fa5d 	bl	80063b0 <USBD_CtlSendData>
 8005ef6:	e009      	b.n	8005f0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f9e7 	bl	80062ce <USBD_CtlError>
 8005f00:	e004      	b.n	8005f0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 faae 	bl	8006464 <USBD_CtlSendStatus>
 8005f08:	e000      	b.n	8005f0c <USBD_GetDescriptor+0x2cc>
    return;
 8005f0a:	bf00      	nop
  }
}
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop

08005f14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	889b      	ldrh	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d131      	bne.n	8005f8a <USBD_SetAddress+0x76>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	88db      	ldrh	r3, [r3, #6]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d12d      	bne.n	8005f8a <USBD_SetAddress+0x76>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	885b      	ldrh	r3, [r3, #2]
 8005f32:	2b7f      	cmp	r3, #127	; 0x7f
 8005f34:	d829      	bhi.n	8005f8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	885b      	ldrh	r3, [r3, #2]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d104      	bne.n	8005f58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f9bc 	bl	80062ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f56:	e01d      	b.n	8005f94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	7bfa      	ldrb	r2, [r7, #15]
 8005f5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f004 f847 	bl	8009ff8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa7a 	bl	8006464 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7e:	e009      	b.n	8005f94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f88:	e004      	b.n	8005f94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f99e 	bl	80062ce <USBD_CtlError>
  }
}
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	885b      	ldrh	r3, [r3, #2]
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	4b4e      	ldr	r3, [pc, #312]	; (80060ec <USBD_SetConfig+0x150>)
 8005fb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fb4:	4b4d      	ldr	r3, [pc, #308]	; (80060ec <USBD_SetConfig+0x150>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d905      	bls.n	8005fc8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f985 	bl	80062ce <USBD_CtlError>
    return USBD_FAIL;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e08c      	b.n	80060e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d002      	beq.n	8005fda <USBD_SetConfig+0x3e>
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d029      	beq.n	800602c <USBD_SetConfig+0x90>
 8005fd8:	e075      	b.n	80060c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005fda:	4b44      	ldr	r3, [pc, #272]	; (80060ec <USBD_SetConfig+0x150>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d020      	beq.n	8006024 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005fe2:	4b42      	ldr	r3, [pc, #264]	; (80060ec <USBD_SetConfig+0x150>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fec:	4b3f      	ldr	r3, [pc, #252]	; (80060ec <USBD_SetConfig+0x150>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fe ffe7 	bl	8004fc6 <USBD_SetClassConfig>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d008      	beq.n	8006014 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f962 	bl	80062ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2202      	movs	r2, #2
 800600e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006012:	e065      	b.n	80060e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa25 	bl	8006464 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2203      	movs	r2, #3
 800601e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006022:	e05d      	b.n	80060e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fa1d 	bl	8006464 <USBD_CtlSendStatus>
      break;
 800602a:	e059      	b.n	80060e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800602c:	4b2f      	ldr	r3, [pc, #188]	; (80060ec <USBD_SetConfig+0x150>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d112      	bne.n	800605a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800603c:	4b2b      	ldr	r3, [pc, #172]	; (80060ec <USBD_SetConfig+0x150>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006046:	4b29      	ldr	r3, [pc, #164]	; (80060ec <USBD_SetConfig+0x150>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7fe ffd6 	bl	8004ffe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa06 	bl	8006464 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006058:	e042      	b.n	80060e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800605a:	4b24      	ldr	r3, [pc, #144]	; (80060ec <USBD_SetConfig+0x150>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d02a      	beq.n	80060be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7fe ffc4 	bl	8004ffe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006076:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <USBD_SetConfig+0x150>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006080:	4b1a      	ldr	r3, [pc, #104]	; (80060ec <USBD_SetConfig+0x150>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fe ff9d 	bl	8004fc6 <USBD_SetClassConfig>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00f      	beq.n	80060b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f918 	bl	80062ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fe ffa9 	bl	8004ffe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80060b4:	e014      	b.n	80060e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f9d4 	bl	8006464 <USBD_CtlSendStatus>
      break;
 80060bc:	e010      	b.n	80060e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9d0 	bl	8006464 <USBD_CtlSendStatus>
      break;
 80060c4:	e00c      	b.n	80060e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f900 	bl	80062ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <USBD_SetConfig+0x150>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fe ff92 	bl	8004ffe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060da:	2303      	movs	r3, #3
 80060dc:	73fb      	strb	r3, [r7, #15]
      break;
 80060de:	bf00      	nop
  }

  return ret;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000194 	.word	0x20000194

080060f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	88db      	ldrh	r3, [r3, #6]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d004      	beq.n	800610c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f8e2 	bl	80062ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800610a:	e023      	b.n	8006154 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	dc02      	bgt.n	800611e <USBD_GetConfig+0x2e>
 8006118:	2b00      	cmp	r3, #0
 800611a:	dc03      	bgt.n	8006124 <USBD_GetConfig+0x34>
 800611c:	e015      	b.n	800614a <USBD_GetConfig+0x5a>
 800611e:	2b03      	cmp	r3, #3
 8006120:	d00b      	beq.n	800613a <USBD_GetConfig+0x4a>
 8006122:	e012      	b.n	800614a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3308      	adds	r3, #8
 800612e:	2201      	movs	r2, #1
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f93c 	bl	80063b0 <USBD_CtlSendData>
        break;
 8006138:	e00c      	b.n	8006154 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	2201      	movs	r2, #1
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f934 	bl	80063b0 <USBD_CtlSendData>
        break;
 8006148:	e004      	b.n	8006154 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f8be 	bl	80062ce <USBD_CtlError>
        break;
 8006152:	bf00      	nop
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616c:	b2db      	uxtb	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	2b02      	cmp	r3, #2
 8006172:	d81e      	bhi.n	80061b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	88db      	ldrh	r3, [r3, #6]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d004      	beq.n	8006186 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8a5 	bl	80062ce <USBD_CtlError>
        break;
 8006184:	e01a      	b.n	80061bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f043 0202 	orr.w	r2, r3, #2
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	330c      	adds	r3, #12
 80061a6:	2202      	movs	r2, #2
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f900 	bl	80063b0 <USBD_CtlSendData>
      break;
 80061b0:	e004      	b.n	80061bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f88a 	bl	80062ce <USBD_CtlError>
      break;
 80061ba:	bf00      	nop
  }
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	885b      	ldrh	r3, [r3, #2]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d107      	bne.n	80061e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f940 	bl	8006464 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80061e4:	e013      	b.n	800620e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	885b      	ldrh	r3, [r3, #2]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d10b      	bne.n	8006206 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	889b      	ldrh	r3, [r3, #4]
 80061f2:	0a1b      	lsrs	r3, r3, #8
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f930 	bl	8006464 <USBD_CtlSendStatus>
}
 8006204:	e003      	b.n	800620e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f860 	bl	80062ce <USBD_CtlError>
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006226:	b2db      	uxtb	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	2b02      	cmp	r3, #2
 800622c:	d80b      	bhi.n	8006246 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	885b      	ldrh	r3, [r3, #2]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d10c      	bne.n	8006250 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f910 	bl	8006464 <USBD_CtlSendStatus>
      }
      break;
 8006244:	e004      	b.n	8006250 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f840 	bl	80062ce <USBD_CtlError>
      break;
 800624e:	e000      	b.n	8006252 <USBD_ClrFeature+0x3c>
      break;
 8006250:	bf00      	nop
  }
}
 8006252:	bf00      	nop
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	781a      	ldrb	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fa41 	bl	800570c <SWAPBYTE>
 800628a:	4603      	mov	r3, r0
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3301      	adds	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff fa34 	bl	800570c <SWAPBYTE>
 80062a4:	4603      	mov	r3, r0
 80062a6:	461a      	mov	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f7ff fa27 	bl	800570c <SWAPBYTE>
 80062be:	4603      	mov	r3, r0
 80062c0:	461a      	mov	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	80da      	strh	r2, [r3, #6]
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062d8:	2180      	movs	r1, #128	; 0x80
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f003 fe22 	bl	8009f24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062e0:	2100      	movs	r1, #0
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f003 fe1e 	bl	8009f24 <USBD_LL_StallEP>
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d036      	beq.n	8006374 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800630a:	6938      	ldr	r0, [r7, #16]
 800630c:	f000 f836 	bl	800637c <USBD_GetLen>
 8006310:	4603      	mov	r3, r0
 8006312:	3301      	adds	r3, #1
 8006314:	b29b      	uxth	r3, r3
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4413      	add	r3, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	7812      	ldrb	r2, [r2, #0]
 8006328:	701a      	strb	r2, [r3, #0]
  idx++;
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	3301      	adds	r3, #1
 800632e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	2203      	movs	r2, #3
 8006338:	701a      	strb	r2, [r3, #0]
  idx++;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	3301      	adds	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006340:	e013      	b.n	800636a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	4413      	add	r3, r2
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	3301      	adds	r3, #1
 8006352:	613b      	str	r3, [r7, #16]
    idx++;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	3301      	adds	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	4413      	add	r3, r2
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
    idx++;
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	3301      	adds	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e7      	bne.n	8006342 <USBD_GetString+0x52>
 8006372:	e000      	b.n	8006376 <USBD_GetString+0x86>
    return;
 8006374:	bf00      	nop
  }
}
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800638c:	e005      	b.n	800639a <USBD_GetLen+0x1e>
  {
    len++;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	3301      	adds	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	3301      	adds	r3, #1
 8006398:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f5      	bne.n	800638e <USBD_GetLen+0x12>
  }

  return len;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2202      	movs	r2, #2
 80063c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	2100      	movs	r1, #0
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f003 fe2d 	bl	800a036 <USBD_LL_Transmit>

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	2100      	movs	r1, #0
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f003 fe1c 	bl	800a036 <USBD_LL_Transmit>

  return USBD_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2203      	movs	r2, #3
 8006418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	2100      	movs	r1, #0
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f003 fe20 	bl	800a078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	2100      	movs	r1, #0
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f003 fe0f 	bl	800a078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2204      	movs	r2, #4
 8006470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006474:	2300      	movs	r3, #0
 8006476:	2200      	movs	r2, #0
 8006478:	2100      	movs	r1, #0
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f003 fddb 	bl	800a036 <USBD_LL_Transmit>

  return USBD_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2205      	movs	r2, #5
 8006496:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800649a:	2300      	movs	r3, #0
 800649c:	2200      	movs	r2, #0
 800649e:	2100      	movs	r1, #0
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f003 fde9 	bl	800a078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <__NVIC_SetPriority>:
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	6039      	str	r1, [r7, #0]
 80064ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	db0a      	blt.n	80064da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	490c      	ldr	r1, [pc, #48]	; (80064fc <__NVIC_SetPriority+0x4c>)
 80064ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ce:	0112      	lsls	r2, r2, #4
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	440b      	add	r3, r1
 80064d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064d8:	e00a      	b.n	80064f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	4908      	ldr	r1, [pc, #32]	; (8006500 <__NVIC_SetPriority+0x50>)
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	3b04      	subs	r3, #4
 80064e8:	0112      	lsls	r2, r2, #4
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	440b      	add	r3, r1
 80064ee:	761a      	strb	r2, [r3, #24]
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	e000e100 	.word	0xe000e100
 8006500:	e000ed00 	.word	0xe000ed00

08006504 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006508:	2100      	movs	r1, #0
 800650a:	f06f 0004 	mvn.w	r0, #4
 800650e:	f7ff ffcf 	bl	80064b0 <__NVIC_SetPriority>
#endif
}
 8006512:	bf00      	nop
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651e:	f3ef 8305 	mrs	r3, IPSR
 8006522:	603b      	str	r3, [r7, #0]
  return(result);
 8006524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800652a:	f06f 0305 	mvn.w	r3, #5
 800652e:	607b      	str	r3, [r7, #4]
 8006530:	e00c      	b.n	800654c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <osKernelInitialize+0x44>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d105      	bne.n	8006546 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <osKernelInitialize+0x44>)
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006540:	2300      	movs	r3, #0
 8006542:	607b      	str	r3, [r7, #4]
 8006544:	e002      	b.n	800654c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800654a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800654c:	687b      	ldr	r3, [r7, #4]
}
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000198 	.word	0x20000198

08006560 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006566:	f3ef 8305 	mrs	r3, IPSR
 800656a:	603b      	str	r3, [r7, #0]
  return(result);
 800656c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006572:	f06f 0305 	mvn.w	r3, #5
 8006576:	607b      	str	r3, [r7, #4]
 8006578:	e010      	b.n	800659c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800657a:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <osKernelStart+0x48>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d109      	bne.n	8006596 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006582:	f7ff ffbf 	bl	8006504 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006586:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <osKernelStart+0x48>)
 8006588:	2202      	movs	r2, #2
 800658a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800658c:	f001 fa7c 	bl	8007a88 <vTaskStartScheduler>
      stat = osOK;
 8006590:	2300      	movs	r3, #0
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	e002      	b.n	800659c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800659a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800659c:	687b      	ldr	r3, [r7, #4]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000198 	.word	0x20000198

080065ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08e      	sub	sp, #56	; 0x38
 80065b0:	af04      	add	r7, sp, #16
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065bc:	f3ef 8305 	mrs	r3, IPSR
 80065c0:	617b      	str	r3, [r7, #20]
  return(result);
 80065c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d17e      	bne.n	80066c6 <osThreadNew+0x11a>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d07b      	beq.n	80066c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065ce:	2380      	movs	r3, #128	; 0x80
 80065d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065d2:	2318      	movs	r3, #24
 80065d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d045      	beq.n	8006672 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <osThreadNew+0x48>
        name = attr->name;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <osThreadNew+0x6e>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	2b38      	cmp	r3, #56	; 0x38
 800660c:	d805      	bhi.n	800661a <osThreadNew+0x6e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <osThreadNew+0x72>
        return (NULL);
 800661a:	2300      	movs	r3, #0
 800661c:	e054      	b.n	80066c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	089b      	lsrs	r3, r3, #2
 800662c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00e      	beq.n	8006654 <osThreadNew+0xa8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2bcb      	cmp	r3, #203	; 0xcb
 800663c:	d90a      	bls.n	8006654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006642:	2b00      	cmp	r3, #0
 8006644:	d006      	beq.n	8006654 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <osThreadNew+0xa8>
        mem = 1;
 800664e:	2301      	movs	r3, #1
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	e010      	b.n	8006676 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10c      	bne.n	8006676 <osThreadNew+0xca>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d108      	bne.n	8006676 <osThreadNew+0xca>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <osThreadNew+0xca>
          mem = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	e001      	b.n	8006676 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d110      	bne.n	800669e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006684:	9202      	str	r2, [sp, #8]
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	6a3a      	ldr	r2, [r7, #32]
 8006690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f001 f80c 	bl	80076b0 <xTaskCreateStatic>
 8006698:	4603      	mov	r3, r0
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	e013      	b.n	80066c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d110      	bne.n	80066c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	f107 0310 	add.w	r3, r7, #16
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f001 f857 	bl	800776a <xTaskCreate>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d001      	beq.n	80066c6 <osThreadNew+0x11a>
            hTask = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066c6:	693b      	ldr	r3, [r7, #16]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3728      	adds	r7, #40	; 0x28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a07      	ldr	r2, [pc, #28]	; (80066fc <vApplicationGetIdleTaskMemory+0x2c>)
 80066e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4a06      	ldr	r2, [pc, #24]	; (8006700 <vApplicationGetIdleTaskMemory+0x30>)
 80066e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2280      	movs	r2, #128	; 0x80
 80066ec:	601a      	str	r2, [r3, #0]
}
 80066ee:	bf00      	nop
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	2000019c 	.word	0x2000019c
 8006700:	20000268 	.word	0x20000268

08006704 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a07      	ldr	r2, [pc, #28]	; (8006730 <vApplicationGetTimerTaskMemory+0x2c>)
 8006714:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4a06      	ldr	r2, [pc, #24]	; (8006734 <vApplicationGetTimerTaskMemory+0x30>)
 800671a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006722:	601a      	str	r2, [r3, #0]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000468 	.word	0x20000468
 8006734:	20000534 	.word	0x20000534

08006738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f103 0208 	add.w	r2, r3, #8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f103 0208 	add.w	r2, r3, #8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f103 0208 	add.w	r2, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	601a      	str	r2, [r3, #0]
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f0:	d103      	bne.n	80067fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	e00c      	b.n	8006814 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3308      	adds	r3, #8
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	e002      	b.n	8006808 <vListInsert+0x2e>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	429a      	cmp	r2, r3
 8006812:	d2f6      	bcs.n	8006802 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	601a      	str	r2, [r3, #0]
}
 8006840:	bf00      	nop
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6892      	ldr	r2, [r2, #8]
 8006862:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6852      	ldr	r2, [r2, #4]
 800686c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	d103      	bne.n	8006880 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	1e5a      	subs	r2, r3, #1
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068ca:	f002 fb93 	bl	8008ff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	441a      	add	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	3b01      	subs	r3, #1
 80068fc:	68f9      	ldr	r1, [r7, #12]
 80068fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	441a      	add	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	22ff      	movs	r2, #255	; 0xff
 800690e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	22ff      	movs	r2, #255	; 0xff
 8006916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d114      	bne.n	800694a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01a      	beq.n	800695e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3310      	adds	r3, #16
 800692c:	4618      	mov	r0, r3
 800692e:	f001 fb45 	bl	8007fbc <xTaskRemoveFromEventList>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d012      	beq.n	800695e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <xQueueGenericReset+0xcc>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	e009      	b.n	800695e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3310      	adds	r3, #16
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fef2 	bl	8006738 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3324      	adds	r3, #36	; 0x24
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff feed 	bl	8006738 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800695e:	f002 fb79 	bl	8009054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006962:	2301      	movs	r3, #1
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08e      	sub	sp, #56	; 0x38
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <xQueueGenericCreateStatic+0x52>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <xQueueGenericCreateStatic+0x56>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <xQueueGenericCreateStatic+0x58>
 80069c6:	2300      	movs	r3, #0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	623b      	str	r3, [r7, #32]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <xQueueGenericCreateStatic+0x7e>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <xQueueGenericCreateStatic+0x82>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <xQueueGenericCreateStatic+0x84>
 80069f2:	2300      	movs	r3, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	61fb      	str	r3, [r7, #28]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a0e:	2350      	movs	r3, #80	; 0x50
 8006a10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2b50      	cmp	r3, #80	; 0x50
 8006a16:	d00a      	beq.n	8006a2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	61bb      	str	r3, [r7, #24]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00d      	beq.n	8006a56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 f83f 	bl	8006ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3730      	adds	r7, #48	; 0x30
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	; 0x28
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	613b      	str	r3, [r7, #16]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3350      	adds	r3, #80	; 0x50
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f002 fbcd 	bl	8009238 <pvPortMalloc>
 8006a9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d011      	beq.n	8006aca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	3350      	adds	r3, #80	; 0x50
 8006aae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ab8:	79fa      	ldrb	r2, [r7, #7]
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f805 	bl	8006ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aca:	69bb      	ldr	r3, [r7, #24]
	}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3720      	adds	r7, #32
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e002      	b.n	8006af6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b02:	2101      	movs	r1, #1
 8006b04:	69b8      	ldr	r0, [r7, #24]
 8006b06:	f7ff fecb 	bl	80068a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	78fa      	ldrb	r2, [r7, #3]
 8006b0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2100      	movs	r1, #0
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f81d 	bl	8006b80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b086      	sub	sp, #24
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	4603      	mov	r3, r0
 8006b56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	461a      	mov	r2, r3
 8006b64:	6939      	ldr	r1, [r7, #16]
 8006b66:	6978      	ldr	r0, [r7, #20]
 8006b68:	f7ff ff7a 	bl	8006a60 <xQueueGenericCreate>
 8006b6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff ffd3 	bl	8006b1a <prvInitialiseMutex>

		return xNewQueue;
 8006b74:	68fb      	ldr	r3, [r7, #12]
	}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08e      	sub	sp, #56	; 0x38
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xQueueGenericSend+0x32>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d103      	bne.n	8006bc0 <xQueueGenericSend+0x40>
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <xQueueGenericSend+0x44>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e000      	b.n	8006bc6 <xQueueGenericSend+0x46>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <xQueueGenericSend+0x60>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d103      	bne.n	8006bee <xQueueGenericSend+0x6e>
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <xQueueGenericSend+0x72>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <xQueueGenericSend+0x74>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xQueueGenericSend+0x8e>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	623b      	str	r3, [r7, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c0e:	f001 fb97 	bl	8008340 <xTaskGetSchedulerState>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <xQueueGenericSend+0x9e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <xQueueGenericSend+0xa2>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <xQueueGenericSend+0xa4>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <xQueueGenericSend+0xbe>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	61fb      	str	r3, [r7, #28]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c3e:	f002 f9d9 	bl	8008ff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d302      	bcc.n	8006c54 <xQueueGenericSend+0xd4>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d129      	bne.n	8006ca8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c5a:	f000 fbbb 	bl	80073d4 <prvCopyDataToQueue>
 8006c5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d010      	beq.n	8006c8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	3324      	adds	r3, #36	; 0x24
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 f9a5 	bl	8007fbc <xTaskRemoveFromEventList>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d013      	beq.n	8006ca0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c78:	4b3f      	ldr	r3, [pc, #252]	; (8006d78 <xQueueGenericSend+0x1f8>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	e00a      	b.n	8006ca0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c90:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <xQueueGenericSend+0x1f8>)
 8006c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ca0:	f002 f9d8 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e063      	b.n	8006d70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cae:	f002 f9d1 	bl	8009054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e05c      	b.n	8006d70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cbc:	f107 0314 	add.w	r3, r7, #20
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f001 f9df 	bl	8008084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cca:	f002 f9c3 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cce:	f000 ff4b 	bl	8007b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cd2:	f002 f98f 	bl	8008ff4 <vPortEnterCritical>
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cdc:	b25b      	sxtb	r3, r3
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ce2:	d103      	bne.n	8006cec <xQueueGenericSend+0x16c>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cf8:	d103      	bne.n	8006d02 <xQueueGenericSend+0x182>
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d02:	f002 f9a7 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d06:	1d3a      	adds	r2, r7, #4
 8006d08:	f107 0314 	add.w	r3, r7, #20
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 f9ce 	bl	80080b0 <xTaskCheckForTimeOut>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d124      	bne.n	8006d64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d1c:	f000 fc52 	bl	80075c4 <prvIsQueueFull>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d018      	beq.n	8006d58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	3310      	adds	r3, #16
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 f8f4 	bl	8007f1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d36:	f000 fbdd 	bl	80074f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d3a:	f000 ff23 	bl	8007b84 <xTaskResumeAll>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f47f af7c 	bne.w	8006c3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d46:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <xQueueGenericSend+0x1f8>)
 8006d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	e772      	b.n	8006c3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d5a:	f000 fbcb 	bl	80074f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d5e:	f000 ff11 	bl	8007b84 <xTaskResumeAll>
 8006d62:	e76c      	b.n	8006c3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d66:	f000 fbc5 	bl	80074f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d6a:	f000 ff0b 	bl	8007b84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3738      	adds	r7, #56	; 0x38
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b090      	sub	sp, #64	; 0x40
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <xQueueGenericSendFromISR+0x3c>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <xQueueGenericSendFromISR+0x40>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <xQueueGenericSendFromISR+0x42>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d103      	bne.n	8006de6 <xQueueGenericSendFromISR+0x6a>
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <xQueueGenericSendFromISR+0x6e>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <xQueueGenericSendFromISR+0x70>
 8006dea:	2300      	movs	r3, #0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	623b      	str	r3, [r7, #32]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e06:	f002 f9d7 	bl	80091b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	61fa      	str	r2, [r7, #28]
 8006e20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d302      	bcc.n	8006e38 <xQueueGenericSendFromISR+0xbc>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d12f      	bne.n	8006e98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e4e:	f000 fac1 	bl	80073d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e5a:	d112      	bne.n	8006e82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d016      	beq.n	8006e92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	3324      	adds	r3, #36	; 0x24
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 f8a7 	bl	8007fbc <xTaskRemoveFromEventList>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00e      	beq.n	8006e92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00b      	beq.n	8006e92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	e007      	b.n	8006e92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e86:	3301      	adds	r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	b25a      	sxtb	r2, r3
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e92:	2301      	movs	r3, #1
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e96:	e001      	b.n	8006e9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ea6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3740      	adds	r7, #64	; 0x40
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b08e      	sub	sp, #56	; 0x38
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10a      	bne.n	8006edc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	623b      	str	r3, [r7, #32]
}
 8006ed8:	bf00      	nop
 8006eda:	e7fe      	b.n	8006eda <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <xQueueGiveFromISR+0x48>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	61fb      	str	r3, [r7, #28]
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <xQueueGiveFromISR+0x58>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <xQueueGiveFromISR+0x5c>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <xQueueGiveFromISR+0x5e>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10a      	bne.n	8006f2a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	61bb      	str	r3, [r7, #24]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f2a:	f002 f945 	bl	80091b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	617a      	str	r2, [r7, #20]
 8006f44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d22b      	bcs.n	8006fb2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f74:	d112      	bne.n	8006f9c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d016      	beq.n	8006fac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	3324      	adds	r3, #36	; 0x24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 f81a 	bl	8007fbc <xTaskRemoveFromEventList>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00e      	beq.n	8006fac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2201      	movs	r2, #1
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	e007      	b.n	8006fac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	b25a      	sxtb	r2, r3
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fac:	2301      	movs	r3, #1
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb0:	e001      	b.n	8006fb6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f383 8811 	msr	BASEPRI, r3
}
 8006fc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3738      	adds	r7, #56	; 0x38
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08c      	sub	sp, #48	; 0x30
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <xQueueReceive+0x30>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	623b      	str	r3, [r7, #32]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <xQueueReceive+0x3e>
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <xQueueReceive+0x42>
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <xQueueReceive+0x44>
 800700e:	2300      	movs	r3, #0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10a      	bne.n	800702a <xQueueReceive+0x5e>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	61fb      	str	r3, [r7, #28]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800702a:	f001 f989 	bl	8008340 <xTaskGetSchedulerState>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d102      	bne.n	800703a <xQueueReceive+0x6e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <xQueueReceive+0x72>
 800703a:	2301      	movs	r3, #1
 800703c:	e000      	b.n	8007040 <xQueueReceive+0x74>
 800703e:	2300      	movs	r3, #0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <xQueueReceive+0x8e>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	61bb      	str	r3, [r7, #24]
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800705a:	f001 ffcb 	bl	8008ff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01f      	beq.n	80070aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706e:	f000 fa1b 	bl	80074a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	1e5a      	subs	r2, r3, #1
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00f      	beq.n	80070a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	3310      	adds	r3, #16
 8007086:	4618      	mov	r0, r3
 8007088:	f000 ff98 	bl	8007fbc <xTaskRemoveFromEventList>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007092:	4b3d      	ldr	r3, [pc, #244]	; (8007188 <xQueueReceive+0x1bc>)
 8007094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070a2:	f001 ffd7 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e069      	b.n	800717e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d103      	bne.n	80070b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070b0:	f001 ffd0 	bl	8009054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070b4:	2300      	movs	r3, #0
 80070b6:	e062      	b.n	800717e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 ffde 	bl	8008084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070c8:	2301      	movs	r3, #1
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070cc:	f001 ffc2 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070d0:	f000 fd4a 	bl	8007b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070d4:	f001 ff8e 	bl	8008ff4 <vPortEnterCritical>
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070de:	b25b      	sxtb	r3, r3
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e4:	d103      	bne.n	80070ee <xQueueReceive+0x122>
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070f4:	b25b      	sxtb	r3, r3
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070fa:	d103      	bne.n	8007104 <xQueueReceive+0x138>
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007104:	f001 ffa6 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007108:	1d3a      	adds	r2, r7, #4
 800710a:	f107 0310 	add.w	r3, r7, #16
 800710e:	4611      	mov	r1, r2
 8007110:	4618      	mov	r0, r3
 8007112:	f000 ffcd 	bl	80080b0 <xTaskCheckForTimeOut>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d123      	bne.n	8007164 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800711c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711e:	f000 fa3b 	bl	8007598 <prvIsQueueEmpty>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d017      	beq.n	8007158 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	3324      	adds	r3, #36	; 0x24
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fef3 	bl	8007f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007138:	f000 f9dc 	bl	80074f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800713c:	f000 fd22 	bl	8007b84 <xTaskResumeAll>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d189      	bne.n	800705a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007146:	4b10      	ldr	r3, [pc, #64]	; (8007188 <xQueueReceive+0x1bc>)
 8007148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	e780      	b.n	800705a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800715a:	f000 f9cb 	bl	80074f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800715e:	f000 fd11 	bl	8007b84 <xTaskResumeAll>
 8007162:	e77a      	b.n	800705a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007166:	f000 f9c5 	bl	80074f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800716a:	f000 fd0b 	bl	8007b84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800716e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007170:	f000 fa12 	bl	8007598 <prvIsQueueEmpty>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	f43f af6f 	beq.w	800705a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800717c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800717e:	4618      	mov	r0, r3
 8007180:	3730      	adds	r7, #48	; 0x30
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08e      	sub	sp, #56	; 0x38
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007196:	2300      	movs	r3, #0
 8007198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800719e:	2300      	movs	r3, #0
 80071a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	623b      	str	r3, [r7, #32]
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	61fb      	str	r3, [r7, #28]
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071dc:	f001 f8b0 	bl	8008340 <xTaskGetSchedulerState>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <xQueueSemaphoreTake+0x60>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <xQueueSemaphoreTake+0x64>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <xQueueSemaphoreTake+0x66>
 80071f0:	2300      	movs	r3, #0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	61bb      	str	r3, [r7, #24]
}
 8007208:	bf00      	nop
 800720a:	e7fe      	b.n	800720a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800720c:	f001 fef2 	bl	8008ff4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	d024      	beq.n	8007266 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	1e5a      	subs	r2, r3, #1
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800722c:	f001 f9fe 	bl	800862c <pvTaskIncrementMutexHeldCount>
 8007230:	4602      	mov	r2, r0
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00f      	beq.n	800725e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	3310      	adds	r3, #16
 8007242:	4618      	mov	r0, r3
 8007244:	f000 feba 	bl	8007fbc <xTaskRemoveFromEventList>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d007      	beq.n	800725e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800724e:	4b54      	ldr	r3, [pc, #336]	; (80073a0 <xQueueSemaphoreTake+0x214>)
 8007250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800725e:	f001 fef9 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 8007262:	2301      	movs	r3, #1
 8007264:	e097      	b.n	8007396 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d111      	bne.n	8007290 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	617b      	str	r3, [r7, #20]
}
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007288:	f001 fee4 	bl	8009054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800728c:	2300      	movs	r3, #0
 800728e:	e082      	b.n	8007396 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007296:	f107 030c 	add.w	r3, r7, #12
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fef2 	bl	8008084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072a4:	f001 fed6 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072a8:	f000 fc5e 	bl	8007b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072ac:	f001 fea2 	bl	8008ff4 <vPortEnterCritical>
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072b6:	b25b      	sxtb	r3, r3
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072bc:	d103      	bne.n	80072c6 <xQueueSemaphoreTake+0x13a>
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d2:	d103      	bne.n	80072dc <xQueueSemaphoreTake+0x150>
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072dc:	f001 feba 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072e0:	463a      	mov	r2, r7
 80072e2:	f107 030c 	add.w	r3, r7, #12
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fee1 	bl	80080b0 <xTaskCheckForTimeOut>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d132      	bne.n	800735a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072f6:	f000 f94f 	bl	8007598 <prvIsQueueEmpty>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d026      	beq.n	800734e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d109      	bne.n	800731c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007308:	f001 fe74 	bl	8008ff4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f001 f833 	bl	800837c <xTaskPriorityInherit>
 8007316:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007318:	f001 fe9c 	bl	8009054 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fdf9 	bl	8007f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800732a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800732c:	f000 f8e2 	bl	80074f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007330:	f000 fc28 	bl	8007b84 <xTaskResumeAll>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	f47f af68 	bne.w	800720c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800733c:	4b18      	ldr	r3, [pc, #96]	; (80073a0 <xQueueSemaphoreTake+0x214>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	e75e      	b.n	800720c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800734e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007350:	f000 f8d0 	bl	80074f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007354:	f000 fc16 	bl	8007b84 <xTaskResumeAll>
 8007358:	e758      	b.n	800720c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800735a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800735c:	f000 f8ca 	bl	80074f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007360:	f000 fc10 	bl	8007b84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007366:	f000 f917 	bl	8007598 <prvIsQueueEmpty>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	f43f af4d 	beq.w	800720c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00d      	beq.n	8007394 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007378:	f001 fe3c 	bl	8008ff4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800737c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800737e:	f000 f811 	bl	80073a4 <prvGetDisinheritPriorityAfterTimeout>
 8007382:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800738a:	4618      	mov	r0, r3
 800738c:	f001 f8cc 	bl	8008528 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007390:	f001 fe60 	bl	8009054 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007394:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007396:	4618      	mov	r0, r3
 8007398:	3738      	adds	r7, #56	; 0x38
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	e000ed04 	.word	0xe000ed04

080073a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d006      	beq.n	80073c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	e001      	b.n	80073c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80073c6:	68fb      	ldr	r3, [r7, #12]
	}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10d      	bne.n	800740e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d14d      	bne.n	8007496 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 f824 	bl	800844c <xTaskPriorityDisinherit>
 8007404:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	e043      	b.n	8007496 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d119      	bne.n	8007448 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6858      	ldr	r0, [r3, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	461a      	mov	r2, r3
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	f002 fec8 	bl	800a1b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	441a      	add	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	d32b      	bcc.n	8007496 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	e026      	b.n	8007496 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68d8      	ldr	r0, [r3, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007450:	461a      	mov	r2, r3
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	f002 feae 	bl	800a1b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	425b      	negs	r3, r3
 8007462:	441a      	add	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	429a      	cmp	r2, r3
 8007472:	d207      	bcs.n	8007484 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	425b      	negs	r3, r3
 800747e:	441a      	add	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d105      	bne.n	8007496 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	3b01      	subs	r3, #1
 8007494:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800749e:	697b      	ldr	r3, [r7, #20]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d018      	beq.n	80074ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	441a      	add	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d303      	bcc.n	80074dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68d9      	ldr	r1, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	461a      	mov	r2, r3
 80074e6:	6838      	ldr	r0, [r7, #0]
 80074e8:	f002 fe64 	bl	800a1b4 <memcpy>
	}
}
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074fc:	f001 fd7a 	bl	8008ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007506:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007508:	e011      	b.n	800752e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d012      	beq.n	8007538 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3324      	adds	r3, #36	; 0x24
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fd50 	bl	8007fbc <xTaskRemoveFromEventList>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007522:	f000 fe27 	bl	8008174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	3b01      	subs	r3, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800752e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007532:	2b00      	cmp	r3, #0
 8007534:	dce9      	bgt.n	800750a <prvUnlockQueue+0x16>
 8007536:	e000      	b.n	800753a <prvUnlockQueue+0x46>
					break;
 8007538:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007542:	f001 fd87 	bl	8009054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007546:	f001 fd55 	bl	8008ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007550:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007552:	e011      	b.n	8007578 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d012      	beq.n	8007582 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3310      	adds	r3, #16
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fd2b 	bl	8007fbc <xTaskRemoveFromEventList>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800756c:	f000 fe02 	bl	8008174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	3b01      	subs	r3, #1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800757c:	2b00      	cmp	r3, #0
 800757e:	dce9      	bgt.n	8007554 <prvUnlockQueue+0x60>
 8007580:	e000      	b.n	8007584 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007582:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	22ff      	movs	r2, #255	; 0xff
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800758c:	f001 fd62 	bl	8009054 <vPortExitCritical>
}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075a0:	f001 fd28 	bl	8008ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e001      	b.n	80075b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075b6:	f001 fd4d 	bl	8009054 <vPortExitCritical>

	return xReturn;
 80075ba:	68fb      	ldr	r3, [r7, #12]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075cc:	f001 fd12 	bl	8008ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d102      	bne.n	80075e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	e001      	b.n	80075e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075e6:	f001 fd35 	bl	8009054 <vPortExitCritical>

	return xReturn;
 80075ea:	68fb      	ldr	r3, [r7, #12]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e014      	b.n	800762e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007604:	4a0f      	ldr	r2, [pc, #60]	; (8007644 <vQueueAddToRegistry+0x50>)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10b      	bne.n	8007628 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007610:	490c      	ldr	r1, [pc, #48]	; (8007644 <vQueueAddToRegistry+0x50>)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800761a:	4a0a      	ldr	r2, [pc, #40]	; (8007644 <vQueueAddToRegistry+0x50>)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	4413      	add	r3, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007626:	e006      	b.n	8007636 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3301      	adds	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b07      	cmp	r3, #7
 8007632:	d9e7      	bls.n	8007604 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007634:	bf00      	nop
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000934 	.word	0x20000934

08007648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007658:	f001 fccc 	bl	8008ff4 <vPortEnterCritical>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007662:	b25b      	sxtb	r3, r3
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007668:	d103      	bne.n	8007672 <vQueueWaitForMessageRestricted+0x2a>
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007678:	b25b      	sxtb	r3, r3
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800767e:	d103      	bne.n	8007688 <vQueueWaitForMessageRestricted+0x40>
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007688:	f001 fce4 	bl	8009054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	3324      	adds	r3, #36	; 0x24
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fc61 	bl	8007f64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076a2:	6978      	ldr	r0, [r7, #20]
 80076a4:	f7ff ff26 	bl	80074f4 <prvUnlockQueue>
	}
 80076a8:	bf00      	nop
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08e      	sub	sp, #56	; 0x38
 80076b4:	af04      	add	r7, sp, #16
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <xTaskCreateStatic+0x2a>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	623b      	str	r3, [r7, #32]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	61fb      	str	r3, [r7, #28]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076f6:	23cc      	movs	r3, #204	; 0xcc
 80076f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2bcc      	cmp	r3, #204	; 0xcc
 80076fe:	d00a      	beq.n	8007716 <xTaskCreateStatic+0x66>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	61bb      	str	r3, [r7, #24]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007716:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01e      	beq.n	800775c <xTaskCreateStatic+0xac>
 800771e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01b      	beq.n	800775c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800772c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	2202      	movs	r2, #2
 8007732:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007736:	2300      	movs	r3, #0
 8007738:	9303      	str	r3, [sp, #12]
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	9302      	str	r3, [sp, #8]
 800773e:	f107 0314 	add.w	r3, r7, #20
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f850 	bl	80077f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007756:	f000 f8f3 	bl	8007940 <prvAddNewTaskToReadyList>
 800775a:	e001      	b.n	8007760 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007760:	697b      	ldr	r3, [r7, #20]
	}
 8007762:	4618      	mov	r0, r3
 8007764:	3728      	adds	r7, #40	; 0x28
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800776a:	b580      	push	{r7, lr}
 800776c:	b08c      	sub	sp, #48	; 0x30
 800776e:	af04      	add	r7, sp, #16
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4618      	mov	r0, r3
 8007780:	f001 fd5a 	bl	8009238 <pvPortMalloc>
 8007784:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00e      	beq.n	80077aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800778c:	20cc      	movs	r0, #204	; 0xcc
 800778e:	f001 fd53 	bl	8009238 <pvPortMalloc>
 8007792:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	631a      	str	r2, [r3, #48]	; 0x30
 80077a0:	e005      	b.n	80077ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077a2:	6978      	ldr	r0, [r7, #20]
 80077a4:	f001 fe14 	bl	80093d0 <vPortFree>
 80077a8:	e001      	b.n	80077ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d017      	beq.n	80077e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077bc:	88fa      	ldrh	r2, [r7, #6]
 80077be:	2300      	movs	r3, #0
 80077c0:	9303      	str	r3, [sp, #12]
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	9302      	str	r3, [sp, #8]
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	9301      	str	r3, [sp, #4]
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 f80e 	bl	80077f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077d8:	69f8      	ldr	r0, [r7, #28]
 80077da:	f000 f8b1 	bl	8007940 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077de:	2301      	movs	r3, #1
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	e002      	b.n	80077ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077ea:	69bb      	ldr	r3, [r7, #24]
	}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3720      	adds	r7, #32
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	461a      	mov	r2, r3
 800780c:	21a5      	movs	r1, #165	; 0xa5
 800780e:	f002 fcdf 	bl	800a1d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800781c:	3b01      	subs	r3, #1
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	f023 0307 	bic.w	r3, r3, #7
 800782a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	617b      	str	r3, [r7, #20]
}
 8007848:	bf00      	nop
 800784a:	e7fe      	b.n	800784a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d01f      	beq.n	8007892 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e012      	b.n	800787e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	7819      	ldrb	r1, [r3, #0]
 8007860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	4413      	add	r3, r2
 8007866:	3334      	adds	r3, #52	; 0x34
 8007868:	460a      	mov	r2, r1
 800786a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	4413      	add	r3, r2
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d006      	beq.n	8007886 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	3301      	adds	r3, #1
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	2b1f      	cmp	r3, #31
 8007882:	d9e9      	bls.n	8007858 <prvInitialiseNewTask+0x64>
 8007884:	e000      	b.n	8007888 <prvInitialiseNewTask+0x94>
			{
				break;
 8007886:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007890:	e003      	b.n	800789a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	2b37      	cmp	r3, #55	; 0x37
 800789e:	d901      	bls.n	80078a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078a0:	2337      	movs	r3, #55	; 0x37
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078ae:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	2200      	movs	r2, #0
 80078b4:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	3304      	adds	r3, #4
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe ff5c 	bl	8006778 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	3318      	adds	r3, #24
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe ff57 	bl	8006778 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	3364      	adds	r3, #100	; 0x64
 80078f4:	2260      	movs	r2, #96	; 0x60
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f002 fc69 	bl	800a1d0 <memset>
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <prvInitialiseNewTask+0x140>)
 8007902:	669a      	str	r2, [r3, #104]	; 0x68
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	4a0c      	ldr	r2, [pc, #48]	; (8007938 <prvInitialiseNewTask+0x144>)
 8007908:	66da      	str	r2, [r3, #108]	; 0x6c
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	4a0b      	ldr	r2, [pc, #44]	; (800793c <prvInitialiseNewTask+0x148>)
 800790e:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	69b8      	ldr	r0, [r7, #24]
 8007916:	f001 fa3f 	bl	8008d98 <pxPortInitialiseStack>
 800791a:	4602      	mov	r2, r0
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800792c:	bf00      	nop
 800792e:	3720      	adds	r7, #32
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	0800a460 	.word	0x0800a460
 8007938:	0800a480 	.word	0x0800a480
 800793c:	0800a440 	.word	0x0800a440

08007940 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007948:	f001 fb54 	bl	8008ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800794c:	4b2d      	ldr	r3, [pc, #180]	; (8007a04 <prvAddNewTaskToReadyList+0xc4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	4a2c      	ldr	r2, [pc, #176]	; (8007a04 <prvAddNewTaskToReadyList+0xc4>)
 8007954:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007956:	4b2c      	ldr	r3, [pc, #176]	; (8007a08 <prvAddNewTaskToReadyList+0xc8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800795e:	4a2a      	ldr	r2, [pc, #168]	; (8007a08 <prvAddNewTaskToReadyList+0xc8>)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007964:	4b27      	ldr	r3, [pc, #156]	; (8007a04 <prvAddNewTaskToReadyList+0xc4>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d110      	bne.n	800798e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800796c:	f000 fc26 	bl	80081bc <prvInitialiseTaskLists>
 8007970:	e00d      	b.n	800798e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007972:	4b26      	ldr	r3, [pc, #152]	; (8007a0c <prvAddNewTaskToReadyList+0xcc>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800797a:	4b23      	ldr	r3, [pc, #140]	; (8007a08 <prvAddNewTaskToReadyList+0xc8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	429a      	cmp	r2, r3
 8007986:	d802      	bhi.n	800798e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007988:	4a1f      	ldr	r2, [pc, #124]	; (8007a08 <prvAddNewTaskToReadyList+0xc8>)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800798e:	4b20      	ldr	r3, [pc, #128]	; (8007a10 <prvAddNewTaskToReadyList+0xd0>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	4a1e      	ldr	r2, [pc, #120]	; (8007a10 <prvAddNewTaskToReadyList+0xd0>)
 8007996:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007998:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <prvAddNewTaskToReadyList+0xd0>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	4b1b      	ldr	r3, [pc, #108]	; (8007a14 <prvAddNewTaskToReadyList+0xd4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d903      	bls.n	80079b4 <prvAddNewTaskToReadyList+0x74>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	4a18      	ldr	r2, [pc, #96]	; (8007a14 <prvAddNewTaskToReadyList+0xd4>)
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <prvAddNewTaskToReadyList+0xd8>)
 80079c2:	441a      	add	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	4610      	mov	r0, r2
 80079cc:	f7fe fee1 	bl	8006792 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079d0:	f001 fb40 	bl	8009054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079d4:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <prvAddNewTaskToReadyList+0xcc>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00e      	beq.n	80079fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <prvAddNewTaskToReadyList+0xc8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d207      	bcs.n	80079fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079ea:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <prvAddNewTaskToReadyList+0xdc>)
 80079ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000e48 	.word	0x20000e48
 8007a08:	20000974 	.word	0x20000974
 8007a0c:	20000e54 	.word	0x20000e54
 8007a10:	20000e64 	.word	0x20000e64
 8007a14:	20000e50 	.word	0x20000e50
 8007a18:	20000978 	.word	0x20000978
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d017      	beq.n	8007a62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <vTaskDelay+0x60>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <vTaskDelay+0x30>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	60bb      	str	r3, [r7, #8]
}
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a50:	f000 f88a 	bl	8007b68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a54:	2100      	movs	r1, #0
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fdfc 	bl	8008654 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a5c:	f000 f892 	bl	8007b84 <xTaskResumeAll>
 8007a60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d107      	bne.n	8007a78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a68:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <vTaskDelay+0x64>)
 8007a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20000e70 	.word	0x20000e70
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a96:	463a      	mov	r2, r7
 8007a98:	1d39      	adds	r1, r7, #4
 8007a9a:	f107 0308 	add.w	r3, r7, #8
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe fe16 	bl	80066d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	9202      	str	r2, [sp, #8]
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	460a      	mov	r2, r1
 8007ab6:	4924      	ldr	r1, [pc, #144]	; (8007b48 <vTaskStartScheduler+0xc0>)
 8007ab8:	4824      	ldr	r0, [pc, #144]	; (8007b4c <vTaskStartScheduler+0xc4>)
 8007aba:	f7ff fdf9 	bl	80076b0 <xTaskCreateStatic>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4a23      	ldr	r2, [pc, #140]	; (8007b50 <vTaskStartScheduler+0xc8>)
 8007ac2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ac4:	4b22      	ldr	r3, [pc, #136]	; (8007b50 <vTaskStartScheduler+0xc8>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007acc:	2301      	movs	r3, #1
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	e001      	b.n	8007ad6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d102      	bne.n	8007ae2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007adc:	f000 fe0e 	bl	80086fc <xTimerCreateTimerTask>
 8007ae0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d11b      	bne.n	8007b20 <vTaskStartScheduler+0x98>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	613b      	str	r3, [r7, #16]
}
 8007afa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007afc:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <vTaskStartScheduler+0xcc>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3364      	adds	r3, #100	; 0x64
 8007b02:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <vTaskStartScheduler+0xd0>)
 8007b04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b06:	4b15      	ldr	r3, [pc, #84]	; (8007b5c <vTaskStartScheduler+0xd4>)
 8007b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b0e:	4b14      	ldr	r3, [pc, #80]	; (8007b60 <vTaskStartScheduler+0xd8>)
 8007b10:	2201      	movs	r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b14:	4b13      	ldr	r3, [pc, #76]	; (8007b64 <vTaskStartScheduler+0xdc>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b1a:	f001 f9c9 	bl	8008eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b1e:	e00e      	b.n	8007b3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b26:	d10a      	bne.n	8007b3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	60fb      	str	r3, [r7, #12]
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <vTaskStartScheduler+0xb4>
}
 8007b3e:	bf00      	nop
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	0800a3ac 	.word	0x0800a3ac
 8007b4c:	0800818d 	.word	0x0800818d
 8007b50:	20000e6c 	.word	0x20000e6c
 8007b54:	20000974 	.word	0x20000974
 8007b58:	20000100 	.word	0x20000100
 8007b5c:	20000e68 	.word	0x20000e68
 8007b60:	20000e54 	.word	0x20000e54
 8007b64:	20000e4c 	.word	0x20000e4c

08007b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b6c:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <vTaskSuspendAll+0x18>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3301      	adds	r3, #1
 8007b72:	4a03      	ldr	r2, [pc, #12]	; (8007b80 <vTaskSuspendAll+0x18>)
 8007b74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b76:	bf00      	nop
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	20000e70 	.word	0x20000e70

08007b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b92:	4b42      	ldr	r3, [pc, #264]	; (8007c9c <xTaskResumeAll+0x118>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10a      	bne.n	8007bb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	603b      	str	r3, [r7, #0]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bb0:	f001 fa20 	bl	8008ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bb4:	4b39      	ldr	r3, [pc, #228]	; (8007c9c <xTaskResumeAll+0x118>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	4a38      	ldr	r2, [pc, #224]	; (8007c9c <xTaskResumeAll+0x118>)
 8007bbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bbe:	4b37      	ldr	r3, [pc, #220]	; (8007c9c <xTaskResumeAll+0x118>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d162      	bne.n	8007c8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bc6:	4b36      	ldr	r3, [pc, #216]	; (8007ca0 <xTaskResumeAll+0x11c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d05e      	beq.n	8007c8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bce:	e02f      	b.n	8007c30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd0:	4b34      	ldr	r3, [pc, #208]	; (8007ca4 <xTaskResumeAll+0x120>)
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3318      	adds	r3, #24
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe fe35 	bl	800684c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fe30 	bl	800684c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf0:	4b2d      	ldr	r3, [pc, #180]	; (8007ca8 <xTaskResumeAll+0x124>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d903      	bls.n	8007c00 <xTaskResumeAll+0x7c>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfc:	4a2a      	ldr	r2, [pc, #168]	; (8007ca8 <xTaskResumeAll+0x124>)
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a27      	ldr	r2, [pc, #156]	; (8007cac <xTaskResumeAll+0x128>)
 8007c0e:	441a      	add	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7fe fdbb 	bl	8006792 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c20:	4b23      	ldr	r3, [pc, #140]	; (8007cb0 <xTaskResumeAll+0x12c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d302      	bcc.n	8007c30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c2a:	4b22      	ldr	r3, [pc, #136]	; (8007cb4 <xTaskResumeAll+0x130>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c30:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <xTaskResumeAll+0x120>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1cb      	bne.n	8007bd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c3e:	f000 fb5f 	bl	8008300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c42:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <xTaskResumeAll+0x134>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d010      	beq.n	8007c70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c4e:	f000 f847 	bl	8007ce0 <xTaskIncrementTick>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007c58:	4b16      	ldr	r3, [pc, #88]	; (8007cb4 <xTaskResumeAll+0x130>)
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f1      	bne.n	8007c4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <xTaskResumeAll+0x134>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c70:	4b10      	ldr	r3, [pc, #64]	; (8007cb4 <xTaskResumeAll+0x130>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d009      	beq.n	8007c8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c7c:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <xTaskResumeAll+0x138>)
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c8c:	f001 f9e2 	bl	8009054 <vPortExitCritical>

	return xAlreadyYielded;
 8007c90:	68bb      	ldr	r3, [r7, #8]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000e70 	.word	0x20000e70
 8007ca0:	20000e48 	.word	0x20000e48
 8007ca4:	20000e08 	.word	0x20000e08
 8007ca8:	20000e50 	.word	0x20000e50
 8007cac:	20000978 	.word	0x20000978
 8007cb0:	20000974 	.word	0x20000974
 8007cb4:	20000e5c 	.word	0x20000e5c
 8007cb8:	20000e58 	.word	0x20000e58
 8007cbc:	e000ed04 	.word	0xe000ed04

08007cc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <xTaskGetTickCount+0x1c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ccc:	687b      	ldr	r3, [r7, #4]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20000e4c 	.word	0x20000e4c

08007ce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cea:	4b4f      	ldr	r3, [pc, #316]	; (8007e28 <xTaskIncrementTick+0x148>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f040 808f 	bne.w	8007e12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cf4:	4b4d      	ldr	r3, [pc, #308]	; (8007e2c <xTaskIncrementTick+0x14c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cfc:	4a4b      	ldr	r2, [pc, #300]	; (8007e2c <xTaskIncrementTick+0x14c>)
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d120      	bne.n	8007d4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d08:	4b49      	ldr	r3, [pc, #292]	; (8007e30 <xTaskIncrementTick+0x150>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	603b      	str	r3, [r7, #0]
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <xTaskIncrementTick+0x46>
 8007d28:	4b41      	ldr	r3, [pc, #260]	; (8007e30 <xTaskIncrementTick+0x150>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	4b41      	ldr	r3, [pc, #260]	; (8007e34 <xTaskIncrementTick+0x154>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a3f      	ldr	r2, [pc, #252]	; (8007e30 <xTaskIncrementTick+0x150>)
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	4a3f      	ldr	r2, [pc, #252]	; (8007e34 <xTaskIncrementTick+0x154>)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	4b3e      	ldr	r3, [pc, #248]	; (8007e38 <xTaskIncrementTick+0x158>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	4a3d      	ldr	r2, [pc, #244]	; (8007e38 <xTaskIncrementTick+0x158>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	f000 fadb 	bl	8008300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d4a:	4b3c      	ldr	r3, [pc, #240]	; (8007e3c <xTaskIncrementTick+0x15c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d349      	bcc.n	8007de8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d54:	4b36      	ldr	r3, [pc, #216]	; (8007e30 <xTaskIncrementTick+0x150>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d104      	bne.n	8007d68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5e:	4b37      	ldr	r3, [pc, #220]	; (8007e3c <xTaskIncrementTick+0x15c>)
 8007d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d64:	601a      	str	r2, [r3, #0]
					break;
 8007d66:	e03f      	b.n	8007de8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d68:	4b31      	ldr	r3, [pc, #196]	; (8007e30 <xTaskIncrementTick+0x150>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d203      	bcs.n	8007d88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d80:	4a2e      	ldr	r2, [pc, #184]	; (8007e3c <xTaskIncrementTick+0x15c>)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d86:	e02f      	b.n	8007de8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe fd5d 	bl	800684c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	3318      	adds	r3, #24
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fe fd54 	bl	800684c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	4b25      	ldr	r3, [pc, #148]	; (8007e40 <xTaskIncrementTick+0x160>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d903      	bls.n	8007db8 <xTaskIncrementTick+0xd8>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	4a22      	ldr	r2, [pc, #136]	; (8007e40 <xTaskIncrementTick+0x160>)
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4a1f      	ldr	r2, [pc, #124]	; (8007e44 <xTaskIncrementTick+0x164>)
 8007dc6:	441a      	add	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7fe fcdf 	bl	8006792 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd8:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <xTaskIncrementTick+0x168>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d3b8      	bcc.n	8007d54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007de2:	2301      	movs	r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007de6:	e7b5      	b.n	8007d54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007de8:	4b17      	ldr	r3, [pc, #92]	; (8007e48 <xTaskIncrementTick+0x168>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dee:	4915      	ldr	r1, [pc, #84]	; (8007e44 <xTaskIncrementTick+0x164>)
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	440b      	add	r3, r1
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d901      	bls.n	8007e04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e00:	2301      	movs	r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e04:	4b11      	ldr	r3, [pc, #68]	; (8007e4c <xTaskIncrementTick+0x16c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d007      	beq.n	8007e1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	e004      	b.n	8007e1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e12:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <xTaskIncrementTick+0x170>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3301      	adds	r3, #1
 8007e18:	4a0d      	ldr	r2, [pc, #52]	; (8007e50 <xTaskIncrementTick+0x170>)
 8007e1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e1c:	697b      	ldr	r3, [r7, #20]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000e70 	.word	0x20000e70
 8007e2c:	20000e4c 	.word	0x20000e4c
 8007e30:	20000e00 	.word	0x20000e00
 8007e34:	20000e04 	.word	0x20000e04
 8007e38:	20000e60 	.word	0x20000e60
 8007e3c:	20000e68 	.word	0x20000e68
 8007e40:	20000e50 	.word	0x20000e50
 8007e44:	20000978 	.word	0x20000978
 8007e48:	20000974 	.word	0x20000974
 8007e4c:	20000e5c 	.word	0x20000e5c
 8007e50:	20000e58 	.word	0x20000e58

08007e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e5a:	4b2a      	ldr	r3, [pc, #168]	; (8007f04 <vTaskSwitchContext+0xb0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e62:	4b29      	ldr	r3, [pc, #164]	; (8007f08 <vTaskSwitchContext+0xb4>)
 8007e64:	2201      	movs	r2, #1
 8007e66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e68:	e046      	b.n	8007ef8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007e6a:	4b27      	ldr	r3, [pc, #156]	; (8007f08 <vTaskSwitchContext+0xb4>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e70:	4b26      	ldr	r3, [pc, #152]	; (8007f0c <vTaskSwitchContext+0xb8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	e010      	b.n	8007e9a <vTaskSwitchContext+0x46>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10a      	bne.n	8007e94 <vTaskSwitchContext+0x40>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	607b      	str	r3, [r7, #4]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <vTaskSwitchContext+0x3e>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	491d      	ldr	r1, [pc, #116]	; (8007f10 <vTaskSwitchContext+0xbc>)
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d0e4      	beq.n	8007e78 <vTaskSwitchContext+0x24>
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4a15      	ldr	r2, [pc, #84]	; (8007f10 <vTaskSwitchContext+0xbc>)
 8007eba:	4413      	add	r3, r2
 8007ebc:	60bb      	str	r3, [r7, #8]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	605a      	str	r2, [r3, #4]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	3308      	adds	r3, #8
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d104      	bne.n	8007ede <vTaskSwitchContext+0x8a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	605a      	str	r2, [r3, #4]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	4a0b      	ldr	r2, [pc, #44]	; (8007f14 <vTaskSwitchContext+0xc0>)
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <vTaskSwitchContext+0xb8>)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <vTaskSwitchContext+0xc0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3364      	adds	r3, #100	; 0x64
 8007ef4:	4a08      	ldr	r2, [pc, #32]	; (8007f18 <vTaskSwitchContext+0xc4>)
 8007ef6:	6013      	str	r3, [r2, #0]
}
 8007ef8:	bf00      	nop
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	20000e70 	.word	0x20000e70
 8007f08:	20000e5c 	.word	0x20000e5c
 8007f0c:	20000e50 	.word	0x20000e50
 8007f10:	20000978 	.word	0x20000978
 8007f14:	20000974 	.word	0x20000974
 8007f18:	20000100 	.word	0x20000100

08007f1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	60fb      	str	r3, [r7, #12]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f42:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <vTaskPlaceOnEventList+0x44>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3318      	adds	r3, #24
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fe fc45 	bl	80067da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f50:	2101      	movs	r1, #1
 8007f52:	6838      	ldr	r0, [r7, #0]
 8007f54:	f000 fb7e 	bl	8008654 <prvAddCurrentTaskToDelayedList>
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000974 	.word	0x20000974

08007f64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	617b      	str	r3, [r7, #20]
}
 8007f88:	bf00      	nop
 8007f8a:	e7fe      	b.n	8007f8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3318      	adds	r3, #24
 8007f92:	4619      	mov	r1, r3
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7fe fbfc 	bl	8006792 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	68b8      	ldr	r0, [r7, #8]
 8007faa:	f000 fb53 	bl	8008654 <prvAddCurrentTaskToDelayedList>
	}
 8007fae:	bf00      	nop
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000974 	.word	0x20000974

08007fbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60fb      	str	r3, [r7, #12]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	3318      	adds	r3, #24
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe fc2d 	bl	800684c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ff2:	4b1e      	ldr	r3, [pc, #120]	; (800806c <xTaskRemoveFromEventList+0xb0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d11d      	bne.n	8008036 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fc24 	bl	800684c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	4b19      	ldr	r3, [pc, #100]	; (8008070 <xTaskRemoveFromEventList+0xb4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d903      	bls.n	8008018 <xTaskRemoveFromEventList+0x5c>
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	4a16      	ldr	r2, [pc, #88]	; (8008070 <xTaskRemoveFromEventList+0xb4>)
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801c:	4613      	mov	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4a13      	ldr	r2, [pc, #76]	; (8008074 <xTaskRemoveFromEventList+0xb8>)
 8008026:	441a      	add	r2, r3
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	3304      	adds	r3, #4
 800802c:	4619      	mov	r1, r3
 800802e:	4610      	mov	r0, r2
 8008030:	f7fe fbaf 	bl	8006792 <vListInsertEnd>
 8008034:	e005      	b.n	8008042 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	3318      	adds	r3, #24
 800803a:	4619      	mov	r1, r3
 800803c:	480e      	ldr	r0, [pc, #56]	; (8008078 <xTaskRemoveFromEventList+0xbc>)
 800803e:	f7fe fba8 	bl	8006792 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008046:	4b0d      	ldr	r3, [pc, #52]	; (800807c <xTaskRemoveFromEventList+0xc0>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	429a      	cmp	r2, r3
 800804e:	d905      	bls.n	800805c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008050:	2301      	movs	r3, #1
 8008052:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <xTaskRemoveFromEventList+0xc4>)
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	e001      	b.n	8008060 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008060:	697b      	ldr	r3, [r7, #20]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000e70 	.word	0x20000e70
 8008070:	20000e50 	.word	0x20000e50
 8008074:	20000978 	.word	0x20000978
 8008078:	20000e08 	.word	0x20000e08
 800807c:	20000974 	.word	0x20000974
 8008080:	20000e5c 	.word	0x20000e5c

08008084 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800808c:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <vTaskInternalSetTimeOutState+0x24>)
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <vTaskInternalSetTimeOutState+0x28>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	605a      	str	r2, [r3, #4]
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20000e60 	.word	0x20000e60
 80080ac:	20000e4c 	.word	0x20000e4c

080080b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	613b      	str	r3, [r7, #16]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10a      	bne.n	80080f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	60fb      	str	r3, [r7, #12]
}
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80080f2:	f000 ff7f 	bl	8008ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080f6:	4b1d      	ldr	r3, [pc, #116]	; (800816c <xTaskCheckForTimeOut+0xbc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800810e:	d102      	bne.n	8008116 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008110:	2300      	movs	r3, #0
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	e023      	b.n	800815e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4b15      	ldr	r3, [pc, #84]	; (8008170 <xTaskCheckForTimeOut+0xc0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d007      	beq.n	8008132 <xTaskCheckForTimeOut+0x82>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	429a      	cmp	r2, r3
 800812a:	d302      	bcc.n	8008132 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800812c:	2301      	movs	r3, #1
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	e015      	b.n	800815e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	429a      	cmp	r2, r3
 800813a:	d20b      	bcs.n	8008154 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	1ad2      	subs	r2, r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7ff ff9b 	bl	8008084 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800814e:	2300      	movs	r3, #0
 8008150:	61fb      	str	r3, [r7, #28]
 8008152:	e004      	b.n	800815e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800815a:	2301      	movs	r3, #1
 800815c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800815e:	f000 ff79 	bl	8009054 <vPortExitCritical>

	return xReturn;
 8008162:	69fb      	ldr	r3, [r7, #28]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3720      	adds	r7, #32
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20000e4c 	.word	0x20000e4c
 8008170:	20000e60 	.word	0x20000e60

08008174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008178:	4b03      	ldr	r3, [pc, #12]	; (8008188 <vTaskMissedYield+0x14>)
 800817a:	2201      	movs	r2, #1
 800817c:	601a      	str	r2, [r3, #0]
}
 800817e:	bf00      	nop
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	20000e5c 	.word	0x20000e5c

0800818c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008194:	f000 f852 	bl	800823c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008198:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <prvIdleTask+0x28>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d9f9      	bls.n	8008194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081a0:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <prvIdleTask+0x2c>)
 80081a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081b0:	e7f0      	b.n	8008194 <prvIdleTask+0x8>
 80081b2:	bf00      	nop
 80081b4:	20000978 	.word	0x20000978
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081c2:	2300      	movs	r3, #0
 80081c4:	607b      	str	r3, [r7, #4]
 80081c6:	e00c      	b.n	80081e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4a12      	ldr	r2, [pc, #72]	; (800821c <prvInitialiseTaskLists+0x60>)
 80081d4:	4413      	add	r3, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe faae 	bl	8006738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3301      	adds	r3, #1
 80081e0:	607b      	str	r3, [r7, #4]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b37      	cmp	r3, #55	; 0x37
 80081e6:	d9ef      	bls.n	80081c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081e8:	480d      	ldr	r0, [pc, #52]	; (8008220 <prvInitialiseTaskLists+0x64>)
 80081ea:	f7fe faa5 	bl	8006738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081ee:	480d      	ldr	r0, [pc, #52]	; (8008224 <prvInitialiseTaskLists+0x68>)
 80081f0:	f7fe faa2 	bl	8006738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081f4:	480c      	ldr	r0, [pc, #48]	; (8008228 <prvInitialiseTaskLists+0x6c>)
 80081f6:	f7fe fa9f 	bl	8006738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081fa:	480c      	ldr	r0, [pc, #48]	; (800822c <prvInitialiseTaskLists+0x70>)
 80081fc:	f7fe fa9c 	bl	8006738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008200:	480b      	ldr	r0, [pc, #44]	; (8008230 <prvInitialiseTaskLists+0x74>)
 8008202:	f7fe fa99 	bl	8006738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <prvInitialiseTaskLists+0x78>)
 8008208:	4a05      	ldr	r2, [pc, #20]	; (8008220 <prvInitialiseTaskLists+0x64>)
 800820a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <prvInitialiseTaskLists+0x7c>)
 800820e:	4a05      	ldr	r2, [pc, #20]	; (8008224 <prvInitialiseTaskLists+0x68>)
 8008210:	601a      	str	r2, [r3, #0]
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000978 	.word	0x20000978
 8008220:	20000dd8 	.word	0x20000dd8
 8008224:	20000dec 	.word	0x20000dec
 8008228:	20000e08 	.word	0x20000e08
 800822c:	20000e1c 	.word	0x20000e1c
 8008230:	20000e34 	.word	0x20000e34
 8008234:	20000e00 	.word	0x20000e00
 8008238:	20000e04 	.word	0x20000e04

0800823c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008242:	e019      	b.n	8008278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008244:	f000 fed6 	bl	8008ff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008248:	4b10      	ldr	r3, [pc, #64]	; (800828c <prvCheckTasksWaitingTermination+0x50>)
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3304      	adds	r3, #4
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe faf9 	bl	800684c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800825a:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <prvCheckTasksWaitingTermination+0x54>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3b01      	subs	r3, #1
 8008260:	4a0b      	ldr	r2, [pc, #44]	; (8008290 <prvCheckTasksWaitingTermination+0x54>)
 8008262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008264:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <prvCheckTasksWaitingTermination+0x58>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3b01      	subs	r3, #1
 800826a:	4a0a      	ldr	r2, [pc, #40]	; (8008294 <prvCheckTasksWaitingTermination+0x58>)
 800826c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800826e:	f000 fef1 	bl	8009054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f810 	bl	8008298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <prvCheckTasksWaitingTermination+0x58>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e1      	bne.n	8008244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000e1c 	.word	0x20000e1c
 8008290:	20000e48 	.word	0x20000e48
 8008294:	20000e30 	.word	0x20000e30

08008298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3364      	adds	r3, #100	; 0x64
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 ffa9 	bl	800a1fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d108      	bne.n	80082c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 f889 	bl	80093d0 <vPortFree>
				vPortFree( pxTCB );
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 f886 	bl	80093d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082c4:	e018      	b.n	80082f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d103      	bne.n	80082d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 f87d 	bl	80093d0 <vPortFree>
	}
 80082d6:	e00f      	b.n	80082f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d00a      	beq.n	80082f8 <prvDeleteTCB+0x60>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	60fb      	str	r3, [r7, #12]
}
 80082f4:	bf00      	nop
 80082f6:	e7fe      	b.n	80082f6 <prvDeleteTCB+0x5e>
	}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008306:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <prvResetNextTaskUnblockTime+0x38>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008310:	4b0a      	ldr	r3, [pc, #40]	; (800833c <prvResetNextTaskUnblockTime+0x3c>)
 8008312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008318:	e008      	b.n	800832c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800831a:	4b07      	ldr	r3, [pc, #28]	; (8008338 <prvResetNextTaskUnblockTime+0x38>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	4a04      	ldr	r2, [pc, #16]	; (800833c <prvResetNextTaskUnblockTime+0x3c>)
 800832a:	6013      	str	r3, [r2, #0]
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	20000e00 	.word	0x20000e00
 800833c:	20000e68 	.word	0x20000e68

08008340 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008346:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <xTaskGetSchedulerState+0x34>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800834e:	2301      	movs	r3, #1
 8008350:	607b      	str	r3, [r7, #4]
 8008352:	e008      	b.n	8008366 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008354:	4b08      	ldr	r3, [pc, #32]	; (8008378 <xTaskGetSchedulerState+0x38>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800835c:	2302      	movs	r3, #2
 800835e:	607b      	str	r3, [r7, #4]
 8008360:	e001      	b.n	8008366 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008362:	2300      	movs	r3, #0
 8008364:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008366:	687b      	ldr	r3, [r7, #4]
	}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	20000e54 	.word	0x20000e54
 8008378:	20000e70 	.word	0x20000e70

0800837c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008388:	2300      	movs	r3, #0
 800838a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d051      	beq.n	8008436 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008396:	4b2a      	ldr	r3, [pc, #168]	; (8008440 <xTaskPriorityInherit+0xc4>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	429a      	cmp	r2, r3
 800839e:	d241      	bcs.n	8008424 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	db06      	blt.n	80083b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a8:	4b25      	ldr	r3, [pc, #148]	; (8008440 <xTaskPriorityInherit+0xc4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6959      	ldr	r1, [r3, #20]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4a1f      	ldr	r2, [pc, #124]	; (8008444 <xTaskPriorityInherit+0xc8>)
 80083c8:	4413      	add	r3, r2
 80083ca:	4299      	cmp	r1, r3
 80083cc:	d122      	bne.n	8008414 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	3304      	adds	r3, #4
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe fa3a 	bl	800684c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083d8:	4b19      	ldr	r3, [pc, #100]	; (8008440 <xTaskPriorityInherit+0xc4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	4b18      	ldr	r3, [pc, #96]	; (8008448 <xTaskPriorityInherit+0xcc>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d903      	bls.n	80083f6 <xTaskPriorityInherit+0x7a>
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f2:	4a15      	ldr	r2, [pc, #84]	; (8008448 <xTaskPriorityInherit+0xcc>)
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4a10      	ldr	r2, [pc, #64]	; (8008444 <xTaskPriorityInherit+0xc8>)
 8008404:	441a      	add	r2, r3
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	3304      	adds	r3, #4
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f7fe f9c0 	bl	8006792 <vListInsertEnd>
 8008412:	e004      	b.n	800841e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008414:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <xTaskPriorityInherit+0xc4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800841e:	2301      	movs	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	e008      	b.n	8008436 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008428:	4b05      	ldr	r3, [pc, #20]	; (8008440 <xTaskPriorityInherit+0xc4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842e:	429a      	cmp	r2, r3
 8008430:	d201      	bcs.n	8008436 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008432:	2301      	movs	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008436:	68fb      	ldr	r3, [r7, #12]
	}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20000974 	.word	0x20000974
 8008444:	20000978 	.word	0x20000978
 8008448:	20000e50 	.word	0x20000e50

0800844c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d056      	beq.n	8008510 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008462:	4b2e      	ldr	r3, [pc, #184]	; (800851c <xTaskPriorityDisinherit+0xd0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	429a      	cmp	r2, r3
 800846a:	d00a      	beq.n	8008482 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	60fb      	str	r3, [r7, #12]
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	60bb      	str	r3, [r7, #8]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084a4:	1e5a      	subs	r2, r3, #1
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d02c      	beq.n	8008510 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d128      	bne.n	8008510 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	3304      	adds	r3, #4
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe f9c2 	bl	800684c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <xTaskPriorityDisinherit+0xd4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d903      	bls.n	80084f0 <xTaskPriorityDisinherit+0xa4>
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	4a0c      	ldr	r2, [pc, #48]	; (8008520 <xTaskPriorityDisinherit+0xd4>)
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4a09      	ldr	r2, [pc, #36]	; (8008524 <xTaskPriorityDisinherit+0xd8>)
 80084fe:	441a      	add	r2, r3
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	3304      	adds	r3, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4610      	mov	r0, r2
 8008508:	f7fe f943 	bl	8006792 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800850c:	2301      	movs	r3, #1
 800850e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008510:	697b      	ldr	r3, [r7, #20]
	}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000974 	.word	0x20000974
 8008520:	20000e50 	.word	0x20000e50
 8008524:	20000978 	.word	0x20000978

08008528 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008536:	2301      	movs	r3, #1
 8008538:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d06a      	beq.n	8008616 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	60fb      	str	r3, [r7, #12]
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d902      	bls.n	800856e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	61fb      	str	r3, [r7, #28]
 800856c:	e002      	b.n	8008574 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008572:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	429a      	cmp	r2, r3
 800857c:	d04b      	beq.n	8008616 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	429a      	cmp	r2, r3
 8008586:	d146      	bne.n	8008616 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008588:	4b25      	ldr	r3, [pc, #148]	; (8008620 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	429a      	cmp	r2, r3
 8008590:	d10a      	bne.n	80085a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	60bb      	str	r3, [r7, #8]
}
 80085a4:	bf00      	nop
 80085a6:	e7fe      	b.n	80085a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	69fa      	ldr	r2, [r7, #28]
 80085b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	db04      	blt.n	80085c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	6959      	ldr	r1, [r3, #20]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4a13      	ldr	r2, [pc, #76]	; (8008624 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80085d6:	4413      	add	r3, r2
 80085d8:	4299      	cmp	r1, r3
 80085da:	d11c      	bne.n	8008616 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe f933 	bl	800684c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d903      	bls.n	80085fa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f6:	4a0c      	ldr	r2, [pc, #48]	; (8008628 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4a07      	ldr	r2, [pc, #28]	; (8008624 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008608:	441a      	add	r2, r3
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	3304      	adds	r3, #4
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f7fe f8be 	bl	8006792 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008616:	bf00      	nop
 8008618:	3720      	adds	r7, #32
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000974 	.word	0x20000974
 8008624:	20000978 	.word	0x20000978
 8008628:	20000e50 	.word	0x20000e50

0800862c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <pvTaskIncrementMutexHeldCount+0x24>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d004      	beq.n	8008642 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008638:	4b05      	ldr	r3, [pc, #20]	; (8008650 <pvTaskIncrementMutexHeldCount+0x24>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800863e:	3201      	adds	r2, #1
 8008640:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8008642:	4b03      	ldr	r3, [pc, #12]	; (8008650 <pvTaskIncrementMutexHeldCount+0x24>)
 8008644:	681b      	ldr	r3, [r3, #0]
	}
 8008646:	4618      	mov	r0, r3
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000974 	.word	0x20000974

08008654 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800865e:	4b21      	ldr	r3, [pc, #132]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008664:	4b20      	ldr	r3, [pc, #128]	; (80086e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3304      	adds	r3, #4
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe f8ee 	bl	800684c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008676:	d10a      	bne.n	800868e <prvAddCurrentTaskToDelayedList+0x3a>
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d007      	beq.n	800868e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800867e:	4b1a      	ldr	r3, [pc, #104]	; (80086e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3304      	adds	r3, #4
 8008684:	4619      	mov	r1, r3
 8008686:	4819      	ldr	r0, [pc, #100]	; (80086ec <prvAddCurrentTaskToDelayedList+0x98>)
 8008688:	f7fe f883 	bl	8006792 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800868c:	e026      	b.n	80086dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4413      	add	r3, r2
 8008694:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d209      	bcs.n	80086ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086a6:	4b12      	ldr	r3, [pc, #72]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	4610      	mov	r0, r2
 80086b4:	f7fe f891 	bl	80067da <vListInsert>
}
 80086b8:	e010      	b.n	80086dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f7fe f887 	bl	80067da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086cc:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d202      	bcs.n	80086dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086d6:	4a08      	ldr	r2, [pc, #32]	; (80086f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	6013      	str	r3, [r2, #0]
}
 80086dc:	bf00      	nop
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000e4c 	.word	0x20000e4c
 80086e8:	20000974 	.word	0x20000974
 80086ec:	20000e34 	.word	0x20000e34
 80086f0:	20000e04 	.word	0x20000e04
 80086f4:	20000e00 	.word	0x20000e00
 80086f8:	20000e68 	.word	0x20000e68

080086fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08a      	sub	sp, #40	; 0x28
 8008700:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008706:	f000 fb07 	bl	8008d18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800870a:	4b1c      	ldr	r3, [pc, #112]	; (800877c <xTimerCreateTimerTask+0x80>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d021      	beq.n	8008756 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800871a:	1d3a      	adds	r2, r7, #4
 800871c:	f107 0108 	add.w	r1, r7, #8
 8008720:	f107 030c 	add.w	r3, r7, #12
 8008724:	4618      	mov	r0, r3
 8008726:	f7fd ffed 	bl	8006704 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	9202      	str	r2, [sp, #8]
 8008732:	9301      	str	r3, [sp, #4]
 8008734:	2302      	movs	r3, #2
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	2300      	movs	r3, #0
 800873a:	460a      	mov	r2, r1
 800873c:	4910      	ldr	r1, [pc, #64]	; (8008780 <xTimerCreateTimerTask+0x84>)
 800873e:	4811      	ldr	r0, [pc, #68]	; (8008784 <xTimerCreateTimerTask+0x88>)
 8008740:	f7fe ffb6 	bl	80076b0 <xTaskCreateStatic>
 8008744:	4603      	mov	r3, r0
 8008746:	4a10      	ldr	r2, [pc, #64]	; (8008788 <xTimerCreateTimerTask+0x8c>)
 8008748:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800874a:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <xTimerCreateTimerTask+0x8c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008752:	2301      	movs	r3, #1
 8008754:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	613b      	str	r3, [r7, #16]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008772:	697b      	ldr	r3, [r7, #20]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20000ea4 	.word	0x20000ea4
 8008780:	0800a3b4 	.word	0x0800a3b4
 8008784:	080088c1 	.word	0x080088c1
 8008788:	20000ea8 	.word	0x20000ea8

0800878c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b08a      	sub	sp, #40	; 0x28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800879a:	2300      	movs	r3, #0
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	623b      	str	r3, [r7, #32]
}
 80087b6:	bf00      	nop
 80087b8:	e7fe      	b.n	80087b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087ba:	4b1a      	ldr	r3, [pc, #104]	; (8008824 <xTimerGenericCommand+0x98>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d02a      	beq.n	8008818 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2b05      	cmp	r3, #5
 80087d2:	dc18      	bgt.n	8008806 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087d4:	f7ff fdb4 	bl	8008340 <xTaskGetSchedulerState>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d109      	bne.n	80087f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087de:	4b11      	ldr	r3, [pc, #68]	; (8008824 <xTimerGenericCommand+0x98>)
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	f107 0110 	add.w	r1, r7, #16
 80087e6:	2300      	movs	r3, #0
 80087e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ea:	f7fe f9c9 	bl	8006b80 <xQueueGenericSend>
 80087ee:	6278      	str	r0, [r7, #36]	; 0x24
 80087f0:	e012      	b.n	8008818 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087f2:	4b0c      	ldr	r3, [pc, #48]	; (8008824 <xTimerGenericCommand+0x98>)
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	f107 0110 	add.w	r1, r7, #16
 80087fa:	2300      	movs	r3, #0
 80087fc:	2200      	movs	r2, #0
 80087fe:	f7fe f9bf 	bl	8006b80 <xQueueGenericSend>
 8008802:	6278      	str	r0, [r7, #36]	; 0x24
 8008804:	e008      	b.n	8008818 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008806:	4b07      	ldr	r3, [pc, #28]	; (8008824 <xTimerGenericCommand+0x98>)
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f107 0110 	add.w	r1, r7, #16
 800880e:	2300      	movs	r3, #0
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	f7fe fab3 	bl	8006d7c <xQueueGenericSendFromISR>
 8008816:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800881a:	4618      	mov	r0, r3
 800881c:	3728      	adds	r7, #40	; 0x28
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000ea4 	.word	0x20000ea4

08008828 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af02      	add	r7, sp, #8
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008832:	4b22      	ldr	r3, [pc, #136]	; (80088bc <prvProcessExpiredTimer+0x94>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	3304      	adds	r3, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe f803 	bl	800684c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d022      	beq.n	800889a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	699a      	ldr	r2, [r3, #24]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	18d1      	adds	r1, r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	6978      	ldr	r0, [r7, #20]
 8008862:	f000 f8d1 	bl	8008a08 <prvInsertTimerInActiveList>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01f      	beq.n	80088ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800886c:	2300      	movs	r3, #0
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	2300      	movs	r3, #0
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	2100      	movs	r1, #0
 8008876:	6978      	ldr	r0, [r7, #20]
 8008878:	f7ff ff88 	bl	800878c <xTimerGenericCommand>
 800887c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d113      	bne.n	80088ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	60fb      	str	r3, [r7, #12]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	6978      	ldr	r0, [r7, #20]
 80088b2:	4798      	blx	r3
}
 80088b4:	bf00      	nop
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20000e9c 	.word	0x20000e9c

080088c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088c8:	f107 0308 	add.w	r3, r7, #8
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 f857 	bl	8008980 <prvGetNextExpireTime>
 80088d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4619      	mov	r1, r3
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 f803 	bl	80088e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088de:	f000 f8d5 	bl	8008a8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088e2:	e7f1      	b.n	80088c8 <prvTimerTask+0x8>

080088e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088ee:	f7ff f93b 	bl	8007b68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088f2:	f107 0308 	add.w	r3, r7, #8
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 f866 	bl	80089c8 <prvSampleTimeNow>
 80088fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d130      	bne.n	8008966 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10a      	bne.n	8008920 <prvProcessTimerOrBlockTask+0x3c>
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	429a      	cmp	r2, r3
 8008910:	d806      	bhi.n	8008920 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008912:	f7ff f937 	bl	8007b84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008916:	68f9      	ldr	r1, [r7, #12]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff ff85 	bl	8008828 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800891e:	e024      	b.n	800896a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d008      	beq.n	8008938 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008926:	4b13      	ldr	r3, [pc, #76]	; (8008974 <prvProcessTimerOrBlockTask+0x90>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <prvProcessTimerOrBlockTask+0x50>
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <prvProcessTimerOrBlockTask+0x52>
 8008934:	2300      	movs	r3, #0
 8008936:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008938:	4b0f      	ldr	r3, [pc, #60]	; (8008978 <prvProcessTimerOrBlockTask+0x94>)
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	4619      	mov	r1, r3
 8008946:	f7fe fe7f 	bl	8007648 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800894a:	f7ff f91b 	bl	8007b84 <xTaskResumeAll>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008954:	4b09      	ldr	r3, [pc, #36]	; (800897c <prvProcessTimerOrBlockTask+0x98>)
 8008956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	f3bf 8f6f 	isb	sy
}
 8008964:	e001      	b.n	800896a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008966:	f7ff f90d 	bl	8007b84 <xTaskResumeAll>
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20000ea0 	.word	0x20000ea0
 8008978:	20000ea4 	.word	0x20000ea4
 800897c:	e000ed04 	.word	0xe000ed04

08008980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008988:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <prvGetNextExpireTime+0x44>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <prvGetNextExpireTime+0x16>
 8008992:	2201      	movs	r2, #1
 8008994:	e000      	b.n	8008998 <prvGetNextExpireTime+0x18>
 8008996:	2200      	movs	r2, #0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d105      	bne.n	80089b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <prvGetNextExpireTime+0x44>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	e001      	b.n	80089b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089b4:	68fb      	ldr	r3, [r7, #12]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000e9c 	.word	0x20000e9c

080089c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089d0:	f7ff f976 	bl	8007cc0 <xTaskGetTickCount>
 80089d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089d6:	4b0b      	ldr	r3, [pc, #44]	; (8008a04 <prvSampleTimeNow+0x3c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d205      	bcs.n	80089ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089e0:	f000 f936 	bl	8008c50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089f2:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <prvSampleTimeNow+0x3c>)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089f8:	68fb      	ldr	r3, [r7, #12]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000eac 	.word	0x20000eac

08008a08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d812      	bhi.n	8008a54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	1ad2      	subs	r2, r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d302      	bcc.n	8008a42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
 8008a40:	e01b      	b.n	8008a7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a42:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <prvInsertTimerInActiveList+0x7c>)
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	f7fd fec4 	bl	80067da <vListInsert>
 8008a52:	e012      	b.n	8008a7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d206      	bcs.n	8008a6a <prvInsertTimerInActiveList+0x62>
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d302      	bcc.n	8008a6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a64:	2301      	movs	r3, #1
 8008a66:	617b      	str	r3, [r7, #20]
 8008a68:	e007      	b.n	8008a7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a6a:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <prvInsertTimerInActiveList+0x80>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3304      	adds	r3, #4
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f7fd feb0 	bl	80067da <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a7a:	697b      	ldr	r3, [r7, #20]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	20000ea0 	.word	0x20000ea0
 8008a88:	20000e9c 	.word	0x20000e9c

08008a8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08e      	sub	sp, #56	; 0x38
 8008a90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a92:	e0ca      	b.n	8008c2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	da18      	bge.n	8008acc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a9a:	1d3b      	adds	r3, r7, #4
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	61fb      	str	r3, [r7, #28]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac2:	6850      	ldr	r0, [r2, #4]
 8008ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac6:	6892      	ldr	r2, [r2, #8]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f2c0 80aa 	blt.w	8008c28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d004      	beq.n	8008aea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fd feb1 	bl	800684c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aea:	463b      	mov	r3, r7
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff ff6b 	bl	80089c8 <prvSampleTimeNow>
 8008af2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b09      	cmp	r3, #9
 8008af8:	f200 8097 	bhi.w	8008c2a <prvProcessReceivedCommands+0x19e>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <prvProcessReceivedCommands+0x78>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b2d 	.word	0x08008b2d
 8008b08:	08008b2d 	.word	0x08008b2d
 8008b0c:	08008b2d 	.word	0x08008b2d
 8008b10:	08008ba1 	.word	0x08008ba1
 8008b14:	08008bb5 	.word	0x08008bb5
 8008b18:	08008bff 	.word	0x08008bff
 8008b1c:	08008b2d 	.word	0x08008b2d
 8008b20:	08008b2d 	.word	0x08008b2d
 8008b24:	08008ba1 	.word	0x08008ba1
 8008b28:	08008bb5 	.word	0x08008bb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b32:	f043 0301 	orr.w	r3, r3, #1
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	18d1      	adds	r1, r2, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b4c:	f7ff ff5c 	bl	8008a08 <prvInsertTimerInActiveList>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d069      	beq.n	8008c2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d05e      	beq.n	8008c2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	441a      	add	r2, r3
 8008b74:	2300      	movs	r3, #0
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b7e:	f7ff fe05 	bl	800878c <xTimerGenericCommand>
 8008b82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d14f      	bne.n	8008c2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	61bb      	str	r3, [r7, #24]
}
 8008b9c:	bf00      	nop
 8008b9e:	e7fe      	b.n	8008b9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ba6:	f023 0301 	bic.w	r3, r3, #1
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008bb2:	e03a      	b.n	8008c2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bba:	f043 0301 	orr.w	r3, r3, #1
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10a      	bne.n	8008bea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	617b      	str	r3, [r7, #20]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	18d1      	adds	r1, r2, r3
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf8:	f7ff ff06 	bl	8008a08 <prvInsertTimerInActiveList>
					break;
 8008bfc:	e015      	b.n	8008c2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d103      	bne.n	8008c14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c0e:	f000 fbdf 	bl	80093d0 <vPortFree>
 8008c12:	e00a      	b.n	8008c2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c1a:	f023 0301 	bic.w	r3, r3, #1
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c26:	e000      	b.n	8008c2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c2a:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <prvProcessReceivedCommands+0x1c0>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	1d39      	adds	r1, r7, #4
 8008c30:	2200      	movs	r2, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe f9ca 	bl	8006fcc <xQueueReceive>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f47f af2a 	bne.w	8008a94 <prvProcessReceivedCommands+0x8>
	}
}
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	3730      	adds	r7, #48	; 0x30
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000ea4 	.word	0x20000ea4

08008c50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c56:	e048      	b.n	8008cea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c58:	4b2d      	ldr	r3, [pc, #180]	; (8008d10 <prvSwitchTimerLists+0xc0>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c62:	4b2b      	ldr	r3, [pc, #172]	; (8008d10 <prvSwitchTimerLists+0xc0>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fd fdeb 	bl	800684c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c84:	f003 0304 	and.w	r3, r3, #4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d02e      	beq.n	8008cea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4413      	add	r3, r2
 8008c94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d90e      	bls.n	8008cbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008caa:	4b19      	ldr	r3, [pc, #100]	; (8008d10 <prvSwitchTimerLists+0xc0>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	f7fd fd90 	bl	80067da <vListInsert>
 8008cba:	e016      	b.n	8008cea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7ff fd60 	bl	800878c <xTimerGenericCommand>
 8008ccc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	603b      	str	r3, [r7, #0]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cea:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <prvSwitchTimerLists+0xc0>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1b1      	bne.n	8008c58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cf4:	4b06      	ldr	r3, [pc, #24]	; (8008d10 <prvSwitchTimerLists+0xc0>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cfa:	4b06      	ldr	r3, [pc, #24]	; (8008d14 <prvSwitchTimerLists+0xc4>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a04      	ldr	r2, [pc, #16]	; (8008d10 <prvSwitchTimerLists+0xc0>)
 8008d00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d02:	4a04      	ldr	r2, [pc, #16]	; (8008d14 <prvSwitchTimerLists+0xc4>)
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	6013      	str	r3, [r2, #0]
}
 8008d08:	bf00      	nop
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000e9c 	.word	0x20000e9c
 8008d14:	20000ea0 	.word	0x20000ea0

08008d18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d1e:	f000 f969 	bl	8008ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d22:	4b15      	ldr	r3, [pc, #84]	; (8008d78 <prvCheckForValidListAndQueue+0x60>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d120      	bne.n	8008d6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d2a:	4814      	ldr	r0, [pc, #80]	; (8008d7c <prvCheckForValidListAndQueue+0x64>)
 8008d2c:	f7fd fd04 	bl	8006738 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d30:	4813      	ldr	r0, [pc, #76]	; (8008d80 <prvCheckForValidListAndQueue+0x68>)
 8008d32:	f7fd fd01 	bl	8006738 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d36:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <prvCheckForValidListAndQueue+0x6c>)
 8008d38:	4a10      	ldr	r2, [pc, #64]	; (8008d7c <prvCheckForValidListAndQueue+0x64>)
 8008d3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d3c:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <prvCheckForValidListAndQueue+0x70>)
 8008d3e:	4a10      	ldr	r2, [pc, #64]	; (8008d80 <prvCheckForValidListAndQueue+0x68>)
 8008d40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d42:	2300      	movs	r3, #0
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	4b11      	ldr	r3, [pc, #68]	; (8008d8c <prvCheckForValidListAndQueue+0x74>)
 8008d48:	4a11      	ldr	r2, [pc, #68]	; (8008d90 <prvCheckForValidListAndQueue+0x78>)
 8008d4a:	2110      	movs	r1, #16
 8008d4c:	200a      	movs	r0, #10
 8008d4e:	f7fd fe0f 	bl	8006970 <xQueueGenericCreateStatic>
 8008d52:	4603      	mov	r3, r0
 8008d54:	4a08      	ldr	r2, [pc, #32]	; (8008d78 <prvCheckForValidListAndQueue+0x60>)
 8008d56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <prvCheckForValidListAndQueue+0x60>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d005      	beq.n	8008d6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d60:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <prvCheckForValidListAndQueue+0x60>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	490b      	ldr	r1, [pc, #44]	; (8008d94 <prvCheckForValidListAndQueue+0x7c>)
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fc44 	bl	80075f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d6c:	f000 f972 	bl	8009054 <vPortExitCritical>
}
 8008d70:	bf00      	nop
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20000ea4 	.word	0x20000ea4
 8008d7c:	20000e74 	.word	0x20000e74
 8008d80:	20000e88 	.word	0x20000e88
 8008d84:	20000e9c 	.word	0x20000e9c
 8008d88:	20000ea0 	.word	0x20000ea0
 8008d8c:	20000f50 	.word	0x20000f50
 8008d90:	20000eb0 	.word	0x20000eb0
 8008d94:	0800a3bc 	.word	0x0800a3bc

08008d98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3b04      	subs	r3, #4
 8008da8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3b04      	subs	r3, #4
 8008db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f023 0201 	bic.w	r2, r3, #1
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3b04      	subs	r3, #4
 8008dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008dc8:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <pxPortInitialiseStack+0x64>)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3b14      	subs	r3, #20
 8008dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3b04      	subs	r3, #4
 8008dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f06f 0202 	mvn.w	r2, #2
 8008de6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3b20      	subs	r3, #32
 8008dec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008dee:	68fb      	ldr	r3, [r7, #12]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	08008e01 	.word	0x08008e01

08008e00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e0a:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <prvTaskExitError+0x54>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e12:	d00a      	beq.n	8008e2a <prvTaskExitError+0x2a>
	__asm volatile
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	60fb      	str	r3, [r7, #12]
}
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <prvTaskExitError+0x28>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	60bb      	str	r3, [r7, #8]
}
 8008e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e3e:	bf00      	nop
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0fc      	beq.n	8008e40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e46:	bf00      	nop
 8008e48:	bf00      	nop
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	20000098 	.word	0x20000098
	...

08008e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <pxCurrentTCBConst2>)
 8008e62:	6819      	ldr	r1, [r3, #0]
 8008e64:	6808      	ldr	r0, [r1, #0]
 8008e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	f380 8809 	msr	PSP, r0
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f380 8811 	msr	BASEPRI, r0
 8008e7a:	4770      	bx	lr
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst2>:
 8008e80:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e88:	4808      	ldr	r0, [pc, #32]	; (8008eac <prvPortStartFirstTask+0x24>)
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	6800      	ldr	r0, [r0, #0]
 8008e8e:	f380 8808 	msr	MSP, r0
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8814 	msr	CONTROL, r0
 8008e9a:	b662      	cpsie	i
 8008e9c:	b661      	cpsie	f
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	df00      	svc	0
 8008ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eaa:	bf00      	nop
 8008eac:	e000ed08 	.word	0xe000ed08

08008eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008eb6:	4b46      	ldr	r3, [pc, #280]	; (8008fd0 <xPortStartScheduler+0x120>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a46      	ldr	r2, [pc, #280]	; (8008fd4 <xPortStartScheduler+0x124>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d10a      	bne.n	8008ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ed6:	4b3e      	ldr	r3, [pc, #248]	; (8008fd0 <xPortStartScheduler+0x120>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a3f      	ldr	r2, [pc, #252]	; (8008fd8 <xPortStartScheduler+0x128>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d10a      	bne.n	8008ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	60fb      	str	r3, [r7, #12]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ef6:	4b39      	ldr	r3, [pc, #228]	; (8008fdc <xPortStartScheduler+0x12c>)
 8008ef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	22ff      	movs	r2, #255	; 0xff
 8008f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	4b31      	ldr	r3, [pc, #196]	; (8008fe0 <xPortStartScheduler+0x130>)
 8008f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f1e:	4b31      	ldr	r3, [pc, #196]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f20:	2207      	movs	r2, #7
 8008f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f24:	e009      	b.n	8008f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f26:	4b2f      	ldr	r3, [pc, #188]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	4a2d      	ldr	r2, [pc, #180]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f42:	2b80      	cmp	r3, #128	; 0x80
 8008f44:	d0ef      	beq.n	8008f26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f46:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f1c3 0307 	rsb	r3, r3, #7
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d00a      	beq.n	8008f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	60bb      	str	r3, [r7, #8]
}
 8008f64:	bf00      	nop
 8008f66:	e7fe      	b.n	8008f66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f68:	4b1e      	ldr	r3, [pc, #120]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	4a1d      	ldr	r2, [pc, #116]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f72:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f7a:	4a1a      	ldr	r2, [pc, #104]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f86:	4b18      	ldr	r3, [pc, #96]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a17      	ldr	r2, [pc, #92]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f92:	4b15      	ldr	r3, [pc, #84]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a14      	ldr	r2, [pc, #80]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f9e:	f000 f8dd 	bl	800915c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fa2:	4b12      	ldr	r3, [pc, #72]	; (8008fec <xPortStartScheduler+0x13c>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fa8:	f000 f8fc 	bl	80091a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fac:	4b10      	ldr	r3, [pc, #64]	; (8008ff0 <xPortStartScheduler+0x140>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a0f      	ldr	r2, [pc, #60]	; (8008ff0 <xPortStartScheduler+0x140>)
 8008fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fb8:	f7ff ff66 	bl	8008e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fbc:	f7fe ff4a 	bl	8007e54 <vTaskSwitchContext>
	prvTaskExitError();
 8008fc0:	f7ff ff1e 	bl	8008e00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	e000ed00 	.word	0xe000ed00
 8008fd4:	410fc271 	.word	0x410fc271
 8008fd8:	410fc270 	.word	0x410fc270
 8008fdc:	e000e400 	.word	0xe000e400
 8008fe0:	20000fa0 	.word	0x20000fa0
 8008fe4:	20000fa4 	.word	0x20000fa4
 8008fe8:	e000ed20 	.word	0xe000ed20
 8008fec:	20000098 	.word	0x20000098
 8008ff0:	e000ef34 	.word	0xe000ef34

08008ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	607b      	str	r3, [r7, #4]
}
 800900c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800900e:	4b0f      	ldr	r3, [pc, #60]	; (800904c <vPortEnterCritical+0x58>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	4a0d      	ldr	r2, [pc, #52]	; (800904c <vPortEnterCritical+0x58>)
 8009016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009018:	4b0c      	ldr	r3, [pc, #48]	; (800904c <vPortEnterCritical+0x58>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d10f      	bne.n	8009040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009020:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <vPortEnterCritical+0x5c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <vPortEnterCritical+0x4c>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	603b      	str	r3, [r7, #0]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <vPortEnterCritical+0x4a>
	}
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	20000098 	.word	0x20000098
 8009050:	e000ed04 	.word	0xe000ed04

08009054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <vPortExitCritical+0x50>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <vPortExitCritical+0x24>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	607b      	str	r3, [r7, #4]
}
 8009074:	bf00      	nop
 8009076:	e7fe      	b.n	8009076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009078:	4b0a      	ldr	r3, [pc, #40]	; (80090a4 <vPortExitCritical+0x50>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3b01      	subs	r3, #1
 800907e:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <vPortExitCritical+0x50>)
 8009080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009082:	4b08      	ldr	r3, [pc, #32]	; (80090a4 <vPortExitCritical+0x50>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <vPortExitCritical+0x42>
 800908a:	2300      	movs	r3, #0
 800908c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	f383 8811 	msr	BASEPRI, r3
}
 8009094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000098 	.word	0x20000098
	...

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4b15      	ldr	r3, [pc, #84]	; (8009110 <pxCurrentTCBConst>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	f01e 0f10 	tst.w	lr, #16
 80090c0:	bf08      	it	eq
 80090c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	6010      	str	r0, [r2, #0]
 80090cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090d4:	f380 8811 	msr	BASEPRI, r0
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f7fe feb8 	bl	8007e54 <vTaskSwitchContext>
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f380 8811 	msr	BASEPRI, r0
 80090ec:	bc09      	pop	{r0, r3}
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	6808      	ldr	r0, [r1, #0]
 80090f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f6:	f01e 0f10 	tst.w	lr, #16
 80090fa:	bf08      	it	eq
 80090fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009100:	f380 8809 	msr	PSP, r0
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst>:
 8009110:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	607b      	str	r3, [r7, #4]
}
 8009130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009132:	f7fe fdd5 	bl	8007ce0 <xTaskIncrementTick>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800913c:	4b06      	ldr	r3, [pc, #24]	; (8009158 <xPortSysTickHandler+0x40>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	2300      	movs	r3, #0
 8009146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f383 8811 	msr	BASEPRI, r3
}
 800914e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009160:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <vPortSetupTimerInterrupt+0x38>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800916c:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <vPortSetupTimerInterrupt+0x3c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a0a      	ldr	r2, [pc, #40]	; (800919c <vPortSetupTimerInterrupt+0x40>)
 8009172:	fba2 2303 	umull	r2, r3, r2, r3
 8009176:	099b      	lsrs	r3, r3, #6
 8009178:	4a09      	ldr	r2, [pc, #36]	; (80091a0 <vPortSetupTimerInterrupt+0x44>)
 800917a:	3b01      	subs	r3, #1
 800917c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800917e:	4b04      	ldr	r3, [pc, #16]	; (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009180:	2207      	movs	r2, #7
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	e000e010 	.word	0xe000e010
 8009194:	e000e018 	.word	0xe000e018
 8009198:	20000000 	.word	0x20000000
 800919c:	10624dd3 	.word	0x10624dd3
 80091a0:	e000e014 	.word	0xe000e014

080091a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091b4 <vPortEnableVFP+0x10>
 80091a8:	6801      	ldr	r1, [r0, #0]
 80091aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ae:	6001      	str	r1, [r0, #0]
 80091b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091b2:	bf00      	nop
 80091b4:	e000ed88 	.word	0xe000ed88

080091b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091be:	f3ef 8305 	mrs	r3, IPSR
 80091c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b0f      	cmp	r3, #15
 80091c8:	d914      	bls.n	80091f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ca:	4a17      	ldr	r2, [pc, #92]	; (8009228 <vPortValidateInterruptPriority+0x70>)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091d4:	4b15      	ldr	r3, [pc, #84]	; (800922c <vPortValidateInterruptPriority+0x74>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	7afa      	ldrb	r2, [r7, #11]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d20a      	bcs.n	80091f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091f4:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <vPortValidateInterruptPriority+0x78>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091fc:	4b0d      	ldr	r3, [pc, #52]	; (8009234 <vPortValidateInterruptPriority+0x7c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d90a      	bls.n	800921a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	603b      	str	r3, [r7, #0]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <vPortValidateInterruptPriority+0x60>
	}
 800921a:	bf00      	nop
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	e000e3f0 	.word	0xe000e3f0
 800922c:	20000fa0 	.word	0x20000fa0
 8009230:	e000ed0c 	.word	0xe000ed0c
 8009234:	20000fa4 	.word	0x20000fa4

08009238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009240:	2300      	movs	r3, #0
 8009242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009244:	f7fe fc90 	bl	8007b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009248:	4b5b      	ldr	r3, [pc, #364]	; (80093b8 <pvPortMalloc+0x180>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009250:	f000 f920 	bl	8009494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009254:	4b59      	ldr	r3, [pc, #356]	; (80093bc <pvPortMalloc+0x184>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4013      	ands	r3, r2
 800925c:	2b00      	cmp	r3, #0
 800925e:	f040 8093 	bne.w	8009388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01d      	beq.n	80092a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009268:	2208      	movs	r2, #8
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4413      	add	r3, r2
 800926e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b00      	cmp	r3, #0
 8009278:	d014      	beq.n	80092a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f023 0307 	bic.w	r3, r3, #7
 8009280:	3308      	adds	r3, #8
 8009282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <pvPortMalloc+0x6c>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	617b      	str	r3, [r7, #20]
}
 80092a0:	bf00      	nop
 80092a2:	e7fe      	b.n	80092a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d06e      	beq.n	8009388 <pvPortMalloc+0x150>
 80092aa:	4b45      	ldr	r3, [pc, #276]	; (80093c0 <pvPortMalloc+0x188>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d869      	bhi.n	8009388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092b4:	4b43      	ldr	r3, [pc, #268]	; (80093c4 <pvPortMalloc+0x18c>)
 80092b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092b8:	4b42      	ldr	r3, [pc, #264]	; (80093c4 <pvPortMalloc+0x18c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092be:	e004      	b.n	80092ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d903      	bls.n	80092dc <pvPortMalloc+0xa4>
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1f1      	bne.n	80092c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092dc:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <pvPortMalloc+0x180>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d050      	beq.n	8009388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2208      	movs	r2, #8
 80092ec:	4413      	add	r3, r2
 80092ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	1ad2      	subs	r2, r2, r3
 8009300:	2308      	movs	r3, #8
 8009302:	005b      	lsls	r3, r3, #1
 8009304:	429a      	cmp	r2, r3
 8009306:	d91f      	bls.n	8009348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <pvPortMalloc+0xf8>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	613b      	str	r3, [r7, #16]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009342:	69b8      	ldr	r0, [r7, #24]
 8009344:	f000 f908 	bl	8009558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009348:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <pvPortMalloc+0x188>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	4a1b      	ldr	r2, [pc, #108]	; (80093c0 <pvPortMalloc+0x188>)
 8009354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009356:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <pvPortMalloc+0x188>)
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	4b1b      	ldr	r3, [pc, #108]	; (80093c8 <pvPortMalloc+0x190>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d203      	bcs.n	800936a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009362:	4b17      	ldr	r3, [pc, #92]	; (80093c0 <pvPortMalloc+0x188>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <pvPortMalloc+0x190>)
 8009368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <pvPortMalloc+0x184>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	431a      	orrs	r2, r3
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800937e:	4b13      	ldr	r3, [pc, #76]	; (80093cc <pvPortMalloc+0x194>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	4a11      	ldr	r2, [pc, #68]	; (80093cc <pvPortMalloc+0x194>)
 8009386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009388:	f7fe fbfc 	bl	8007b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <pvPortMalloc+0x174>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60fb      	str	r3, [r7, #12]
}
 80093a8:	bf00      	nop
 80093aa:	e7fe      	b.n	80093aa <pvPortMalloc+0x172>
	return pvReturn;
 80093ac:	69fb      	ldr	r3, [r7, #28]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3728      	adds	r7, #40	; 0x28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20008fb0 	.word	0x20008fb0
 80093bc:	20008fc4 	.word	0x20008fc4
 80093c0:	20008fb4 	.word	0x20008fb4
 80093c4:	20008fa8 	.word	0x20008fa8
 80093c8:	20008fb8 	.word	0x20008fb8
 80093cc:	20008fbc 	.word	0x20008fbc

080093d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d04d      	beq.n	800947e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093e2:	2308      	movs	r3, #8
 80093e4:	425b      	negs	r3, r3
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4413      	add	r3, r2
 80093ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	4b24      	ldr	r3, [pc, #144]	; (8009488 <vPortFree+0xb8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4013      	ands	r3, r2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10a      	bne.n	8009414 <vPortFree+0x44>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	60fb      	str	r3, [r7, #12]
}
 8009410:	bf00      	nop
 8009412:	e7fe      	b.n	8009412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <vPortFree+0x62>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	60bb      	str	r3, [r7, #8]
}
 800942e:	bf00      	nop
 8009430:	e7fe      	b.n	8009430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	4b14      	ldr	r3, [pc, #80]	; (8009488 <vPortFree+0xb8>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4013      	ands	r3, r2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d01e      	beq.n	800947e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d11a      	bne.n	800947e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <vPortFree+0xb8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	43db      	mvns	r3, r3
 8009452:	401a      	ands	r2, r3
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009458:	f7fe fb86 	bl	8007b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	4b0a      	ldr	r3, [pc, #40]	; (800948c <vPortFree+0xbc>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4413      	add	r3, r2
 8009466:	4a09      	ldr	r2, [pc, #36]	; (800948c <vPortFree+0xbc>)
 8009468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800946a:	6938      	ldr	r0, [r7, #16]
 800946c:	f000 f874 	bl	8009558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <vPortFree+0xc0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3301      	adds	r3, #1
 8009476:	4a06      	ldr	r2, [pc, #24]	; (8009490 <vPortFree+0xc0>)
 8009478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800947a:	f7fe fb83 	bl	8007b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800947e:	bf00      	nop
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20008fc4 	.word	0x20008fc4
 800948c:	20008fb4 	.word	0x20008fb4
 8009490:	20008fc0 	.word	0x20008fc0

08009494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800949a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800949e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094a0:	4b27      	ldr	r3, [pc, #156]	; (8009540 <prvHeapInit+0xac>)
 80094a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00c      	beq.n	80094c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3307      	adds	r3, #7
 80094b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	4a1f      	ldr	r2, [pc, #124]	; (8009540 <prvHeapInit+0xac>)
 80094c4:	4413      	add	r3, r2
 80094c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094cc:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <prvHeapInit+0xb0>)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <prvHeapInit+0xb0>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	4413      	add	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094e0:	2208      	movs	r2, #8
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	1a9b      	subs	r3, r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0307 	bic.w	r3, r3, #7
 80094ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4a15      	ldr	r2, [pc, #84]	; (8009548 <prvHeapInit+0xb4>)
 80094f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094f6:	4b14      	ldr	r3, [pc, #80]	; (8009548 <prvHeapInit+0xb4>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2200      	movs	r2, #0
 80094fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094fe:	4b12      	ldr	r3, [pc, #72]	; (8009548 <prvHeapInit+0xb4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	1ad2      	subs	r2, r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009514:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <prvHeapInit+0xb4>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4a0a      	ldr	r2, [pc, #40]	; (800954c <prvHeapInit+0xb8>)
 8009522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <prvHeapInit+0xbc>)
 800952a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <prvHeapInit+0xc0>)
 800952e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20000fa8 	.word	0x20000fa8
 8009544:	20008fa8 	.word	0x20008fa8
 8009548:	20008fb0 	.word	0x20008fb0
 800954c:	20008fb8 	.word	0x20008fb8
 8009550:	20008fb4 	.word	0x20008fb4
 8009554:	20008fc4 	.word	0x20008fc4

08009558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009560:	4b28      	ldr	r3, [pc, #160]	; (8009604 <prvInsertBlockIntoFreeList+0xac>)
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	e002      	b.n	800956c <prvInsertBlockIntoFreeList+0x14>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	429a      	cmp	r2, r3
 8009574:	d8f7      	bhi.n	8009566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	4413      	add	r3, r2
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	429a      	cmp	r2, r3
 8009586:	d108      	bne.n	800959a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	441a      	add	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	441a      	add	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d118      	bne.n	80095e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b15      	ldr	r3, [pc, #84]	; (8009608 <prvInsertBlockIntoFreeList+0xb0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d00d      	beq.n	80095d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	441a      	add	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	e008      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <prvInsertBlockIntoFreeList+0xb0>)
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	e003      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d002      	beq.n	80095f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20008fa8 	.word	0x20008fa8
 8009608:	20008fb0 	.word	0x20008fb0

0800960c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009610:	2200      	movs	r2, #0
 8009612:	4912      	ldr	r1, [pc, #72]	; (800965c <MX_USB_DEVICE_Init+0x50>)
 8009614:	4812      	ldr	r0, [pc, #72]	; (8009660 <MX_USB_DEVICE_Init+0x54>)
 8009616:	f7fb fc59 	bl	8004ecc <USBD_Init>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009620:	f7f7 f888 	bl	8000734 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009624:	490f      	ldr	r1, [pc, #60]	; (8009664 <MX_USB_DEVICE_Init+0x58>)
 8009626:	480e      	ldr	r0, [pc, #56]	; (8009660 <MX_USB_DEVICE_Init+0x54>)
 8009628:	f7fb fc80 	bl	8004f2c <USBD_RegisterClass>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009632:	f7f7 f87f 	bl	8000734 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009636:	490c      	ldr	r1, [pc, #48]	; (8009668 <MX_USB_DEVICE_Init+0x5c>)
 8009638:	4809      	ldr	r0, [pc, #36]	; (8009660 <MX_USB_DEVICE_Init+0x54>)
 800963a:	f7fb fb71 	bl	8004d20 <USBD_CDC_RegisterInterface>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009644:	f7f7 f876 	bl	8000734 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009648:	4805      	ldr	r0, [pc, #20]	; (8009660 <MX_USB_DEVICE_Init+0x54>)
 800964a:	f7fb fca5 	bl	8004f98 <USBD_Start>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009654:	f7f7 f86e 	bl	8000734 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009658:	bf00      	nop
 800965a:	bd80      	pop	{r7, pc}
 800965c:	200000b0 	.word	0x200000b0
 8009660:	20008fc8 	.word	0x20008fc8
 8009664:	20000018 	.word	0x20000018
 8009668:	2000009c 	.word	0x2000009c

0800966c <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void init_usb_rtos_obj(void){
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
	sem_usb_tx = xSemaphoreCreateBinary();
 8009670:	2203      	movs	r2, #3
 8009672:	2100      	movs	r1, #0
 8009674:	2001      	movs	r0, #1
 8009676:	f7fd f9f3 	bl	8006a60 <xQueueGenericCreate>
 800967a:	4603      	mov	r3, r0
 800967c:	4a0a      	ldr	r2, [pc, #40]	; (80096a8 <init_usb_rtos_obj+0x3c>)
 800967e:	6013      	str	r3, [r2, #0]
	mutex_usb = xSemaphoreCreateMutex();
 8009680:	2001      	movs	r0, #1
 8009682:	f7fd fa64 	bl	8006b4e <xQueueCreateMutex>
 8009686:	4603      	mov	r3, r0
 8009688:	4a08      	ldr	r2, [pc, #32]	; (80096ac <init_usb_rtos_obj+0x40>)
 800968a:	6013      	str	r3, [r2, #0]
	queue_usb = xQueueCreate(768,sizeof(char)); //Consegue receber 768 caracteres sem descartar nada
 800968c:	2200      	movs	r2, #0
 800968e:	2101      	movs	r1, #1
 8009690:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009694:	f7fd f9e4 	bl	8006a60 <xQueueGenericCreate>
 8009698:	4603      	mov	r3, r0
 800969a:	4a05      	ldr	r2, [pc, #20]	; (80096b0 <init_usb_rtos_obj+0x44>)
 800969c:	6013      	str	r3, [r2, #0]
	usb_on = 1;
 800969e:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <init_usb_rtos_obj+0x48>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
}
 80096a4:	bf00      	nop
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	2000a2a4 	.word	0x2000a2a4
 80096ac:	2000a2a8 	.word	0x2000a2a8
 80096b0:	2000a2ac 	.word	0x2000a2ac
 80096b4:	2000a2b0 	.word	0x2000a2b0

080096b8 <CDC_Receiveq_MS>:
uint32_t usb_is_on(){
	return usb_on;
}

BaseType_t CDC_Receiveq_MS(char *data, TickType_t timeout){
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
	return xQueueReceive(queue_usb, data, timeout);
 80096c2:	4b06      	ldr	r3, [pc, #24]	; (80096dc <CDC_Receiveq_MS+0x24>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fd fc7e 	bl	8006fcc <xQueueReceive>
 80096d0:	4603      	mov	r3, r0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	2000a2ac 	.word	0x2000a2ac

080096e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096e4:	2200      	movs	r2, #0
 80096e6:	4905      	ldr	r1, [pc, #20]	; (80096fc <CDC_Init_FS+0x1c>)
 80096e8:	4805      	ldr	r0, [pc, #20]	; (8009700 <CDC_Init_FS+0x20>)
 80096ea:	f7fb fb33 	bl	8004d54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096ee:	4905      	ldr	r1, [pc, #20]	; (8009704 <CDC_Init_FS+0x24>)
 80096f0:	4803      	ldr	r0, [pc, #12]	; (8009700 <CDC_Init_FS+0x20>)
 80096f2:	f7fb fb51 	bl	8004d98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80096f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	20009aa4 	.word	0x20009aa4
 8009700:	20008fc8 	.word	0x20008fc8
 8009704:	200092a4 	.word	0x200092a4

08009708 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009708:	b480      	push	{r7}
 800970a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800970c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800970e:	4618      	mov	r0, r3
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	6039      	str	r1, [r7, #0]
 8009722:	71fb      	strb	r3, [r7, #7]
 8009724:	4613      	mov	r3, r2
 8009726:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	2b23      	cmp	r3, #35	; 0x23
 800972c:	d84a      	bhi.n	80097c4 <CDC_Control_FS+0xac>
 800972e:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <CDC_Control_FS+0x1c>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	080097c5 	.word	0x080097c5
 8009738:	080097c5 	.word	0x080097c5
 800973c:	080097c5 	.word	0x080097c5
 8009740:	080097c5 	.word	0x080097c5
 8009744:	080097c5 	.word	0x080097c5
 8009748:	080097c5 	.word	0x080097c5
 800974c:	080097c5 	.word	0x080097c5
 8009750:	080097c5 	.word	0x080097c5
 8009754:	080097c5 	.word	0x080097c5
 8009758:	080097c5 	.word	0x080097c5
 800975c:	080097c5 	.word	0x080097c5
 8009760:	080097c5 	.word	0x080097c5
 8009764:	080097c5 	.word	0x080097c5
 8009768:	080097c5 	.word	0x080097c5
 800976c:	080097c5 	.word	0x080097c5
 8009770:	080097c5 	.word	0x080097c5
 8009774:	080097c5 	.word	0x080097c5
 8009778:	080097c5 	.word	0x080097c5
 800977c:	080097c5 	.word	0x080097c5
 8009780:	080097c5 	.word	0x080097c5
 8009784:	080097c5 	.word	0x080097c5
 8009788:	080097c5 	.word	0x080097c5
 800978c:	080097c5 	.word	0x080097c5
 8009790:	080097c5 	.word	0x080097c5
 8009794:	080097c5 	.word	0x080097c5
 8009798:	080097c5 	.word	0x080097c5
 800979c:	080097c5 	.word	0x080097c5
 80097a0:	080097c5 	.word	0x080097c5
 80097a4:	080097c5 	.word	0x080097c5
 80097a8:	080097c5 	.word	0x080097c5
 80097ac:	080097c5 	.word	0x080097c5
 80097b0:	080097c5 	.word	0x080097c5
 80097b4:	080097c5 	.word	0x080097c5
 80097b8:	080097c5 	.word	0x080097c5
 80097bc:	080097c5 	.word	0x080097c5
 80097c0:	080097c5 	.word	0x080097c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097c4:	bf00      	nop
  }

  return (USBD_OK);
 80097c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 80097de:	2300      	movs	r3, #0
 80097e0:	60bb      	str	r3, [r7, #8]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	4814      	ldr	r0, [pc, #80]	; (8009838 <CDC_Receive_FS+0x64>)
 80097e6:	f7fb fad7 	bl	8004d98 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097ea:	4813      	ldr	r0, [pc, #76]	; (8009838 <CDC_Receive_FS+0x64>)
 80097ec:	f7fb fb38 	bl	8004e60 <USBD_CDC_ReceivePacket>

	uint32_t len = *Len;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	60fb      	str	r3, [r7, #12]
	while(len){
 80097f6:	e00c      	b.n	8009812 <CDC_Receive_FS+0x3e>
		xQueueSendFromISR(queue_usb, Buf++, &yield);
 80097f8:	4b10      	ldr	r3, [pc, #64]	; (800983c <CDC_Receive_FS+0x68>)
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	6879      	ldr	r1, [r7, #4]
 80097fe:	1c4b      	adds	r3, r1, #1
 8009800:	607b      	str	r3, [r7, #4]
 8009802:	f107 0208 	add.w	r2, r7, #8
 8009806:	2300      	movs	r3, #0
 8009808:	f7fd fab8 	bl	8006d7c <xQueueGenericSendFromISR>
		len--;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3b01      	subs	r3, #1
 8009810:	60fb      	str	r3, [r7, #12]
	while(len){
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1ef      	bne.n	80097f8 <CDC_Receive_FS+0x24>
	}
	portYIELD_FROM_ISR(yield);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d007      	beq.n	800982e <CDC_Receive_FS+0x5a>
 800981e:	4b08      	ldr	r3, [pc, #32]	; (8009840 <CDC_Receive_FS+0x6c>)
 8009820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800982e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	20008fc8 	.word	0x20008fc8
 800983c:	2000a2ac 	.word	0x2000a2ac
 8009840:	e000ed04 	.word	0xe000ed04

08009844 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  if(xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE){
 8009854:	4b1c      	ldr	r3, [pc, #112]	; (80098c8 <CDC_Transmit_FS+0x84>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800985c:	4618      	mov	r0, r3
 800985e:	f7fd fc95 	bl	800718c <xQueueSemaphoreTake>
 8009862:	4603      	mov	r3, r0
 8009864:	2b01      	cmp	r3, #1
 8009866:	d12a      	bne.n	80098be <CDC_Transmit_FS+0x7a>
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009868:	4b18      	ldr	r3, [pc, #96]	; (80098cc <CDC_Transmit_FS+0x88>)
 800986a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800986e:	60bb      	str	r3, [r7, #8]
	  if (hcdc->TxState != 0){
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009876:	2b00      	cmp	r3, #0
 8009878:	d008      	beq.n	800988c <CDC_Transmit_FS+0x48>
		xSemaphoreGive(mutex_usb);
 800987a:	4b13      	ldr	r3, [pc, #76]	; (80098c8 <CDC_Transmit_FS+0x84>)
 800987c:	6818      	ldr	r0, [r3, #0]
 800987e:	2300      	movs	r3, #0
 8009880:	2200      	movs	r2, #0
 8009882:	2100      	movs	r1, #0
 8009884:	f7fd f97c 	bl	8006b80 <xQueueGenericSend>
		return USBD_BUSY;
 8009888:	2301      	movs	r3, #1
 800988a:	e019      	b.n	80098c0 <CDC_Transmit_FS+0x7c>
	  }
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800988c:	887b      	ldrh	r3, [r7, #2]
 800988e:	461a      	mov	r2, r3
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	480e      	ldr	r0, [pc, #56]	; (80098cc <CDC_Transmit_FS+0x88>)
 8009894:	f7fb fa5e 	bl	8004d54 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009898:	480c      	ldr	r0, [pc, #48]	; (80098cc <CDC_Transmit_FS+0x88>)
 800989a:	f7fb fa9b 	bl	8004dd4 <USBD_CDC_TransmitPacket>
 800989e:	4603      	mov	r3, r0
 80098a0:	73fb      	strb	r3, [r7, #15]
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 80098a2:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <CDC_Transmit_FS+0x8c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fd fc6e 	bl	800718c <xQueueSemaphoreTake>
	  xSemaphoreGive(mutex_usb);
 80098b0:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <CDC_Transmit_FS+0x84>)
 80098b2:	6818      	ldr	r0, [r3, #0]
 80098b4:	2300      	movs	r3, #0
 80098b6:	2200      	movs	r2, #0
 80098b8:	2100      	movs	r1, #0
 80098ba:	f7fd f961 	bl	8006b80 <xQueueGenericSend>
  }
  /* USER CODE END 7 */
  return result;
 80098be:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	2000a2a8 	.word	0x2000a2a8
 80098cc:	20008fc8 	.word	0x20008fc8
 80098d0:	2000a2a4 	.word	0x2000a2a4

080098d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 80098e6:	2300      	movs	r3, #0
 80098e8:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 80098ea:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <CDC_TransmitCplt_FS+0x44>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f107 0210 	add.w	r2, r7, #16
 80098f2:	4611      	mov	r1, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fd fadc 	bl	8006eb2 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 80098fa:	4b08      	ldr	r3, [pc, #32]	; (800991c <CDC_TransmitCplt_FS+0x48>)
 80098fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800990a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	2000a2a4 	.word	0x2000a2a4
 800991c:	e000ed04 	.word	0xe000ed04

08009920 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2212      	movs	r2, #18
 8009930:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009932:	4b03      	ldr	r3, [pc, #12]	; (8009940 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009934:	4618      	mov	r0, r3
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	200000cc 	.word	0x200000cc

08009944 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2204      	movs	r2, #4
 8009954:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009956:	4b03      	ldr	r3, [pc, #12]	; (8009964 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	200000e0 	.word	0x200000e0

08009968 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4907      	ldr	r1, [pc, #28]	; (800999c <USBD_FS_ProductStrDescriptor+0x34>)
 800997e:	4808      	ldr	r0, [pc, #32]	; (80099a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009980:	f7fc fcb6 	bl	80062f0 <USBD_GetString>
 8009984:	e004      	b.n	8009990 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	4904      	ldr	r1, [pc, #16]	; (800999c <USBD_FS_ProductStrDescriptor+0x34>)
 800998a:	4805      	ldr	r0, [pc, #20]	; (80099a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800998c:	f7fc fcb0 	bl	80062f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	2000a2b4 	.word	0x2000a2b4
 80099a0:	0800a3c4 	.word	0x0800a3c4

080099a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	4904      	ldr	r1, [pc, #16]	; (80099c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099b4:	4804      	ldr	r0, [pc, #16]	; (80099c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099b6:	f7fc fc9b 	bl	80062f0 <USBD_GetString>
  return USBD_StrDesc;
 80099ba:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	2000a2b4 	.word	0x2000a2b4
 80099c8:	0800a3dc 	.word	0x0800a3dc

080099cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	221a      	movs	r2, #26
 80099dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099de:	f000 f843 	bl	8009a68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099e2:	4b02      	ldr	r3, [pc, #8]	; (80099ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	200000e4 	.word	0x200000e4

080099f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d105      	bne.n	8009a0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4907      	ldr	r1, [pc, #28]	; (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a06:	4808      	ldr	r0, [pc, #32]	; (8009a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a08:	f7fc fc72 	bl	80062f0 <USBD_GetString>
 8009a0c:	e004      	b.n	8009a18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	4904      	ldr	r1, [pc, #16]	; (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a12:	4805      	ldr	r0, [pc, #20]	; (8009a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a14:	f7fc fc6c 	bl	80062f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a18:	4b02      	ldr	r3, [pc, #8]	; (8009a24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	2000a2b4 	.word	0x2000a2b4
 8009a28:	0800a3f0 	.word	0x0800a3f0

08009a2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d105      	bne.n	8009a4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	4907      	ldr	r1, [pc, #28]	; (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a42:	4808      	ldr	r0, [pc, #32]	; (8009a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a44:	f7fc fc54 	bl	80062f0 <USBD_GetString>
 8009a48:	e004      	b.n	8009a54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4904      	ldr	r1, [pc, #16]	; (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a4e:	4805      	ldr	r0, [pc, #20]	; (8009a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a50:	f7fc fc4e 	bl	80062f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a54:	4b02      	ldr	r3, [pc, #8]	; (8009a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	2000a2b4 	.word	0x2000a2b4
 8009a64:	0800a3fc 	.word	0x0800a3fc

08009a68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <Get_SerialNum+0x44>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a74:	4b0e      	ldr	r3, [pc, #56]	; (8009ab0 <Get_SerialNum+0x48>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a7a:	4b0e      	ldr	r3, [pc, #56]	; (8009ab4 <Get_SerialNum+0x4c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d009      	beq.n	8009aa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a8e:	2208      	movs	r2, #8
 8009a90:	4909      	ldr	r1, [pc, #36]	; (8009ab8 <Get_SerialNum+0x50>)
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f814 	bl	8009ac0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a98:	2204      	movs	r2, #4
 8009a9a:	4908      	ldr	r1, [pc, #32]	; (8009abc <Get_SerialNum+0x54>)
 8009a9c:	68b8      	ldr	r0, [r7, #8]
 8009a9e:	f000 f80f 	bl	8009ac0 <IntToUnicode>
  }
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	1fff7a10 	.word	0x1fff7a10
 8009ab0:	1fff7a14 	.word	0x1fff7a14
 8009ab4:	1fff7a18 	.word	0x1fff7a18
 8009ab8:	200000e6 	.word	0x200000e6
 8009abc:	200000f6 	.word	0x200000f6

08009ac0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	4613      	mov	r3, r2
 8009acc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	75fb      	strb	r3, [r7, #23]
 8009ad6:	e027      	b.n	8009b28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	0f1b      	lsrs	r3, r3, #28
 8009adc:	2b09      	cmp	r3, #9
 8009ade:	d80b      	bhi.n	8009af8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	0f1b      	lsrs	r3, r3, #28
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	4619      	mov	r1, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	440b      	add	r3, r1
 8009af0:	3230      	adds	r2, #48	; 0x30
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	e00a      	b.n	8009b0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	0f1b      	lsrs	r3, r3, #28
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	4619      	mov	r1, r3
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	440b      	add	r3, r1
 8009b08:	3237      	adds	r2, #55	; 0x37
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	011b      	lsls	r3, r3, #4
 8009b12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	3301      	adds	r3, #1
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
 8009b24:	3301      	adds	r3, #1
 8009b26:	75fb      	strb	r3, [r7, #23]
 8009b28:	7dfa      	ldrb	r2, [r7, #23]
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d3d3      	bcc.n	8009ad8 <IntToUnicode+0x18>
  }
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
	...

08009b40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	; 0x28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b48:	f107 0314 	add.w	r3, r7, #20
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	605a      	str	r2, [r3, #4]
 8009b52:	609a      	str	r2, [r3, #8]
 8009b54:	60da      	str	r2, [r3, #12]
 8009b56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b60:	d13a      	bne.n	8009bd8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b62:	2300      	movs	r3, #0
 8009b64:	613b      	str	r3, [r7, #16]
 8009b66:	4b1e      	ldr	r3, [pc, #120]	; (8009be0 <HAL_PCD_MspInit+0xa0>)
 8009b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6a:	4a1d      	ldr	r2, [pc, #116]	; (8009be0 <HAL_PCD_MspInit+0xa0>)
 8009b6c:	f043 0301 	orr.w	r3, r3, #1
 8009b70:	6313      	str	r3, [r2, #48]	; 0x30
 8009b72:	4b1b      	ldr	r3, [pc, #108]	; (8009be0 <HAL_PCD_MspInit+0xa0>)
 8009b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	613b      	str	r3, [r7, #16]
 8009b7c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b84:	2302      	movs	r3, #2
 8009b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b90:	230a      	movs	r3, #10
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b94:	f107 0314 	add.w	r3, r7, #20
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4812      	ldr	r0, [pc, #72]	; (8009be4 <HAL_PCD_MspInit+0xa4>)
 8009b9c:	f7f7 f80e 	bl	8000bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	; (8009be0 <HAL_PCD_MspInit+0xa0>)
 8009ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba4:	4a0e      	ldr	r2, [pc, #56]	; (8009be0 <HAL_PCD_MspInit+0xa0>)
 8009ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009baa:	6353      	str	r3, [r2, #52]	; 0x34
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	4b0b      	ldr	r3, [pc, #44]	; (8009be0 <HAL_PCD_MspInit+0xa0>)
 8009bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb4:	4a0a      	ldr	r2, [pc, #40]	; (8009be0 <HAL_PCD_MspInit+0xa0>)
 8009bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bba:	6453      	str	r3, [r2, #68]	; 0x44
 8009bbc:	4b08      	ldr	r3, [pc, #32]	; (8009be0 <HAL_PCD_MspInit+0xa0>)
 8009bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bc4:	60fb      	str	r3, [r7, #12]
 8009bc6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2105      	movs	r1, #5
 8009bcc:	2043      	movs	r0, #67	; 0x43
 8009bce:	f7f6 ffbe 	bl	8000b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009bd2:	2043      	movs	r0, #67	; 0x43
 8009bd4:	f7f6 ffd7 	bl	8000b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009bd8:	bf00      	nop
 8009bda:	3728      	adds	r7, #40	; 0x28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	40023800 	.word	0x40023800
 8009be4:	40020000 	.word	0x40020000

08009be8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f7fb fa17 	bl	8005032 <USBD_LL_SetupStage>
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	460b      	mov	r3, r1
 8009c16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c1e:	78fa      	ldrb	r2, [r7, #3]
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	4613      	mov	r3, r2
 8009c24:	00db      	lsls	r3, r3, #3
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	440b      	add	r3, r1
 8009c2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	78fb      	ldrb	r3, [r7, #3]
 8009c34:	4619      	mov	r1, r3
 8009c36:	f7fb fa51 	bl	80050dc <USBD_LL_DataOutStage>
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	440b      	add	r3, r1
 8009c62:	334c      	adds	r3, #76	; 0x4c
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	78fb      	ldrb	r3, [r7, #3]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	f7fb faea 	bl	8005242 <USBD_LL_DataInStage>
}
 8009c6e:	bf00      	nop
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fb fc1e 	bl	80054c6 <USBD_LL_SOF>
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d102      	bne.n	8009cac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73fb      	strb	r3, [r7, #15]
 8009caa:	e008      	b.n	8009cbe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d102      	bne.n	8009cba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	73fb      	strb	r3, [r7, #15]
 8009cb8:	e001      	b.n	8009cbe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009cba:	f7f6 fd3b 	bl	8000734 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cc4:	7bfa      	ldrb	r2, [r7, #15]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fb fbbe 	bl	800544a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fb fb66 	bl	80053a6 <USBD_LL_Reset>
}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fb fbb9 	bl	800546a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	6812      	ldr	r2, [r2, #0]
 8009d06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d0a:	f043 0301 	orr.w	r3, r3, #1
 8009d0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d18:	4b04      	ldr	r3, [pc, #16]	; (8009d2c <HAL_PCD_SuspendCallback+0x48>)
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	4a03      	ldr	r2, [pc, #12]	; (8009d2c <HAL_PCD_SuspendCallback+0x48>)
 8009d1e:	f043 0306 	orr.w	r3, r3, #6
 8009d22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	e000ed00 	.word	0xe000ed00

08009d30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fb fba9 	bl	8005496 <USBD_LL_Resume>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	4611      	mov	r1, r2
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fb fc01 	bl	800556a <USBD_LL_IsoOUTIncomplete>
}
 8009d68:	bf00      	nop
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d82:	78fa      	ldrb	r2, [r7, #3]
 8009d84:	4611      	mov	r1, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fb fbbd 	bl	8005506 <USBD_LL_IsoINIncomplete>
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fb fc13 	bl	80055ce <USBD_LL_DevConnected>
}
 8009da8:	bf00      	nop
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fb fc10 	bl	80055e4 <USBD_LL_DevDisconnected>
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d13c      	bne.n	8009e56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ddc:	4a20      	ldr	r2, [pc, #128]	; (8009e60 <USBD_LL_Init+0x94>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a1e      	ldr	r2, [pc, #120]	; (8009e60 <USBD_LL_Init+0x94>)
 8009de8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009dec:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <USBD_LL_Init+0x94>)
 8009dee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009df2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009df4:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <USBD_LL_Init+0x94>)
 8009df6:	2204      	movs	r2, #4
 8009df8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009dfa:	4b19      	ldr	r3, [pc, #100]	; (8009e60 <USBD_LL_Init+0x94>)
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e00:	4b17      	ldr	r3, [pc, #92]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e06:	4b16      	ldr	r3, [pc, #88]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e08:	2202      	movs	r2, #2
 8009e0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e0c:	4b14      	ldr	r3, [pc, #80]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e18:	4b11      	ldr	r3, [pc, #68]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e1e:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e24:	4b0e      	ldr	r3, [pc, #56]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e2a:	480d      	ldr	r0, [pc, #52]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e2c:	f7f7 f87d 	bl	8000f2a <HAL_PCD_Init>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009e36:	f7f6 fc7d 	bl	8000734 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009e3a:	2180      	movs	r1, #128	; 0x80
 8009e3c:	4808      	ldr	r0, [pc, #32]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e3e:	f7f8 fad4 	bl	80023ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e42:	2240      	movs	r2, #64	; 0x40
 8009e44:	2100      	movs	r1, #0
 8009e46:	4806      	ldr	r0, [pc, #24]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e48:	f7f8 fa88 	bl	800235c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e4c:	2280      	movs	r2, #128	; 0x80
 8009e4e:	2101      	movs	r1, #1
 8009e50:	4803      	ldr	r0, [pc, #12]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e52:	f7f8 fa83 	bl	800235c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	2000a4b4 	.word	0x2000a4b4

08009e64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7f7 f972 	bl	8001164 <HAL_PCD_Start>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 f942 	bl	800a110 <USBD_Get_USB_Status>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	70fb      	strb	r3, [r7, #3]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70bb      	strb	r3, [r7, #2]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ec2:	78bb      	ldrb	r3, [r7, #2]
 8009ec4:	883a      	ldrh	r2, [r7, #0]
 8009ec6:	78f9      	ldrb	r1, [r7, #3]
 8009ec8:	f7f7 fe43 	bl	8001b52 <HAL_PCD_EP_Open>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 f91c 	bl	800a110 <USBD_Get_USB_Status>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f00:	78fa      	ldrb	r2, [r7, #3]
 8009f02:	4611      	mov	r1, r2
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7f7 fe8c 	bl	8001c22 <HAL_PCD_EP_Close>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f000 f8fd 	bl	800a110 <USBD_Get_USB_Status>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7f7 ff64 	bl	8001e10 <HAL_PCD_EP_SetStall>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 f8de 	bl	800a110 <USBD_Get_USB_Status>
 8009f54:	4603      	mov	r3, r0
 8009f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f7c:	78fa      	ldrb	r2, [r7, #3]
 8009f7e:	4611      	mov	r1, r2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7f7 ffa9 	bl	8001ed8 <HAL_PCD_EP_ClrStall>
 8009f86:	4603      	mov	r3, r0
 8009f88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 f8bf 	bl	800a110 <USBD_Get_USB_Status>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da0b      	bge.n	8009fd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009fbc:	78fb      	ldrb	r3, [r7, #3]
 8009fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fc2:	68f9      	ldr	r1, [r7, #12]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	333e      	adds	r3, #62	; 0x3e
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	e00b      	b.n	8009fec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fda:	68f9      	ldr	r1, [r7, #12]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	00db      	lsls	r3, r3, #3
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	440b      	add	r3, r1
 8009fe6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009fea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a012:	78fa      	ldrb	r2, [r7, #3]
 800a014:	4611      	mov	r1, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f7f7 fd76 	bl	8001b08 <HAL_PCD_SetAddress>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f874 	bl	800a110 <USBD_Get_USB_Status>
 800a028:	4603      	mov	r3, r0
 800a02a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b086      	sub	sp, #24
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	603b      	str	r3, [r7, #0]
 800a042:	460b      	mov	r3, r1
 800a044:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a054:	7af9      	ldrb	r1, [r7, #11]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	f7f7 fe8f 	bl	8001d7c <HAL_PCD_EP_Transmit>
 800a05e:	4603      	mov	r3, r0
 800a060:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f853 	bl	800a110 <USBD_Get_USB_Status>
 800a06a:	4603      	mov	r3, r0
 800a06c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a06e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	607a      	str	r2, [r7, #4]
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	460b      	mov	r3, r1
 800a086:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a096:	7af9      	ldrb	r1, [r7, #11]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	f7f7 fe0b 	bl	8001cb6 <HAL_PCD_EP_Receive>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 f832 	bl	800a110 <USBD_Get_USB_Status>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7f7 fe3b 	bl	8001d4c <HAL_PCD_EP_GetRxCount>
 800a0d6:	4603      	mov	r3, r0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a0e8:	4b03      	ldr	r3, [pc, #12]	; (800a0f8 <USBD_static_malloc+0x18>)
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	2000a9c0 	.word	0x2000a9c0

0800a0fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	2b03      	cmp	r3, #3
 800a122:	d817      	bhi.n	800a154 <USBD_Get_USB_Status+0x44>
 800a124:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <USBD_Get_USB_Status+0x1c>)
 800a126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12a:	bf00      	nop
 800a12c:	0800a13d 	.word	0x0800a13d
 800a130:	0800a143 	.word	0x0800a143
 800a134:	0800a149 	.word	0x0800a149
 800a138:	0800a14f 	.word	0x0800a14f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
    break;
 800a140:	e00b      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a142:	2303      	movs	r3, #3
 800a144:	73fb      	strb	r3, [r7, #15]
    break;
 800a146:	e008      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a148:	2301      	movs	r3, #1
 800a14a:	73fb      	strb	r3, [r7, #15]
    break;
 800a14c:	e005      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a14e:	2303      	movs	r3, #3
 800a150:	73fb      	strb	r3, [r7, #15]
    break;
 800a152:	e002      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a154:	2303      	movs	r3, #3
 800a156:	73fb      	strb	r3, [r7, #15]
    break;
 800a158:	bf00      	nop
  }
  return usb_status;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <__libc_init_array>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	4d0d      	ldr	r5, [pc, #52]	; (800a1a0 <__libc_init_array+0x38>)
 800a16c:	4c0d      	ldr	r4, [pc, #52]	; (800a1a4 <__libc_init_array+0x3c>)
 800a16e:	1b64      	subs	r4, r4, r5
 800a170:	10a4      	asrs	r4, r4, #2
 800a172:	2600      	movs	r6, #0
 800a174:	42a6      	cmp	r6, r4
 800a176:	d109      	bne.n	800a18c <__libc_init_array+0x24>
 800a178:	4d0b      	ldr	r5, [pc, #44]	; (800a1a8 <__libc_init_array+0x40>)
 800a17a:	4c0c      	ldr	r4, [pc, #48]	; (800a1ac <__libc_init_array+0x44>)
 800a17c:	f000 f8f2 	bl	800a364 <_init>
 800a180:	1b64      	subs	r4, r4, r5
 800a182:	10a4      	asrs	r4, r4, #2
 800a184:	2600      	movs	r6, #0
 800a186:	42a6      	cmp	r6, r4
 800a188:	d105      	bne.n	800a196 <__libc_init_array+0x2e>
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a190:	4798      	blx	r3
 800a192:	3601      	adds	r6, #1
 800a194:	e7ee      	b.n	800a174 <__libc_init_array+0xc>
 800a196:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19a:	4798      	blx	r3
 800a19c:	3601      	adds	r6, #1
 800a19e:	e7f2      	b.n	800a186 <__libc_init_array+0x1e>
 800a1a0:	0800a4a8 	.word	0x0800a4a8
 800a1a4:	0800a4a8 	.word	0x0800a4a8
 800a1a8:	0800a4a8 	.word	0x0800a4a8
 800a1ac:	0800a4ac 	.word	0x0800a4ac

0800a1b0 <__retarget_lock_acquire_recursive>:
 800a1b0:	4770      	bx	lr

0800a1b2 <__retarget_lock_release_recursive>:
 800a1b2:	4770      	bx	lr

0800a1b4 <memcpy>:
 800a1b4:	440a      	add	r2, r1
 800a1b6:	4291      	cmp	r1, r2
 800a1b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a1bc:	d100      	bne.n	800a1c0 <memcpy+0xc>
 800a1be:	4770      	bx	lr
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1ca:	4291      	cmp	r1, r2
 800a1cc:	d1f9      	bne.n	800a1c2 <memcpy+0xe>
 800a1ce:	bd10      	pop	{r4, pc}

0800a1d0 <memset>:
 800a1d0:	4402      	add	r2, r0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d100      	bne.n	800a1da <memset+0xa>
 800a1d8:	4770      	bx	lr
 800a1da:	f803 1b01 	strb.w	r1, [r3], #1
 800a1de:	e7f9      	b.n	800a1d4 <memset+0x4>

0800a1e0 <cleanup_glue>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	6809      	ldr	r1, [r1, #0]
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	b109      	cbz	r1, 800a1ee <cleanup_glue+0xe>
 800a1ea:	f7ff fff9 	bl	800a1e0 <cleanup_glue>
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f6:	f000 b869 	b.w	800a2cc <_free_r>
	...

0800a1fc <_reclaim_reent>:
 800a1fc:	4b2c      	ldr	r3, [pc, #176]	; (800a2b0 <_reclaim_reent+0xb4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4283      	cmp	r3, r0
 800a202:	b570      	push	{r4, r5, r6, lr}
 800a204:	4604      	mov	r4, r0
 800a206:	d051      	beq.n	800a2ac <_reclaim_reent+0xb0>
 800a208:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a20a:	b143      	cbz	r3, 800a21e <_reclaim_reent+0x22>
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d14a      	bne.n	800a2a8 <_reclaim_reent+0xac>
 800a212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a214:	6819      	ldr	r1, [r3, #0]
 800a216:	b111      	cbz	r1, 800a21e <_reclaim_reent+0x22>
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 f857 	bl	800a2cc <_free_r>
 800a21e:	6961      	ldr	r1, [r4, #20]
 800a220:	b111      	cbz	r1, 800a228 <_reclaim_reent+0x2c>
 800a222:	4620      	mov	r0, r4
 800a224:	f000 f852 	bl	800a2cc <_free_r>
 800a228:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a22a:	b111      	cbz	r1, 800a232 <_reclaim_reent+0x36>
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 f84d 	bl	800a2cc <_free_r>
 800a232:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a234:	b111      	cbz	r1, 800a23c <_reclaim_reent+0x40>
 800a236:	4620      	mov	r0, r4
 800a238:	f000 f848 	bl	800a2cc <_free_r>
 800a23c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a23e:	b111      	cbz	r1, 800a246 <_reclaim_reent+0x4a>
 800a240:	4620      	mov	r0, r4
 800a242:	f000 f843 	bl	800a2cc <_free_r>
 800a246:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a248:	b111      	cbz	r1, 800a250 <_reclaim_reent+0x54>
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 f83e 	bl	800a2cc <_free_r>
 800a250:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a252:	b111      	cbz	r1, 800a25a <_reclaim_reent+0x5e>
 800a254:	4620      	mov	r0, r4
 800a256:	f000 f839 	bl	800a2cc <_free_r>
 800a25a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a25c:	b111      	cbz	r1, 800a264 <_reclaim_reent+0x68>
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 f834 	bl	800a2cc <_free_r>
 800a264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a266:	b111      	cbz	r1, 800a26e <_reclaim_reent+0x72>
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 f82f 	bl	800a2cc <_free_r>
 800a26e:	69a3      	ldr	r3, [r4, #24]
 800a270:	b1e3      	cbz	r3, 800a2ac <_reclaim_reent+0xb0>
 800a272:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a274:	4620      	mov	r0, r4
 800a276:	4798      	blx	r3
 800a278:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a27a:	b1b9      	cbz	r1, 800a2ac <_reclaim_reent+0xb0>
 800a27c:	4620      	mov	r0, r4
 800a27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a282:	f7ff bfad 	b.w	800a1e0 <cleanup_glue>
 800a286:	5949      	ldr	r1, [r1, r5]
 800a288:	b941      	cbnz	r1, 800a29c <_reclaim_reent+0xa0>
 800a28a:	3504      	adds	r5, #4
 800a28c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a28e:	2d80      	cmp	r5, #128	; 0x80
 800a290:	68d9      	ldr	r1, [r3, #12]
 800a292:	d1f8      	bne.n	800a286 <_reclaim_reent+0x8a>
 800a294:	4620      	mov	r0, r4
 800a296:	f000 f819 	bl	800a2cc <_free_r>
 800a29a:	e7ba      	b.n	800a212 <_reclaim_reent+0x16>
 800a29c:	680e      	ldr	r6, [r1, #0]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 f814 	bl	800a2cc <_free_r>
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	e7ef      	b.n	800a288 <_reclaim_reent+0x8c>
 800a2a8:	2500      	movs	r5, #0
 800a2aa:	e7ef      	b.n	800a28c <_reclaim_reent+0x90>
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000100 	.word	0x20000100

0800a2b4 <__malloc_lock>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__malloc_lock+0x8>)
 800a2b6:	f7ff bf7b 	b.w	800a1b0 <__retarget_lock_acquire_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	2000abe0 	.word	0x2000abe0

0800a2c0 <__malloc_unlock>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__malloc_unlock+0x8>)
 800a2c2:	f7ff bf76 	b.w	800a1b2 <__retarget_lock_release_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	2000abe0 	.word	0x2000abe0

0800a2cc <_free_r>:
 800a2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ce:	2900      	cmp	r1, #0
 800a2d0:	d044      	beq.n	800a35c <_free_r+0x90>
 800a2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d6:	9001      	str	r0, [sp, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f1a1 0404 	sub.w	r4, r1, #4
 800a2de:	bfb8      	it	lt
 800a2e0:	18e4      	addlt	r4, r4, r3
 800a2e2:	f7ff ffe7 	bl	800a2b4 <__malloc_lock>
 800a2e6:	4a1e      	ldr	r2, [pc, #120]	; (800a360 <_free_r+0x94>)
 800a2e8:	9801      	ldr	r0, [sp, #4]
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	b933      	cbnz	r3, 800a2fc <_free_r+0x30>
 800a2ee:	6063      	str	r3, [r4, #4]
 800a2f0:	6014      	str	r4, [r2, #0]
 800a2f2:	b003      	add	sp, #12
 800a2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f8:	f7ff bfe2 	b.w	800a2c0 <__malloc_unlock>
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	d908      	bls.n	800a312 <_free_r+0x46>
 800a300:	6825      	ldr	r5, [r4, #0]
 800a302:	1961      	adds	r1, r4, r5
 800a304:	428b      	cmp	r3, r1
 800a306:	bf01      	itttt	eq
 800a308:	6819      	ldreq	r1, [r3, #0]
 800a30a:	685b      	ldreq	r3, [r3, #4]
 800a30c:	1949      	addeq	r1, r1, r5
 800a30e:	6021      	streq	r1, [r4, #0]
 800a310:	e7ed      	b.n	800a2ee <_free_r+0x22>
 800a312:	461a      	mov	r2, r3
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	b10b      	cbz	r3, 800a31c <_free_r+0x50>
 800a318:	42a3      	cmp	r3, r4
 800a31a:	d9fa      	bls.n	800a312 <_free_r+0x46>
 800a31c:	6811      	ldr	r1, [r2, #0]
 800a31e:	1855      	adds	r5, r2, r1
 800a320:	42a5      	cmp	r5, r4
 800a322:	d10b      	bne.n	800a33c <_free_r+0x70>
 800a324:	6824      	ldr	r4, [r4, #0]
 800a326:	4421      	add	r1, r4
 800a328:	1854      	adds	r4, r2, r1
 800a32a:	42a3      	cmp	r3, r4
 800a32c:	6011      	str	r1, [r2, #0]
 800a32e:	d1e0      	bne.n	800a2f2 <_free_r+0x26>
 800a330:	681c      	ldr	r4, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	6053      	str	r3, [r2, #4]
 800a336:	4421      	add	r1, r4
 800a338:	6011      	str	r1, [r2, #0]
 800a33a:	e7da      	b.n	800a2f2 <_free_r+0x26>
 800a33c:	d902      	bls.n	800a344 <_free_r+0x78>
 800a33e:	230c      	movs	r3, #12
 800a340:	6003      	str	r3, [r0, #0]
 800a342:	e7d6      	b.n	800a2f2 <_free_r+0x26>
 800a344:	6825      	ldr	r5, [r4, #0]
 800a346:	1961      	adds	r1, r4, r5
 800a348:	428b      	cmp	r3, r1
 800a34a:	bf04      	itt	eq
 800a34c:	6819      	ldreq	r1, [r3, #0]
 800a34e:	685b      	ldreq	r3, [r3, #4]
 800a350:	6063      	str	r3, [r4, #4]
 800a352:	bf04      	itt	eq
 800a354:	1949      	addeq	r1, r1, r5
 800a356:	6021      	streq	r1, [r4, #0]
 800a358:	6054      	str	r4, [r2, #4]
 800a35a:	e7ca      	b.n	800a2f2 <_free_r+0x26>
 800a35c:	b003      	add	sp, #12
 800a35e:	bd30      	pop	{r4, r5, pc}
 800a360:	2000abe4 	.word	0x2000abe4

0800a364 <_init>:
 800a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a366:	bf00      	nop
 800a368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36a:	bc08      	pop	{r3}
 800a36c:	469e      	mov	lr, r3
 800a36e:	4770      	bx	lr

0800a370 <_fini>:
 800a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a372:	bf00      	nop
 800a374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a376:	bc08      	pop	{r3}
 800a378:	469e      	mov	lr, r3
 800a37a:	4770      	bx	lr
